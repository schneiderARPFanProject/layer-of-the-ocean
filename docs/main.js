var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b ||= {})
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// node_modules/@angular/core/fesm2022/primitives/signals.mjs
var activeConsumer = null;
var epoch = 1;
function setActiveConsumer(consumer) {
  const prev = activeConsumer;
  activeConsumer = consumer;
  return prev;
}
var REACTIVE_NODE = {
  version: 0,
  lastCleanEpoch: 0,
  dirty: false,
  producerNode: void 0,
  producerLastReadVersion: void 0,
  producerIndexOfThis: void 0,
  nextProducerIndex: 0,
  liveConsumerNode: void 0,
  liveConsumerIndexOfThis: void 0,
  consumerAllowSignalWrites: false,
  consumerIsAlwaysLive: false,
  producerMustRecompute: () => false,
  producerRecomputeValue: () => {
  },
  consumerMarkedDirty: () => {
  },
  consumerOnSignalRead: () => {
  }
};
function producerUpdateValueVersion(node) {
  if (consumerIsLive(node) && !node.dirty) {
    return;
  }
  if (!node.dirty && node.lastCleanEpoch === epoch) {
    return;
  }
  if (!node.producerMustRecompute(node) && !consumerPollProducersForChange(node)) {
    node.dirty = false;
    node.lastCleanEpoch = epoch;
    return;
  }
  node.producerRecomputeValue(node);
  node.dirty = false;
  node.lastCleanEpoch = epoch;
}
function consumerBeforeComputation(node) {
  node && (node.nextProducerIndex = 0);
  return setActiveConsumer(node);
}
function consumerAfterComputation(node, prevConsumer) {
  setActiveConsumer(prevConsumer);
  if (!node || node.producerNode === void 0 || node.producerIndexOfThis === void 0 || node.producerLastReadVersion === void 0) {
    return;
  }
  if (consumerIsLive(node)) {
    for (let i = node.nextProducerIndex; i < node.producerNode.length; i++) {
      producerRemoveLiveConsumerAtIndex(node.producerNode[i], node.producerIndexOfThis[i]);
    }
  }
  while (node.producerNode.length > node.nextProducerIndex) {
    node.producerNode.pop();
    node.producerLastReadVersion.pop();
    node.producerIndexOfThis.pop();
  }
}
function consumerPollProducersForChange(node) {
  assertConsumerNode(node);
  for (let i = 0; i < node.producerNode.length; i++) {
    const producer = node.producerNode[i];
    const seenVersion = node.producerLastReadVersion[i];
    if (seenVersion !== producer.version) {
      return true;
    }
    producerUpdateValueVersion(producer);
    if (seenVersion !== producer.version) {
      return true;
    }
  }
  return false;
}
function consumerDestroy(node) {
  assertConsumerNode(node);
  if (consumerIsLive(node)) {
    for (let i = 0; i < node.producerNode.length; i++) {
      producerRemoveLiveConsumerAtIndex(node.producerNode[i], node.producerIndexOfThis[i]);
    }
  }
  node.producerNode.length = node.producerLastReadVersion.length = node.producerIndexOfThis.length = 0;
  if (node.liveConsumerNode) {
    node.liveConsumerNode.length = node.liveConsumerIndexOfThis.length = 0;
  }
}
function producerRemoveLiveConsumerAtIndex(node, idx) {
  assertProducerNode(node);
  assertConsumerNode(node);
  if (typeof ngDevMode !== "undefined" && ngDevMode && idx >= node.liveConsumerNode.length) {
    throw new Error(`Assertion error: active consumer index ${idx} is out of bounds of ${node.liveConsumerNode.length} consumers)`);
  }
  if (node.liveConsumerNode.length === 1) {
    for (let i = 0; i < node.producerNode.length; i++) {
      producerRemoveLiveConsumerAtIndex(node.producerNode[i], node.producerIndexOfThis[i]);
    }
  }
  const lastIdx = node.liveConsumerNode.length - 1;
  node.liveConsumerNode[idx] = node.liveConsumerNode[lastIdx];
  node.liveConsumerIndexOfThis[idx] = node.liveConsumerIndexOfThis[lastIdx];
  node.liveConsumerNode.length--;
  node.liveConsumerIndexOfThis.length--;
  if (idx < node.liveConsumerNode.length) {
    const idxProducer = node.liveConsumerIndexOfThis[idx];
    const consumer = node.liveConsumerNode[idx];
    assertConsumerNode(consumer);
    consumer.producerIndexOfThis[idxProducer] = idx;
  }
}
function consumerIsLive(node) {
  return node.consumerIsAlwaysLive || (node?.liveConsumerNode?.length ?? 0) > 0;
}
function assertConsumerNode(node) {
  node.producerNode ??= [];
  node.producerIndexOfThis ??= [];
  node.producerLastReadVersion ??= [];
}
function assertProducerNode(node) {
  node.liveConsumerNode ??= [];
  node.liveConsumerIndexOfThis ??= [];
}
function defaultThrowError() {
  throw new Error();
}
var throwInvalidWriteToSignalErrorFn = defaultThrowError;
function setThrowInvalidWriteToSignalError(fn) {
  throwInvalidWriteToSignalErrorFn = fn;
}

// node_modules/rxjs/dist/esm/internal/util/isFunction.js
function isFunction(value) {
  return typeof value === "function";
}

// node_modules/rxjs/dist/esm/internal/util/createErrorClass.js
function createErrorClass(createImpl) {
  const _super = (instance) => {
    Error.call(instance);
    instance.stack = new Error().stack;
  };
  const ctorFunc = createImpl(_super);
  ctorFunc.prototype = Object.create(Error.prototype);
  ctorFunc.prototype.constructor = ctorFunc;
  return ctorFunc;
}

// node_modules/rxjs/dist/esm/internal/util/UnsubscriptionError.js
var UnsubscriptionError = createErrorClass((_super) => function UnsubscriptionErrorImpl(errors) {
  _super(this);
  this.message = errors ? `${errors.length} errors occurred during unsubscription:
${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join("\n  ")}` : "";
  this.name = "UnsubscriptionError";
  this.errors = errors;
});

// node_modules/rxjs/dist/esm/internal/util/arrRemove.js
function arrRemove(arr, item) {
  if (arr) {
    const index = arr.indexOf(item);
    0 <= index && arr.splice(index, 1);
  }
}

// node_modules/rxjs/dist/esm/internal/Subscription.js
var Subscription = class _Subscription {
  constructor(initialTeardown) {
    this.initialTeardown = initialTeardown;
    this.closed = false;
    this._parentage = null;
    this._finalizers = null;
  }
  unsubscribe() {
    let errors;
    if (!this.closed) {
      this.closed = true;
      const { _parentage } = this;
      if (_parentage) {
        this._parentage = null;
        if (Array.isArray(_parentage)) {
          for (const parent of _parentage) {
            parent.remove(this);
          }
        } else {
          _parentage.remove(this);
        }
      }
      const { initialTeardown: initialFinalizer } = this;
      if (isFunction(initialFinalizer)) {
        try {
          initialFinalizer();
        } catch (e) {
          errors = e instanceof UnsubscriptionError ? e.errors : [e];
        }
      }
      const { _finalizers } = this;
      if (_finalizers) {
        this._finalizers = null;
        for (const finalizer of _finalizers) {
          try {
            execFinalizer(finalizer);
          } catch (err) {
            errors = errors !== null && errors !== void 0 ? errors : [];
            if (err instanceof UnsubscriptionError) {
              errors = [...errors, ...err.errors];
            } else {
              errors.push(err);
            }
          }
        }
      }
      if (errors) {
        throw new UnsubscriptionError(errors);
      }
    }
  }
  add(teardown) {
    var _a;
    if (teardown && teardown !== this) {
      if (this.closed) {
        execFinalizer(teardown);
      } else {
        if (teardown instanceof _Subscription) {
          if (teardown.closed || teardown._hasParent(this)) {
            return;
          }
          teardown._addParent(this);
        }
        (this._finalizers = (_a = this._finalizers) !== null && _a !== void 0 ? _a : []).push(teardown);
      }
    }
  }
  _hasParent(parent) {
    const { _parentage } = this;
    return _parentage === parent || Array.isArray(_parentage) && _parentage.includes(parent);
  }
  _addParent(parent) {
    const { _parentage } = this;
    this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;
  }
  _removeParent(parent) {
    const { _parentage } = this;
    if (_parentage === parent) {
      this._parentage = null;
    } else if (Array.isArray(_parentage)) {
      arrRemove(_parentage, parent);
    }
  }
  remove(teardown) {
    const { _finalizers } = this;
    _finalizers && arrRemove(_finalizers, teardown);
    if (teardown instanceof _Subscription) {
      teardown._removeParent(this);
    }
  }
};
Subscription.EMPTY = (() => {
  const empty = new Subscription();
  empty.closed = true;
  return empty;
})();
var EMPTY_SUBSCRIPTION = Subscription.EMPTY;
function isSubscription(value) {
  return value instanceof Subscription || value && "closed" in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe);
}
function execFinalizer(finalizer) {
  if (isFunction(finalizer)) {
    finalizer();
  } else {
    finalizer.unsubscribe();
  }
}

// node_modules/rxjs/dist/esm/internal/config.js
var config = {
  onUnhandledError: null,
  onStoppedNotification: null,
  Promise: void 0,
  useDeprecatedSynchronousErrorHandling: false,
  useDeprecatedNextContext: false
};

// node_modules/rxjs/dist/esm/internal/scheduler/timeoutProvider.js
var timeoutProvider = {
  setTimeout(handler, timeout, ...args) {
    const { delegate } = timeoutProvider;
    if (delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) {
      return delegate.setTimeout(handler, timeout, ...args);
    }
    return setTimeout(handler, timeout, ...args);
  },
  clearTimeout(handle) {
    const { delegate } = timeoutProvider;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);
  },
  delegate: void 0
};

// node_modules/rxjs/dist/esm/internal/util/reportUnhandledError.js
function reportUnhandledError(err) {
  timeoutProvider.setTimeout(() => {
    const { onUnhandledError } = config;
    if (onUnhandledError) {
      onUnhandledError(err);
    } else {
      throw err;
    }
  });
}

// node_modules/rxjs/dist/esm/internal/util/noop.js
function noop() {
}

// node_modules/rxjs/dist/esm/internal/NotificationFactories.js
var COMPLETE_NOTIFICATION = (() => createNotification("C", void 0, void 0))();
function errorNotification(error) {
  return createNotification("E", void 0, error);
}
function nextNotification(value) {
  return createNotification("N", value, void 0);
}
function createNotification(kind, value, error) {
  return {
    kind,
    value,
    error
  };
}

// node_modules/rxjs/dist/esm/internal/util/errorContext.js
var context = null;
function errorContext(cb) {
  if (config.useDeprecatedSynchronousErrorHandling) {
    const isRoot = !context;
    if (isRoot) {
      context = { errorThrown: false, error: null };
    }
    cb();
    if (isRoot) {
      const { errorThrown, error } = context;
      context = null;
      if (errorThrown) {
        throw error;
      }
    }
  } else {
    cb();
  }
}
function captureError(err) {
  if (config.useDeprecatedSynchronousErrorHandling && context) {
    context.errorThrown = true;
    context.error = err;
  }
}

// node_modules/rxjs/dist/esm/internal/Subscriber.js
var Subscriber = class extends Subscription {
  constructor(destination) {
    super();
    this.isStopped = false;
    if (destination) {
      this.destination = destination;
      if (isSubscription(destination)) {
        destination.add(this);
      }
    } else {
      this.destination = EMPTY_OBSERVER;
    }
  }
  static create(next, error, complete) {
    return new SafeSubscriber(next, error, complete);
  }
  next(value) {
    if (this.isStopped) {
      handleStoppedNotification(nextNotification(value), this);
    } else {
      this._next(value);
    }
  }
  error(err) {
    if (this.isStopped) {
      handleStoppedNotification(errorNotification(err), this);
    } else {
      this.isStopped = true;
      this._error(err);
    }
  }
  complete() {
    if (this.isStopped) {
      handleStoppedNotification(COMPLETE_NOTIFICATION, this);
    } else {
      this.isStopped = true;
      this._complete();
    }
  }
  unsubscribe() {
    if (!this.closed) {
      this.isStopped = true;
      super.unsubscribe();
      this.destination = null;
    }
  }
  _next(value) {
    this.destination.next(value);
  }
  _error(err) {
    try {
      this.destination.error(err);
    } finally {
      this.unsubscribe();
    }
  }
  _complete() {
    try {
      this.destination.complete();
    } finally {
      this.unsubscribe();
    }
  }
};
var _bind = Function.prototype.bind;
function bind(fn, thisArg) {
  return _bind.call(fn, thisArg);
}
var ConsumerObserver = class {
  constructor(partialObserver) {
    this.partialObserver = partialObserver;
  }
  next(value) {
    const { partialObserver } = this;
    if (partialObserver.next) {
      try {
        partialObserver.next(value);
      } catch (error) {
        handleUnhandledError(error);
      }
    }
  }
  error(err) {
    const { partialObserver } = this;
    if (partialObserver.error) {
      try {
        partialObserver.error(err);
      } catch (error) {
        handleUnhandledError(error);
      }
    } else {
      handleUnhandledError(err);
    }
  }
  complete() {
    const { partialObserver } = this;
    if (partialObserver.complete) {
      try {
        partialObserver.complete();
      } catch (error) {
        handleUnhandledError(error);
      }
    }
  }
};
var SafeSubscriber = class extends Subscriber {
  constructor(observerOrNext, error, complete) {
    super();
    let partialObserver;
    if (isFunction(observerOrNext) || !observerOrNext) {
      partialObserver = {
        next: observerOrNext !== null && observerOrNext !== void 0 ? observerOrNext : void 0,
        error: error !== null && error !== void 0 ? error : void 0,
        complete: complete !== null && complete !== void 0 ? complete : void 0
      };
    } else {
      let context2;
      if (this && config.useDeprecatedNextContext) {
        context2 = Object.create(observerOrNext);
        context2.unsubscribe = () => this.unsubscribe();
        partialObserver = {
          next: observerOrNext.next && bind(observerOrNext.next, context2),
          error: observerOrNext.error && bind(observerOrNext.error, context2),
          complete: observerOrNext.complete && bind(observerOrNext.complete, context2)
        };
      } else {
        partialObserver = observerOrNext;
      }
    }
    this.destination = new ConsumerObserver(partialObserver);
  }
};
function handleUnhandledError(error) {
  if (config.useDeprecatedSynchronousErrorHandling) {
    captureError(error);
  } else {
    reportUnhandledError(error);
  }
}
function defaultErrorHandler(err) {
  throw err;
}
function handleStoppedNotification(notification, subscriber) {
  const { onStoppedNotification } = config;
  onStoppedNotification && timeoutProvider.setTimeout(() => onStoppedNotification(notification, subscriber));
}
var EMPTY_OBSERVER = {
  closed: true,
  next: noop,
  error: defaultErrorHandler,
  complete: noop
};

// node_modules/rxjs/dist/esm/internal/symbol/observable.js
var observable = (() => typeof Symbol === "function" && Symbol.observable || "@@observable")();

// node_modules/rxjs/dist/esm/internal/util/identity.js
function identity(x) {
  return x;
}

// node_modules/rxjs/dist/esm/internal/util/pipe.js
function pipe(...fns) {
  return pipeFromArray(fns);
}
function pipeFromArray(fns) {
  if (fns.length === 0) {
    return identity;
  }
  if (fns.length === 1) {
    return fns[0];
  }
  return function piped(input) {
    return fns.reduce((prev, fn) => fn(prev), input);
  };
}

// node_modules/rxjs/dist/esm/internal/Observable.js
var Observable = class _Observable {
  constructor(subscribe) {
    if (subscribe) {
      this._subscribe = subscribe;
    }
  }
  lift(operator) {
    const observable2 = new _Observable();
    observable2.source = this;
    observable2.operator = operator;
    return observable2;
  }
  subscribe(observerOrNext, error, complete) {
    const subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);
    errorContext(() => {
      const { operator, source } = this;
      subscriber.add(operator ? operator.call(subscriber, source) : source ? this._subscribe(subscriber) : this._trySubscribe(subscriber));
    });
    return subscriber;
  }
  _trySubscribe(sink) {
    try {
      return this._subscribe(sink);
    } catch (err) {
      sink.error(err);
    }
  }
  forEach(next, promiseCtor) {
    promiseCtor = getPromiseCtor(promiseCtor);
    return new promiseCtor((resolve, reject) => {
      const subscriber = new SafeSubscriber({
        next: (value) => {
          try {
            next(value);
          } catch (err) {
            reject(err);
            subscriber.unsubscribe();
          }
        },
        error: reject,
        complete: resolve
      });
      this.subscribe(subscriber);
    });
  }
  _subscribe(subscriber) {
    var _a;
    return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);
  }
  [observable]() {
    return this;
  }
  pipe(...operations) {
    return pipeFromArray(operations)(this);
  }
  toPromise(promiseCtor) {
    promiseCtor = getPromiseCtor(promiseCtor);
    return new promiseCtor((resolve, reject) => {
      let value;
      this.subscribe((x) => value = x, (err) => reject(err), () => resolve(value));
    });
  }
};
Observable.create = (subscribe) => {
  return new Observable(subscribe);
};
function getPromiseCtor(promiseCtor) {
  var _a;
  return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config.Promise) !== null && _a !== void 0 ? _a : Promise;
}
function isObserver(value) {
  return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);
}
function isSubscriber(value) {
  return value && value instanceof Subscriber || isObserver(value) && isSubscription(value);
}

// node_modules/rxjs/dist/esm/internal/util/lift.js
function hasLift(source) {
  return isFunction(source === null || source === void 0 ? void 0 : source.lift);
}
function operate(init) {
  return (source) => {
    if (hasLift(source)) {
      return source.lift(function(liftedSource) {
        try {
          return init(liftedSource, this);
        } catch (err) {
          this.error(err);
        }
      });
    }
    throw new TypeError("Unable to lift unknown Observable type");
  };
}

// node_modules/rxjs/dist/esm/internal/operators/OperatorSubscriber.js
function createOperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {
  return new OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize);
}
var OperatorSubscriber = class extends Subscriber {
  constructor(destination, onNext, onComplete, onError, onFinalize, shouldUnsubscribe) {
    super(destination);
    this.onFinalize = onFinalize;
    this.shouldUnsubscribe = shouldUnsubscribe;
    this._next = onNext ? function(value) {
      try {
        onNext(value);
      } catch (err) {
        destination.error(err);
      }
    } : super._next;
    this._error = onError ? function(err) {
      try {
        onError(err);
      } catch (err2) {
        destination.error(err2);
      } finally {
        this.unsubscribe();
      }
    } : super._error;
    this._complete = onComplete ? function() {
      try {
        onComplete();
      } catch (err) {
        destination.error(err);
      } finally {
        this.unsubscribe();
      }
    } : super._complete;
  }
  unsubscribe() {
    var _a;
    if (!this.shouldUnsubscribe || this.shouldUnsubscribe()) {
      const { closed } = this;
      super.unsubscribe();
      !closed && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));
    }
  }
};

// node_modules/rxjs/dist/esm/internal/operators/refCount.js
function refCount() {
  return operate((source, subscriber) => {
    let connection = null;
    source._refCount++;
    const refCounter = createOperatorSubscriber(subscriber, void 0, void 0, void 0, () => {
      if (!source || source._refCount <= 0 || 0 < --source._refCount) {
        connection = null;
        return;
      }
      const sharedConnection = source._connection;
      const conn = connection;
      connection = null;
      if (sharedConnection && (!conn || sharedConnection === conn)) {
        sharedConnection.unsubscribe();
      }
      subscriber.unsubscribe();
    });
    source.subscribe(refCounter);
    if (!refCounter.closed) {
      connection = source.connect();
    }
  });
}

// node_modules/rxjs/dist/esm/internal/observable/ConnectableObservable.js
var ConnectableObservable = class extends Observable {
  constructor(source, subjectFactory) {
    super();
    this.source = source;
    this.subjectFactory = subjectFactory;
    this._subject = null;
    this._refCount = 0;
    this._connection = null;
    if (hasLift(source)) {
      this.lift = source.lift;
    }
  }
  _subscribe(subscriber) {
    return this.getSubject().subscribe(subscriber);
  }
  getSubject() {
    const subject = this._subject;
    if (!subject || subject.isStopped) {
      this._subject = this.subjectFactory();
    }
    return this._subject;
  }
  _teardown() {
    this._refCount = 0;
    const { _connection } = this;
    this._subject = this._connection = null;
    _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();
  }
  connect() {
    let connection = this._connection;
    if (!connection) {
      connection = this._connection = new Subscription();
      const subject = this.getSubject();
      connection.add(this.source.subscribe(createOperatorSubscriber(subject, void 0, () => {
        this._teardown();
        subject.complete();
      }, (err) => {
        this._teardown();
        subject.error(err);
      }, () => this._teardown())));
      if (connection.closed) {
        this._connection = null;
        connection = Subscription.EMPTY;
      }
    }
    return connection;
  }
  refCount() {
    return refCount()(this);
  }
};

// node_modules/rxjs/dist/esm/internal/scheduler/animationFrameProvider.js
var animationFrameProvider = {
  schedule(callback) {
    let request = requestAnimationFrame;
    let cancel = cancelAnimationFrame;
    const { delegate } = animationFrameProvider;
    if (delegate) {
      request = delegate.requestAnimationFrame;
      cancel = delegate.cancelAnimationFrame;
    }
    const handle = request((timestamp) => {
      cancel = void 0;
      callback(timestamp);
    });
    return new Subscription(() => cancel === null || cancel === void 0 ? void 0 : cancel(handle));
  },
  requestAnimationFrame(...args) {
    const { delegate } = animationFrameProvider;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.requestAnimationFrame) || requestAnimationFrame)(...args);
  },
  cancelAnimationFrame(...args) {
    const { delegate } = animationFrameProvider;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.cancelAnimationFrame) || cancelAnimationFrame)(...args);
  },
  delegate: void 0
};

// node_modules/rxjs/dist/esm/internal/util/ObjectUnsubscribedError.js
var ObjectUnsubscribedError = createErrorClass((_super) => function ObjectUnsubscribedErrorImpl() {
  _super(this);
  this.name = "ObjectUnsubscribedError";
  this.message = "object unsubscribed";
});

// node_modules/rxjs/dist/esm/internal/Subject.js
var Subject = class extends Observable {
  constructor() {
    super();
    this.closed = false;
    this.currentObservers = null;
    this.observers = [];
    this.isStopped = false;
    this.hasError = false;
    this.thrownError = null;
  }
  lift(operator) {
    const subject = new AnonymousSubject(this, this);
    subject.operator = operator;
    return subject;
  }
  _throwIfClosed() {
    if (this.closed) {
      throw new ObjectUnsubscribedError();
    }
  }
  next(value) {
    errorContext(() => {
      this._throwIfClosed();
      if (!this.isStopped) {
        if (!this.currentObservers) {
          this.currentObservers = Array.from(this.observers);
        }
        for (const observer of this.currentObservers) {
          observer.next(value);
        }
      }
    });
  }
  error(err) {
    errorContext(() => {
      this._throwIfClosed();
      if (!this.isStopped) {
        this.hasError = this.isStopped = true;
        this.thrownError = err;
        const { observers } = this;
        while (observers.length) {
          observers.shift().error(err);
        }
      }
    });
  }
  complete() {
    errorContext(() => {
      this._throwIfClosed();
      if (!this.isStopped) {
        this.isStopped = true;
        const { observers } = this;
        while (observers.length) {
          observers.shift().complete();
        }
      }
    });
  }
  unsubscribe() {
    this.isStopped = this.closed = true;
    this.observers = this.currentObservers = null;
  }
  get observed() {
    var _a;
    return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;
  }
  _trySubscribe(subscriber) {
    this._throwIfClosed();
    return super._trySubscribe(subscriber);
  }
  _subscribe(subscriber) {
    this._throwIfClosed();
    this._checkFinalizedStatuses(subscriber);
    return this._innerSubscribe(subscriber);
  }
  _innerSubscribe(subscriber) {
    const { hasError, isStopped, observers } = this;
    if (hasError || isStopped) {
      return EMPTY_SUBSCRIPTION;
    }
    this.currentObservers = null;
    observers.push(subscriber);
    return new Subscription(() => {
      this.currentObservers = null;
      arrRemove(observers, subscriber);
    });
  }
  _checkFinalizedStatuses(subscriber) {
    const { hasError, thrownError, isStopped } = this;
    if (hasError) {
      subscriber.error(thrownError);
    } else if (isStopped) {
      subscriber.complete();
    }
  }
  asObservable() {
    const observable2 = new Observable();
    observable2.source = this;
    return observable2;
  }
};
Subject.create = (destination, source) => {
  return new AnonymousSubject(destination, source);
};
var AnonymousSubject = class extends Subject {
  constructor(destination, source) {
    super();
    this.destination = destination;
    this.source = source;
  }
  next(value) {
    var _a, _b;
    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);
  }
  error(err) {
    var _a, _b;
    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);
  }
  complete() {
    var _a, _b;
    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);
  }
  _subscribe(subscriber) {
    var _a, _b;
    return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;
  }
};

// node_modules/rxjs/dist/esm/internal/BehaviorSubject.js
var BehaviorSubject = class extends Subject {
  constructor(_value) {
    super();
    this._value = _value;
  }
  get value() {
    return this.getValue();
  }
  _subscribe(subscriber) {
    const subscription = super._subscribe(subscriber);
    !subscription.closed && subscriber.next(this._value);
    return subscription;
  }
  getValue() {
    const { hasError, thrownError, _value } = this;
    if (hasError) {
      throw thrownError;
    }
    this._throwIfClosed();
    return _value;
  }
  next(value) {
    super.next(this._value = value);
  }
};

// node_modules/rxjs/dist/esm/internal/scheduler/dateTimestampProvider.js
var dateTimestampProvider = {
  now() {
    return (dateTimestampProvider.delegate || Date).now();
  },
  delegate: void 0
};

// node_modules/rxjs/dist/esm/internal/ReplaySubject.js
var ReplaySubject = class extends Subject {
  constructor(_bufferSize = Infinity, _windowTime = Infinity, _timestampProvider = dateTimestampProvider) {
    super();
    this._bufferSize = _bufferSize;
    this._windowTime = _windowTime;
    this._timestampProvider = _timestampProvider;
    this._buffer = [];
    this._infiniteTimeWindow = true;
    this._infiniteTimeWindow = _windowTime === Infinity;
    this._bufferSize = Math.max(1, _bufferSize);
    this._windowTime = Math.max(1, _windowTime);
  }
  next(value) {
    const { isStopped, _buffer, _infiniteTimeWindow, _timestampProvider, _windowTime } = this;
    if (!isStopped) {
      _buffer.push(value);
      !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);
    }
    this._trimBuffer();
    super.next(value);
  }
  _subscribe(subscriber) {
    this._throwIfClosed();
    this._trimBuffer();
    const subscription = this._innerSubscribe(subscriber);
    const { _infiniteTimeWindow, _buffer } = this;
    const copy = _buffer.slice();
    for (let i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {
      subscriber.next(copy[i]);
    }
    this._checkFinalizedStatuses(subscriber);
    return subscription;
  }
  _trimBuffer() {
    const { _bufferSize, _timestampProvider, _buffer, _infiniteTimeWindow } = this;
    const adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;
    _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);
    if (!_infiniteTimeWindow) {
      const now = _timestampProvider.now();
      let last4 = 0;
      for (let i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {
        last4 = i;
      }
      last4 && _buffer.splice(0, last4 + 1);
    }
  }
};

// node_modules/rxjs/dist/esm/internal/scheduler/Action.js
var Action = class extends Subscription {
  constructor(scheduler, work) {
    super();
  }
  schedule(state2, delay = 0) {
    return this;
  }
};

// node_modules/rxjs/dist/esm/internal/scheduler/intervalProvider.js
var intervalProvider = {
  setInterval(handler, timeout, ...args) {
    const { delegate } = intervalProvider;
    if (delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) {
      return delegate.setInterval(handler, timeout, ...args);
    }
    return setInterval(handler, timeout, ...args);
  },
  clearInterval(handle) {
    const { delegate } = intervalProvider;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);
  },
  delegate: void 0
};

// node_modules/rxjs/dist/esm/internal/scheduler/AsyncAction.js
var AsyncAction = class extends Action {
  constructor(scheduler, work) {
    super(scheduler, work);
    this.scheduler = scheduler;
    this.work = work;
    this.pending = false;
  }
  schedule(state2, delay = 0) {
    var _a;
    if (this.closed) {
      return this;
    }
    this.state = state2;
    const id = this.id;
    const scheduler = this.scheduler;
    if (id != null) {
      this.id = this.recycleAsyncId(scheduler, id, delay);
    }
    this.pending = true;
    this.delay = delay;
    this.id = (_a = this.id) !== null && _a !== void 0 ? _a : this.requestAsyncId(scheduler, this.id, delay);
    return this;
  }
  requestAsyncId(scheduler, _id, delay = 0) {
    return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay);
  }
  recycleAsyncId(_scheduler, id, delay = 0) {
    if (delay != null && this.delay === delay && this.pending === false) {
      return id;
    }
    if (id != null) {
      intervalProvider.clearInterval(id);
    }
    return void 0;
  }
  execute(state2, delay) {
    if (this.closed) {
      return new Error("executing a cancelled action");
    }
    this.pending = false;
    const error = this._execute(state2, delay);
    if (error) {
      return error;
    } else if (this.pending === false && this.id != null) {
      this.id = this.recycleAsyncId(this.scheduler, this.id, null);
    }
  }
  _execute(state2, _delay) {
    let errored = false;
    let errorValue;
    try {
      this.work(state2);
    } catch (e) {
      errored = true;
      errorValue = e ? e : new Error("Scheduled action threw falsy error");
    }
    if (errored) {
      this.unsubscribe();
      return errorValue;
    }
  }
  unsubscribe() {
    if (!this.closed) {
      const { id, scheduler } = this;
      const { actions } = scheduler;
      this.work = this.state = this.scheduler = null;
      this.pending = false;
      arrRemove(actions, this);
      if (id != null) {
        this.id = this.recycleAsyncId(scheduler, id, null);
      }
      this.delay = null;
      super.unsubscribe();
    }
  }
};

// node_modules/rxjs/dist/esm/internal/util/Immediate.js
var nextHandle = 1;
var resolved;
var activeHandles = {};
function findAndClearHandle(handle) {
  if (handle in activeHandles) {
    delete activeHandles[handle];
    return true;
  }
  return false;
}
var Immediate = {
  setImmediate(cb) {
    const handle = nextHandle++;
    activeHandles[handle] = true;
    if (!resolved) {
      resolved = Promise.resolve();
    }
    resolved.then(() => findAndClearHandle(handle) && cb());
    return handle;
  },
  clearImmediate(handle) {
    findAndClearHandle(handle);
  }
};

// node_modules/rxjs/dist/esm/internal/scheduler/immediateProvider.js
var { setImmediate, clearImmediate } = Immediate;
var immediateProvider = {
  setImmediate(...args) {
    const { delegate } = immediateProvider;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.setImmediate) || setImmediate)(...args);
  },
  clearImmediate(handle) {
    const { delegate } = immediateProvider;
    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearImmediate) || clearImmediate)(handle);
  },
  delegate: void 0
};

// node_modules/rxjs/dist/esm/internal/scheduler/AsapAction.js
var AsapAction = class extends AsyncAction {
  constructor(scheduler, work) {
    super(scheduler, work);
    this.scheduler = scheduler;
    this.work = work;
  }
  requestAsyncId(scheduler, id, delay = 0) {
    if (delay !== null && delay > 0) {
      return super.requestAsyncId(scheduler, id, delay);
    }
    scheduler.actions.push(this);
    return scheduler._scheduled || (scheduler._scheduled = immediateProvider.setImmediate(scheduler.flush.bind(scheduler, void 0)));
  }
  recycleAsyncId(scheduler, id, delay = 0) {
    var _a;
    if (delay != null ? delay > 0 : this.delay > 0) {
      return super.recycleAsyncId(scheduler, id, delay);
    }
    const { actions } = scheduler;
    if (id != null && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {
      immediateProvider.clearImmediate(id);
      if (scheduler._scheduled === id) {
        scheduler._scheduled = void 0;
      }
    }
    return void 0;
  }
};

// node_modules/rxjs/dist/esm/internal/Scheduler.js
var Scheduler = class _Scheduler {
  constructor(schedulerActionCtor, now = _Scheduler.now) {
    this.schedulerActionCtor = schedulerActionCtor;
    this.now = now;
  }
  schedule(work, delay = 0, state2) {
    return new this.schedulerActionCtor(this, work).schedule(state2, delay);
  }
};
Scheduler.now = dateTimestampProvider.now;

// node_modules/rxjs/dist/esm/internal/scheduler/AsyncScheduler.js
var AsyncScheduler = class extends Scheduler {
  constructor(SchedulerAction, now = Scheduler.now) {
    super(SchedulerAction, now);
    this.actions = [];
    this._active = false;
  }
  flush(action) {
    const { actions } = this;
    if (this._active) {
      actions.push(action);
      return;
    }
    let error;
    this._active = true;
    do {
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    } while (action = actions.shift());
    this._active = false;
    if (error) {
      while (action = actions.shift()) {
        action.unsubscribe();
      }
      throw error;
    }
  }
};

// node_modules/rxjs/dist/esm/internal/scheduler/AsapScheduler.js
var AsapScheduler = class extends AsyncScheduler {
  flush(action) {
    this._active = true;
    const flushId = this._scheduled;
    this._scheduled = void 0;
    const { actions } = this;
    let error;
    action = action || actions.shift();
    do {
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    } while ((action = actions[0]) && action.id === flushId && actions.shift());
    this._active = false;
    if (error) {
      while ((action = actions[0]) && action.id === flushId && actions.shift()) {
        action.unsubscribe();
      }
      throw error;
    }
  }
};

// node_modules/rxjs/dist/esm/internal/scheduler/asap.js
var asapScheduler = new AsapScheduler(AsapAction);

// node_modules/rxjs/dist/esm/internal/scheduler/async.js
var asyncScheduler = new AsyncScheduler(AsyncAction);
var async = asyncScheduler;

// node_modules/rxjs/dist/esm/internal/scheduler/AnimationFrameAction.js
var AnimationFrameAction = class extends AsyncAction {
  constructor(scheduler, work) {
    super(scheduler, work);
    this.scheduler = scheduler;
    this.work = work;
  }
  requestAsyncId(scheduler, id, delay = 0) {
    if (delay !== null && delay > 0) {
      return super.requestAsyncId(scheduler, id, delay);
    }
    scheduler.actions.push(this);
    return scheduler._scheduled || (scheduler._scheduled = animationFrameProvider.requestAnimationFrame(() => scheduler.flush(void 0)));
  }
  recycleAsyncId(scheduler, id, delay = 0) {
    var _a;
    if (delay != null ? delay > 0 : this.delay > 0) {
      return super.recycleAsyncId(scheduler, id, delay);
    }
    const { actions } = scheduler;
    if (id != null && ((_a = actions[actions.length - 1]) === null || _a === void 0 ? void 0 : _a.id) !== id) {
      animationFrameProvider.cancelAnimationFrame(id);
      scheduler._scheduled = void 0;
    }
    return void 0;
  }
};

// node_modules/rxjs/dist/esm/internal/scheduler/AnimationFrameScheduler.js
var AnimationFrameScheduler = class extends AsyncScheduler {
  flush(action) {
    this._active = true;
    const flushId = this._scheduled;
    this._scheduled = void 0;
    const { actions } = this;
    let error;
    action = action || actions.shift();
    do {
      if (error = action.execute(action.state, action.delay)) {
        break;
      }
    } while ((action = actions[0]) && action.id === flushId && actions.shift());
    this._active = false;
    if (error) {
      while ((action = actions[0]) && action.id === flushId && actions.shift()) {
        action.unsubscribe();
      }
      throw error;
    }
  }
};

// node_modules/rxjs/dist/esm/internal/scheduler/animationFrame.js
var animationFrameScheduler = new AnimationFrameScheduler(AnimationFrameAction);

// node_modules/rxjs/dist/esm/internal/observable/empty.js
var EMPTY = new Observable((subscriber) => subscriber.complete());

// node_modules/rxjs/dist/esm/internal/util/isScheduler.js
function isScheduler(value) {
  return value && isFunction(value.schedule);
}

// node_modules/rxjs/dist/esm/internal/util/args.js
function last(arr) {
  return arr[arr.length - 1];
}
function popResultSelector(args) {
  return isFunction(last(args)) ? args.pop() : void 0;
}
function popScheduler(args) {
  return isScheduler(last(args)) ? args.pop() : void 0;
}
function popNumber(args, defaultValue) {
  return typeof last(args) === "number" ? args.pop() : defaultValue;
}

// node_modules/tslib/tslib.es6.mjs
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function verb(n) {
    if (g[n])
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
  }
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  function fulfill(value) {
    resume("next", value);
  }
  function reject(value) {
    resume("throw", value);
  }
  function settle(f, v) {
    if (f(v), q.shift(), q.length)
      resume(q[0][0], q[0][1]);
  }
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
}

// node_modules/rxjs/dist/esm/internal/util/isArrayLike.js
var isArrayLike = (x) => x && typeof x.length === "number" && typeof x !== "function";

// node_modules/rxjs/dist/esm/internal/util/isPromise.js
function isPromise(value) {
  return isFunction(value === null || value === void 0 ? void 0 : value.then);
}

// node_modules/rxjs/dist/esm/internal/util/isInteropObservable.js
function isInteropObservable(input) {
  return isFunction(input[observable]);
}

// node_modules/rxjs/dist/esm/internal/util/isAsyncIterable.js
function isAsyncIterable(obj) {
  return Symbol.asyncIterator && isFunction(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);
}

// node_modules/rxjs/dist/esm/internal/util/throwUnobservableError.js
function createInvalidObservableTypeError(input) {
  return new TypeError(`You provided ${input !== null && typeof input === "object" ? "an invalid object" : `'${input}'`} where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.`);
}

// node_modules/rxjs/dist/esm/internal/symbol/iterator.js
function getSymbolIterator() {
  if (typeof Symbol !== "function" || !Symbol.iterator) {
    return "@@iterator";
  }
  return Symbol.iterator;
}
var iterator = getSymbolIterator();

// node_modules/rxjs/dist/esm/internal/util/isIterable.js
function isIterable(input) {
  return isFunction(input === null || input === void 0 ? void 0 : input[iterator]);
}

// node_modules/rxjs/dist/esm/internal/util/isReadableStreamLike.js
function readableStreamLikeToAsyncGenerator(readableStream) {
  return __asyncGenerator(this, arguments, function* readableStreamLikeToAsyncGenerator_1() {
    const reader = readableStream.getReader();
    try {
      while (true) {
        const { value, done } = yield __await(reader.read());
        if (done) {
          return yield __await(void 0);
        }
        yield yield __await(value);
      }
    } finally {
      reader.releaseLock();
    }
  });
}
function isReadableStreamLike(obj) {
  return isFunction(obj === null || obj === void 0 ? void 0 : obj.getReader);
}

// node_modules/rxjs/dist/esm/internal/observable/innerFrom.js
function innerFrom(input) {
  if (input instanceof Observable) {
    return input;
  }
  if (input != null) {
    if (isInteropObservable(input)) {
      return fromInteropObservable(input);
    }
    if (isArrayLike(input)) {
      return fromArrayLike(input);
    }
    if (isPromise(input)) {
      return fromPromise(input);
    }
    if (isAsyncIterable(input)) {
      return fromAsyncIterable(input);
    }
    if (isIterable(input)) {
      return fromIterable(input);
    }
    if (isReadableStreamLike(input)) {
      return fromReadableStreamLike(input);
    }
  }
  throw createInvalidObservableTypeError(input);
}
function fromInteropObservable(obj) {
  return new Observable((subscriber) => {
    const obs = obj[observable]();
    if (isFunction(obs.subscribe)) {
      return obs.subscribe(subscriber);
    }
    throw new TypeError("Provided object does not correctly implement Symbol.observable");
  });
}
function fromArrayLike(array) {
  return new Observable((subscriber) => {
    for (let i = 0; i < array.length && !subscriber.closed; i++) {
      subscriber.next(array[i]);
    }
    subscriber.complete();
  });
}
function fromPromise(promise) {
  return new Observable((subscriber) => {
    promise.then((value) => {
      if (!subscriber.closed) {
        subscriber.next(value);
        subscriber.complete();
      }
    }, (err) => subscriber.error(err)).then(null, reportUnhandledError);
  });
}
function fromIterable(iterable) {
  return new Observable((subscriber) => {
    for (const value of iterable) {
      subscriber.next(value);
      if (subscriber.closed) {
        return;
      }
    }
    subscriber.complete();
  });
}
function fromAsyncIterable(asyncIterable) {
  return new Observable((subscriber) => {
    process(asyncIterable, subscriber).catch((err) => subscriber.error(err));
  });
}
function fromReadableStreamLike(readableStream) {
  return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));
}
function process(asyncIterable, subscriber) {
  var asyncIterable_1, asyncIterable_1_1;
  var e_1, _a;
  return __awaiter(this, void 0, void 0, function* () {
    try {
      for (asyncIterable_1 = __asyncValues(asyncIterable); asyncIterable_1_1 = yield asyncIterable_1.next(), !asyncIterable_1_1.done; ) {
        const value = asyncIterable_1_1.value;
        subscriber.next(value);
        if (subscriber.closed) {
          return;
        }
      }
    } catch (e_1_1) {
      e_1 = { error: e_1_1 };
    } finally {
      try {
        if (asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return))
          yield _a.call(asyncIterable_1);
      } finally {
        if (e_1)
          throw e_1.error;
      }
    }
    subscriber.complete();
  });
}

// node_modules/rxjs/dist/esm/internal/util/executeSchedule.js
function executeSchedule(parentSubscription, scheduler, work, delay = 0, repeat = false) {
  const scheduleSubscription = scheduler.schedule(function() {
    work();
    if (repeat) {
      parentSubscription.add(this.schedule(null, delay));
    } else {
      this.unsubscribe();
    }
  }, delay);
  parentSubscription.add(scheduleSubscription);
  if (!repeat) {
    return scheduleSubscription;
  }
}

// node_modules/rxjs/dist/esm/internal/operators/observeOn.js
function observeOn(scheduler, delay = 0) {
  return operate((source, subscriber) => {
    source.subscribe(createOperatorSubscriber(subscriber, (value) => executeSchedule(subscriber, scheduler, () => subscriber.next(value), delay), () => executeSchedule(subscriber, scheduler, () => subscriber.complete(), delay), (err) => executeSchedule(subscriber, scheduler, () => subscriber.error(err), delay)));
  });
}

// node_modules/rxjs/dist/esm/internal/operators/subscribeOn.js
function subscribeOn(scheduler, delay = 0) {
  return operate((source, subscriber) => {
    subscriber.add(scheduler.schedule(() => source.subscribe(subscriber), delay));
  });
}

// node_modules/rxjs/dist/esm/internal/scheduled/scheduleObservable.js
function scheduleObservable(input, scheduler) {
  return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
}

// node_modules/rxjs/dist/esm/internal/scheduled/schedulePromise.js
function schedulePromise(input, scheduler) {
  return innerFrom(input).pipe(subscribeOn(scheduler), observeOn(scheduler));
}

// node_modules/rxjs/dist/esm/internal/scheduled/scheduleArray.js
function scheduleArray(input, scheduler) {
  return new Observable((subscriber) => {
    let i = 0;
    return scheduler.schedule(function() {
      if (i === input.length) {
        subscriber.complete();
      } else {
        subscriber.next(input[i++]);
        if (!subscriber.closed) {
          this.schedule();
        }
      }
    });
  });
}

// node_modules/rxjs/dist/esm/internal/scheduled/scheduleIterable.js
function scheduleIterable(input, scheduler) {
  return new Observable((subscriber) => {
    let iterator2;
    executeSchedule(subscriber, scheduler, () => {
      iterator2 = input[iterator]();
      executeSchedule(subscriber, scheduler, () => {
        let value;
        let done;
        try {
          ({ value, done } = iterator2.next());
        } catch (err) {
          subscriber.error(err);
          return;
        }
        if (done) {
          subscriber.complete();
        } else {
          subscriber.next(value);
        }
      }, 0, true);
    });
    return () => isFunction(iterator2 === null || iterator2 === void 0 ? void 0 : iterator2.return) && iterator2.return();
  });
}

// node_modules/rxjs/dist/esm/internal/scheduled/scheduleAsyncIterable.js
function scheduleAsyncIterable(input, scheduler) {
  if (!input) {
    throw new Error("Iterable cannot be null");
  }
  return new Observable((subscriber) => {
    executeSchedule(subscriber, scheduler, () => {
      const iterator2 = input[Symbol.asyncIterator]();
      executeSchedule(subscriber, scheduler, () => {
        iterator2.next().then((result) => {
          if (result.done) {
            subscriber.complete();
          } else {
            subscriber.next(result.value);
          }
        });
      }, 0, true);
    });
  });
}

// node_modules/rxjs/dist/esm/internal/scheduled/scheduleReadableStreamLike.js
function scheduleReadableStreamLike(input, scheduler) {
  return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);
}

// node_modules/rxjs/dist/esm/internal/scheduled/scheduled.js
function scheduled(input, scheduler) {
  if (input != null) {
    if (isInteropObservable(input)) {
      return scheduleObservable(input, scheduler);
    }
    if (isArrayLike(input)) {
      return scheduleArray(input, scheduler);
    }
    if (isPromise(input)) {
      return schedulePromise(input, scheduler);
    }
    if (isAsyncIterable(input)) {
      return scheduleAsyncIterable(input, scheduler);
    }
    if (isIterable(input)) {
      return scheduleIterable(input, scheduler);
    }
    if (isReadableStreamLike(input)) {
      return scheduleReadableStreamLike(input, scheduler);
    }
  }
  throw createInvalidObservableTypeError(input);
}

// node_modules/rxjs/dist/esm/internal/observable/from.js
function from(input, scheduler) {
  return scheduler ? scheduled(input, scheduler) : innerFrom(input);
}

// node_modules/rxjs/dist/esm/internal/observable/of.js
function of(...args) {
  const scheduler = popScheduler(args);
  return from(args, scheduler);
}

// node_modules/rxjs/dist/esm/internal/observable/throwError.js
function throwError(errorOrErrorFactory, scheduler) {
  const errorFactory = isFunction(errorOrErrorFactory) ? errorOrErrorFactory : () => errorOrErrorFactory;
  const init = (subscriber) => subscriber.error(errorFactory());
  return new Observable(scheduler ? (subscriber) => scheduler.schedule(init, 0, subscriber) : init);
}

// node_modules/rxjs/dist/esm/internal/util/isObservable.js
function isObservable(obj) {
  return !!obj && (obj instanceof Observable || isFunction(obj.lift) && isFunction(obj.subscribe));
}

// node_modules/rxjs/dist/esm/internal/util/EmptyError.js
var EmptyError = createErrorClass((_super) => function EmptyErrorImpl() {
  _super(this);
  this.name = "EmptyError";
  this.message = "no elements in sequence";
});

// node_modules/rxjs/dist/esm/internal/util/isDate.js
function isValidDate(value) {
  return value instanceof Date && !isNaN(value);
}

// node_modules/rxjs/dist/esm/internal/operators/map.js
function map(project, thisArg) {
  return operate((source, subscriber) => {
    let index = 0;
    source.subscribe(createOperatorSubscriber(subscriber, (value) => {
      subscriber.next(project.call(thisArg, value, index++));
    }));
  });
}

// node_modules/rxjs/dist/esm/internal/util/mapOneOrManyArgs.js
var { isArray } = Array;
function callOrApply(fn, args) {
  return isArray(args) ? fn(...args) : fn(args);
}
function mapOneOrManyArgs(fn) {
  return map((args) => callOrApply(fn, args));
}

// node_modules/rxjs/dist/esm/internal/util/argsArgArrayOrObject.js
var { isArray: isArray2 } = Array;
var { getPrototypeOf, prototype: objectProto, keys: getKeys } = Object;
function argsArgArrayOrObject(args) {
  if (args.length === 1) {
    const first2 = args[0];
    if (isArray2(first2)) {
      return { args: first2, keys: null };
    }
    if (isPOJO(first2)) {
      const keys = getKeys(first2);
      return {
        args: keys.map((key) => first2[key]),
        keys
      };
    }
  }
  return { args, keys: null };
}
function isPOJO(obj) {
  return obj && typeof obj === "object" && getPrototypeOf(obj) === objectProto;
}

// node_modules/rxjs/dist/esm/internal/util/createObject.js
function createObject(keys, values) {
  return keys.reduce((result, key, i) => (result[key] = values[i], result), {});
}

// node_modules/rxjs/dist/esm/internal/observable/combineLatest.js
function combineLatest(...args) {
  const scheduler = popScheduler(args);
  const resultSelector = popResultSelector(args);
  const { args: observables, keys } = argsArgArrayOrObject(args);
  if (observables.length === 0) {
    return from([], scheduler);
  }
  const result = new Observable(combineLatestInit(observables, scheduler, keys ? (values) => createObject(keys, values) : identity));
  return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;
}
function combineLatestInit(observables, scheduler, valueTransform = identity) {
  return (subscriber) => {
    maybeSchedule(scheduler, () => {
      const { length } = observables;
      const values = new Array(length);
      let active = length;
      let remainingFirstValues = length;
      for (let i = 0; i < length; i++) {
        maybeSchedule(scheduler, () => {
          const source = from(observables[i], scheduler);
          let hasFirstValue = false;
          source.subscribe(createOperatorSubscriber(subscriber, (value) => {
            values[i] = value;
            if (!hasFirstValue) {
              hasFirstValue = true;
              remainingFirstValues--;
            }
            if (!remainingFirstValues) {
              subscriber.next(valueTransform(values.slice()));
            }
          }, () => {
            if (!--active) {
              subscriber.complete();
            }
          }));
        }, subscriber);
      }
    }, subscriber);
  };
}
function maybeSchedule(scheduler, execute, subscription) {
  if (scheduler) {
    executeSchedule(subscription, scheduler, execute);
  } else {
    execute();
  }
}

// node_modules/rxjs/dist/esm/internal/operators/mergeInternals.js
function mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalFinalizer) {
  const buffer = [];
  let active = 0;
  let index = 0;
  let isComplete = false;
  const checkComplete = () => {
    if (isComplete && !buffer.length && !active) {
      subscriber.complete();
    }
  };
  const outerNext = (value) => active < concurrent ? doInnerSub(value) : buffer.push(value);
  const doInnerSub = (value) => {
    expand && subscriber.next(value);
    active++;
    let innerComplete = false;
    innerFrom(project(value, index++)).subscribe(createOperatorSubscriber(subscriber, (innerValue) => {
      onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);
      if (expand) {
        outerNext(innerValue);
      } else {
        subscriber.next(innerValue);
      }
    }, () => {
      innerComplete = true;
    }, void 0, () => {
      if (innerComplete) {
        try {
          active--;
          while (buffer.length && active < concurrent) {
            const bufferedValue = buffer.shift();
            if (innerSubScheduler) {
              executeSchedule(subscriber, innerSubScheduler, () => doInnerSub(bufferedValue));
            } else {
              doInnerSub(bufferedValue);
            }
          }
          checkComplete();
        } catch (err) {
          subscriber.error(err);
        }
      }
    }));
  };
  source.subscribe(createOperatorSubscriber(subscriber, outerNext, () => {
    isComplete = true;
    checkComplete();
  }));
  return () => {
    additionalFinalizer === null || additionalFinalizer === void 0 ? void 0 : additionalFinalizer();
  };
}

// node_modules/rxjs/dist/esm/internal/operators/mergeMap.js
function mergeMap(project, resultSelector, concurrent = Infinity) {
  if (isFunction(resultSelector)) {
    return mergeMap((a, i) => map((b, ii) => resultSelector(a, b, i, ii))(innerFrom(project(a, i))), concurrent);
  } else if (typeof resultSelector === "number") {
    concurrent = resultSelector;
  }
  return operate((source, subscriber) => mergeInternals(source, subscriber, project, concurrent));
}

// node_modules/rxjs/dist/esm/internal/operators/mergeAll.js
function mergeAll(concurrent = Infinity) {
  return mergeMap(identity, concurrent);
}

// node_modules/rxjs/dist/esm/internal/operators/concatAll.js
function concatAll() {
  return mergeAll(1);
}

// node_modules/rxjs/dist/esm/internal/observable/concat.js
function concat(...args) {
  return concatAll()(from(args, popScheduler(args)));
}

// node_modules/rxjs/dist/esm/internal/observable/defer.js
function defer(observableFactory) {
  return new Observable((subscriber) => {
    innerFrom(observableFactory()).subscribe(subscriber);
  });
}

// node_modules/rxjs/dist/esm/internal/observable/fromEvent.js
var nodeEventEmitterMethods = ["addListener", "removeListener"];
var eventTargetMethods = ["addEventListener", "removeEventListener"];
var jqueryMethods = ["on", "off"];
function fromEvent(target, eventName, options, resultSelector) {
  if (isFunction(options)) {
    resultSelector = options;
    options = void 0;
  }
  if (resultSelector) {
    return fromEvent(target, eventName, options).pipe(mapOneOrManyArgs(resultSelector));
  }
  const [add, remove2] = isEventTarget(target) ? eventTargetMethods.map((methodName) => (handler) => target[methodName](eventName, handler, options)) : isNodeStyleEventEmitter(target) ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName)) : isJQueryStyleEventEmitter(target) ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName)) : [];
  if (!add) {
    if (isArrayLike(target)) {
      return mergeMap((subTarget) => fromEvent(subTarget, eventName, options))(innerFrom(target));
    }
  }
  if (!add) {
    throw new TypeError("Invalid event target");
  }
  return new Observable((subscriber) => {
    const handler = (...args) => subscriber.next(1 < args.length ? args : args[0]);
    add(handler);
    return () => remove2(handler);
  });
}
function toCommonHandlerRegistry(target, eventName) {
  return (methodName) => (handler) => target[methodName](eventName, handler);
}
function isNodeStyleEventEmitter(target) {
  return isFunction(target.addListener) && isFunction(target.removeListener);
}
function isJQueryStyleEventEmitter(target) {
  return isFunction(target.on) && isFunction(target.off);
}
function isEventTarget(target) {
  return isFunction(target.addEventListener) && isFunction(target.removeEventListener);
}

// node_modules/rxjs/dist/esm/internal/observable/timer.js
function timer(dueTime = 0, intervalOrScheduler, scheduler = async) {
  let intervalDuration = -1;
  if (intervalOrScheduler != null) {
    if (isScheduler(intervalOrScheduler)) {
      scheduler = intervalOrScheduler;
    } else {
      intervalDuration = intervalOrScheduler;
    }
  }
  return new Observable((subscriber) => {
    let due = isValidDate(dueTime) ? +dueTime - scheduler.now() : dueTime;
    if (due < 0) {
      due = 0;
    }
    let n = 0;
    return scheduler.schedule(function() {
      if (!subscriber.closed) {
        subscriber.next(n++);
        if (0 <= intervalDuration) {
          this.schedule(void 0, intervalDuration);
        } else {
          subscriber.complete();
        }
      }
    }, due);
  });
}

// node_modules/rxjs/dist/esm/internal/observable/merge.js
function merge(...args) {
  const scheduler = popScheduler(args);
  const concurrent = popNumber(args, Infinity);
  const sources = args;
  return !sources.length ? EMPTY : sources.length === 1 ? innerFrom(sources[0]) : mergeAll(concurrent)(from(sources, scheduler));
}

// node_modules/rxjs/dist/esm/internal/operators/filter.js
function filter(predicate, thisArg) {
  return operate((source, subscriber) => {
    let index = 0;
    source.subscribe(createOperatorSubscriber(subscriber, (value) => predicate.call(thisArg, value, index++) && subscriber.next(value)));
  });
}

// node_modules/rxjs/dist/esm/internal/operators/audit.js
function audit(durationSelector) {
  return operate((source, subscriber) => {
    let hasValue = false;
    let lastValue = null;
    let durationSubscriber = null;
    let isComplete = false;
    const endDuration = () => {
      durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();
      durationSubscriber = null;
      if (hasValue) {
        hasValue = false;
        const value = lastValue;
        lastValue = null;
        subscriber.next(value);
      }
      isComplete && subscriber.complete();
    };
    const cleanupDuration = () => {
      durationSubscriber = null;
      isComplete && subscriber.complete();
    };
    source.subscribe(createOperatorSubscriber(subscriber, (value) => {
      hasValue = true;
      lastValue = value;
      if (!durationSubscriber) {
        innerFrom(durationSelector(value)).subscribe(durationSubscriber = createOperatorSubscriber(subscriber, endDuration, cleanupDuration));
      }
    }, () => {
      isComplete = true;
      (!hasValue || !durationSubscriber || durationSubscriber.closed) && subscriber.complete();
    }));
  });
}

// node_modules/rxjs/dist/esm/internal/operators/auditTime.js
function auditTime(duration, scheduler = asyncScheduler) {
  return audit(() => timer(duration, scheduler));
}

// node_modules/rxjs/dist/esm/internal/operators/catchError.js
function catchError(selector) {
  return operate((source, subscriber) => {
    let innerSub = null;
    let syncUnsub = false;
    let handledResult;
    innerSub = source.subscribe(createOperatorSubscriber(subscriber, void 0, void 0, (err) => {
      handledResult = innerFrom(selector(err, catchError(selector)(source)));
      if (innerSub) {
        innerSub.unsubscribe();
        innerSub = null;
        handledResult.subscribe(subscriber);
      } else {
        syncUnsub = true;
      }
    }));
    if (syncUnsub) {
      innerSub.unsubscribe();
      innerSub = null;
      handledResult.subscribe(subscriber);
    }
  });
}

// node_modules/rxjs/dist/esm/internal/operators/scanInternals.js
function scanInternals(accumulator, seed, hasSeed, emitOnNext, emitBeforeComplete) {
  return (source, subscriber) => {
    let hasState = hasSeed;
    let state2 = seed;
    let index = 0;
    source.subscribe(createOperatorSubscriber(subscriber, (value) => {
      const i = index++;
      state2 = hasState ? accumulator(state2, value, i) : (hasState = true, value);
      emitOnNext && subscriber.next(state2);
    }, emitBeforeComplete && (() => {
      hasState && subscriber.next(state2);
      subscriber.complete();
    })));
  };
}

// node_modules/rxjs/dist/esm/internal/operators/concatMap.js
function concatMap(project, resultSelector) {
  return isFunction(resultSelector) ? mergeMap(project, resultSelector, 1) : mergeMap(project, 1);
}

// node_modules/rxjs/dist/esm/internal/operators/debounceTime.js
function debounceTime(dueTime, scheduler = asyncScheduler) {
  return operate((source, subscriber) => {
    let activeTask = null;
    let lastValue = null;
    let lastTime = null;
    const emit = () => {
      if (activeTask) {
        activeTask.unsubscribe();
        activeTask = null;
        const value = lastValue;
        lastValue = null;
        subscriber.next(value);
      }
    };
    function emitWhenIdle() {
      const targetTime = lastTime + dueTime;
      const now = scheduler.now();
      if (now < targetTime) {
        activeTask = this.schedule(void 0, targetTime - now);
        subscriber.add(activeTask);
        return;
      }
      emit();
    }
    source.subscribe(createOperatorSubscriber(subscriber, (value) => {
      lastValue = value;
      lastTime = scheduler.now();
      if (!activeTask) {
        activeTask = scheduler.schedule(emitWhenIdle, dueTime);
        subscriber.add(activeTask);
      }
    }, () => {
      emit();
      subscriber.complete();
    }, void 0, () => {
      lastValue = activeTask = null;
    }));
  });
}

// node_modules/rxjs/dist/esm/internal/operators/defaultIfEmpty.js
function defaultIfEmpty(defaultValue) {
  return operate((source, subscriber) => {
    let hasValue = false;
    source.subscribe(createOperatorSubscriber(subscriber, (value) => {
      hasValue = true;
      subscriber.next(value);
    }, () => {
      if (!hasValue) {
        subscriber.next(defaultValue);
      }
      subscriber.complete();
    }));
  });
}

// node_modules/rxjs/dist/esm/internal/operators/take.js
function take(count) {
  return count <= 0 ? () => EMPTY : operate((source, subscriber) => {
    let seen = 0;
    source.subscribe(createOperatorSubscriber(subscriber, (value) => {
      if (++seen <= count) {
        subscriber.next(value);
        if (count <= seen) {
          subscriber.complete();
        }
      }
    }));
  });
}

// node_modules/rxjs/dist/esm/internal/operators/mapTo.js
function mapTo(value) {
  return map(() => value);
}

// node_modules/rxjs/dist/esm/internal/operators/distinctUntilChanged.js
function distinctUntilChanged(comparator, keySelector = identity) {
  comparator = comparator !== null && comparator !== void 0 ? comparator : defaultCompare;
  return operate((source, subscriber) => {
    let previousKey;
    let first2 = true;
    source.subscribe(createOperatorSubscriber(subscriber, (value) => {
      const currentKey = keySelector(value);
      if (first2 || !comparator(previousKey, currentKey)) {
        first2 = false;
        previousKey = currentKey;
        subscriber.next(value);
      }
    }));
  });
}
function defaultCompare(a, b) {
  return a === b;
}

// node_modules/rxjs/dist/esm/internal/operators/throwIfEmpty.js
function throwIfEmpty(errorFactory = defaultErrorFactory) {
  return operate((source, subscriber) => {
    let hasValue = false;
    source.subscribe(createOperatorSubscriber(subscriber, (value) => {
      hasValue = true;
      subscriber.next(value);
    }, () => hasValue ? subscriber.complete() : subscriber.error(errorFactory())));
  });
}
function defaultErrorFactory() {
  return new EmptyError();
}

// node_modules/rxjs/dist/esm/internal/operators/finalize.js
function finalize(callback) {
  return operate((source, subscriber) => {
    try {
      source.subscribe(subscriber);
    } finally {
      subscriber.add(callback);
    }
  });
}

// node_modules/rxjs/dist/esm/internal/operators/first.js
function first(predicate, defaultValue) {
  const hasDefaultValue = arguments.length >= 2;
  return (source) => source.pipe(predicate ? filter((v, i) => predicate(v, i, source)) : identity, take(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(() => new EmptyError()));
}

// node_modules/rxjs/dist/esm/internal/operators/takeLast.js
function takeLast(count) {
  return count <= 0 ? () => EMPTY : operate((source, subscriber) => {
    let buffer = [];
    source.subscribe(createOperatorSubscriber(subscriber, (value) => {
      buffer.push(value);
      count < buffer.length && buffer.shift();
    }, () => {
      for (const value of buffer) {
        subscriber.next(value);
      }
      subscriber.complete();
    }, void 0, () => {
      buffer = null;
    }));
  });
}

// node_modules/rxjs/dist/esm/internal/operators/last.js
function last2(predicate, defaultValue) {
  const hasDefaultValue = arguments.length >= 2;
  return (source) => source.pipe(predicate ? filter((v, i) => predicate(v, i, source)) : identity, takeLast(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(() => new EmptyError()));
}

// node_modules/rxjs/dist/esm/internal/operators/pairwise.js
function pairwise() {
  return operate((source, subscriber) => {
    let prev;
    let hasPrev = false;
    source.subscribe(createOperatorSubscriber(subscriber, (value) => {
      const p = prev;
      prev = value;
      hasPrev && subscriber.next([p, value]);
      hasPrev = true;
    }));
  });
}

// node_modules/rxjs/dist/esm/internal/operators/scan.js
function scan(accumulator, seed) {
  return operate(scanInternals(accumulator, seed, arguments.length >= 2, true));
}

// node_modules/rxjs/dist/esm/internal/operators/share.js
function share(options = {}) {
  const { connector = () => new Subject(), resetOnError = true, resetOnComplete = true, resetOnRefCountZero = true } = options;
  return (wrapperSource) => {
    let connection;
    let resetConnection;
    let subject;
    let refCount2 = 0;
    let hasCompleted = false;
    let hasErrored = false;
    const cancelReset = () => {
      resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();
      resetConnection = void 0;
    };
    const reset = () => {
      cancelReset();
      connection = subject = void 0;
      hasCompleted = hasErrored = false;
    };
    const resetAndUnsubscribe = () => {
      const conn = connection;
      reset();
      conn === null || conn === void 0 ? void 0 : conn.unsubscribe();
    };
    return operate((source, subscriber) => {
      refCount2++;
      if (!hasErrored && !hasCompleted) {
        cancelReset();
      }
      const dest = subject = subject !== null && subject !== void 0 ? subject : connector();
      subscriber.add(() => {
        refCount2--;
        if (refCount2 === 0 && !hasErrored && !hasCompleted) {
          resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);
        }
      });
      dest.subscribe(subscriber);
      if (!connection && refCount2 > 0) {
        connection = new SafeSubscriber({
          next: (value) => dest.next(value),
          error: (err) => {
            hasErrored = true;
            cancelReset();
            resetConnection = handleReset(reset, resetOnError, err);
            dest.error(err);
          },
          complete: () => {
            hasCompleted = true;
            cancelReset();
            resetConnection = handleReset(reset, resetOnComplete);
            dest.complete();
          }
        });
        innerFrom(source).subscribe(connection);
      }
    })(wrapperSource);
  };
}
function handleReset(reset, on, ...args) {
  if (on === true) {
    reset();
    return;
  }
  if (on === false) {
    return;
  }
  const onSubscriber = new SafeSubscriber({
    next: () => {
      onSubscriber.unsubscribe();
      reset();
    }
  });
  return innerFrom(on(...args)).subscribe(onSubscriber);
}

// node_modules/rxjs/dist/esm/internal/operators/shareReplay.js
function shareReplay(configOrBufferSize, windowTime, scheduler) {
  let bufferSize;
  let refCount2 = false;
  if (configOrBufferSize && typeof configOrBufferSize === "object") {
    ({ bufferSize = Infinity, windowTime = Infinity, refCount: refCount2 = false, scheduler } = configOrBufferSize);
  } else {
    bufferSize = configOrBufferSize !== null && configOrBufferSize !== void 0 ? configOrBufferSize : Infinity;
  }
  return share({
    connector: () => new ReplaySubject(bufferSize, windowTime, scheduler),
    resetOnError: true,
    resetOnComplete: false,
    resetOnRefCountZero: refCount2
  });
}

// node_modules/rxjs/dist/esm/internal/operators/skip.js
function skip(count) {
  return filter((_, index) => count <= index);
}

// node_modules/rxjs/dist/esm/internal/operators/startWith.js
function startWith(...values) {
  const scheduler = popScheduler(values);
  return operate((source, subscriber) => {
    (scheduler ? concat(values, source, scheduler) : concat(values, source)).subscribe(subscriber);
  });
}

// node_modules/rxjs/dist/esm/internal/operators/switchMap.js
function switchMap(project, resultSelector) {
  return operate((source, subscriber) => {
    let innerSubscriber = null;
    let index = 0;
    let isComplete = false;
    const checkComplete = () => isComplete && !innerSubscriber && subscriber.complete();
    source.subscribe(createOperatorSubscriber(subscriber, (value) => {
      innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();
      let innerIndex = 0;
      const outerIndex = index++;
      innerFrom(project(value, outerIndex)).subscribe(innerSubscriber = createOperatorSubscriber(subscriber, (innerValue) => subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue), () => {
        innerSubscriber = null;
        checkComplete();
      }));
    }, () => {
      isComplete = true;
      checkComplete();
    }));
  });
}

// node_modules/rxjs/dist/esm/internal/operators/takeUntil.js
function takeUntil(notifier) {
  return operate((source, subscriber) => {
    innerFrom(notifier).subscribe(createOperatorSubscriber(subscriber, () => subscriber.complete(), noop));
    !subscriber.closed && source.subscribe(subscriber);
  });
}

// node_modules/rxjs/dist/esm/internal/operators/takeWhile.js
function takeWhile(predicate, inclusive = false) {
  return operate((source, subscriber) => {
    let index = 0;
    source.subscribe(createOperatorSubscriber(subscriber, (value) => {
      const result = predicate(value, index++);
      (result || inclusive) && subscriber.next(value);
      !result && subscriber.complete();
    }));
  });
}

// node_modules/rxjs/dist/esm/internal/operators/tap.js
function tap(observerOrNext, error, complete) {
  const tapObserver = isFunction(observerOrNext) || error || complete ? { next: observerOrNext, error, complete } : observerOrNext;
  return tapObserver ? operate((source, subscriber) => {
    var _a;
    (_a = tapObserver.subscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);
    let isUnsub = true;
    source.subscribe(createOperatorSubscriber(subscriber, (value) => {
      var _a2;
      (_a2 = tapObserver.next) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver, value);
      subscriber.next(value);
    }, () => {
      var _a2;
      isUnsub = false;
      (_a2 = tapObserver.complete) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver);
      subscriber.complete();
    }, (err) => {
      var _a2;
      isUnsub = false;
      (_a2 = tapObserver.error) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver, err);
      subscriber.error(err);
    }, () => {
      var _a2, _b;
      if (isUnsub) {
        (_a2 = tapObserver.unsubscribe) === null || _a2 === void 0 ? void 0 : _a2.call(tapObserver);
      }
      (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);
    }));
  }) : identity;
}

// node_modules/@angular/core/fesm2022/core.mjs
function getClosureSafeProperty(objWithPropertyToExtract) {
  for (let key in objWithPropertyToExtract) {
    if (objWithPropertyToExtract[key] === getClosureSafeProperty) {
      return key;
    }
  }
  throw Error("Could not find renamed property on target object.");
}
function fillProperties(target, source) {
  for (const key in source) {
    if (source.hasOwnProperty(key) && !target.hasOwnProperty(key)) {
      target[key] = source[key];
    }
  }
}
function stringify(token) {
  if (typeof token === "string") {
    return token;
  }
  if (Array.isArray(token)) {
    return "[" + token.map(stringify).join(", ") + "]";
  }
  if (token == null) {
    return "" + token;
  }
  if (token.overriddenName) {
    return `${token.overriddenName}`;
  }
  if (token.name) {
    return `${token.name}`;
  }
  const res = token.toString();
  if (res == null) {
    return "" + res;
  }
  const newLineIndex = res.indexOf("\n");
  return newLineIndex === -1 ? res : res.substring(0, newLineIndex);
}
function concatStringsWithSpace(before, after) {
  return before == null || before === "" ? after === null ? "" : after : after == null || after === "" ? before : before + " " + after;
}
var __forward_ref__ = getClosureSafeProperty({ __forward_ref__: getClosureSafeProperty });
function forwardRef(forwardRefFn) {
  forwardRefFn.__forward_ref__ = forwardRef;
  forwardRefFn.toString = function() {
    return stringify(this());
  };
  return forwardRefFn;
}
function resolveForwardRef(type) {
  return isForwardRef(type) ? type() : type;
}
function isForwardRef(fn) {
  return typeof fn === "function" && fn.hasOwnProperty(__forward_ref__) && fn.__forward_ref__ === forwardRef;
}
function isEnvironmentProviders(value) {
  return value && !!value.\u0275providers;
}
var ERROR_DETAILS_PAGE_BASE_URL = "https://angular.io/errors";
var XSS_SECURITY_URL = "https://g.co/ng/security#xss";
var RuntimeError = class extends Error {
  constructor(code, message) {
    super(formatRuntimeError(code, message));
    this.code = code;
  }
};
function formatRuntimeError(code, message) {
  const fullCode = `NG0${Math.abs(code)}`;
  let errorMessage = `${fullCode}${message ? ": " + message : ""}`;
  if (ngDevMode && code < 0) {
    const addPeriodSeparator = !errorMessage.match(/[.,;!?\n]$/);
    const separator = addPeriodSeparator ? "." : "";
    errorMessage = `${errorMessage}${separator} Find more at ${ERROR_DETAILS_PAGE_BASE_URL}/${fullCode}`;
  }
  return errorMessage;
}
var NG_COMP_DEF = getClosureSafeProperty({ \u0275cmp: getClosureSafeProperty });
var NG_DIR_DEF = getClosureSafeProperty({ \u0275dir: getClosureSafeProperty });
var NG_PIPE_DEF = getClosureSafeProperty({ \u0275pipe: getClosureSafeProperty });
var NG_MOD_DEF = getClosureSafeProperty({ \u0275mod: getClosureSafeProperty });
var NG_FACTORY_DEF = getClosureSafeProperty({ \u0275fac: getClosureSafeProperty });
var NG_ELEMENT_ID = getClosureSafeProperty({ __NG_ELEMENT_ID__: getClosureSafeProperty });
var NG_ENV_ID = getClosureSafeProperty({ __NG_ENV_ID__: getClosureSafeProperty });
function renderStringify(value) {
  if (typeof value === "string")
    return value;
  if (value == null)
    return "";
  return String(value);
}
function stringifyForError(value) {
  if (typeof value === "function")
    return value.name || value.toString();
  if (typeof value === "object" && value != null && typeof value.type === "function") {
    return value.type.name || value.type.toString();
  }
  return renderStringify(value);
}
function throwCyclicDependencyError(token, path) {
  const depPath = path ? `. Dependency path: ${path.join(" > ")} > ${token}` : "";
  throw new RuntimeError(-200, `Circular dependency in DI detected for ${token}${depPath}`);
}
function throwMixedMultiProviderError() {
  throw new Error(`Cannot mix multi providers and regular providers`);
}
function throwInvalidProviderError(ngModuleType, providers, provider) {
  if (ngModuleType && providers) {
    const providerDetail = providers.map((v) => v == provider ? "?" + provider + "?" : "...");
    throw new Error(`Invalid provider for the NgModule '${stringify(ngModuleType)}' - only instances of Provider and Type are allowed, got: [${providerDetail.join(", ")}]`);
  } else if (isEnvironmentProviders(provider)) {
    if (provider.\u0275fromNgModule) {
      throw new RuntimeError(207, `Invalid providers from 'importProvidersFrom' present in a non-environment injector. 'importProvidersFrom' can't be used for component providers.`);
    } else {
      throw new RuntimeError(207, `Invalid providers present in a non-environment injector. 'EnvironmentProviders' can't be used for component providers.`);
    }
  } else {
    throw new Error("Invalid provider");
  }
}
function throwProviderNotFoundError(token, injectorName) {
  const injectorDetails = injectorName ? ` in ${injectorName}` : "";
  throw new RuntimeError(-201, ngDevMode && `No provider for ${stringifyForError(token)} found${injectorDetails}`);
}
function assertNumber(actual, msg) {
  if (!(typeof actual === "number")) {
    throwError2(msg, typeof actual, "number", "===");
  }
}
function assertNumberInRange(actual, minInclusive, maxInclusive) {
  assertNumber(actual, "Expected a number");
  assertLessThanOrEqual(actual, maxInclusive, "Expected number to be less than or equal to");
  assertGreaterThanOrEqual(actual, minInclusive, "Expected number to be greater than or equal to");
}
function assertString(actual, msg) {
  if (!(typeof actual === "string")) {
    throwError2(msg, actual === null ? "null" : typeof actual, "string", "===");
  }
}
function assertFunction(actual, msg) {
  if (!(typeof actual === "function")) {
    throwError2(msg, actual === null ? "null" : typeof actual, "function", "===");
  }
}
function assertEqual(actual, expected, msg) {
  if (!(actual == expected)) {
    throwError2(msg, actual, expected, "==");
  }
}
function assertNotEqual(actual, expected, msg) {
  if (!(actual != expected)) {
    throwError2(msg, actual, expected, "!=");
  }
}
function assertSame(actual, expected, msg) {
  if (!(actual === expected)) {
    throwError2(msg, actual, expected, "===");
  }
}
function assertNotSame(actual, expected, msg) {
  if (!(actual !== expected)) {
    throwError2(msg, actual, expected, "!==");
  }
}
function assertLessThan(actual, expected, msg) {
  if (!(actual < expected)) {
    throwError2(msg, actual, expected, "<");
  }
}
function assertLessThanOrEqual(actual, expected, msg) {
  if (!(actual <= expected)) {
    throwError2(msg, actual, expected, "<=");
  }
}
function assertGreaterThan(actual, expected, msg) {
  if (!(actual > expected)) {
    throwError2(msg, actual, expected, ">");
  }
}
function assertGreaterThanOrEqual(actual, expected, msg) {
  if (!(actual >= expected)) {
    throwError2(msg, actual, expected, ">=");
  }
}
function assertDefined(actual, msg) {
  if (actual == null) {
    throwError2(msg, actual, null, "!=");
  }
}
function throwError2(msg, actual, expected, comparison) {
  throw new Error(`ASSERTION ERROR: ${msg}` + (comparison == null ? "" : ` [Expected=> ${expected} ${comparison} ${actual} <=Actual]`));
}
function assertDomNode(node) {
  if (!(node instanceof Node)) {
    throwError2(`The provided value must be an instance of a DOM Node but got ${stringify(node)}`);
  }
}
function assertElement(node) {
  if (!(node instanceof Element)) {
    throwError2(`The provided value must be an element but got ${stringify(node)}`);
  }
}
function assertIndexInRange(arr, index) {
  assertDefined(arr, "Array must be defined.");
  const maxLen = arr.length;
  if (index < 0 || index >= maxLen) {
    throwError2(`Index expected to be less than ${maxLen} but got ${index}`);
  }
}
function assertOneOf(value, ...validValues) {
  if (validValues.indexOf(value) !== -1)
    return true;
  throwError2(`Expected value to be one of ${JSON.stringify(validValues)} but was ${JSON.stringify(value)}.`);
}
function \u0275\u0275defineInjectable(opts) {
  return {
    token: opts.token,
    providedIn: opts.providedIn || null,
    factory: opts.factory,
    value: void 0
  };
}
function \u0275\u0275defineInjector(options) {
  return { providers: options.providers || [], imports: options.imports || [] };
}
function getInjectableDef(type) {
  return getOwnDefinition(type, NG_PROV_DEF) || getOwnDefinition(type, NG_INJECTABLE_DEF);
}
function isInjectable(type) {
  return getInjectableDef(type) !== null;
}
function getOwnDefinition(type, field) {
  return type.hasOwnProperty(field) ? type[field] : null;
}
function getInheritedInjectableDef(type) {
  const def = type && (type[NG_PROV_DEF] || type[NG_INJECTABLE_DEF]);
  if (def) {
    ngDevMode && console.warn(`DEPRECATED: DI is instantiating a token "${type.name}" that inherits its @Injectable decorator but does not provide one itself.
This will become an error in a future version of Angular. Please add @Injectable() to the "${type.name}" class.`);
    return def;
  } else {
    return null;
  }
}
function getInjectorDef(type) {
  return type && (type.hasOwnProperty(NG_INJ_DEF) || type.hasOwnProperty(NG_INJECTOR_DEF)) ? type[NG_INJ_DEF] : null;
}
var NG_PROV_DEF = getClosureSafeProperty({ \u0275prov: getClosureSafeProperty });
var NG_INJ_DEF = getClosureSafeProperty({ \u0275inj: getClosureSafeProperty });
var NG_INJECTABLE_DEF = getClosureSafeProperty({ ngInjectableDef: getClosureSafeProperty });
var NG_INJECTOR_DEF = getClosureSafeProperty({ ngInjectorDef: getClosureSafeProperty });
var InjectFlags;
(function(InjectFlags2) {
  InjectFlags2[InjectFlags2["Default"] = 0] = "Default";
  InjectFlags2[InjectFlags2["Host"] = 1] = "Host";
  InjectFlags2[InjectFlags2["Self"] = 2] = "Self";
  InjectFlags2[InjectFlags2["SkipSelf"] = 4] = "SkipSelf";
  InjectFlags2[InjectFlags2["Optional"] = 8] = "Optional";
})(InjectFlags || (InjectFlags = {}));
var _injectImplementation;
function getInjectImplementation() {
  return _injectImplementation;
}
function setInjectImplementation(impl) {
  const previous = _injectImplementation;
  _injectImplementation = impl;
  return previous;
}
function injectRootLimpMode(token, notFoundValue, flags) {
  const injectableDef = getInjectableDef(token);
  if (injectableDef && injectableDef.providedIn == "root") {
    return injectableDef.value === void 0 ? injectableDef.value = injectableDef.factory() : injectableDef.value;
  }
  if (flags & InjectFlags.Optional)
    return null;
  if (notFoundValue !== void 0)
    return notFoundValue;
  throwProviderNotFoundError(stringify(token), "Injector");
}
function assertInjectImplementationNotEqual(fn) {
  ngDevMode && assertNotEqual(_injectImplementation, fn, "Calling \u0275\u0275inject would cause infinite recursion");
}
var _global = globalThis;
function ngDevModeResetPerfCounters() {
  const locationString = typeof location !== "undefined" ? location.toString() : "";
  const newCounters = {
    namedConstructors: locationString.indexOf("ngDevMode=namedConstructors") != -1,
    firstCreatePass: 0,
    tNode: 0,
    tView: 0,
    rendererCreateTextNode: 0,
    rendererSetText: 0,
    rendererCreateElement: 0,
    rendererAddEventListener: 0,
    rendererSetAttribute: 0,
    rendererRemoveAttribute: 0,
    rendererSetProperty: 0,
    rendererSetClassName: 0,
    rendererAddClass: 0,
    rendererRemoveClass: 0,
    rendererSetStyle: 0,
    rendererRemoveStyle: 0,
    rendererDestroy: 0,
    rendererDestroyNode: 0,
    rendererMoveNode: 0,
    rendererRemoveNode: 0,
    rendererAppendChild: 0,
    rendererInsertBefore: 0,
    rendererCreateComment: 0,
    hydratedNodes: 0,
    hydratedComponents: 0,
    dehydratedViewsRemoved: 0,
    dehydratedViewsCleanupRuns: 0,
    componentsSkippedHydration: 0
  };
  const allowNgDevModeTrue = locationString.indexOf("ngDevMode=false") === -1;
  _global["ngDevMode"] = allowNgDevModeTrue && newCounters;
  return newCounters;
}
function initNgDevMode() {
  if (typeof ngDevMode === "undefined" || ngDevMode) {
    if (typeof ngDevMode !== "object") {
      ngDevModeResetPerfCounters();
    }
    return typeof ngDevMode !== "undefined" && !!ngDevMode;
  }
  return false;
}
var InjectionToken = class {
  /**
   * @param _desc   Description for the token,
   *                used only for debugging purposes,
   *                it should but does not need to be unique
   * @param options Options for the token's usage, as described above
   */
  constructor(_desc, options) {
    this._desc = _desc;
    this.ngMetadataName = "InjectionToken";
    this.\u0275prov = void 0;
    if (typeof options == "number") {
      (typeof ngDevMode === "undefined" || ngDevMode) && assertLessThan(options, 0, "Only negative numbers are supported here");
      this.__NG_ELEMENT_ID__ = options;
    } else if (options !== void 0) {
      this.\u0275prov = \u0275\u0275defineInjectable({
        token: this,
        providedIn: options.providedIn || "root",
        factory: options.factory
      });
    }
  }
  /**
   * @internal
   */
  get multi() {
    return this;
  }
  toString() {
    return `InjectionToken ${this._desc}`;
  }
};
var _injectorProfilerContext;
function getInjectorProfilerContext() {
  !ngDevMode && throwError2("getInjectorProfilerContext should never be called in production mode");
  return _injectorProfilerContext;
}
function setInjectorProfilerContext(context2) {
  !ngDevMode && throwError2("setInjectorProfilerContext should never be called in production mode");
  const previous = _injectorProfilerContext;
  _injectorProfilerContext = context2;
  return previous;
}
var injectorProfilerCallback = null;
var setInjectorProfiler = (injectorProfiler2) => {
  !ngDevMode && throwError2("setInjectorProfiler should never be called in production mode");
  injectorProfilerCallback = injectorProfiler2;
};
function injectorProfiler(event) {
  !ngDevMode && throwError2("Injector profiler should never be called in production mode");
  if (injectorProfilerCallback != null) {
    injectorProfilerCallback(event);
  }
}
function emitProviderConfiguredEvent(eventProvider, isViewProvider = false) {
  !ngDevMode && throwError2("Injector profiler should never be called in production mode");
  let token;
  if (typeof eventProvider === "function") {
    token = eventProvider;
  } else if (eventProvider instanceof InjectionToken) {
    token = eventProvider;
  } else {
    token = resolveForwardRef(eventProvider.provide);
  }
  let provider = eventProvider;
  if (eventProvider instanceof InjectionToken) {
    provider = eventProvider.\u0275prov || eventProvider;
  }
  injectorProfiler({
    type: 2,
    context: getInjectorProfilerContext(),
    providerRecord: { token, provider, isViewProvider }
  });
}
function emitInstanceCreatedByInjectorEvent(instance) {
  !ngDevMode && throwError2("Injector profiler should never be called in production mode");
  injectorProfiler({
    type: 1,
    context: getInjectorProfilerContext(),
    instance: { value: instance }
  });
}
function emitInjectEvent(token, value, flags) {
  !ngDevMode && throwError2("Injector profiler should never be called in production mode");
  injectorProfiler({
    type: 0,
    context: getInjectorProfilerContext(),
    service: { token, value, flags }
  });
}
function runInInjectorProfilerContext(injector, token, callback) {
  !ngDevMode && throwError2("runInInjectorProfilerContext should never be called in production mode");
  const prevInjectContext = setInjectorProfilerContext({ injector, token });
  try {
    callback();
  } finally {
    setInjectorProfilerContext(prevInjectContext);
  }
}
var _THROW_IF_NOT_FOUND = {};
var THROW_IF_NOT_FOUND = _THROW_IF_NOT_FOUND;
var DI_DECORATOR_FLAG = "__NG_DI_FLAG__";
var NG_TEMP_TOKEN_PATH = "ngTempTokenPath";
var NG_TOKEN_PATH = "ngTokenPath";
var NEW_LINE = /\n/gm;
var NO_NEW_LINE = "\u0275";
var SOURCE = "__source";
var _currentInjector = void 0;
function getCurrentInjector() {
  return _currentInjector;
}
function setCurrentInjector(injector) {
  const former = _currentInjector;
  _currentInjector = injector;
  return former;
}
function injectInjectorOnly(token, flags = InjectFlags.Default) {
  if (_currentInjector === void 0) {
    throw new RuntimeError(-203, ngDevMode && `inject() must be called from an injection context such as a constructor, a factory function, a field initializer, or a function used with \`runInInjectionContext\`.`);
  } else if (_currentInjector === null) {
    return injectRootLimpMode(token, void 0, flags);
  } else {
    const value = _currentInjector.get(token, flags & InjectFlags.Optional ? null : void 0, flags);
    ngDevMode && emitInjectEvent(token, value, flags);
    return value;
  }
}
function \u0275\u0275inject(token, flags = InjectFlags.Default) {
  return (getInjectImplementation() || injectInjectorOnly)(resolveForwardRef(token), flags);
}
function \u0275\u0275invalidFactoryDep(index) {
  throw new RuntimeError(202, ngDevMode && `This constructor is not compatible with Angular Dependency Injection because its dependency at index ${index} of the parameter list is invalid.
This can happen if the dependency type is a primitive like a string or if an ancestor of this class is missing an Angular decorator.

Please check that 1) the type for the parameter at index ${index} is correct and 2) the correct Angular decorators are defined for this class and its ancestors.`);
}
function inject(token, flags = InjectFlags.Default) {
  return \u0275\u0275inject(token, convertToBitFlags(flags));
}
function convertToBitFlags(flags) {
  if (typeof flags === "undefined" || typeof flags === "number") {
    return flags;
  }
  return 0 | // comment to force a line break in the formatter
  (flags.optional && 8) | (flags.host && 1) | (flags.self && 2) | (flags.skipSelf && 4);
}
function injectArgs(types) {
  const args = [];
  for (let i = 0; i < types.length; i++) {
    const arg = resolveForwardRef(types[i]);
    if (Array.isArray(arg)) {
      if (arg.length === 0) {
        throw new RuntimeError(900, ngDevMode && "Arguments array must have arguments.");
      }
      let type = void 0;
      let flags = InjectFlags.Default;
      for (let j = 0; j < arg.length; j++) {
        const meta = arg[j];
        const flag = getInjectFlag(meta);
        if (typeof flag === "number") {
          if (flag === -1) {
            type = meta.token;
          } else {
            flags |= flag;
          }
        } else {
          type = meta;
        }
      }
      args.push(\u0275\u0275inject(type, flags));
    } else {
      args.push(\u0275\u0275inject(arg));
    }
  }
  return args;
}
function attachInjectFlag(decorator, flag) {
  decorator[DI_DECORATOR_FLAG] = flag;
  decorator.prototype[DI_DECORATOR_FLAG] = flag;
  return decorator;
}
function getInjectFlag(token) {
  return token[DI_DECORATOR_FLAG];
}
function catchInjectorError(e, token, injectorErrorName, source) {
  const tokenPath = e[NG_TEMP_TOKEN_PATH];
  if (token[SOURCE]) {
    tokenPath.unshift(token[SOURCE]);
  }
  e.message = formatError("\n" + e.message, tokenPath, injectorErrorName, source);
  e[NG_TOKEN_PATH] = tokenPath;
  e[NG_TEMP_TOKEN_PATH] = null;
  throw e;
}
function formatError(text, obj, injectorErrorName, source = null) {
  text = text && text.charAt(0) === "\n" && text.charAt(1) == NO_NEW_LINE ? text.slice(2) : text;
  let context2 = stringify(obj);
  if (Array.isArray(obj)) {
    context2 = obj.map(stringify).join(" -> ");
  } else if (typeof obj === "object") {
    let parts = [];
    for (let key in obj) {
      if (obj.hasOwnProperty(key)) {
        let value = obj[key];
        parts.push(key + ":" + (typeof value === "string" ? JSON.stringify(value) : stringify(value)));
      }
    }
    context2 = `{${parts.join(", ")}}`;
  }
  return `${injectorErrorName}${source ? "(" + source + ")" : ""}[${context2}]: ${text.replace(NEW_LINE, "\n  ")}`;
}
function noSideEffects(fn) {
  return { toString: fn }.toString();
}
var ChangeDetectionStrategy;
(function(ChangeDetectionStrategy2) {
  ChangeDetectionStrategy2[ChangeDetectionStrategy2["OnPush"] = 0] = "OnPush";
  ChangeDetectionStrategy2[ChangeDetectionStrategy2["Default"] = 1] = "Default";
})(ChangeDetectionStrategy || (ChangeDetectionStrategy = {}));
var ViewEncapsulation$1;
(function(ViewEncapsulation2) {
  ViewEncapsulation2[ViewEncapsulation2["Emulated"] = 0] = "Emulated";
  ViewEncapsulation2[ViewEncapsulation2["None"] = 2] = "None";
  ViewEncapsulation2[ViewEncapsulation2["ShadowDom"] = 3] = "ShadowDom";
})(ViewEncapsulation$1 || (ViewEncapsulation$1 = {}));
var EMPTY_OBJ = {};
var EMPTY_ARRAY = [];
if ((typeof ngDevMode === "undefined" || ngDevMode) && initNgDevMode()) {
  Object.freeze(EMPTY_OBJ);
  Object.freeze(EMPTY_ARRAY);
}
function classIndexOf(className, classToSearch, startingIndex) {
  ngDevMode && assertNotEqual(classToSearch, "", 'can not look for "" string.');
  let end = className.length;
  while (true) {
    const foundIndex = className.indexOf(classToSearch, startingIndex);
    if (foundIndex === -1)
      return foundIndex;
    if (foundIndex === 0 || className.charCodeAt(foundIndex - 1) <= 32) {
      const length = classToSearch.length;
      if (foundIndex + length === end || className.charCodeAt(foundIndex + length) <= 32) {
        return foundIndex;
      }
    }
    startingIndex = foundIndex + 1;
  }
}
function setUpAttributes(renderer, native, attrs) {
  let i = 0;
  while (i < attrs.length) {
    const value = attrs[i];
    if (typeof value === "number") {
      if (value !== 0) {
        break;
      }
      i++;
      const namespaceURI = attrs[i++];
      const attrName = attrs[i++];
      const attrVal = attrs[i++];
      ngDevMode && ngDevMode.rendererSetAttribute++;
      renderer.setAttribute(native, attrName, attrVal, namespaceURI);
    } else {
      const attrName = value;
      const attrVal = attrs[++i];
      ngDevMode && ngDevMode.rendererSetAttribute++;
      if (isAnimationProp(attrName)) {
        renderer.setProperty(native, attrName, attrVal);
      } else {
        renderer.setAttribute(native, attrName, attrVal);
      }
      i++;
    }
  }
  return i;
}
function isNameOnlyAttributeMarker(marker) {
  return marker === 3 || marker === 4 || marker === 6;
}
function isAnimationProp(name) {
  return name.charCodeAt(0) === 64;
}
function mergeHostAttrs(dst, src) {
  if (src === null || src.length === 0) {
  } else if (dst === null || dst.length === 0) {
    dst = src.slice();
  } else {
    let srcMarker = -1;
    for (let i = 0; i < src.length; i++) {
      const item = src[i];
      if (typeof item === "number") {
        srcMarker = item;
      } else {
        if (srcMarker === 0) {
        } else if (srcMarker === -1 || srcMarker === 2) {
          mergeHostAttribute(dst, srcMarker, item, null, src[++i]);
        } else {
          mergeHostAttribute(dst, srcMarker, item, null, null);
        }
      }
    }
  }
  return dst;
}
function mergeHostAttribute(dst, marker, key1, key2, value) {
  let i = 0;
  let markerInsertPosition = dst.length;
  if (marker === -1) {
    markerInsertPosition = -1;
  } else {
    while (i < dst.length) {
      const dstValue = dst[i++];
      if (typeof dstValue === "number") {
        if (dstValue === marker) {
          markerInsertPosition = -1;
          break;
        } else if (dstValue > marker) {
          markerInsertPosition = i - 1;
          break;
        }
      }
    }
  }
  while (i < dst.length) {
    const item = dst[i];
    if (typeof item === "number") {
      break;
    } else if (item === key1) {
      if (key2 === null) {
        if (value !== null) {
          dst[i + 1] = value;
        }
        return;
      } else if (key2 === dst[i + 1]) {
        dst[i + 2] = value;
        return;
      }
    }
    i++;
    if (key2 !== null)
      i++;
    if (value !== null)
      i++;
  }
  if (markerInsertPosition !== -1) {
    dst.splice(markerInsertPosition, 0, marker);
    i = markerInsertPosition + 1;
  }
  dst.splice(i++, 0, key1);
  if (key2 !== null) {
    dst.splice(i++, 0, key2);
  }
  if (value !== null) {
    dst.splice(i++, 0, value);
  }
}
var NG_TEMPLATE_SELECTOR = "ng-template";
function isCssClassMatching(attrs, cssClassToMatch, isProjectionMode) {
  ngDevMode && assertEqual(cssClassToMatch, cssClassToMatch.toLowerCase(), "Class name expected to be lowercase.");
  let i = 0;
  let isImplicitAttrsSection = true;
  while (i < attrs.length) {
    let item = attrs[i++];
    if (typeof item === "string" && isImplicitAttrsSection) {
      const value = attrs[i++];
      if (isProjectionMode && item === "class") {
        if (classIndexOf(value.toLowerCase(), cssClassToMatch, 0) !== -1) {
          return true;
        }
      }
    } else if (item === 1) {
      while (i < attrs.length && typeof (item = attrs[i++]) == "string") {
        if (item.toLowerCase() === cssClassToMatch)
          return true;
      }
      return false;
    } else if (typeof item === "number") {
      isImplicitAttrsSection = false;
    }
  }
  return false;
}
function isInlineTemplate(tNode) {
  return tNode.type === 4 && tNode.value !== NG_TEMPLATE_SELECTOR;
}
function hasTagAndTypeMatch(tNode, currentSelector, isProjectionMode) {
  const tagNameToCompare = tNode.type === 4 && !isProjectionMode ? NG_TEMPLATE_SELECTOR : tNode.value;
  return currentSelector === tagNameToCompare;
}
function isNodeMatchingSelector(tNode, selector, isProjectionMode) {
  ngDevMode && assertDefined(selector[0], "Selector should have a tag name");
  let mode = 4;
  const nodeAttrs = tNode.attrs || [];
  const nameOnlyMarkerIdx = getNameOnlyMarkerIndex(nodeAttrs);
  let skipToNextSelector = false;
  for (let i = 0; i < selector.length; i++) {
    const current = selector[i];
    if (typeof current === "number") {
      if (!skipToNextSelector && !isPositive(mode) && !isPositive(current)) {
        return false;
      }
      if (skipToNextSelector && isPositive(current))
        continue;
      skipToNextSelector = false;
      mode = current | mode & 1;
      continue;
    }
    if (skipToNextSelector)
      continue;
    if (mode & 4) {
      mode = 2 | mode & 1;
      if (current !== "" && !hasTagAndTypeMatch(tNode, current, isProjectionMode) || current === "" && selector.length === 1) {
        if (isPositive(mode))
          return false;
        skipToNextSelector = true;
      }
    } else {
      const selectorAttrValue = mode & 8 ? current : selector[++i];
      if (mode & 8 && tNode.attrs !== null) {
        if (!isCssClassMatching(tNode.attrs, selectorAttrValue, isProjectionMode)) {
          if (isPositive(mode))
            return false;
          skipToNextSelector = true;
        }
        continue;
      }
      const attrName = mode & 8 ? "class" : current;
      const attrIndexInNode = findAttrIndexInNode(attrName, nodeAttrs, isInlineTemplate(tNode), isProjectionMode);
      if (attrIndexInNode === -1) {
        if (isPositive(mode))
          return false;
        skipToNextSelector = true;
        continue;
      }
      if (selectorAttrValue !== "") {
        let nodeAttrValue;
        if (attrIndexInNode > nameOnlyMarkerIdx) {
          nodeAttrValue = "";
        } else {
          ngDevMode && assertNotEqual(nodeAttrs[attrIndexInNode], 0, "We do not match directives on namespaced attributes");
          nodeAttrValue = nodeAttrs[attrIndexInNode + 1].toLowerCase();
        }
        const compareAgainstClassName = mode & 8 ? nodeAttrValue : null;
        if (compareAgainstClassName && classIndexOf(compareAgainstClassName, selectorAttrValue, 0) !== -1 || mode & 2 && selectorAttrValue !== nodeAttrValue) {
          if (isPositive(mode))
            return false;
          skipToNextSelector = true;
        }
      }
    }
  }
  return isPositive(mode) || skipToNextSelector;
}
function isPositive(mode) {
  return (mode & 1) === 0;
}
function findAttrIndexInNode(name, attrs, isInlineTemplate2, isProjectionMode) {
  if (attrs === null)
    return -1;
  let i = 0;
  if (isProjectionMode || !isInlineTemplate2) {
    let bindingsMode = false;
    while (i < attrs.length) {
      const maybeAttrName = attrs[i];
      if (maybeAttrName === name) {
        return i;
      } else if (maybeAttrName === 3 || maybeAttrName === 6) {
        bindingsMode = true;
      } else if (maybeAttrName === 1 || maybeAttrName === 2) {
        let value = attrs[++i];
        while (typeof value === "string") {
          value = attrs[++i];
        }
        continue;
      } else if (maybeAttrName === 4) {
        break;
      } else if (maybeAttrName === 0) {
        i += 4;
        continue;
      }
      i += bindingsMode ? 1 : 2;
    }
    return -1;
  } else {
    return matchTemplateAttribute(attrs, name);
  }
}
function isNodeMatchingSelectorList(tNode, selector, isProjectionMode = false) {
  for (let i = 0; i < selector.length; i++) {
    if (isNodeMatchingSelector(tNode, selector[i], isProjectionMode)) {
      return true;
    }
  }
  return false;
}
function getProjectAsAttrValue(tNode) {
  const nodeAttrs = tNode.attrs;
  if (nodeAttrs != null) {
    const ngProjectAsAttrIdx = nodeAttrs.indexOf(
      5
      /* AttributeMarker.ProjectAs */
    );
    if ((ngProjectAsAttrIdx & 1) === 0) {
      return nodeAttrs[ngProjectAsAttrIdx + 1];
    }
  }
  return null;
}
function getNameOnlyMarkerIndex(nodeAttrs) {
  for (let i = 0; i < nodeAttrs.length; i++) {
    const nodeAttr = nodeAttrs[i];
    if (isNameOnlyAttributeMarker(nodeAttr)) {
      return i;
    }
  }
  return nodeAttrs.length;
}
function matchTemplateAttribute(attrs, name) {
  let i = attrs.indexOf(
    4
    /* AttributeMarker.Template */
  );
  if (i > -1) {
    i++;
    while (i < attrs.length) {
      const attr = attrs[i];
      if (typeof attr === "number")
        return -1;
      if (attr === name)
        return i;
      i++;
    }
  }
  return -1;
}
function isSelectorInSelectorList(selector, list) {
  selectorListLoop:
    for (let i = 0; i < list.length; i++) {
      const currentSelectorInList = list[i];
      if (selector.length !== currentSelectorInList.length) {
        continue;
      }
      for (let j = 0; j < selector.length; j++) {
        if (selector[j] !== currentSelectorInList[j]) {
          continue selectorListLoop;
        }
      }
      return true;
    }
  return false;
}
function maybeWrapInNotSelector(isNegativeMode, chunk) {
  return isNegativeMode ? ":not(" + chunk.trim() + ")" : chunk;
}
function stringifyCSSSelector(selector) {
  let result = selector[0];
  let i = 1;
  let mode = 2;
  let currentChunk = "";
  let isNegativeMode = false;
  while (i < selector.length) {
    let valueOrMarker = selector[i];
    if (typeof valueOrMarker === "string") {
      if (mode & 2) {
        const attrValue = selector[++i];
        currentChunk += "[" + valueOrMarker + (attrValue.length > 0 ? '="' + attrValue + '"' : "") + "]";
      } else if (mode & 8) {
        currentChunk += "." + valueOrMarker;
      } else if (mode & 4) {
        currentChunk += " " + valueOrMarker;
      }
    } else {
      if (currentChunk !== "" && !isPositive(valueOrMarker)) {
        result += maybeWrapInNotSelector(isNegativeMode, currentChunk);
        currentChunk = "";
      }
      mode = valueOrMarker;
      isNegativeMode = isNegativeMode || !isPositive(mode);
    }
    i++;
  }
  if (currentChunk !== "") {
    result += maybeWrapInNotSelector(isNegativeMode, currentChunk);
  }
  return result;
}
function stringifyCSSSelectorList(selectorList) {
  return selectorList.map(stringifyCSSSelector).join(",");
}
function extractAttrsAndClassesFromSelector(selector) {
  const attrs = [];
  const classes = [];
  let i = 1;
  let mode = 2;
  while (i < selector.length) {
    let valueOrMarker = selector[i];
    if (typeof valueOrMarker === "string") {
      if (mode === 2) {
        if (valueOrMarker !== "") {
          attrs.push(valueOrMarker, selector[++i]);
        }
      } else if (mode === 8) {
        classes.push(valueOrMarker);
      }
    } else {
      if (!isPositive(mode))
        break;
      mode = valueOrMarker;
    }
    i++;
  }
  return { attrs, classes };
}
function \u0275\u0275defineComponent(componentDefinition) {
  return noSideEffects(() => {
    (typeof ngDevMode === "undefined" || ngDevMode) && initNgDevMode();
    const baseDef = getNgDirectiveDef(componentDefinition);
    const def = __spreadProps(__spreadValues({}, baseDef), {
      decls: componentDefinition.decls,
      vars: componentDefinition.vars,
      template: componentDefinition.template,
      consts: componentDefinition.consts || null,
      ngContentSelectors: componentDefinition.ngContentSelectors,
      onPush: componentDefinition.changeDetection === ChangeDetectionStrategy.OnPush,
      directiveDefs: null,
      pipeDefs: null,
      dependencies: baseDef.standalone && componentDefinition.dependencies || null,
      getStandaloneInjector: null,
      signals: componentDefinition.signals ?? false,
      data: componentDefinition.data || {},
      encapsulation: componentDefinition.encapsulation || ViewEncapsulation$1.Emulated,
      styles: componentDefinition.styles || EMPTY_ARRAY,
      _: null,
      schemas: componentDefinition.schemas || null,
      tView: null,
      id: ""
    });
    initFeatures(def);
    const dependencies = componentDefinition.dependencies;
    def.directiveDefs = extractDefListOrFactory(
      dependencies,
      /* pipeDef */
      false
    );
    def.pipeDefs = extractDefListOrFactory(
      dependencies,
      /* pipeDef */
      true
    );
    def.id = getComponentId(def);
    return def;
  });
}
function extractDirectiveDef(type) {
  return getComponentDef(type) || getDirectiveDef(type);
}
function nonNull(value) {
  return value !== null;
}
function \u0275\u0275defineNgModule(def) {
  return noSideEffects(() => {
    const res = {
      type: def.type,
      bootstrap: def.bootstrap || EMPTY_ARRAY,
      declarations: def.declarations || EMPTY_ARRAY,
      imports: def.imports || EMPTY_ARRAY,
      exports: def.exports || EMPTY_ARRAY,
      transitiveCompileScopes: null,
      schemas: def.schemas || null,
      id: def.id || null
    };
    return res;
  });
}
function invertObject(obj, secondary) {
  if (obj == null)
    return EMPTY_OBJ;
  const newLookup = {};
  for (const minifiedKey in obj) {
    if (obj.hasOwnProperty(minifiedKey)) {
      let publicName = obj[minifiedKey];
      let declaredName = publicName;
      if (Array.isArray(publicName)) {
        declaredName = publicName[1];
        publicName = publicName[0];
      }
      newLookup[publicName] = minifiedKey;
      if (secondary) {
        secondary[publicName] = declaredName;
      }
    }
  }
  return newLookup;
}
function \u0275\u0275defineDirective(directiveDefinition) {
  return noSideEffects(() => {
    const def = getNgDirectiveDef(directiveDefinition);
    initFeatures(def);
    return def;
  });
}
function \u0275\u0275definePipe(pipeDef) {
  return {
    type: pipeDef.type,
    name: pipeDef.name,
    factory: null,
    pure: pipeDef.pure !== false,
    standalone: pipeDef.standalone === true,
    onDestroy: pipeDef.type.prototype.ngOnDestroy || null
  };
}
function getComponentDef(type) {
  return type[NG_COMP_DEF] || null;
}
function getDirectiveDef(type) {
  return type[NG_DIR_DEF] || null;
}
function getPipeDef$1(type) {
  return type[NG_PIPE_DEF] || null;
}
function isStandalone(type) {
  const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef$1(type);
  return def !== null ? def.standalone : false;
}
function getNgModuleDef(type, throwNotFound) {
  const ngModuleDef = type[NG_MOD_DEF] || null;
  if (!ngModuleDef && throwNotFound === true) {
    throw new Error(`Type ${stringify(type)} does not have '\u0275mod' property.`);
  }
  return ngModuleDef;
}
function getNgDirectiveDef(directiveDefinition) {
  const declaredInputs = {};
  return {
    type: directiveDefinition.type,
    providersResolver: null,
    factory: null,
    hostBindings: directiveDefinition.hostBindings || null,
    hostVars: directiveDefinition.hostVars || 0,
    hostAttrs: directiveDefinition.hostAttrs || null,
    contentQueries: directiveDefinition.contentQueries || null,
    declaredInputs,
    inputTransforms: null,
    inputConfig: directiveDefinition.inputs || EMPTY_OBJ,
    exportAs: directiveDefinition.exportAs || null,
    standalone: directiveDefinition.standalone === true,
    signals: directiveDefinition.signals === true,
    selectors: directiveDefinition.selectors || EMPTY_ARRAY,
    viewQuery: directiveDefinition.viewQuery || null,
    features: directiveDefinition.features || null,
    setInput: null,
    findHostDirectiveDefs: null,
    hostDirectives: null,
    inputs: invertObject(directiveDefinition.inputs, declaredInputs),
    outputs: invertObject(directiveDefinition.outputs),
    debugInfo: null
  };
}
function initFeatures(definition) {
  definition.features?.forEach((fn) => fn(definition));
}
function extractDefListOrFactory(dependencies, pipeDef) {
  if (!dependencies) {
    return null;
  }
  const defExtractor = pipeDef ? getPipeDef$1 : extractDirectiveDef;
  return () => (typeof dependencies === "function" ? dependencies() : dependencies).map((dep) => defExtractor(dep)).filter(nonNull);
}
var GENERATED_COMP_IDS = /* @__PURE__ */ new Map();
function getComponentId(componentDef) {
  let hash = 0;
  const hashSelectors = [
    componentDef.selectors,
    componentDef.ngContentSelectors,
    componentDef.hostVars,
    componentDef.hostAttrs,
    componentDef.consts,
    componentDef.vars,
    componentDef.decls,
    componentDef.encapsulation,
    componentDef.standalone,
    componentDef.signals,
    componentDef.exportAs,
    JSON.stringify(componentDef.inputs),
    JSON.stringify(componentDef.outputs),
    // We cannot use 'componentDef.type.name' as the name of the symbol will change and will not
    // match in the server and browser bundles.
    Object.getOwnPropertyNames(componentDef.type.prototype),
    !!componentDef.contentQueries,
    !!componentDef.viewQuery
  ].join("|");
  for (const char of hashSelectors) {
    hash = Math.imul(31, hash) + char.charCodeAt(0) << 0;
  }
  hash += 2147483647 + 1;
  const compId = "c" + hash;
  if (typeof ngDevMode === "undefined" || ngDevMode) {
    if (GENERATED_COMP_IDS.has(compId)) {
      const previousCompDefType = GENERATED_COMP_IDS.get(compId);
      if (previousCompDefType !== componentDef.type) {
        console.warn(formatRuntimeError(-912, `Component ID generation collision detected. Components '${previousCompDefType.name}' and '${componentDef.type.name}' with selector '${stringifyCSSSelectorList(componentDef.selectors)}' generated the same component ID. To fix this, you can change the selector of one of those components or add an extra host attribute to force a different ID.`));
      }
    } else {
      GENERATED_COMP_IDS.set(compId, componentDef.type);
    }
  }
  return compId;
}
var HOST = 0;
var TVIEW = 1;
var FLAGS = 2;
var PARENT = 3;
var NEXT = 4;
var T_HOST = 5;
var HYDRATION = 6;
var CLEANUP = 7;
var CONTEXT = 8;
var INJECTOR$1 = 9;
var ENVIRONMENT = 10;
var RENDERER = 11;
var CHILD_HEAD = 12;
var CHILD_TAIL = 13;
var DECLARATION_VIEW = 14;
var DECLARATION_COMPONENT_VIEW = 15;
var DECLARATION_LCONTAINER = 16;
var PREORDER_HOOK_FLAGS = 17;
var QUERIES = 18;
var ID = 19;
var EMBEDDED_VIEW_INJECTOR = 20;
var ON_DESTROY_HOOKS = 21;
var EFFECTS_TO_SCHEDULE = 22;
var REACTIVE_TEMPLATE_CONSUMER = 23;
var HEADER_OFFSET = 25;
var TYPE = 1;
var NATIVE = 7;
var VIEW_REFS = 8;
var MOVED_VIEWS = 9;
var CONTAINER_HEADER_OFFSET = 10;
var LContainerFlags;
(function(LContainerFlags2) {
  LContainerFlags2[LContainerFlags2["None"] = 0] = "None";
  LContainerFlags2[LContainerFlags2["HasTransplantedViews"] = 2] = "HasTransplantedViews";
  LContainerFlags2[LContainerFlags2["HasChildViewsToRefresh"] = 4] = "HasChildViewsToRefresh";
})(LContainerFlags || (LContainerFlags = {}));
function isLView(value) {
  return Array.isArray(value) && typeof value[TYPE] === "object";
}
function isLContainer(value) {
  return Array.isArray(value) && value[TYPE] === true;
}
function isContentQueryHost(tNode) {
  return (tNode.flags & 4) !== 0;
}
function isComponentHost(tNode) {
  return tNode.componentOffset > -1;
}
function isDirectiveHost(tNode) {
  return (tNode.flags & 1) === 1;
}
function isComponentDef(def) {
  return !!def.template;
}
function isRootView(target) {
  return (target[FLAGS] & 512) !== 0;
}
function isDestroyed(lView) {
  return (lView[FLAGS] & 256) === 256;
}
function assertTNodeForLView(tNode, lView) {
  assertTNodeForTView(tNode, lView[TVIEW]);
}
function assertTNodeForTView(tNode, tView) {
  assertTNode(tNode);
  const tData = tView.data;
  for (let i = HEADER_OFFSET; i < tData.length; i++) {
    if (tData[i] === tNode) {
      return;
    }
  }
  throwError2("This TNode does not belong to this TView.");
}
function assertTNode(tNode) {
  assertDefined(tNode, "TNode must be defined");
  if (!(tNode && typeof tNode === "object" && tNode.hasOwnProperty("directiveStylingLast"))) {
    throwError2("Not of type TNode, got: " + tNode);
  }
}
function assertTIcu(tIcu) {
  assertDefined(tIcu, "Expected TIcu to be defined");
  if (!(typeof tIcu.currentCaseLViewIndex === "number")) {
    throwError2("Object is not of TIcu type.");
  }
}
function assertComponentType(actual, msg = "Type passed in is not ComponentType, it does not have '\u0275cmp' property.") {
  if (!getComponentDef(actual)) {
    throwError2(msg);
  }
}
function assertNgModuleType(actual, msg = "Type passed in is not NgModuleType, it does not have '\u0275mod' property.") {
  if (!getNgModuleDef(actual)) {
    throwError2(msg);
  }
}
function assertHasParent(tNode) {
  assertDefined(tNode, "currentTNode should exist!");
  assertDefined(tNode.parent, "currentTNode should have a parent");
}
function assertLContainer(value) {
  assertDefined(value, "LContainer must be defined");
  assertEqual(isLContainer(value), true, "Expecting LContainer");
}
function assertLViewOrUndefined(value) {
  value && assertEqual(isLView(value), true, "Expecting LView or undefined or null");
}
function assertLView(value) {
  assertDefined(value, "LView must be defined");
  assertEqual(isLView(value), true, "Expecting LView");
}
function assertFirstCreatePass(tView, errMessage) {
  assertEqual(tView.firstCreatePass, true, errMessage || "Should only be called in first create pass.");
}
function assertFirstUpdatePass(tView, errMessage) {
  assertEqual(tView.firstUpdatePass, true, errMessage || "Should only be called in first update pass.");
}
function assertDirectiveDef(obj) {
  if (obj.type === void 0 || obj.selectors == void 0 || obj.inputs === void 0) {
    throwError2(`Expected a DirectiveDef/ComponentDef and this object does not seem to have the expected shape.`);
  }
}
function assertIndexInDeclRange(tView, index) {
  assertBetween(HEADER_OFFSET, tView.bindingStartIndex, index);
}
function assertIndexInExpandoRange(lView, index) {
  const tView = lView[1];
  assertBetween(tView.expandoStartIndex, lView.length, index);
}
function assertBetween(lower, upper, index) {
  if (!(lower <= index && index < upper)) {
    throwError2(`Index out of range (expecting ${lower} <= ${index} < ${upper})`);
  }
}
function assertProjectionSlots(lView, errMessage) {
  assertDefined(lView[DECLARATION_COMPONENT_VIEW], "Component views should exist.");
  assertDefined(lView[DECLARATION_COMPONENT_VIEW][T_HOST].projection, errMessage || "Components with projection nodes (<ng-content>) must have projection slots defined.");
}
function assertParentView(lView, errMessage) {
  assertDefined(lView, errMessage || "Component views should always have a parent view (component's host view)");
}
function assertNoDuplicateDirectives(directives) {
  if (directives.length < 2) {
    return;
  }
  const seenDirectives = /* @__PURE__ */ new Set();
  for (const current of directives) {
    if (seenDirectives.has(current)) {
      throw new RuntimeError(309, `Directive ${current.type.name} matches multiple times on the same element. Directives can only match an element once.`);
    }
    seenDirectives.add(current);
  }
}
function assertNodeInjector(lView, injectorIndex) {
  assertIndexInExpandoRange(lView, injectorIndex);
  assertIndexInExpandoRange(
    lView,
    injectorIndex + 8
    /* NodeInjectorOffset.PARENT */
  );
  assertNumber(lView[injectorIndex + 0], "injectorIndex should point to a bloom filter");
  assertNumber(lView[injectorIndex + 1], "injectorIndex should point to a bloom filter");
  assertNumber(lView[injectorIndex + 2], "injectorIndex should point to a bloom filter");
  assertNumber(lView[injectorIndex + 3], "injectorIndex should point to a bloom filter");
  assertNumber(lView[injectorIndex + 4], "injectorIndex should point to a bloom filter");
  assertNumber(lView[injectorIndex + 5], "injectorIndex should point to a bloom filter");
  assertNumber(lView[injectorIndex + 6], "injectorIndex should point to a bloom filter");
  assertNumber(lView[injectorIndex + 7], "injectorIndex should point to a bloom filter");
  assertNumber(lView[
    injectorIndex + 8
    /* NodeInjectorOffset.PARENT */
  ], "injectorIndex should point to parent injector");
}
function getFactoryDef(type, throwNotFound) {
  const hasFactoryDef = type.hasOwnProperty(NG_FACTORY_DEF);
  if (!hasFactoryDef && throwNotFound === true && ngDevMode) {
    throw new Error(`Type ${stringify(type)} does not have '\u0275fac' property.`);
  }
  return hasFactoryDef ? type[NG_FACTORY_DEF] : null;
}
var SimpleChange = class {
  constructor(previousValue, currentValue, firstChange) {
    this.previousValue = previousValue;
    this.currentValue = currentValue;
    this.firstChange = firstChange;
  }
  /**
   * Check whether the new value is the first value assigned.
   */
  isFirstChange() {
    return this.firstChange;
  }
};
function \u0275\u0275NgOnChangesFeature() {
  return NgOnChangesFeatureImpl;
}
function NgOnChangesFeatureImpl(definition) {
  if (definition.type.prototype.ngOnChanges) {
    definition.setInput = ngOnChangesSetInput;
  }
  return rememberChangeHistoryAndInvokeOnChangesHook;
}
\u0275\u0275NgOnChangesFeature.ngInherit = true;
function rememberChangeHistoryAndInvokeOnChangesHook() {
  const simpleChangesStore = getSimpleChangesStore(this);
  const current = simpleChangesStore?.current;
  if (current) {
    const previous = simpleChangesStore.previous;
    if (previous === EMPTY_OBJ) {
      simpleChangesStore.previous = current;
    } else {
      for (let key in current) {
        previous[key] = current[key];
      }
    }
    simpleChangesStore.current = null;
    this.ngOnChanges(current);
  }
}
function ngOnChangesSetInput(instance, value, publicName, privateName) {
  const declaredName = this.declaredInputs[publicName];
  ngDevMode && assertString(declaredName, "Name of input in ngOnChanges has to be a string");
  const simpleChangesStore = getSimpleChangesStore(instance) || setSimpleChangesStore(instance, { previous: EMPTY_OBJ, current: null });
  const current = simpleChangesStore.current || (simpleChangesStore.current = {});
  const previous = simpleChangesStore.previous;
  const previousChange = previous[declaredName];
  current[declaredName] = new SimpleChange(previousChange && previousChange.currentValue, value, previous === EMPTY_OBJ);
  instance[privateName] = value;
}
var SIMPLE_CHANGES_STORE = "__ngSimpleChanges__";
function getSimpleChangesStore(instance) {
  return instance[SIMPLE_CHANGES_STORE] || null;
}
function setSimpleChangesStore(instance, store2) {
  return instance[SIMPLE_CHANGES_STORE] = store2;
}
var profilerCallback = null;
var setProfiler = (profiler2) => {
  profilerCallback = profiler2;
};
var profiler = function(event, instance, hookOrListener) {
  if (profilerCallback != null) {
    profilerCallback(event, instance, hookOrListener);
  }
};
var SVG_NAMESPACE = "svg";
var MATH_ML_NAMESPACE = "math";
function unwrapRNode(value) {
  while (Array.isArray(value)) {
    value = value[HOST];
  }
  return value;
}
function unwrapLView(value) {
  while (Array.isArray(value)) {
    if (typeof value[TYPE] === "object")
      return value;
    value = value[HOST];
  }
  return null;
}
function getNativeByIndex(index, lView) {
  ngDevMode && assertIndexInRange(lView, index);
  ngDevMode && assertGreaterThanOrEqual(index, HEADER_OFFSET, "Expected to be past HEADER_OFFSET");
  return unwrapRNode(lView[index]);
}
function getNativeByTNode(tNode, lView) {
  ngDevMode && assertTNodeForLView(tNode, lView);
  ngDevMode && assertIndexInRange(lView, tNode.index);
  const node = unwrapRNode(lView[tNode.index]);
  return node;
}
function getTNode(tView, index) {
  ngDevMode && assertGreaterThan(index, -1, "wrong index for TNode");
  ngDevMode && assertLessThan(index, tView.data.length, "wrong index for TNode");
  const tNode = tView.data[index];
  ngDevMode && tNode !== null && assertTNode(tNode);
  return tNode;
}
function load(view, index) {
  ngDevMode && assertIndexInRange(view, index);
  return view[index];
}
function getComponentLViewByIndex(nodeIndex, hostView) {
  ngDevMode && assertIndexInRange(hostView, nodeIndex);
  const slotValue = hostView[nodeIndex];
  const lView = isLView(slotValue) ? slotValue : slotValue[HOST];
  return lView;
}
function isCreationMode(view) {
  return (view[FLAGS] & 4) === 4;
}
function viewAttachedToChangeDetector(view) {
  return (view[FLAGS] & 128) === 128;
}
function viewAttachedToContainer(view) {
  return isLContainer(view[PARENT]);
}
function getConstant(consts, index) {
  if (index === null || index === void 0)
    return null;
  ngDevMode && assertIndexInRange(consts, index);
  return consts[index];
}
function resetPreOrderHookFlags(lView) {
  lView[PREORDER_HOOK_FLAGS] = 0;
}
function markViewForRefresh(lView) {
  if (lView[FLAGS] & 1024) {
    return;
  }
  lView[FLAGS] |= 1024;
  if (viewAttachedToChangeDetector(lView)) {
    markAncestorsForTraversal(lView);
  }
}
function walkUpViews(nestingLevel, currentView) {
  while (nestingLevel > 0) {
    ngDevMode && assertDefined(currentView[DECLARATION_VIEW], "Declaration view should be defined if nesting level is greater than 0.");
    currentView = currentView[DECLARATION_VIEW];
    nestingLevel--;
  }
  return currentView;
}
function requiresRefreshOrTraversal(lView) {
  return lView[FLAGS] & (1024 | 8192) || lView[REACTIVE_TEMPLATE_CONSUMER]?.dirty;
}
function updateAncestorTraversalFlagsOnAttach(lView) {
  if (!requiresRefreshOrTraversal(lView)) {
    return;
  }
  markAncestorsForTraversal(lView);
}
function markAncestorsForTraversal(lView) {
  let parent = lView[PARENT];
  while (parent !== null) {
    if (isLContainer(parent) && parent[FLAGS] & LContainerFlags.HasChildViewsToRefresh || isLView(parent) && parent[FLAGS] & 8192) {
      break;
    }
    if (isLContainer(parent)) {
      parent[FLAGS] |= LContainerFlags.HasChildViewsToRefresh;
    } else {
      parent[FLAGS] |= 8192;
      if (!viewAttachedToChangeDetector(parent)) {
        break;
      }
    }
    parent = parent[PARENT];
  }
}
function storeLViewOnDestroy(lView, onDestroyCallback) {
  if ((lView[FLAGS] & 256) === 256) {
    throw new RuntimeError(911, ngDevMode && "View has already been destroyed.");
  }
  if (lView[ON_DESTROY_HOOKS] === null) {
    lView[ON_DESTROY_HOOKS] = [];
  }
  lView[ON_DESTROY_HOOKS].push(onDestroyCallback);
}
function removeLViewOnDestroy(lView, onDestroyCallback) {
  if (lView[ON_DESTROY_HOOKS] === null)
    return;
  const destroyCBIdx = lView[ON_DESTROY_HOOKS].indexOf(onDestroyCallback);
  if (destroyCBIdx !== -1) {
    lView[ON_DESTROY_HOOKS].splice(destroyCBIdx, 1);
  }
}
var instructionState = {
  lFrame: createLFrame(null),
  bindingsEnabled: true,
  skipHydrationRootTNode: null
};
var _isInCheckNoChangesMode = false;
function getElementDepthCount() {
  return instructionState.lFrame.elementDepthCount;
}
function increaseElementDepthCount() {
  instructionState.lFrame.elementDepthCount++;
}
function decreaseElementDepthCount() {
  instructionState.lFrame.elementDepthCount--;
}
function getBindingsEnabled() {
  return instructionState.bindingsEnabled;
}
function isInSkipHydrationBlock$1() {
  return instructionState.skipHydrationRootTNode !== null;
}
function isSkipHydrationRootTNode(tNode) {
  return instructionState.skipHydrationRootTNode === tNode;
}
function \u0275\u0275enableBindings() {
  instructionState.bindingsEnabled = true;
}
function \u0275\u0275disableBindings() {
  instructionState.bindingsEnabled = false;
}
function leaveSkipHydrationBlock() {
  instructionState.skipHydrationRootTNode = null;
}
function getLView() {
  return instructionState.lFrame.lView;
}
function getTView() {
  return instructionState.lFrame.tView;
}
function \u0275\u0275restoreView(viewToRestore) {
  instructionState.lFrame.contextLView = viewToRestore;
  return viewToRestore[CONTEXT];
}
function \u0275\u0275resetView(value) {
  instructionState.lFrame.contextLView = null;
  return value;
}
function getCurrentTNode() {
  let currentTNode = getCurrentTNodePlaceholderOk();
  while (currentTNode !== null && currentTNode.type === 64) {
    currentTNode = currentTNode.parent;
  }
  return currentTNode;
}
function getCurrentTNodePlaceholderOk() {
  return instructionState.lFrame.currentTNode;
}
function getCurrentParentTNode() {
  const lFrame = instructionState.lFrame;
  const currentTNode = lFrame.currentTNode;
  return lFrame.isParent ? currentTNode : currentTNode.parent;
}
function setCurrentTNode(tNode, isParent) {
  ngDevMode && tNode && assertTNodeForTView(tNode, instructionState.lFrame.tView);
  const lFrame = instructionState.lFrame;
  lFrame.currentTNode = tNode;
  lFrame.isParent = isParent;
}
function isCurrentTNodeParent() {
  return instructionState.lFrame.isParent;
}
function setCurrentTNodeAsNotParent() {
  instructionState.lFrame.isParent = false;
}
function getContextLView() {
  const contextLView = instructionState.lFrame.contextLView;
  ngDevMode && assertDefined(contextLView, "contextLView must be defined.");
  return contextLView;
}
function isInCheckNoChangesMode() {
  !ngDevMode && throwError2("Must never be called in production mode");
  return _isInCheckNoChangesMode;
}
function setIsInCheckNoChangesMode(mode) {
  !ngDevMode && throwError2("Must never be called in production mode");
  _isInCheckNoChangesMode = mode;
}
function getBindingRoot() {
  const lFrame = instructionState.lFrame;
  let index = lFrame.bindingRootIndex;
  if (index === -1) {
    index = lFrame.bindingRootIndex = lFrame.tView.bindingStartIndex;
  }
  return index;
}
function getBindingIndex() {
  return instructionState.lFrame.bindingIndex;
}
function setBindingIndex(value) {
  return instructionState.lFrame.bindingIndex = value;
}
function nextBindingIndex() {
  return instructionState.lFrame.bindingIndex++;
}
function incrementBindingIndex(count) {
  const lFrame = instructionState.lFrame;
  const index = lFrame.bindingIndex;
  lFrame.bindingIndex = lFrame.bindingIndex + count;
  return index;
}
function isInI18nBlock() {
  return instructionState.lFrame.inI18n;
}
function setInI18nBlock(isInI18nBlock2) {
  instructionState.lFrame.inI18n = isInI18nBlock2;
}
function setBindingRootForHostBindings(bindingRootIndex, currentDirectiveIndex) {
  const lFrame = instructionState.lFrame;
  lFrame.bindingIndex = lFrame.bindingRootIndex = bindingRootIndex;
  setCurrentDirectiveIndex(currentDirectiveIndex);
}
function getCurrentDirectiveIndex() {
  return instructionState.lFrame.currentDirectiveIndex;
}
function setCurrentDirectiveIndex(currentDirectiveIndex) {
  instructionState.lFrame.currentDirectiveIndex = currentDirectiveIndex;
}
function getCurrentDirectiveDef(tData) {
  const currentDirectiveIndex = instructionState.lFrame.currentDirectiveIndex;
  return currentDirectiveIndex === -1 ? null : tData[currentDirectiveIndex];
}
function getCurrentQueryIndex() {
  return instructionState.lFrame.currentQueryIndex;
}
function setCurrentQueryIndex(value) {
  instructionState.lFrame.currentQueryIndex = value;
}
function getDeclarationTNode(lView) {
  const tView = lView[TVIEW];
  if (tView.type === 2) {
    ngDevMode && assertDefined(tView.declTNode, "Embedded TNodes should have declaration parents.");
    return tView.declTNode;
  }
  if (tView.type === 1) {
    return lView[T_HOST];
  }
  return null;
}
function enterDI(lView, tNode, flags) {
  ngDevMode && assertLViewOrUndefined(lView);
  if (flags & InjectFlags.SkipSelf) {
    ngDevMode && assertTNodeForTView(tNode, lView[TVIEW]);
    let parentTNode = tNode;
    let parentLView = lView;
    while (true) {
      ngDevMode && assertDefined(parentTNode, "Parent TNode should be defined");
      parentTNode = parentTNode.parent;
      if (parentTNode === null && !(flags & InjectFlags.Host)) {
        parentTNode = getDeclarationTNode(parentLView);
        if (parentTNode === null)
          break;
        ngDevMode && assertDefined(parentLView, "Parent LView should be defined");
        parentLView = parentLView[DECLARATION_VIEW];
        if (parentTNode.type & (2 | 8)) {
          break;
        }
      } else {
        break;
      }
    }
    if (parentTNode === null) {
      return false;
    } else {
      tNode = parentTNode;
      lView = parentLView;
    }
  }
  ngDevMode && assertTNodeForLView(tNode, lView);
  const lFrame = instructionState.lFrame = allocLFrame();
  lFrame.currentTNode = tNode;
  lFrame.lView = lView;
  return true;
}
function enterView(newView) {
  ngDevMode && assertNotEqual(newView[0], newView[1], "????");
  ngDevMode && assertLViewOrUndefined(newView);
  const newLFrame = allocLFrame();
  if (ngDevMode) {
    assertEqual(newLFrame.isParent, true, "Expected clean LFrame");
    assertEqual(newLFrame.lView, null, "Expected clean LFrame");
    assertEqual(newLFrame.tView, null, "Expected clean LFrame");
    assertEqual(newLFrame.selectedIndex, -1, "Expected clean LFrame");
    assertEqual(newLFrame.elementDepthCount, 0, "Expected clean LFrame");
    assertEqual(newLFrame.currentDirectiveIndex, -1, "Expected clean LFrame");
    assertEqual(newLFrame.currentNamespace, null, "Expected clean LFrame");
    assertEqual(newLFrame.bindingRootIndex, -1, "Expected clean LFrame");
    assertEqual(newLFrame.currentQueryIndex, 0, "Expected clean LFrame");
  }
  const tView = newView[TVIEW];
  instructionState.lFrame = newLFrame;
  ngDevMode && tView.firstChild && assertTNodeForTView(tView.firstChild, tView);
  newLFrame.currentTNode = tView.firstChild;
  newLFrame.lView = newView;
  newLFrame.tView = tView;
  newLFrame.contextLView = newView;
  newLFrame.bindingIndex = tView.bindingStartIndex;
  newLFrame.inI18n = false;
}
function allocLFrame() {
  const currentLFrame = instructionState.lFrame;
  const childLFrame = currentLFrame === null ? null : currentLFrame.child;
  const newLFrame = childLFrame === null ? createLFrame(currentLFrame) : childLFrame;
  return newLFrame;
}
function createLFrame(parent) {
  const lFrame = {
    currentTNode: null,
    isParent: true,
    lView: null,
    tView: null,
    selectedIndex: -1,
    contextLView: null,
    elementDepthCount: 0,
    currentNamespace: null,
    currentDirectiveIndex: -1,
    bindingRootIndex: -1,
    bindingIndex: -1,
    currentQueryIndex: 0,
    parent,
    child: null,
    inI18n: false
  };
  parent !== null && (parent.child = lFrame);
  return lFrame;
}
function leaveViewLight() {
  const oldLFrame = instructionState.lFrame;
  instructionState.lFrame = oldLFrame.parent;
  oldLFrame.currentTNode = null;
  oldLFrame.lView = null;
  return oldLFrame;
}
var leaveDI = leaveViewLight;
function leaveView() {
  const oldLFrame = leaveViewLight();
  oldLFrame.isParent = true;
  oldLFrame.tView = null;
  oldLFrame.selectedIndex = -1;
  oldLFrame.contextLView = null;
  oldLFrame.elementDepthCount = 0;
  oldLFrame.currentDirectiveIndex = -1;
  oldLFrame.currentNamespace = null;
  oldLFrame.bindingRootIndex = -1;
  oldLFrame.bindingIndex = -1;
  oldLFrame.currentQueryIndex = 0;
}
function nextContextImpl(level) {
  const contextLView = instructionState.lFrame.contextLView = walkUpViews(level, instructionState.lFrame.contextLView);
  return contextLView[CONTEXT];
}
function getSelectedIndex() {
  return instructionState.lFrame.selectedIndex;
}
function setSelectedIndex(index) {
  ngDevMode && index !== -1 && assertGreaterThanOrEqual(index, HEADER_OFFSET, "Index must be past HEADER_OFFSET (or -1).");
  ngDevMode && assertLessThan(index, instructionState.lFrame.lView.length, "Can't set index passed end of LView");
  instructionState.lFrame.selectedIndex = index;
}
function getSelectedTNode() {
  const lFrame = instructionState.lFrame;
  return getTNode(lFrame.tView, lFrame.selectedIndex);
}
function \u0275\u0275namespaceSVG() {
  instructionState.lFrame.currentNamespace = SVG_NAMESPACE;
}
function \u0275\u0275namespaceMathML() {
  instructionState.lFrame.currentNamespace = MATH_ML_NAMESPACE;
}
function \u0275\u0275namespaceHTML() {
  namespaceHTMLInternal();
}
function namespaceHTMLInternal() {
  instructionState.lFrame.currentNamespace = null;
}
function getNamespace$1() {
  return instructionState.lFrame.currentNamespace;
}
var _wasLastNodeCreated = true;
function wasLastNodeCreated() {
  return _wasLastNodeCreated;
}
function lastNodeWasCreated(flag) {
  _wasLastNodeCreated = flag;
}
function registerPreOrderHooks(directiveIndex, directiveDef, tView) {
  ngDevMode && assertFirstCreatePass(tView);
  const { ngOnChanges, ngOnInit, ngDoCheck } = directiveDef.type.prototype;
  if (ngOnChanges) {
    const wrappedOnChanges = NgOnChangesFeatureImpl(directiveDef);
    (tView.preOrderHooks ??= []).push(directiveIndex, wrappedOnChanges);
    (tView.preOrderCheckHooks ??= []).push(directiveIndex, wrappedOnChanges);
  }
  if (ngOnInit) {
    (tView.preOrderHooks ??= []).push(0 - directiveIndex, ngOnInit);
  }
  if (ngDoCheck) {
    (tView.preOrderHooks ??= []).push(directiveIndex, ngDoCheck);
    (tView.preOrderCheckHooks ??= []).push(directiveIndex, ngDoCheck);
  }
}
function registerPostOrderHooks(tView, tNode) {
  ngDevMode && assertFirstCreatePass(tView);
  for (let i = tNode.directiveStart, end = tNode.directiveEnd; i < end; i++) {
    const directiveDef = tView.data[i];
    ngDevMode && assertDefined(directiveDef, "Expecting DirectiveDef");
    const lifecycleHooks = directiveDef.type.prototype;
    const { ngAfterContentInit, ngAfterContentChecked, ngAfterViewInit, ngAfterViewChecked, ngOnDestroy } = lifecycleHooks;
    if (ngAfterContentInit) {
      (tView.contentHooks ??= []).push(-i, ngAfterContentInit);
    }
    if (ngAfterContentChecked) {
      (tView.contentHooks ??= []).push(i, ngAfterContentChecked);
      (tView.contentCheckHooks ??= []).push(i, ngAfterContentChecked);
    }
    if (ngAfterViewInit) {
      (tView.viewHooks ??= []).push(-i, ngAfterViewInit);
    }
    if (ngAfterViewChecked) {
      (tView.viewHooks ??= []).push(i, ngAfterViewChecked);
      (tView.viewCheckHooks ??= []).push(i, ngAfterViewChecked);
    }
    if (ngOnDestroy != null) {
      (tView.destroyHooks ??= []).push(i, ngOnDestroy);
    }
  }
}
function executeCheckHooks(lView, hooks, nodeIndex) {
  callHooks(lView, hooks, 3, nodeIndex);
}
function executeInitAndCheckHooks(lView, hooks, initPhase, nodeIndex) {
  ngDevMode && assertNotEqual(initPhase, 3, "Init pre-order hooks should not be called more than once");
  if ((lView[FLAGS] & 3) === initPhase) {
    callHooks(lView, hooks, initPhase, nodeIndex);
  }
}
function incrementInitPhaseFlags(lView, initPhase) {
  ngDevMode && assertNotEqual(initPhase, 3, "Init hooks phase should not be incremented after all init hooks have been run.");
  let flags = lView[FLAGS];
  if ((flags & 3) === initPhase) {
    flags &= 16383;
    flags += 1;
    lView[FLAGS] = flags;
  }
}
function callHooks(currentView, arr, initPhase, currentNodeIndex) {
  ngDevMode && assertEqual(isInCheckNoChangesMode(), false, "Hooks should never be run when in check no changes mode.");
  const startIndex = currentNodeIndex !== void 0 ? currentView[PREORDER_HOOK_FLAGS] & 65535 : 0;
  const nodeIndexLimit = currentNodeIndex != null ? currentNodeIndex : -1;
  const max = arr.length - 1;
  let lastNodeIndexFound = 0;
  for (let i = startIndex; i < max; i++) {
    const hook = arr[i + 1];
    if (typeof hook === "number") {
      lastNodeIndexFound = arr[i];
      if (currentNodeIndex != null && lastNodeIndexFound >= currentNodeIndex) {
        break;
      }
    } else {
      const isInitHook = arr[i] < 0;
      if (isInitHook) {
        currentView[PREORDER_HOOK_FLAGS] += 65536;
      }
      if (lastNodeIndexFound < nodeIndexLimit || nodeIndexLimit == -1) {
        callHook(currentView, initPhase, arr, i);
        currentView[PREORDER_HOOK_FLAGS] = (currentView[PREORDER_HOOK_FLAGS] & 4294901760) + i + 2;
      }
      i++;
    }
  }
}
function callHookInternal(directive, hook) {
  profiler(4, directive, hook);
  const prevConsumer = setActiveConsumer(null);
  try {
    hook.call(directive);
  } finally {
    setActiveConsumer(prevConsumer);
    profiler(5, directive, hook);
  }
}
function callHook(currentView, initPhase, arr, i) {
  const isInitHook = arr[i] < 0;
  const hook = arr[i + 1];
  const directiveIndex = isInitHook ? -arr[i] : arr[i];
  const directive = currentView[directiveIndex];
  if (isInitHook) {
    const indexWithintInitPhase = currentView[FLAGS] >> 14;
    if (indexWithintInitPhase < currentView[PREORDER_HOOK_FLAGS] >> 16 && (currentView[FLAGS] & 3) === initPhase) {
      currentView[FLAGS] += 16384;
      callHookInternal(directive, hook);
    }
  } else {
    callHookInternal(directive, hook);
  }
}
var NO_PARENT_INJECTOR = -1;
var NodeInjectorFactory = class {
  constructor(factory, isViewProvider, injectImplementation) {
    this.factory = factory;
    this.resolving = false;
    ngDevMode && assertDefined(factory, "Factory not specified");
    ngDevMode && assertEqual(typeof factory, "function", "Expected factory function.");
    this.canSeeViewProviders = isViewProvider;
    this.injectImpl = injectImplementation;
  }
};
function isFactory(obj) {
  return obj instanceof NodeInjectorFactory;
}
function toTNodeTypeAsString(tNodeType) {
  let text = "";
  tNodeType & 1 && (text += "|Text");
  tNodeType & 2 && (text += "|Element");
  tNodeType & 4 && (text += "|Container");
  tNodeType & 8 && (text += "|ElementContainer");
  tNodeType & 16 && (text += "|Projection");
  tNodeType & 32 && (text += "|IcuContainer");
  tNodeType & 64 && (text += "|Placeholder");
  return text.length > 0 ? text.substring(1) : text;
}
function hasClassInput(tNode) {
  return (tNode.flags & 8) !== 0;
}
function hasStyleInput(tNode) {
  return (tNode.flags & 16) !== 0;
}
function assertTNodeType(tNode, expectedTypes, message) {
  assertDefined(tNode, "should be called with a TNode");
  if ((tNode.type & expectedTypes) === 0) {
    throwError2(message || `Expected [${toTNodeTypeAsString(expectedTypes)}] but got ${toTNodeTypeAsString(tNode.type)}.`);
  }
}
function assertPureTNodeType(type) {
  if (!(type === 2 || //
  type === 1 || //
  type === 4 || //
  type === 8 || //
  type === 32 || //
  type === 16 || //
  type === 64)) {
    throwError2(`Expected TNodeType to have only a single type selected, but got ${toTNodeTypeAsString(type)}.`);
  }
}
function hasParentInjector(parentLocation) {
  return parentLocation !== NO_PARENT_INJECTOR;
}
function getParentInjectorIndex(parentLocation) {
  ngDevMode && assertNumber(parentLocation, "Number expected");
  ngDevMode && assertNotEqual(parentLocation, -1, "Not a valid state.");
  const parentInjectorIndex = parentLocation & 32767;
  ngDevMode && assertGreaterThan(parentInjectorIndex, HEADER_OFFSET, "Parent injector must be pointing past HEADER_OFFSET.");
  return parentLocation & 32767;
}
function getParentInjectorViewOffset(parentLocation) {
  return parentLocation >> 16;
}
function getParentInjectorView(location2, startView) {
  let viewOffset = getParentInjectorViewOffset(location2);
  let parentView = startView;
  while (viewOffset > 0) {
    parentView = parentView[DECLARATION_VIEW];
    viewOffset--;
  }
  return parentView;
}
var includeViewProviders = true;
function setIncludeViewProviders(v) {
  const oldValue = includeViewProviders;
  includeViewProviders = v;
  return oldValue;
}
var BLOOM_SIZE = 256;
var BLOOM_MASK = BLOOM_SIZE - 1;
var BLOOM_BUCKET_BITS = 5;
var nextNgElementId = 0;
var NOT_FOUND = {};
function bloomAdd(injectorIndex, tView, type) {
  ngDevMode && assertEqual(tView.firstCreatePass, true, "expected firstCreatePass to be true");
  let id;
  if (typeof type === "string") {
    id = type.charCodeAt(0) || 0;
  } else if (type.hasOwnProperty(NG_ELEMENT_ID)) {
    id = type[NG_ELEMENT_ID];
  }
  if (id == null) {
    id = type[NG_ELEMENT_ID] = nextNgElementId++;
  }
  const bloomHash = id & BLOOM_MASK;
  const mask = 1 << bloomHash;
  tView.data[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)] |= mask;
}
function getOrCreateNodeInjectorForNode(tNode, lView) {
  const existingInjectorIndex = getInjectorIndex(tNode, lView);
  if (existingInjectorIndex !== -1) {
    return existingInjectorIndex;
  }
  const tView = lView[TVIEW];
  if (tView.firstCreatePass) {
    tNode.injectorIndex = lView.length;
    insertBloom(tView.data, tNode);
    insertBloom(lView, null);
    insertBloom(tView.blueprint, null);
  }
  const parentLoc = getParentInjectorLocation(tNode, lView);
  const injectorIndex = tNode.injectorIndex;
  if (hasParentInjector(parentLoc)) {
    const parentIndex = getParentInjectorIndex(parentLoc);
    const parentLView = getParentInjectorView(parentLoc, lView);
    const parentData = parentLView[TVIEW].data;
    for (let i = 0; i < 8; i++) {
      lView[injectorIndex + i] = parentLView[parentIndex + i] | parentData[parentIndex + i];
    }
  }
  lView[
    injectorIndex + 8
    /* NodeInjectorOffset.PARENT */
  ] = parentLoc;
  return injectorIndex;
}
function insertBloom(arr, footer) {
  arr.push(0, 0, 0, 0, 0, 0, 0, 0, footer);
}
function getInjectorIndex(tNode, lView) {
  if (tNode.injectorIndex === -1 || // If the injector index is the same as its parent's injector index, then the index has been
  // copied down from the parent node. No injector has been created yet on this node.
  tNode.parent && tNode.parent.injectorIndex === tNode.injectorIndex || // After the first template pass, the injector index might exist but the parent values
  // might not have been calculated yet for this instance
  lView[
    tNode.injectorIndex + 8
    /* NodeInjectorOffset.PARENT */
  ] === null) {
    return -1;
  } else {
    ngDevMode && assertIndexInRange(lView, tNode.injectorIndex);
    return tNode.injectorIndex;
  }
}
function getParentInjectorLocation(tNode, lView) {
  if (tNode.parent && tNode.parent.injectorIndex !== -1) {
    return tNode.parent.injectorIndex;
  }
  let declarationViewOffset = 0;
  let parentTNode = null;
  let lViewCursor = lView;
  while (lViewCursor !== null) {
    parentTNode = getTNodeFromLView(lViewCursor);
    if (parentTNode === null) {
      return NO_PARENT_INJECTOR;
    }
    ngDevMode && parentTNode && assertTNodeForLView(parentTNode, lViewCursor[DECLARATION_VIEW]);
    declarationViewOffset++;
    lViewCursor = lViewCursor[DECLARATION_VIEW];
    if (parentTNode.injectorIndex !== -1) {
      return parentTNode.injectorIndex | declarationViewOffset << 16;
    }
  }
  return NO_PARENT_INJECTOR;
}
function diPublicInInjector(injectorIndex, tView, token) {
  bloomAdd(injectorIndex, tView, token);
}
function injectAttributeImpl(tNode, attrNameToInject) {
  ngDevMode && assertTNodeType(
    tNode,
    12 | 3
    /* TNodeType.AnyRNode */
  );
  ngDevMode && assertDefined(tNode, "expecting tNode");
  if (attrNameToInject === "class") {
    return tNode.classes;
  }
  if (attrNameToInject === "style") {
    return tNode.styles;
  }
  const attrs = tNode.attrs;
  if (attrs) {
    const attrsLength = attrs.length;
    let i = 0;
    while (i < attrsLength) {
      const value = attrs[i];
      if (isNameOnlyAttributeMarker(value))
        break;
      if (value === 0) {
        i = i + 2;
      } else if (typeof value === "number") {
        i++;
        while (i < attrsLength && typeof attrs[i] === "string") {
          i++;
        }
      } else if (value === attrNameToInject) {
        return attrs[i + 1];
      } else {
        i = i + 2;
      }
    }
  }
  return null;
}
function notFoundValueOrThrow(notFoundValue, token, flags) {
  if (flags & InjectFlags.Optional || notFoundValue !== void 0) {
    return notFoundValue;
  } else {
    throwProviderNotFoundError(token, "NodeInjector");
  }
}
function lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue) {
  if (flags & InjectFlags.Optional && notFoundValue === void 0) {
    notFoundValue = null;
  }
  if ((flags & (InjectFlags.Self | InjectFlags.Host)) === 0) {
    const moduleInjector = lView[INJECTOR$1];
    const previousInjectImplementation = setInjectImplementation(void 0);
    try {
      if (moduleInjector) {
        return moduleInjector.get(token, notFoundValue, flags & InjectFlags.Optional);
      } else {
        return injectRootLimpMode(token, notFoundValue, flags & InjectFlags.Optional);
      }
    } finally {
      setInjectImplementation(previousInjectImplementation);
    }
  }
  return notFoundValueOrThrow(notFoundValue, token, flags);
}
function getOrCreateInjectable(tNode, lView, token, flags = InjectFlags.Default, notFoundValue) {
  if (tNode !== null) {
    if (lView[FLAGS] & 2048 && // The token must be present on the current node injector when the `Self`
    // flag is set, so the lookup on embedded view injector(s) can be skipped.
    !(flags & InjectFlags.Self)) {
      const embeddedInjectorValue = lookupTokenUsingEmbeddedInjector(tNode, lView, token, flags, NOT_FOUND);
      if (embeddedInjectorValue !== NOT_FOUND) {
        return embeddedInjectorValue;
      }
    }
    const value = lookupTokenUsingNodeInjector(tNode, lView, token, flags, NOT_FOUND);
    if (value !== NOT_FOUND) {
      return value;
    }
  }
  return lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue);
}
function lookupTokenUsingNodeInjector(tNode, lView, token, flags, notFoundValue) {
  const bloomHash = bloomHashBitOrFactory(token);
  if (typeof bloomHash === "function") {
    if (!enterDI(lView, tNode, flags)) {
      return flags & InjectFlags.Host ? notFoundValueOrThrow(notFoundValue, token, flags) : lookupTokenUsingModuleInjector(lView, token, flags, notFoundValue);
    }
    try {
      let value;
      if (ngDevMode) {
        runInInjectorProfilerContext(new NodeInjector(getCurrentTNode(), getLView()), token, () => {
          value = bloomHash(flags);
          if (value != null) {
            emitInstanceCreatedByInjectorEvent(value);
          }
        });
      } else {
        value = bloomHash(flags);
      }
      if (value == null && !(flags & InjectFlags.Optional)) {
        throwProviderNotFoundError(token);
      } else {
        return value;
      }
    } finally {
      leaveDI();
    }
  } else if (typeof bloomHash === "number") {
    let previousTView = null;
    let injectorIndex = getInjectorIndex(tNode, lView);
    let parentLocation = NO_PARENT_INJECTOR;
    let hostTElementNode = flags & InjectFlags.Host ? lView[DECLARATION_COMPONENT_VIEW][T_HOST] : null;
    if (injectorIndex === -1 || flags & InjectFlags.SkipSelf) {
      parentLocation = injectorIndex === -1 ? getParentInjectorLocation(tNode, lView) : lView[
        injectorIndex + 8
        /* NodeInjectorOffset.PARENT */
      ];
      if (parentLocation === NO_PARENT_INJECTOR || !shouldSearchParent(flags, false)) {
        injectorIndex = -1;
      } else {
        previousTView = lView[TVIEW];
        injectorIndex = getParentInjectorIndex(parentLocation);
        lView = getParentInjectorView(parentLocation, lView);
      }
    }
    while (injectorIndex !== -1) {
      ngDevMode && assertNodeInjector(lView, injectorIndex);
      const tView = lView[TVIEW];
      ngDevMode && assertTNodeForLView(tView.data[
        injectorIndex + 8
        /* NodeInjectorOffset.TNODE */
      ], lView);
      if (bloomHasToken(bloomHash, injectorIndex, tView.data)) {
        const instance = searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode);
        if (instance !== NOT_FOUND) {
          return instance;
        }
      }
      parentLocation = lView[
        injectorIndex + 8
        /* NodeInjectorOffset.PARENT */
      ];
      if (parentLocation !== NO_PARENT_INJECTOR && shouldSearchParent(flags, lView[TVIEW].data[
        injectorIndex + 8
        /* NodeInjectorOffset.TNODE */
      ] === hostTElementNode) && bloomHasToken(bloomHash, injectorIndex, lView)) {
        previousTView = tView;
        injectorIndex = getParentInjectorIndex(parentLocation);
        lView = getParentInjectorView(parentLocation, lView);
      } else {
        injectorIndex = -1;
      }
    }
  }
  return notFoundValue;
}
function searchTokensOnInjector(injectorIndex, lView, token, previousTView, flags, hostTElementNode) {
  const currentTView = lView[TVIEW];
  const tNode = currentTView.data[
    injectorIndex + 8
    /* NodeInjectorOffset.TNODE */
  ];
  const canAccessViewProviders = previousTView == null ? (
    // 1) This is the first invocation `previousTView == null` which means that we are at the
    // `TNode` of where injector is starting to look. In such a case the only time we are allowed
    // to look into the ViewProviders is if:
    // - we are on a component
    // - AND the injector set `includeViewProviders` to true (implying that the token can see
    // ViewProviders because it is the Component or a Service which itself was declared in
    // ViewProviders)
    isComponentHost(tNode) && includeViewProviders
  ) : (
    // 2) `previousTView != null` which means that we are now walking across the parent nodes.
    // In such a case we are only allowed to look into the ViewProviders if:
    // - We just crossed from child View to Parent View `previousTView != currentTView`
    // - AND the parent TNode is an Element.
    // This means that we just came from the Component's View and therefore are allowed to see
    // into the ViewProviders.
    previousTView != currentTView && (tNode.type & 3) !== 0
  );
  const isHostSpecialCase = flags & InjectFlags.Host && hostTElementNode === tNode;
  const injectableIdx = locateDirectiveOrProvider(tNode, currentTView, token, canAccessViewProviders, isHostSpecialCase);
  if (injectableIdx !== null) {
    return getNodeInjectable(lView, currentTView, injectableIdx, tNode);
  } else {
    return NOT_FOUND;
  }
}
function locateDirectiveOrProvider(tNode, tView, token, canAccessViewProviders, isHostSpecialCase) {
  const nodeProviderIndexes = tNode.providerIndexes;
  const tInjectables = tView.data;
  const injectablesStart = nodeProviderIndexes & 1048575;
  const directivesStart = tNode.directiveStart;
  const directiveEnd = tNode.directiveEnd;
  const cptViewProvidersCount = nodeProviderIndexes >> 20;
  const startingIndex = canAccessViewProviders ? injectablesStart : injectablesStart + cptViewProvidersCount;
  const endIndex = isHostSpecialCase ? injectablesStart + cptViewProvidersCount : directiveEnd;
  for (let i = startingIndex; i < endIndex; i++) {
    const providerTokenOrDef = tInjectables[i];
    if (i < directivesStart && token === providerTokenOrDef || i >= directivesStart && providerTokenOrDef.type === token) {
      return i;
    }
  }
  if (isHostSpecialCase) {
    const dirDef = tInjectables[directivesStart];
    if (dirDef && isComponentDef(dirDef) && dirDef.type === token) {
      return directivesStart;
    }
  }
  return null;
}
function getNodeInjectable(lView, tView, index, tNode) {
  let value = lView[index];
  const tData = tView.data;
  if (isFactory(value)) {
    const factory = value;
    if (factory.resolving) {
      throwCyclicDependencyError(stringifyForError(tData[index]));
    }
    const previousIncludeViewProviders = setIncludeViewProviders(factory.canSeeViewProviders);
    factory.resolving = true;
    let prevInjectContext;
    if (ngDevMode) {
      const token = tData[index].type || tData[index];
      const injector = new NodeInjector(tNode, lView);
      prevInjectContext = setInjectorProfilerContext({ injector, token });
    }
    const previousInjectImplementation = factory.injectImpl ? setInjectImplementation(factory.injectImpl) : null;
    const success = enterDI(lView, tNode, InjectFlags.Default);
    ngDevMode && assertEqual(success, true, "Because flags do not contain `SkipSelf' we expect this to always succeed.");
    try {
      value = lView[index] = factory.factory(void 0, tData, lView, tNode);
      ngDevMode && emitInstanceCreatedByInjectorEvent(value);
      if (tView.firstCreatePass && index >= tNode.directiveStart) {
        ngDevMode && assertDirectiveDef(tData[index]);
        registerPreOrderHooks(index, tData[index], tView);
      }
    } finally {
      ngDevMode && setInjectorProfilerContext(prevInjectContext);
      previousInjectImplementation !== null && setInjectImplementation(previousInjectImplementation);
      setIncludeViewProviders(previousIncludeViewProviders);
      factory.resolving = false;
      leaveDI();
    }
  }
  return value;
}
function bloomHashBitOrFactory(token) {
  ngDevMode && assertDefined(token, "token must be defined");
  if (typeof token === "string") {
    return token.charCodeAt(0) || 0;
  }
  const tokenId = (
    // First check with `hasOwnProperty` so we don't get an inherited ID.
    token.hasOwnProperty(NG_ELEMENT_ID) ? token[NG_ELEMENT_ID] : void 0
  );
  if (typeof tokenId === "number") {
    if (tokenId >= 0) {
      return tokenId & BLOOM_MASK;
    } else {
      ngDevMode && assertEqual(tokenId, -1, "Expecting to get Special Injector Id");
      return createNodeInjector;
    }
  } else {
    return tokenId;
  }
}
function bloomHasToken(bloomHash, injectorIndex, injectorView) {
  const mask = 1 << bloomHash;
  const value = injectorView[injectorIndex + (bloomHash >> BLOOM_BUCKET_BITS)];
  return !!(value & mask);
}
function shouldSearchParent(flags, isFirstHostTNode) {
  return !(flags & InjectFlags.Self) && !(flags & InjectFlags.Host && isFirstHostTNode);
}
function getNodeInjectorLView(nodeInjector) {
  return nodeInjector._lView;
}
function getNodeInjectorTNode(nodeInjector) {
  return nodeInjector._tNode;
}
var NodeInjector = class {
  constructor(_tNode, _lView) {
    this._tNode = _tNode;
    this._lView = _lView;
  }
  get(token, notFoundValue, flags) {
    return getOrCreateInjectable(this._tNode, this._lView, token, convertToBitFlags(flags), notFoundValue);
  }
};
function createNodeInjector() {
  return new NodeInjector(getCurrentTNode(), getLView());
}
function \u0275\u0275getInheritedFactory(type) {
  return noSideEffects(() => {
    const ownConstructor = type.prototype.constructor;
    const ownFactory = ownConstructor[NG_FACTORY_DEF] || getFactoryOf(ownConstructor);
    const objectPrototype = Object.prototype;
    let parent = Object.getPrototypeOf(type.prototype).constructor;
    while (parent && parent !== objectPrototype) {
      const factory = parent[NG_FACTORY_DEF] || getFactoryOf(parent);
      if (factory && factory !== ownFactory) {
        return factory;
      }
      parent = Object.getPrototypeOf(parent);
    }
    return (t) => new t();
  });
}
function getFactoryOf(type) {
  if (isForwardRef(type)) {
    return () => {
      const factory = getFactoryOf(resolveForwardRef(type));
      return factory && factory();
    };
  }
  return getFactoryDef(type);
}
function lookupTokenUsingEmbeddedInjector(tNode, lView, token, flags, notFoundValue) {
  let currentTNode = tNode;
  let currentLView = lView;
  while (currentTNode !== null && currentLView !== null && currentLView[FLAGS] & 2048 && !(currentLView[FLAGS] & 512)) {
    ngDevMode && assertTNodeForLView(currentTNode, currentLView);
    const nodeInjectorValue = lookupTokenUsingNodeInjector(currentTNode, currentLView, token, flags | InjectFlags.Self, NOT_FOUND);
    if (nodeInjectorValue !== NOT_FOUND) {
      return nodeInjectorValue;
    }
    let parentTNode = currentTNode.parent;
    if (!parentTNode) {
      const embeddedViewInjector = currentLView[EMBEDDED_VIEW_INJECTOR];
      if (embeddedViewInjector) {
        const embeddedViewInjectorValue = embeddedViewInjector.get(token, NOT_FOUND, flags);
        if (embeddedViewInjectorValue !== NOT_FOUND) {
          return embeddedViewInjectorValue;
        }
      }
      parentTNode = getTNodeFromLView(currentLView);
      currentLView = currentLView[DECLARATION_VIEW];
    }
    currentTNode = parentTNode;
  }
  return notFoundValue;
}
function getTNodeFromLView(lView) {
  const tView = lView[TVIEW];
  const tViewType = tView.type;
  if (tViewType === 2) {
    ngDevMode && assertDefined(tView.declTNode, "Embedded TNodes should have declaration parents.");
    return tView.declTNode;
  } else if (tViewType === 1) {
    return lView[T_HOST];
  }
  return null;
}
function \u0275\u0275injectAttribute(attrNameToInject) {
  return injectAttributeImpl(getCurrentTNode(), attrNameToInject);
}
var ANNOTATIONS = "__annotations__";
var PARAMETERS = "__parameters__";
var PROP_METADATA = "__prop__metadata__";
function makeDecorator(name, props, parentClass, additionalProcessing, typeFn) {
  return noSideEffects(() => {
    const metaCtor = makeMetadataCtor(props);
    function DecoratorFactory(...args) {
      if (this instanceof DecoratorFactory) {
        metaCtor.call(this, ...args);
        return this;
      }
      const annotationInstance = new DecoratorFactory(...args);
      return function TypeDecorator(cls) {
        if (typeFn)
          typeFn(cls, ...args);
        const annotations = cls.hasOwnProperty(ANNOTATIONS) ? cls[ANNOTATIONS] : Object.defineProperty(cls, ANNOTATIONS, { value: [] })[ANNOTATIONS];
        annotations.push(annotationInstance);
        if (additionalProcessing)
          additionalProcessing(cls);
        return cls;
      };
    }
    if (parentClass) {
      DecoratorFactory.prototype = Object.create(parentClass.prototype);
    }
    DecoratorFactory.prototype.ngMetadataName = name;
    DecoratorFactory.annotationCls = DecoratorFactory;
    return DecoratorFactory;
  });
}
function makeMetadataCtor(props) {
  return function ctor(...args) {
    if (props) {
      const values = props(...args);
      for (const propName in values) {
        this[propName] = values[propName];
      }
    }
  };
}
function makeParamDecorator(name, props, parentClass) {
  return noSideEffects(() => {
    const metaCtor = makeMetadataCtor(props);
    function ParamDecoratorFactory(...args) {
      if (this instanceof ParamDecoratorFactory) {
        metaCtor.apply(this, args);
        return this;
      }
      const annotationInstance = new ParamDecoratorFactory(...args);
      ParamDecorator.annotation = annotationInstance;
      return ParamDecorator;
      function ParamDecorator(cls, unusedKey, index) {
        const parameters = cls.hasOwnProperty(PARAMETERS) ? cls[PARAMETERS] : Object.defineProperty(cls, PARAMETERS, { value: [] })[PARAMETERS];
        while (parameters.length <= index) {
          parameters.push(null);
        }
        (parameters[index] = parameters[index] || []).push(annotationInstance);
        return cls;
      }
    }
    if (parentClass) {
      ParamDecoratorFactory.prototype = Object.create(parentClass.prototype);
    }
    ParamDecoratorFactory.prototype.ngMetadataName = name;
    ParamDecoratorFactory.annotationCls = ParamDecoratorFactory;
    return ParamDecoratorFactory;
  });
}
function makePropDecorator(name, props, parentClass, additionalProcessing) {
  return noSideEffects(() => {
    const metaCtor = makeMetadataCtor(props);
    function PropDecoratorFactory(...args) {
      if (this instanceof PropDecoratorFactory) {
        metaCtor.apply(this, args);
        return this;
      }
      const decoratorInstance = new PropDecoratorFactory(...args);
      function PropDecorator(target, name2) {
        if (target === void 0) {
          throw new Error("Standard Angular field decorators are not supported in JIT mode.");
        }
        const constructor = target.constructor;
        const meta = constructor.hasOwnProperty(PROP_METADATA) ? constructor[PROP_METADATA] : Object.defineProperty(constructor, PROP_METADATA, { value: {} })[PROP_METADATA];
        meta[name2] = meta.hasOwnProperty(name2) && meta[name2] || [];
        meta[name2].unshift(decoratorInstance);
        if (additionalProcessing)
          additionalProcessing(target, name2, ...args);
      }
      return PropDecorator;
    }
    if (parentClass) {
      PropDecoratorFactory.prototype = Object.create(parentClass.prototype);
    }
    PropDecoratorFactory.prototype.ngMetadataName = name;
    PropDecoratorFactory.annotationCls = PropDecoratorFactory;
    return PropDecoratorFactory;
  });
}
var Attribute = makeParamDecorator("Attribute", (attributeName) => ({ attributeName, __NG_ELEMENT_ID__: () => \u0275\u0275injectAttribute(attributeName) }));
var emitDistinctChangesOnlyDefaultValue = true;
var Query = class {
};
var ContentChildren = makePropDecorator("ContentChildren", (selector, data = {}) => __spreadValues({
  selector,
  first: false,
  isViewQuery: false,
  descendants: false,
  emitDistinctChangesOnly: emitDistinctChangesOnlyDefaultValue
}, data), Query);
var ContentChild = makePropDecorator("ContentChild", (selector, data = {}) => __spreadValues({ selector, first: true, isViewQuery: false, descendants: true }, data), Query);
var ViewChildren = makePropDecorator("ViewChildren", (selector, data = {}) => __spreadValues({
  selector,
  first: false,
  isViewQuery: true,
  descendants: true,
  emitDistinctChangesOnly: emitDistinctChangesOnlyDefaultValue
}, data), Query);
var ViewChild = makePropDecorator("ViewChild", (selector, data) => __spreadValues({ selector, first: true, isViewQuery: true, descendants: true }, data), Query);
var FactoryTarget;
(function(FactoryTarget2) {
  FactoryTarget2[FactoryTarget2["Directive"] = 0] = "Directive";
  FactoryTarget2[FactoryTarget2["Component"] = 1] = "Component";
  FactoryTarget2[FactoryTarget2["Injectable"] = 2] = "Injectable";
  FactoryTarget2[FactoryTarget2["Pipe"] = 3] = "Pipe";
  FactoryTarget2[FactoryTarget2["NgModule"] = 4] = "NgModule";
})(FactoryTarget || (FactoryTarget = {}));
var R3TemplateDependencyKind;
(function(R3TemplateDependencyKind2) {
  R3TemplateDependencyKind2[R3TemplateDependencyKind2["Directive"] = 0] = "Directive";
  R3TemplateDependencyKind2[R3TemplateDependencyKind2["Pipe"] = 1] = "Pipe";
  R3TemplateDependencyKind2[R3TemplateDependencyKind2["NgModule"] = 2] = "NgModule";
})(R3TemplateDependencyKind || (R3TemplateDependencyKind = {}));
var ViewEncapsulation;
(function(ViewEncapsulation2) {
  ViewEncapsulation2[ViewEncapsulation2["Emulated"] = 0] = "Emulated";
  ViewEncapsulation2[ViewEncapsulation2["None"] = 2] = "None";
  ViewEncapsulation2[ViewEncapsulation2["ShadowDom"] = 3] = "ShadowDom";
})(ViewEncapsulation || (ViewEncapsulation = {}));
function getCompilerFacade(request) {
  const globalNg = _global["ng"];
  if (globalNg && globalNg.\u0275compilerFacade) {
    return globalNg.\u0275compilerFacade;
  }
  if (typeof ngDevMode === "undefined" || ngDevMode) {
    console.error(`JIT compilation failed for ${request.kind}`, request.type);
    let message = `The ${request.kind} '${request.type.name}' needs to be compiled using the JIT compiler, but '@angular/compiler' is not available.

`;
    if (request.usage === 1) {
      message += `The ${request.kind} is part of a library that has been partially compiled.
`;
      message += `However, the Angular Linker has not processed the library such that JIT compilation is used as fallback.
`;
      message += "\n";
      message += `Ideally, the library is processed using the Angular Linker to become fully AOT compiled.
`;
    } else {
      message += `JIT compilation is discouraged for production use-cases! Consider using AOT mode instead.
`;
    }
    message += `Alternatively, the JIT compiler should be loaded by bootstrapping using '@angular/platform-browser-dynamic' or '@angular/platform-server',
`;
    message += `or manually provide the compiler with 'import "@angular/compiler";' before bootstrapping.`;
    throw new Error(message);
  } else {
    throw new Error("JIT compiler unavailable");
  }
}
var Type = Function;
function isType(v) {
  return typeof v === "function";
}
function arrayEquals(a, b, identityAccessor) {
  if (a.length !== b.length)
    return false;
  for (let i = 0; i < a.length; i++) {
    let valueA = a[i];
    let valueB = b[i];
    if (identityAccessor) {
      valueA = identityAccessor(valueA);
      valueB = identityAccessor(valueB);
    }
    if (valueB !== valueA) {
      return false;
    }
  }
  return true;
}
function flatten(list) {
  return list.flat(Number.POSITIVE_INFINITY);
}
function deepForEach(input, fn) {
  input.forEach((value) => Array.isArray(value) ? deepForEach(value, fn) : fn(value));
}
function addToArray(arr, index, value) {
  if (index >= arr.length) {
    arr.push(value);
  } else {
    arr.splice(index, 0, value);
  }
}
function removeFromArray(arr, index) {
  if (index >= arr.length - 1) {
    return arr.pop();
  } else {
    return arr.splice(index, 1)[0];
  }
}
function newArray(size, value) {
  const list = [];
  for (let i = 0; i < size; i++) {
    list.push(value);
  }
  return list;
}
function arraySplice(array, index, count) {
  const length = array.length - count;
  while (index < length) {
    array[index] = array[index + count];
    index++;
  }
  while (count--) {
    array.pop();
  }
}
function arrayInsert2(array, index, value1, value2) {
  ngDevMode && assertLessThanOrEqual(index, array.length, "Can't insert past array end.");
  let end = array.length;
  if (end == index) {
    array.push(value1, value2);
  } else if (end === 1) {
    array.push(value2, array[0]);
    array[0] = value1;
  } else {
    end--;
    array.push(array[end - 1], array[end]);
    while (end > index) {
      const previousEnd = end - 2;
      array[end] = array[previousEnd];
      end--;
    }
    array[index] = value1;
    array[index + 1] = value2;
  }
}
function keyValueArraySet(keyValueArray, key, value) {
  let index = keyValueArrayIndexOf(keyValueArray, key);
  if (index >= 0) {
    keyValueArray[index | 1] = value;
  } else {
    index = ~index;
    arrayInsert2(keyValueArray, index, key, value);
  }
  return index;
}
function keyValueArrayGet(keyValueArray, key) {
  const index = keyValueArrayIndexOf(keyValueArray, key);
  if (index >= 0) {
    return keyValueArray[index | 1];
  }
  return void 0;
}
function keyValueArrayIndexOf(keyValueArray, key) {
  return _arrayIndexOfSorted(keyValueArray, key, 1);
}
function _arrayIndexOfSorted(array, value, shift) {
  ngDevMode && assertEqual(Array.isArray(array), true, "Expecting an array");
  let start = 0;
  let end = array.length >> shift;
  while (end !== start) {
    const middle = start + (end - start >> 1);
    const current = array[middle << shift];
    if (value === current) {
      return middle << shift;
    } else if (current > value) {
      end = middle;
    } else {
      start = middle + 1;
    }
  }
  return ~(end << shift);
}
var ES5_DELEGATE_CTOR = /^function\s+\S+\(\)\s*{[\s\S]+\.apply\(this,\s*(arguments|(?:[^()]+\(\[\],)?[^()]+\(arguments\).*)\)/;
var ES2015_INHERITED_CLASS = /^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{/;
var ES2015_INHERITED_CLASS_WITH_CTOR = /^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{[\s\S]*constructor\s*\(/;
var ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR = /^class\s+[A-Za-z\d$_]*\s*extends\s+[^{]+{[\s\S]*constructor\s*\(\)\s*{[^}]*super\(\.\.\.arguments\)/;
function isDelegateCtor(typeStr) {
  return ES5_DELEGATE_CTOR.test(typeStr) || ES2015_INHERITED_CLASS_WITH_DELEGATE_CTOR.test(typeStr) || ES2015_INHERITED_CLASS.test(typeStr) && !ES2015_INHERITED_CLASS_WITH_CTOR.test(typeStr);
}
var ReflectionCapabilities = class {
  constructor(reflect) {
    this._reflect = reflect || _global["Reflect"];
  }
  factory(t) {
    return (...args) => new t(...args);
  }
  /** @internal */
  _zipTypesAndAnnotations(paramTypes, paramAnnotations) {
    let result;
    if (typeof paramTypes === "undefined") {
      result = newArray(paramAnnotations.length);
    } else {
      result = newArray(paramTypes.length);
    }
    for (let i = 0; i < result.length; i++) {
      if (typeof paramTypes === "undefined") {
        result[i] = [];
      } else if (paramTypes[i] && paramTypes[i] != Object) {
        result[i] = [paramTypes[i]];
      } else {
        result[i] = [];
      }
      if (paramAnnotations && paramAnnotations[i] != null) {
        result[i] = result[i].concat(paramAnnotations[i]);
      }
    }
    return result;
  }
  _ownParameters(type, parentCtor) {
    const typeStr = type.toString();
    if (isDelegateCtor(typeStr)) {
      return null;
    }
    if (type.parameters && type.parameters !== parentCtor.parameters) {
      return type.parameters;
    }
    const tsickleCtorParams = type.ctorParameters;
    if (tsickleCtorParams && tsickleCtorParams !== parentCtor.ctorParameters) {
      const ctorParameters = typeof tsickleCtorParams === "function" ? tsickleCtorParams() : tsickleCtorParams;
      const paramTypes2 = ctorParameters.map((ctorParam) => ctorParam && ctorParam.type);
      const paramAnnotations2 = ctorParameters.map((ctorParam) => ctorParam && convertTsickleDecoratorIntoMetadata(ctorParam.decorators));
      return this._zipTypesAndAnnotations(paramTypes2, paramAnnotations2);
    }
    const paramAnnotations = type.hasOwnProperty(PARAMETERS) && type[PARAMETERS];
    const paramTypes = this._reflect && this._reflect.getOwnMetadata && this._reflect.getOwnMetadata("design:paramtypes", type);
    if (paramTypes || paramAnnotations) {
      return this._zipTypesAndAnnotations(paramTypes, paramAnnotations);
    }
    return newArray(type.length);
  }
  parameters(type) {
    if (!isType(type)) {
      return [];
    }
    const parentCtor = getParentCtor(type);
    let parameters = this._ownParameters(type, parentCtor);
    if (!parameters && parentCtor !== Object) {
      parameters = this.parameters(parentCtor);
    }
    return parameters || [];
  }
  _ownAnnotations(typeOrFunc, parentCtor) {
    if (typeOrFunc.annotations && typeOrFunc.annotations !== parentCtor.annotations) {
      let annotations = typeOrFunc.annotations;
      if (typeof annotations === "function" && annotations.annotations) {
        annotations = annotations.annotations;
      }
      return annotations;
    }
    if (typeOrFunc.decorators && typeOrFunc.decorators !== parentCtor.decorators) {
      return convertTsickleDecoratorIntoMetadata(typeOrFunc.decorators);
    }
    if (typeOrFunc.hasOwnProperty(ANNOTATIONS)) {
      return typeOrFunc[ANNOTATIONS];
    }
    return null;
  }
  annotations(typeOrFunc) {
    if (!isType(typeOrFunc)) {
      return [];
    }
    const parentCtor = getParentCtor(typeOrFunc);
    const ownAnnotations = this._ownAnnotations(typeOrFunc, parentCtor) || [];
    const parentAnnotations = parentCtor !== Object ? this.annotations(parentCtor) : [];
    return parentAnnotations.concat(ownAnnotations);
  }
  _ownPropMetadata(typeOrFunc, parentCtor) {
    if (typeOrFunc.propMetadata && typeOrFunc.propMetadata !== parentCtor.propMetadata) {
      let propMetadata = typeOrFunc.propMetadata;
      if (typeof propMetadata === "function" && propMetadata.propMetadata) {
        propMetadata = propMetadata.propMetadata;
      }
      return propMetadata;
    }
    if (typeOrFunc.propDecorators && typeOrFunc.propDecorators !== parentCtor.propDecorators) {
      const propDecorators = typeOrFunc.propDecorators;
      const propMetadata = {};
      Object.keys(propDecorators).forEach((prop) => {
        propMetadata[prop] = convertTsickleDecoratorIntoMetadata(propDecorators[prop]);
      });
      return propMetadata;
    }
    if (typeOrFunc.hasOwnProperty(PROP_METADATA)) {
      return typeOrFunc[PROP_METADATA];
    }
    return null;
  }
  propMetadata(typeOrFunc) {
    if (!isType(typeOrFunc)) {
      return {};
    }
    const parentCtor = getParentCtor(typeOrFunc);
    const propMetadata = {};
    if (parentCtor !== Object) {
      const parentPropMetadata = this.propMetadata(parentCtor);
      Object.keys(parentPropMetadata).forEach((propName) => {
        propMetadata[propName] = parentPropMetadata[propName];
      });
    }
    const ownPropMetadata = this._ownPropMetadata(typeOrFunc, parentCtor);
    if (ownPropMetadata) {
      Object.keys(ownPropMetadata).forEach((propName) => {
        const decorators = [];
        if (propMetadata.hasOwnProperty(propName)) {
          decorators.push(...propMetadata[propName]);
        }
        decorators.push(...ownPropMetadata[propName]);
        propMetadata[propName] = decorators;
      });
    }
    return propMetadata;
  }
  ownPropMetadata(typeOrFunc) {
    if (!isType(typeOrFunc)) {
      return {};
    }
    return this._ownPropMetadata(typeOrFunc, getParentCtor(typeOrFunc)) || {};
  }
  hasLifecycleHook(type, lcProperty) {
    return type instanceof Type && lcProperty in type.prototype;
  }
};
function convertTsickleDecoratorIntoMetadata(decoratorInvocations) {
  if (!decoratorInvocations) {
    return [];
  }
  return decoratorInvocations.map((decoratorInvocation) => {
    const decoratorType = decoratorInvocation.type;
    const annotationCls = decoratorType.annotationCls;
    const annotationArgs = decoratorInvocation.args ? decoratorInvocation.args : [];
    return new annotationCls(...annotationArgs);
  });
}
function getParentCtor(ctor) {
  const parentProto = ctor.prototype ? Object.getPrototypeOf(ctor.prototype) : null;
  const parentCtor = parentProto ? parentProto.constructor : null;
  return parentCtor || Object;
}
var Inject = attachInjectFlag(
  // Disable tslint because `DecoratorFlags` is a const enum which gets inlined.
  // tslint:disable-next-line: no-toplevel-property-access
  makeParamDecorator("Inject", (token) => ({ token })),
  -1
  /* DecoratorFlags.Inject */
);
var Optional = (
  // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.
  // tslint:disable-next-line: no-toplevel-property-access
  attachInjectFlag(
    makeParamDecorator("Optional"),
    8
    /* InternalInjectFlags.Optional */
  )
);
var Self = (
  // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.
  // tslint:disable-next-line: no-toplevel-property-access
  attachInjectFlag(
    makeParamDecorator("Self"),
    2
    /* InternalInjectFlags.Self */
  )
);
var SkipSelf = (
  // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.
  // tslint:disable-next-line: no-toplevel-property-access
  attachInjectFlag(
    makeParamDecorator("SkipSelf"),
    4
    /* InternalInjectFlags.SkipSelf */
  )
);
var Host = (
  // Disable tslint because `InternalInjectFlags` is a const enum which gets inlined.
  // tslint:disable-next-line: no-toplevel-property-access
  attachInjectFlag(
    makeParamDecorator("Host"),
    1
    /* InternalInjectFlags.Host */
  )
);
var _reflect = null;
function getReflect() {
  return _reflect = _reflect || new ReflectionCapabilities();
}
function reflectDependencies(type) {
  return convertDependencies(getReflect().parameters(type));
}
function convertDependencies(deps) {
  return deps.map((dep) => reflectDependency(dep));
}
function reflectDependency(dep) {
  const meta = {
    token: null,
    attribute: null,
    host: false,
    optional: false,
    self: false,
    skipSelf: false
  };
  if (Array.isArray(dep) && dep.length > 0) {
    for (let j = 0; j < dep.length; j++) {
      const param = dep[j];
      if (param === void 0) {
        continue;
      }
      const proto = Object.getPrototypeOf(param);
      if (param instanceof Optional || proto.ngMetadataName === "Optional") {
        meta.optional = true;
      } else if (param instanceof SkipSelf || proto.ngMetadataName === "SkipSelf") {
        meta.skipSelf = true;
      } else if (param instanceof Self || proto.ngMetadataName === "Self") {
        meta.self = true;
      } else if (param instanceof Host || proto.ngMetadataName === "Host") {
        meta.host = true;
      } else if (param instanceof Inject) {
        meta.token = param.token;
      } else if (param instanceof Attribute) {
        if (param.attributeName === void 0) {
          throw new RuntimeError(204, ngDevMode && `Attribute name must be defined.`);
        }
        meta.attribute = param.attributeName;
      } else {
        meta.token = param;
      }
    }
  } else if (dep === void 0 || Array.isArray(dep) && dep.length === 0) {
    meta.token = null;
  } else {
    meta.token = dep;
  }
  return meta;
}
function resolveComponentResources(resourceResolver) {
  const componentResolved = [];
  const urlMap = /* @__PURE__ */ new Map();
  function cachedResourceResolve(url) {
    let promise = urlMap.get(url);
    if (!promise) {
      const resp = resourceResolver(url);
      urlMap.set(url, promise = resp.then(unwrapResponse));
    }
    return promise;
  }
  componentResourceResolutionQueue.forEach((component, type) => {
    const promises = [];
    if (component.templateUrl) {
      promises.push(cachedResourceResolve(component.templateUrl).then((template) => {
        component.template = template;
      }));
    }
    const styles = typeof component.styles === "string" ? [component.styles] : component.styles || [];
    component.styles = styles;
    if (component.styleUrl && component.styleUrls?.length) {
      throw new Error("@Component cannot define both `styleUrl` and `styleUrls`. Use `styleUrl` if the component has one stylesheet, or `styleUrls` if it has multiple");
    } else if (component.styleUrls?.length) {
      const styleOffset = component.styles.length;
      const styleUrls = component.styleUrls;
      component.styleUrls.forEach((styleUrl, index) => {
        styles.push("");
        promises.push(cachedResourceResolve(styleUrl).then((style2) => {
          styles[styleOffset + index] = style2;
          styleUrls.splice(styleUrls.indexOf(styleUrl), 1);
          if (styleUrls.length == 0) {
            component.styleUrls = void 0;
          }
        }));
      });
    } else if (component.styleUrl) {
      promises.push(cachedResourceResolve(component.styleUrl).then((style2) => {
        styles.push(style2);
        component.styleUrl = void 0;
      }));
    }
    const fullyResolved = Promise.all(promises).then(() => componentDefResolved(type));
    componentResolved.push(fullyResolved);
  });
  clearResolutionOfComponentResourcesQueue();
  return Promise.all(componentResolved).then(() => void 0);
}
var componentResourceResolutionQueue = /* @__PURE__ */ new Map();
var componentDefPendingResolution = /* @__PURE__ */ new Set();
function maybeQueueResolutionOfComponentResources(type, metadata) {
  if (componentNeedsResolution(metadata)) {
    componentResourceResolutionQueue.set(type, metadata);
    componentDefPendingResolution.add(type);
  }
}
function componentNeedsResolution(component) {
  return !!(component.templateUrl && !component.hasOwnProperty("template") || component.styleUrls && component.styleUrls.length || component.styleUrl);
}
function clearResolutionOfComponentResourcesQueue() {
  const old = componentResourceResolutionQueue;
  componentResourceResolutionQueue = /* @__PURE__ */ new Map();
  return old;
}
function isComponentResourceResolutionQueueEmpty() {
  return componentResourceResolutionQueue.size === 0;
}
function unwrapResponse(response) {
  return typeof response == "string" ? response : response.text();
}
function componentDefResolved(type) {
  componentDefPendingResolution.delete(type);
}
var ENVIRONMENT_INITIALIZER = new InjectionToken("ENVIRONMENT_INITIALIZER");
var INJECTOR = new InjectionToken(
  "INJECTOR",
  // Disable tslint because this is const enum which gets inlined not top level prop access.
  // tslint:disable-next-line: no-toplevel-property-access
  -1
  /* InjectorMarkers.Injector */
);
var INJECTOR_DEF_TYPES = new InjectionToken("INJECTOR_DEF_TYPES");
var NullInjector = class {
  get(token, notFoundValue = THROW_IF_NOT_FOUND) {
    if (notFoundValue === THROW_IF_NOT_FOUND) {
      const error = new Error(`NullInjectorError: No provider for ${stringify(token)}!`);
      error.name = "NullInjectorError";
      throw error;
    }
    return notFoundValue;
  }
};
function makeEnvironmentProviders(providers) {
  return {
    \u0275providers: providers
  };
}
function importProvidersFrom(...sources) {
  return {
    \u0275providers: internalImportProvidersFrom(true, sources),
    \u0275fromNgModule: true
  };
}
function internalImportProvidersFrom(checkForStandaloneCmp, ...sources) {
  const providersOut = [];
  const dedup = /* @__PURE__ */ new Set();
  let injectorTypesWithProviders;
  const collectProviders = (provider) => {
    providersOut.push(provider);
  };
  deepForEach(sources, (source) => {
    if ((typeof ngDevMode === "undefined" || ngDevMode) && checkForStandaloneCmp) {
      const cmpDef = getComponentDef(source);
      if (cmpDef?.standalone) {
        throw new RuntimeError(800, `Importing providers supports NgModule or ModuleWithProviders but got a standalone component "${stringifyForError(source)}"`);
      }
    }
    const internalSource = source;
    if (walkProviderTree(internalSource, collectProviders, [], dedup)) {
      injectorTypesWithProviders ||= [];
      injectorTypesWithProviders.push(internalSource);
    }
  });
  if (injectorTypesWithProviders !== void 0) {
    processInjectorTypesWithProviders(injectorTypesWithProviders, collectProviders);
  }
  return providersOut;
}
function processInjectorTypesWithProviders(typesWithProviders, visitor) {
  for (let i = 0; i < typesWithProviders.length; i++) {
    const { ngModule, providers } = typesWithProviders[i];
    deepForEachProvider(providers, (provider) => {
      ngDevMode && validateProvider(provider, providers || EMPTY_ARRAY, ngModule);
      visitor(provider, ngModule);
    });
  }
}
function walkProviderTree(container, visitor, parents, dedup) {
  container = resolveForwardRef(container);
  if (!container)
    return false;
  let defType = null;
  let injDef = getInjectorDef(container);
  const cmpDef = !injDef && getComponentDef(container);
  if (!injDef && !cmpDef) {
    const ngModule = container.ngModule;
    injDef = getInjectorDef(ngModule);
    if (injDef) {
      defType = ngModule;
    } else {
      return false;
    }
  } else if (cmpDef && !cmpDef.standalone) {
    return false;
  } else {
    defType = container;
  }
  if (ngDevMode && parents.indexOf(defType) !== -1) {
    const defName = stringify(defType);
    const path = parents.map(stringify);
    throwCyclicDependencyError(defName, path);
  }
  const isDuplicate = dedup.has(defType);
  if (cmpDef) {
    if (isDuplicate) {
      return false;
    }
    dedup.add(defType);
    if (cmpDef.dependencies) {
      const deps = typeof cmpDef.dependencies === "function" ? cmpDef.dependencies() : cmpDef.dependencies;
      for (const dep of deps) {
        walkProviderTree(dep, visitor, parents, dedup);
      }
    }
  } else if (injDef) {
    if (injDef.imports != null && !isDuplicate) {
      ngDevMode && parents.push(defType);
      dedup.add(defType);
      let importTypesWithProviders;
      try {
        deepForEach(injDef.imports, (imported) => {
          if (walkProviderTree(imported, visitor, parents, dedup)) {
            importTypesWithProviders ||= [];
            importTypesWithProviders.push(imported);
          }
        });
      } finally {
        ngDevMode && parents.pop();
      }
      if (importTypesWithProviders !== void 0) {
        processInjectorTypesWithProviders(importTypesWithProviders, visitor);
      }
    }
    if (!isDuplicate) {
      const factory = getFactoryDef(defType) || (() => new defType());
      visitor({ provide: defType, useFactory: factory, deps: EMPTY_ARRAY }, defType);
      visitor({ provide: INJECTOR_DEF_TYPES, useValue: defType, multi: true }, defType);
      visitor({ provide: ENVIRONMENT_INITIALIZER, useValue: () => \u0275\u0275inject(defType), multi: true }, defType);
    }
    const defProviders = injDef.providers;
    if (defProviders != null && !isDuplicate) {
      const injectorType = container;
      deepForEachProvider(defProviders, (provider) => {
        ngDevMode && validateProvider(provider, defProviders, injectorType);
        visitor(provider, injectorType);
      });
    }
  } else {
    return false;
  }
  return defType !== container && container.providers !== void 0;
}
function validateProvider(provider, providers, containerType) {
  if (isTypeProvider(provider) || isValueProvider(provider) || isFactoryProvider(provider) || isExistingProvider(provider)) {
    return;
  }
  const classRef = resolveForwardRef(provider && (provider.useClass || provider.provide));
  if (!classRef) {
    throwInvalidProviderError(containerType, providers, provider);
  }
}
function deepForEachProvider(providers, fn) {
  for (let provider of providers) {
    if (isEnvironmentProviders(provider)) {
      provider = provider.\u0275providers;
    }
    if (Array.isArray(provider)) {
      deepForEachProvider(provider, fn);
    } else {
      fn(provider);
    }
  }
}
var USE_VALUE$1 = getClosureSafeProperty({ provide: String, useValue: getClosureSafeProperty });
function isValueProvider(value) {
  return value !== null && typeof value == "object" && USE_VALUE$1 in value;
}
function isExistingProvider(value) {
  return !!(value && value.useExisting);
}
function isFactoryProvider(value) {
  return !!(value && value.useFactory);
}
function isTypeProvider(value) {
  return typeof value === "function";
}
function isClassProvider(value) {
  return !!value.useClass;
}
var INJECTOR_SCOPE = new InjectionToken("Set Injector scope.");
var NOT_YET = {};
var CIRCULAR = {};
var NULL_INJECTOR = void 0;
function getNullInjector() {
  if (NULL_INJECTOR === void 0) {
    NULL_INJECTOR = new NullInjector();
  }
  return NULL_INJECTOR;
}
var EnvironmentInjector = class {
};
var R3Injector = class extends EnvironmentInjector {
  /**
   * Flag indicating that this injector was previously destroyed.
   */
  get destroyed() {
    return this._destroyed;
  }
  constructor(providers, parent, source, scopes) {
    super();
    this.parent = parent;
    this.source = source;
    this.scopes = scopes;
    this.records = /* @__PURE__ */ new Map();
    this._ngOnDestroyHooks = /* @__PURE__ */ new Set();
    this._onDestroyHooks = [];
    this._destroyed = false;
    forEachSingleProvider(providers, (provider) => this.processProvider(provider));
    this.records.set(INJECTOR, makeRecord(void 0, this));
    if (scopes.has("environment")) {
      this.records.set(EnvironmentInjector, makeRecord(void 0, this));
    }
    const record = this.records.get(INJECTOR_SCOPE);
    if (record != null && typeof record.value === "string") {
      this.scopes.add(record.value);
    }
    this.injectorDefTypes = new Set(this.get(INJECTOR_DEF_TYPES, EMPTY_ARRAY, InjectFlags.Self));
  }
  /**
   * Destroy the injector and release references to every instance or provider associated with it.
   *
   * Also calls the `OnDestroy` lifecycle hooks of every instance that was created for which a
   * hook was found.
   */
  destroy() {
    this.assertNotDestroyed();
    this._destroyed = true;
    try {
      for (const service of this._ngOnDestroyHooks) {
        service.ngOnDestroy();
      }
      const onDestroyHooks = this._onDestroyHooks;
      this._onDestroyHooks = [];
      for (const hook of onDestroyHooks) {
        hook();
      }
    } finally {
      this.records.clear();
      this._ngOnDestroyHooks.clear();
      this.injectorDefTypes.clear();
    }
  }
  onDestroy(callback) {
    this.assertNotDestroyed();
    this._onDestroyHooks.push(callback);
    return () => this.removeOnDestroy(callback);
  }
  runInContext(fn) {
    this.assertNotDestroyed();
    const previousInjector = setCurrentInjector(this);
    const previousInjectImplementation = setInjectImplementation(void 0);
    let prevInjectContext;
    if (ngDevMode) {
      prevInjectContext = setInjectorProfilerContext({ injector: this, token: null });
    }
    try {
      return fn();
    } finally {
      setCurrentInjector(previousInjector);
      setInjectImplementation(previousInjectImplementation);
      ngDevMode && setInjectorProfilerContext(prevInjectContext);
    }
  }
  get(token, notFoundValue = THROW_IF_NOT_FOUND, flags = InjectFlags.Default) {
    this.assertNotDestroyed();
    if (token.hasOwnProperty(NG_ENV_ID)) {
      return token[NG_ENV_ID](this);
    }
    flags = convertToBitFlags(flags);
    let prevInjectContext;
    if (ngDevMode) {
      prevInjectContext = setInjectorProfilerContext({ injector: this, token });
    }
    const previousInjector = setCurrentInjector(this);
    const previousInjectImplementation = setInjectImplementation(void 0);
    try {
      if (!(flags & InjectFlags.SkipSelf)) {
        let record = this.records.get(token);
        if (record === void 0) {
          const def = couldBeInjectableType(token) && getInjectableDef(token);
          if (def && this.injectableDefInScope(def)) {
            if (ngDevMode) {
              runInInjectorProfilerContext(this, token, () => {
                emitProviderConfiguredEvent(token);
              });
            }
            record = makeRecord(injectableDefOrInjectorDefFactory(token), NOT_YET);
          } else {
            record = null;
          }
          this.records.set(token, record);
        }
        if (record != null) {
          return this.hydrate(token, record);
        }
      }
      const nextInjector = !(flags & InjectFlags.Self) ? this.parent : getNullInjector();
      notFoundValue = flags & InjectFlags.Optional && notFoundValue === THROW_IF_NOT_FOUND ? null : notFoundValue;
      return nextInjector.get(token, notFoundValue);
    } catch (e) {
      if (e.name === "NullInjectorError") {
        const path = e[NG_TEMP_TOKEN_PATH] = e[NG_TEMP_TOKEN_PATH] || [];
        path.unshift(stringify(token));
        if (previousInjector) {
          throw e;
        } else {
          return catchInjectorError(e, token, "R3InjectorError", this.source);
        }
      } else {
        throw e;
      }
    } finally {
      setInjectImplementation(previousInjectImplementation);
      setCurrentInjector(previousInjector);
      ngDevMode && setInjectorProfilerContext(prevInjectContext);
    }
  }
  /** @internal */
  resolveInjectorInitializers() {
    const previousInjector = setCurrentInjector(this);
    const previousInjectImplementation = setInjectImplementation(void 0);
    let prevInjectContext;
    if (ngDevMode) {
      prevInjectContext = setInjectorProfilerContext({ injector: this, token: null });
    }
    try {
      const initializers = this.get(ENVIRONMENT_INITIALIZER, EMPTY_ARRAY, InjectFlags.Self);
      if (ngDevMode && !Array.isArray(initializers)) {
        throw new RuntimeError(-209, `Unexpected type of the \`ENVIRONMENT_INITIALIZER\` token value (expected an array, but got ${typeof initializers}). Please check that the \`ENVIRONMENT_INITIALIZER\` token is configured as a \`multi: true\` provider.`);
      }
      for (const initializer of initializers) {
        initializer();
      }
    } finally {
      setCurrentInjector(previousInjector);
      setInjectImplementation(previousInjectImplementation);
      ngDevMode && setInjectorProfilerContext(prevInjectContext);
    }
  }
  toString() {
    const tokens = [];
    const records = this.records;
    for (const token of records.keys()) {
      tokens.push(stringify(token));
    }
    return `R3Injector[${tokens.join(", ")}]`;
  }
  assertNotDestroyed() {
    if (this._destroyed) {
      throw new RuntimeError(205, ngDevMode && "Injector has already been destroyed.");
    }
  }
  /**
   * Process a `SingleProvider` and add it.
   */
  processProvider(provider) {
    provider = resolveForwardRef(provider);
    let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider && provider.provide);
    const record = providerToRecord(provider);
    if (ngDevMode) {
      runInInjectorProfilerContext(this, token, () => {
        if (isValueProvider(provider)) {
          emitInstanceCreatedByInjectorEvent(provider.useValue);
        }
        emitProviderConfiguredEvent(provider);
      });
    }
    if (!isTypeProvider(provider) && provider.multi === true) {
      let multiRecord = this.records.get(token);
      if (multiRecord) {
        if (ngDevMode && multiRecord.multi === void 0) {
          throwMixedMultiProviderError();
        }
      } else {
        multiRecord = makeRecord(void 0, NOT_YET, true);
        multiRecord.factory = () => injectArgs(multiRecord.multi);
        this.records.set(token, multiRecord);
      }
      token = provider;
      multiRecord.multi.push(provider);
    } else {
      const existing = this.records.get(token);
      if (ngDevMode && existing && existing.multi !== void 0) {
        throwMixedMultiProviderError();
      }
    }
    this.records.set(token, record);
  }
  hydrate(token, record) {
    if (ngDevMode && record.value === CIRCULAR) {
      throwCyclicDependencyError(stringify(token));
    } else if (record.value === NOT_YET) {
      record.value = CIRCULAR;
      if (ngDevMode) {
        runInInjectorProfilerContext(this, token, () => {
          record.value = record.factory();
          emitInstanceCreatedByInjectorEvent(record.value);
        });
      } else {
        record.value = record.factory();
      }
    }
    if (typeof record.value === "object" && record.value && hasOnDestroy(record.value)) {
      this._ngOnDestroyHooks.add(record.value);
    }
    return record.value;
  }
  injectableDefInScope(def) {
    if (!def.providedIn) {
      return false;
    }
    const providedIn = resolveForwardRef(def.providedIn);
    if (typeof providedIn === "string") {
      return providedIn === "any" || this.scopes.has(providedIn);
    } else {
      return this.injectorDefTypes.has(providedIn);
    }
  }
  removeOnDestroy(callback) {
    const destroyCBIdx = this._onDestroyHooks.indexOf(callback);
    if (destroyCBIdx !== -1) {
      this._onDestroyHooks.splice(destroyCBIdx, 1);
    }
  }
};
function injectableDefOrInjectorDefFactory(token) {
  const injectableDef = getInjectableDef(token);
  const factory = injectableDef !== null ? injectableDef.factory : getFactoryDef(token);
  if (factory !== null) {
    return factory;
  }
  if (token instanceof InjectionToken) {
    throw new RuntimeError(204, ngDevMode && `Token ${stringify(token)} is missing a \u0275prov definition.`);
  }
  if (token instanceof Function) {
    return getUndecoratedInjectableFactory(token);
  }
  throw new RuntimeError(204, ngDevMode && "unreachable");
}
function getUndecoratedInjectableFactory(token) {
  const paramLength = token.length;
  if (paramLength > 0) {
    const args = newArray(paramLength, "?");
    throw new RuntimeError(204, ngDevMode && `Can't resolve all parameters for ${stringify(token)}: (${args.join(", ")}).`);
  }
  const inheritedInjectableDef = getInheritedInjectableDef(token);
  if (inheritedInjectableDef !== null) {
    return () => inheritedInjectableDef.factory(token);
  } else {
    return () => new token();
  }
}
function providerToRecord(provider) {
  if (isValueProvider(provider)) {
    return makeRecord(void 0, provider.useValue);
  } else {
    const factory = providerToFactory(provider);
    return makeRecord(factory, NOT_YET);
  }
}
function providerToFactory(provider, ngModuleType, providers) {
  let factory = void 0;
  if (ngDevMode && isEnvironmentProviders(provider)) {
    throwInvalidProviderError(void 0, providers, provider);
  }
  if (isTypeProvider(provider)) {
    const unwrappedProvider = resolveForwardRef(provider);
    return getFactoryDef(unwrappedProvider) || injectableDefOrInjectorDefFactory(unwrappedProvider);
  } else {
    if (isValueProvider(provider)) {
      factory = () => resolveForwardRef(provider.useValue);
    } else if (isFactoryProvider(provider)) {
      factory = () => provider.useFactory(...injectArgs(provider.deps || []));
    } else if (isExistingProvider(provider)) {
      factory = () => \u0275\u0275inject(resolveForwardRef(provider.useExisting));
    } else {
      const classRef = resolveForwardRef(provider && (provider.useClass || provider.provide));
      if (ngDevMode && !classRef) {
        throwInvalidProviderError(ngModuleType, providers, provider);
      }
      if (hasDeps(provider)) {
        factory = () => new classRef(...injectArgs(provider.deps));
      } else {
        return getFactoryDef(classRef) || injectableDefOrInjectorDefFactory(classRef);
      }
    }
  }
  return factory;
}
function makeRecord(factory, value, multi = false) {
  return {
    factory,
    value,
    multi: multi ? [] : void 0
  };
}
function hasDeps(value) {
  return !!value.deps;
}
function hasOnDestroy(value) {
  return value !== null && typeof value === "object" && typeof value.ngOnDestroy === "function";
}
function couldBeInjectableType(value) {
  return typeof value === "function" || typeof value === "object" && value instanceof InjectionToken;
}
function forEachSingleProvider(providers, fn) {
  for (const provider of providers) {
    if (Array.isArray(provider)) {
      forEachSingleProvider(provider, fn);
    } else if (provider && isEnvironmentProviders(provider)) {
      forEachSingleProvider(provider.\u0275providers, fn);
    } else {
      fn(provider);
    }
  }
}
function runInInjectionContext(injector, fn) {
  if (injector instanceof R3Injector) {
    injector.assertNotDestroyed();
  }
  let prevInjectorProfilerContext;
  if (ngDevMode) {
    prevInjectorProfilerContext = setInjectorProfilerContext({ injector, token: null });
  }
  const prevInjector = setCurrentInjector(injector);
  const previousInjectImplementation = setInjectImplementation(void 0);
  try {
    return fn();
  } finally {
    setCurrentInjector(prevInjector);
    ngDevMode && setInjectorProfilerContext(prevInjectorProfilerContext);
    setInjectImplementation(previousInjectImplementation);
  }
}
function assertInInjectionContext(debugFn) {
  if (!getInjectImplementation() && !getCurrentInjector()) {
    throw new RuntimeError(-203, ngDevMode && debugFn.name + "() can only be used within an injection context such as a constructor, a factory function, a field initializer, or a function used with `runInInjectionContext`");
  }
}
var angularCoreDiEnv = {
  "\u0275\u0275defineInjectable": \u0275\u0275defineInjectable,
  "\u0275\u0275defineInjector": \u0275\u0275defineInjector,
  "\u0275\u0275inject": \u0275\u0275inject,
  "\u0275\u0275invalidFactoryDep": \u0275\u0275invalidFactoryDep,
  "resolveForwardRef": resolveForwardRef
};
function compileInjectable(type, meta) {
  let ngInjectableDef = null;
  let ngFactoryDef = null;
  if (!type.hasOwnProperty(NG_PROV_DEF)) {
    Object.defineProperty(type, NG_PROV_DEF, {
      get: () => {
        if (ngInjectableDef === null) {
          const compiler = getCompilerFacade({ usage: 0, kind: "injectable", type });
          ngInjectableDef = compiler.compileInjectable(angularCoreDiEnv, `ng:///${type.name}/\u0275prov.js`, getInjectableMetadata(type, meta));
        }
        return ngInjectableDef;
      }
    });
  }
  if (!type.hasOwnProperty(NG_FACTORY_DEF)) {
    Object.defineProperty(type, NG_FACTORY_DEF, {
      get: () => {
        if (ngFactoryDef === null) {
          const compiler = getCompilerFacade({ usage: 0, kind: "injectable", type });
          ngFactoryDef = compiler.compileFactory(angularCoreDiEnv, `ng:///${type.name}/\u0275fac.js`, {
            name: type.name,
            type,
            typeArgumentCount: 0,
            deps: reflectDependencies(type),
            target: compiler.FactoryTarget.Injectable
          });
        }
        return ngFactoryDef;
      },
      // Leave this configurable so that the factories from directives or pipes can take precedence.
      configurable: true
    });
  }
}
var USE_VALUE = getClosureSafeProperty({ provide: String, useValue: getClosureSafeProperty });
function isUseClassProvider(meta) {
  return meta.useClass !== void 0;
}
function isUseValueProvider(meta) {
  return USE_VALUE in meta;
}
function isUseFactoryProvider(meta) {
  return meta.useFactory !== void 0;
}
function isUseExistingProvider(meta) {
  return meta.useExisting !== void 0;
}
function getInjectableMetadata(type, srcMeta) {
  const meta = srcMeta || { providedIn: null };
  const compilerMeta = {
    name: type.name,
    type,
    typeArgumentCount: 0,
    providedIn: meta.providedIn
  };
  if ((isUseClassProvider(meta) || isUseFactoryProvider(meta)) && meta.deps !== void 0) {
    compilerMeta.deps = convertDependencies(meta.deps);
  }
  if (isUseClassProvider(meta)) {
    compilerMeta.useClass = meta.useClass;
  } else if (isUseValueProvider(meta)) {
    compilerMeta.useValue = meta.useValue;
  } else if (isUseFactoryProvider(meta)) {
    compilerMeta.useFactory = meta.useFactory;
  } else if (isUseExistingProvider(meta)) {
    compilerMeta.useExisting = meta.useExisting;
  }
  return compilerMeta;
}
var Injectable = makeDecorator("Injectable", void 0, void 0, void 0, (type, meta) => compileInjectable(type, meta));
function createInjector(defType, parent = null, additionalProviders = null, name) {
  const injector = createInjectorWithoutInjectorInstances(defType, parent, additionalProviders, name);
  injector.resolveInjectorInitializers();
  return injector;
}
function createInjectorWithoutInjectorInstances(defType, parent = null, additionalProviders = null, name, scopes = /* @__PURE__ */ new Set()) {
  const providers = [
    additionalProviders || EMPTY_ARRAY,
    importProvidersFrom(defType)
  ];
  name = name || (typeof defType === "object" ? void 0 : stringify(defType));
  return new R3Injector(providers, parent || getNullInjector(), name || null, scopes);
}
var _Injector = class _Injector {
  static create(options, parent) {
    if (Array.isArray(options)) {
      return createInjector({ name: "" }, parent, options, "");
    } else {
      const name = options.name ?? "";
      return createInjector({ name }, options.parent, options.providers, name);
    }
  }
};
_Injector.THROW_IF_NOT_FOUND = THROW_IF_NOT_FOUND;
_Injector.NULL = /* @__PURE__ */ new NullInjector();
_Injector.\u0275prov = \u0275\u0275defineInjectable({
  token: _Injector,
  providedIn: "any",
  factory: () => \u0275\u0275inject(INJECTOR)
});
_Injector.__NG_ELEMENT_ID__ = -1;
var Injector = _Injector;
function isModuleWithProviders(value) {
  return value.ngModule !== void 0;
}
function isNgModule(value) {
  return !!getNgModuleDef(value);
}
function isPipe(value) {
  return !!getPipeDef$1(value);
}
function isDirective(value) {
  return !!getDirectiveDef(value);
}
function isComponent(value) {
  return !!getComponentDef(value);
}
function getDependencyTypeForError(type) {
  if (getComponentDef(type))
    return "component";
  if (getDirectiveDef(type))
    return "directive";
  if (getPipeDef$1(type))
    return "pipe";
  return "type";
}
function verifyStandaloneImport(depType, importingType) {
  if (isForwardRef(depType)) {
    depType = resolveForwardRef(depType);
    if (!depType) {
      throw new Error(`Expected forwardRef function, imported from "${stringifyForError(importingType)}", to return a standalone entity or NgModule but got "${stringifyForError(depType) || depType}".`);
    }
  }
  if (getNgModuleDef(depType) == null) {
    const def = getComponentDef(depType) || getDirectiveDef(depType) || getPipeDef$1(depType);
    if (def != null) {
      if (!def.standalone) {
        throw new Error(`The "${stringifyForError(depType)}" ${getDependencyTypeForError(depType)}, imported from "${stringifyForError(importingType)}", is not standalone. Did you forget to add the standalone: true flag?`);
      }
    } else {
      if (isModuleWithProviders(depType)) {
        throw new Error(`A module with providers was imported from "${stringifyForError(importingType)}". Modules with providers are not supported in standalone components imports.`);
      } else {
        throw new Error(`The "${stringifyForError(depType)}" type, imported from "${stringifyForError(importingType)}", must be a standalone component / directive / pipe or an NgModule. Did you forget to add the required @Component / @Directive / @Pipe or @NgModule annotation?`);
      }
    }
  }
}
var DOCUMENT = void 0;
function setDocument(document2) {
  DOCUMENT = document2;
}
function getDocument() {
  if (DOCUMENT !== void 0) {
    return DOCUMENT;
  } else if (typeof document !== "undefined") {
    return document;
  }
  throw new RuntimeError(210, (typeof ngDevMode === "undefined" || ngDevMode) && `The document object is not available in this context. Make sure the DOCUMENT injection token is provided.`);
}
var APP_ID = new InjectionToken("AppId", {
  providedIn: "root",
  factory: () => DEFAULT_APP_ID
});
var DEFAULT_APP_ID = "ng";
var PLATFORM_INITIALIZER = new InjectionToken("Platform Initializer");
var PLATFORM_ID = new InjectionToken("Platform ID", {
  providedIn: "platform",
  factory: () => "unknown"
  // set a default platform name, when none set explicitly
});
var PACKAGE_ROOT_URL = new InjectionToken("Application Packages Root URL");
var ANIMATION_MODULE_TYPE = new InjectionToken("AnimationModuleType");
var CSP_NONCE = new InjectionToken("CSP nonce", {
  providedIn: "root",
  factory: () => {
    return getDocument().body?.querySelector("[ngCspNonce]")?.getAttribute("ngCspNonce") || null;
  }
});
var IMAGE_CONFIG_DEFAULTS = {
  breakpoints: [16, 32, 48, 64, 96, 128, 256, 384, 640, 750, 828, 1080, 1200, 1920, 2048, 3840],
  disableImageSizeWarning: false,
  disableImageLazyLoadWarning: false
};
var IMAGE_CONFIG = new InjectionToken("ImageConfig", { providedIn: "root", factory: () => IMAGE_CONFIG_DEFAULTS });
function \u0275\u0275resolveWindow(element) {
  return element.ownerDocument.defaultView;
}
function \u0275\u0275resolveDocument(element) {
  return element.ownerDocument;
}
function \u0275\u0275resolveBody(element) {
  return element.ownerDocument.body;
}
var INTERPOLATION_DELIMITER = `\uFFFD`;
function maybeUnwrapFn(value) {
  if (value instanceof Function) {
    return value();
  } else {
    return value;
  }
}
function isPlatformBrowser(injector) {
  return (injector ?? inject(Injector)).get(PLATFORM_ID) === "browser";
}
var USE_RUNTIME_DEPS_TRACKER_FOR_JIT = true;
var DepsTracker = class {
  constructor() {
    this.ownerNgModule = /* @__PURE__ */ new Map();
    this.ngModulesWithSomeUnresolvedDecls = /* @__PURE__ */ new Set();
    this.ngModulesScopeCache = /* @__PURE__ */ new Map();
    this.standaloneComponentsScopeCache = /* @__PURE__ */ new Map();
  }
  /**
   * Attempts to resolve ng module's forward ref declarations as much as possible and add them to
   * the `ownerNgModule` map. This method normally should be called after the initial parsing when
   * all the forward refs are resolved (e.g., when trying to render a component)
   */
  resolveNgModulesDecls() {
    if (this.ngModulesWithSomeUnresolvedDecls.size === 0) {
      return;
    }
    for (const moduleType of this.ngModulesWithSomeUnresolvedDecls) {
      const def = getNgModuleDef(moduleType);
      if (def?.declarations) {
        for (const decl of maybeUnwrapFn(def.declarations)) {
          if (isComponent(decl)) {
            this.ownerNgModule.set(decl, moduleType);
          }
        }
      }
    }
    this.ngModulesWithSomeUnresolvedDecls.clear();
  }
  /** @override */
  getComponentDependencies(type, rawImports) {
    this.resolveNgModulesDecls();
    const def = getComponentDef(type);
    if (def === null) {
      throw new Error(`Attempting to get component dependencies for a type that is not a component: ${type}`);
    }
    if (def.standalone) {
      const scope = this.getStandaloneComponentScope(type, rawImports);
      if (scope.compilation.isPoisoned) {
        return { dependencies: [] };
      }
      return {
        dependencies: [
          ...scope.compilation.directives,
          ...scope.compilation.pipes,
          ...scope.compilation.ngModules
        ]
      };
    } else {
      if (!this.ownerNgModule.has(type)) {
        return { dependencies: [] };
      }
      const scope = this.getNgModuleScope(this.ownerNgModule.get(type));
      if (scope.compilation.isPoisoned) {
        return { dependencies: [] };
      }
      return {
        dependencies: [
          ...scope.compilation.directives,
          ...scope.compilation.pipes
        ]
      };
    }
  }
  /**
   * @override
   * This implementation does not make use of param scopeInfo since it assumes the scope info is
   * already added to the type itself through methods like {@link ɵɵsetNgModuleScope}
   */
  registerNgModule(type, scopeInfo) {
    if (!isNgModule(type)) {
      throw new Error(`Attempting to register a Type which is not NgModule as NgModule: ${type}`);
    }
    this.ngModulesWithSomeUnresolvedDecls.add(type);
  }
  /** @override */
  clearScopeCacheFor(type) {
    this.ngModulesScopeCache.delete(type);
    this.standaloneComponentsScopeCache.delete(type);
  }
  /** @override */
  getNgModuleScope(type) {
    if (this.ngModulesScopeCache.has(type)) {
      return this.ngModulesScopeCache.get(type);
    }
    const scope = this.computeNgModuleScope(type);
    this.ngModulesScopeCache.set(type, scope);
    return scope;
  }
  /** Compute NgModule scope afresh. */
  computeNgModuleScope(type) {
    const def = getNgModuleDef(type, true);
    const scope = {
      exported: { directives: /* @__PURE__ */ new Set(), pipes: /* @__PURE__ */ new Set() },
      compilation: { directives: /* @__PURE__ */ new Set(), pipes: /* @__PURE__ */ new Set() }
    };
    for (const imported of maybeUnwrapFn(def.imports)) {
      if (isNgModule(imported)) {
        const importedScope = this.getNgModuleScope(imported);
        addSet(importedScope.exported.directives, scope.compilation.directives);
        addSet(importedScope.exported.pipes, scope.compilation.pipes);
      } else if (isStandalone(imported)) {
        if (isDirective(imported) || isComponent(imported)) {
          scope.compilation.directives.add(imported);
        } else if (isPipe(imported)) {
          scope.compilation.pipes.add(imported);
        } else {
          throw new RuntimeError(1e3, "The standalone imported type is neither a component nor a directive nor a pipe");
        }
      } else {
        scope.compilation.isPoisoned = true;
        break;
      }
    }
    if (!scope.compilation.isPoisoned) {
      for (const decl of maybeUnwrapFn(def.declarations)) {
        if (isNgModule(decl) || isStandalone(decl)) {
          scope.compilation.isPoisoned = true;
          break;
        }
        if (isPipe(decl)) {
          scope.compilation.pipes.add(decl);
        } else {
          scope.compilation.directives.add(decl);
        }
      }
    }
    for (const exported of maybeUnwrapFn(def.exports)) {
      if (isNgModule(exported)) {
        const exportedScope = this.getNgModuleScope(exported);
        addSet(exportedScope.exported.directives, scope.exported.directives);
        addSet(exportedScope.exported.pipes, scope.exported.pipes);
        addSet(exportedScope.exported.directives, scope.compilation.directives);
        addSet(exportedScope.exported.pipes, scope.compilation.pipes);
      } else if (isPipe(exported)) {
        scope.exported.pipes.add(exported);
      } else {
        scope.exported.directives.add(exported);
      }
    }
    return scope;
  }
  /** @override */
  getStandaloneComponentScope(type, rawImports) {
    if (this.standaloneComponentsScopeCache.has(type)) {
      return this.standaloneComponentsScopeCache.get(type);
    }
    const ans = this.computeStandaloneComponentScope(type, rawImports);
    this.standaloneComponentsScopeCache.set(type, ans);
    return ans;
  }
  computeStandaloneComponentScope(type, rawImports) {
    const ans = {
      compilation: {
        // Standalone components are always able to self-reference.
        directives: /* @__PURE__ */ new Set([type]),
        pipes: /* @__PURE__ */ new Set(),
        ngModules: /* @__PURE__ */ new Set()
      }
    };
    for (const rawImport of flatten(rawImports ?? [])) {
      const imported = resolveForwardRef(rawImport);
      try {
        verifyStandaloneImport(imported, type);
      } catch (e) {
        ans.compilation.isPoisoned = true;
        return ans;
      }
      if (isNgModule(imported)) {
        ans.compilation.ngModules.add(imported);
        const importedScope = this.getNgModuleScope(imported);
        if (importedScope.exported.isPoisoned) {
          ans.compilation.isPoisoned = true;
          return ans;
        }
        addSet(importedScope.exported.directives, ans.compilation.directives);
        addSet(importedScope.exported.pipes, ans.compilation.pipes);
      } else if (isPipe(imported)) {
        ans.compilation.pipes.add(imported);
      } else if (isDirective(imported) || isComponent(imported)) {
        ans.compilation.directives.add(imported);
      } else {
        ans.compilation.isPoisoned = true;
        return ans;
      }
    }
    return ans;
  }
  /** @override */
  isOrphanComponent(cmp) {
    const def = getComponentDef(cmp);
    if (!def || def.standalone) {
      return false;
    }
    this.resolveNgModulesDecls();
    return !this.ownerNgModule.has(cmp);
  }
};
function addSet(sourceSet, targetSet) {
  for (const m of sourceSet) {
    targetSet.add(m);
  }
}
var depsTracker = new DepsTracker();
var modules = /* @__PURE__ */ new Map();
var checkForDuplicateNgModules = true;
function assertSameOrNotExisting(id, type, incoming) {
  if (type && type !== incoming && checkForDuplicateNgModules) {
    throw new Error(`Duplicate module registered for ${id} - ${stringify(type)} vs ${stringify(type.name)}`);
  }
}
function registerNgModuleType(ngModuleType, id) {
  const existing = modules.get(id) || null;
  assertSameOrNotExisting(id, existing, ngModuleType);
  modules.set(id, ngModuleType);
}
var CUSTOM_ELEMENTS_SCHEMA = {
  name: "custom-elements"
};
var NO_ERRORS_SCHEMA = {
  name: "no-errors-schema"
};
var shouldThrowErrorOnUnknownElement = false;
var shouldThrowErrorOnUnknownProperty = false;
function validateElementIsKnown(element, lView, tagName, schemas, hasDirectives) {
  if (schemas === null)
    return;
  if (!hasDirectives && tagName !== null) {
    const isUnknown = (
      // Note that we can't check for `typeof HTMLUnknownElement === 'function'` because
      // Domino doesn't expose HTMLUnknownElement globally.
      typeof HTMLUnknownElement !== "undefined" && HTMLUnknownElement && element instanceof HTMLUnknownElement || typeof customElements !== "undefined" && tagName.indexOf("-") > -1 && !customElements.get(tagName)
    );
    if (isUnknown && !matchingSchemas(schemas, tagName)) {
      const isHostStandalone = isHostComponentStandalone(lView);
      const templateLocation = getTemplateLocationDetails(lView);
      const schemas2 = `'${isHostStandalone ? "@Component" : "@NgModule"}.schemas'`;
      let message = `'${tagName}' is not a known element${templateLocation}:
`;
      message += `1. If '${tagName}' is an Angular component, then verify that it is ${isHostStandalone ? "included in the '@Component.imports' of this component" : "a part of an @NgModule where this component is declared"}.
`;
      if (tagName && tagName.indexOf("-") > -1) {
        message += `2. If '${tagName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the ${schemas2} of this component to suppress this message.`;
      } else {
        message += `2. To allow any element add 'NO_ERRORS_SCHEMA' to the ${schemas2} of this component.`;
      }
      if (shouldThrowErrorOnUnknownElement) {
        throw new RuntimeError(304, message);
      } else {
        console.error(formatRuntimeError(304, message));
      }
    }
  }
}
function isPropertyValid(element, propName, tagName, schemas) {
  if (schemas === null)
    return true;
  if (matchingSchemas(schemas, tagName) || propName in element || isAnimationProp(propName)) {
    return true;
  }
  return typeof Node === "undefined" || Node === null || !(element instanceof Node);
}
function handleUnknownPropertyError(propName, tagName, nodeType, lView) {
  if (!tagName && nodeType === 4) {
    tagName = "ng-template";
  }
  const isHostStandalone = isHostComponentStandalone(lView);
  const templateLocation = getTemplateLocationDetails(lView);
  let message = `Can't bind to '${propName}' since it isn't a known property of '${tagName}'${templateLocation}.`;
  const schemas = `'${isHostStandalone ? "@Component" : "@NgModule"}.schemas'`;
  const importLocation = isHostStandalone ? "included in the '@Component.imports' of this component" : "a part of an @NgModule where this component is declared";
  if (KNOWN_CONTROL_FLOW_DIRECTIVES.has(propName)) {
    const correspondingImport = KNOWN_CONTROL_FLOW_DIRECTIVES.get(propName);
    message += `
If the '${propName}' is an Angular control flow directive, please make sure that either the '${correspondingImport}' directive or the 'CommonModule' is ${importLocation}.`;
  } else {
    message += `
1. If '${tagName}' is an Angular component and it has the '${propName}' input, then verify that it is ${importLocation}.`;
    if (tagName && tagName.indexOf("-") > -1) {
      message += `
2. If '${tagName}' is a Web Component then add 'CUSTOM_ELEMENTS_SCHEMA' to the ${schemas} of this component to suppress this message.`;
      message += `
3. To allow any property add 'NO_ERRORS_SCHEMA' to the ${schemas} of this component.`;
    } else {
      message += `
2. To allow any property add 'NO_ERRORS_SCHEMA' to the ${schemas} of this component.`;
    }
  }
  reportUnknownPropertyError(message);
}
function reportUnknownPropertyError(message) {
  if (shouldThrowErrorOnUnknownProperty) {
    throw new RuntimeError(303, message);
  } else {
    console.error(formatRuntimeError(303, message));
  }
}
function getDeclarationComponentDef(lView) {
  !ngDevMode && throwError2("Must never be called in production mode");
  const declarationLView = lView[DECLARATION_COMPONENT_VIEW];
  const context2 = declarationLView[CONTEXT];
  if (!context2)
    return null;
  return context2.constructor ? getComponentDef(context2.constructor) : null;
}
function isHostComponentStandalone(lView) {
  !ngDevMode && throwError2("Must never be called in production mode");
  const componentDef = getDeclarationComponentDef(lView);
  return !!componentDef?.standalone;
}
function getTemplateLocationDetails(lView) {
  !ngDevMode && throwError2("Must never be called in production mode");
  const hostComponentDef = getDeclarationComponentDef(lView);
  const componentClassName = hostComponentDef?.type?.name;
  return componentClassName ? ` (used in the '${componentClassName}' component template)` : "";
}
var KNOWN_CONTROL_FLOW_DIRECTIVES = /* @__PURE__ */ new Map([
  ["ngIf", "NgIf"],
  ["ngFor", "NgFor"],
  ["ngSwitchCase", "NgSwitchCase"],
  ["ngSwitchDefault", "NgSwitchDefault"]
]);
function matchingSchemas(schemas, tagName) {
  if (schemas !== null) {
    for (let i = 0; i < schemas.length; i++) {
      const schema = schemas[i];
      if (schema === NO_ERRORS_SCHEMA || schema === CUSTOM_ELEMENTS_SCHEMA && tagName && tagName.indexOf("-") > -1) {
        return true;
      }
    }
  }
  return false;
}
function hasInSkipHydrationBlockFlag(tNode) {
  return (tNode.flags & 128) === 128;
}
var RendererStyleFlags2;
(function(RendererStyleFlags22) {
  RendererStyleFlags22[RendererStyleFlags22["Important"] = 1] = "Important";
  RendererStyleFlags22[RendererStyleFlags22["DashCase"] = 2] = "DashCase";
})(RendererStyleFlags2 || (RendererStyleFlags2 = {}));
var COMMENT_DISALLOWED = /^>|^->|<!--|-->|--!>|<!-$/g;
var COMMENT_DELIMITER = /(<|>)/g;
var COMMENT_DELIMITER_ESCAPED = "\u200B$1\u200B";
function escapeCommentText(value) {
  return value.replace(COMMENT_DISALLOWED, (text) => text.replace(COMMENT_DELIMITER, COMMENT_DELIMITER_ESCAPED));
}
var TRACKED_LVIEWS = /* @__PURE__ */ new Map();
var uniqueIdCounter = 0;
function getUniqueLViewId() {
  return uniqueIdCounter++;
}
function registerLView(lView) {
  ngDevMode && assertNumber(lView[ID], "LView must have an ID in order to be registered");
  TRACKED_LVIEWS.set(lView[ID], lView);
}
function getLViewById(id) {
  ngDevMode && assertNumber(id, "ID used for LView lookup must be a number");
  return TRACKED_LVIEWS.get(id) || null;
}
function unregisterLView(lView) {
  ngDevMode && assertNumber(lView[ID], "Cannot stop tracking an LView that does not have an ID");
  TRACKED_LVIEWS.delete(lView[ID]);
}
var LContext = class {
  /** Component's parent view data. */
  get lView() {
    return getLViewById(this.lViewId);
  }
  constructor(lViewId, nodeIndex, native) {
    this.lViewId = lViewId;
    this.nodeIndex = nodeIndex;
    this.native = native;
  }
};
function getLContext(target) {
  let mpValue = readPatchedData(target);
  if (mpValue) {
    if (isLView(mpValue)) {
      const lView = mpValue;
      let nodeIndex;
      let component = void 0;
      let directives = void 0;
      if (isComponentInstance(target)) {
        nodeIndex = findViaComponent(lView, target);
        if (nodeIndex == -1) {
          throw new Error("The provided component was not found in the application");
        }
        component = target;
      } else if (isDirectiveInstance(target)) {
        nodeIndex = findViaDirective(lView, target);
        if (nodeIndex == -1) {
          throw new Error("The provided directive was not found in the application");
        }
        directives = getDirectivesAtNodeIndex(nodeIndex, lView);
      } else {
        nodeIndex = findViaNativeElement(lView, target);
        if (nodeIndex == -1) {
          return null;
        }
      }
      const native = unwrapRNode(lView[nodeIndex]);
      const existingCtx = readPatchedData(native);
      const context2 = existingCtx && !Array.isArray(existingCtx) ? existingCtx : createLContext(lView, nodeIndex, native);
      if (component && context2.component === void 0) {
        context2.component = component;
        attachPatchData(context2.component, context2);
      }
      if (directives && context2.directives === void 0) {
        context2.directives = directives;
        for (let i = 0; i < directives.length; i++) {
          attachPatchData(directives[i], context2);
        }
      }
      attachPatchData(context2.native, context2);
      mpValue = context2;
    }
  } else {
    const rElement = target;
    ngDevMode && assertDomNode(rElement);
    let parent = rElement;
    while (parent = parent.parentNode) {
      const parentContext = readPatchedData(parent);
      if (parentContext) {
        const lView = Array.isArray(parentContext) ? parentContext : parentContext.lView;
        if (!lView) {
          return null;
        }
        const index = findViaNativeElement(lView, rElement);
        if (index >= 0) {
          const native = unwrapRNode(lView[index]);
          const context2 = createLContext(lView, index, native);
          attachPatchData(native, context2);
          mpValue = context2;
          break;
        }
      }
    }
  }
  return mpValue || null;
}
function createLContext(lView, nodeIndex, native) {
  return new LContext(lView[ID], nodeIndex, native);
}
function getComponentViewByInstance(componentInstance) {
  let patchedData = readPatchedData(componentInstance);
  let lView;
  if (isLView(patchedData)) {
    const contextLView = patchedData;
    const nodeIndex = findViaComponent(contextLView, componentInstance);
    lView = getComponentLViewByIndex(nodeIndex, contextLView);
    const context2 = createLContext(contextLView, nodeIndex, lView[HOST]);
    context2.component = componentInstance;
    attachPatchData(componentInstance, context2);
    attachPatchData(context2.native, context2);
  } else {
    const context2 = patchedData;
    const contextLView = context2.lView;
    ngDevMode && assertLView(contextLView);
    lView = getComponentLViewByIndex(context2.nodeIndex, contextLView);
  }
  return lView;
}
var MONKEY_PATCH_KEY_NAME = "__ngContext__";
function attachPatchData(target, data) {
  ngDevMode && assertDefined(target, "Target expected");
  if (isLView(data)) {
    target[MONKEY_PATCH_KEY_NAME] = data[ID];
    registerLView(data);
  } else {
    target[MONKEY_PATCH_KEY_NAME] = data;
  }
}
function readPatchedData(target) {
  ngDevMode && assertDefined(target, "Target expected");
  const data = target[MONKEY_PATCH_KEY_NAME];
  return typeof data === "number" ? getLViewById(data) : data || null;
}
function readPatchedLView(target) {
  const value = readPatchedData(target);
  if (value) {
    return isLView(value) ? value : value.lView;
  }
  return null;
}
function isComponentInstance(instance) {
  return instance && instance.constructor && instance.constructor.\u0275cmp;
}
function isDirectiveInstance(instance) {
  return instance && instance.constructor && instance.constructor.\u0275dir;
}
function findViaNativeElement(lView, target) {
  const tView = lView[TVIEW];
  for (let i = HEADER_OFFSET; i < tView.bindingStartIndex; i++) {
    if (unwrapRNode(lView[i]) === target) {
      return i;
    }
  }
  return -1;
}
function traverseNextElement(tNode) {
  if (tNode.child) {
    return tNode.child;
  } else if (tNode.next) {
    return tNode.next;
  } else {
    while (tNode.parent && !tNode.parent.next) {
      tNode = tNode.parent;
    }
    return tNode.parent && tNode.parent.next;
  }
}
function findViaComponent(lView, componentInstance) {
  const componentIndices = lView[TVIEW].components;
  if (componentIndices) {
    for (let i = 0; i < componentIndices.length; i++) {
      const elementComponentIndex = componentIndices[i];
      const componentView = getComponentLViewByIndex(elementComponentIndex, lView);
      if (componentView[CONTEXT] === componentInstance) {
        return elementComponentIndex;
      }
    }
  } else {
    const rootComponentView = getComponentLViewByIndex(HEADER_OFFSET, lView);
    const rootComponent = rootComponentView[CONTEXT];
    if (rootComponent === componentInstance) {
      return HEADER_OFFSET;
    }
  }
  return -1;
}
function findViaDirective(lView, directiveInstance) {
  let tNode = lView[TVIEW].firstChild;
  while (tNode) {
    const directiveIndexStart = tNode.directiveStart;
    const directiveIndexEnd = tNode.directiveEnd;
    for (let i = directiveIndexStart; i < directiveIndexEnd; i++) {
      if (lView[i] === directiveInstance) {
        return tNode.index;
      }
    }
    tNode = traverseNextElement(tNode);
  }
  return -1;
}
function getDirectivesAtNodeIndex(nodeIndex, lView) {
  const tNode = lView[TVIEW].data[nodeIndex];
  if (tNode.directiveStart === 0)
    return EMPTY_ARRAY;
  const results = [];
  for (let i = tNode.directiveStart; i < tNode.directiveEnd; i++) {
    const directiveInstance = lView[i];
    if (!isComponentInstance(directiveInstance)) {
      results.push(directiveInstance);
    }
  }
  return results;
}
function getComponentAtNodeIndex(nodeIndex, lView) {
  const tNode = lView[TVIEW].data[nodeIndex];
  const { directiveStart, componentOffset } = tNode;
  return componentOffset > -1 ? lView[directiveStart + componentOffset] : null;
}
var _icuContainerIterate;
function icuContainerIterate(tIcuContainerNode, lView) {
  return _icuContainerIterate(tIcuContainerNode, lView);
}
function ensureIcuContainerVisitorLoaded(loader) {
  if (_icuContainerIterate === void 0) {
    _icuContainerIterate = loader();
  }
}
function getLViewParent(lView) {
  ngDevMode && assertLView(lView);
  const parent = lView[PARENT];
  return isLContainer(parent) ? parent[PARENT] : parent;
}
function getRootView(componentOrLView) {
  ngDevMode && assertDefined(componentOrLView, "component");
  let lView = isLView(componentOrLView) ? componentOrLView : readPatchedLView(componentOrLView);
  while (lView && !(lView[FLAGS] & 512)) {
    lView = getLViewParent(lView);
  }
  ngDevMode && assertLView(lView);
  return lView;
}
function getRootContext(viewOrComponent) {
  const rootView = getRootView(viewOrComponent);
  ngDevMode && assertDefined(rootView[CONTEXT], "Root view has no context. Perhaps it is disconnected?");
  return rootView[CONTEXT];
}
function getFirstLContainer(lView) {
  return getNearestLContainer(lView[CHILD_HEAD]);
}
function getNextLContainer(container) {
  return getNearestLContainer(container[NEXT]);
}
function getNearestLContainer(viewOrContainer) {
  while (viewOrContainer !== null && !isLContainer(viewOrContainer)) {
    viewOrContainer = viewOrContainer[NEXT];
  }
  return viewOrContainer;
}
function applyToElementOrContainer(action, renderer, parent, lNodeToHandle, beforeNode) {
  if (lNodeToHandle != null) {
    let lContainer;
    let isComponent2 = false;
    if (isLContainer(lNodeToHandle)) {
      lContainer = lNodeToHandle;
    } else if (isLView(lNodeToHandle)) {
      isComponent2 = true;
      ngDevMode && assertDefined(lNodeToHandle[HOST], "HOST must be defined for a component LView");
      lNodeToHandle = lNodeToHandle[HOST];
    }
    const rNode = unwrapRNode(lNodeToHandle);
    if (action === 0 && parent !== null) {
      if (beforeNode == null) {
        nativeAppendChild(renderer, parent, rNode);
      } else {
        nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);
      }
    } else if (action === 1 && parent !== null) {
      nativeInsertBefore(renderer, parent, rNode, beforeNode || null, true);
    } else if (action === 2) {
      nativeRemoveNode(renderer, rNode, isComponent2);
    } else if (action === 3) {
      ngDevMode && ngDevMode.rendererDestroyNode++;
      renderer.destroyNode(rNode);
    }
    if (lContainer != null) {
      applyContainer(renderer, action, lContainer, parent, beforeNode);
    }
  }
}
function createTextNode(renderer, value) {
  ngDevMode && ngDevMode.rendererCreateTextNode++;
  ngDevMode && ngDevMode.rendererSetText++;
  return renderer.createText(value);
}
function updateTextNode(renderer, rNode, value) {
  ngDevMode && ngDevMode.rendererSetText++;
  renderer.setValue(rNode, value);
}
function createCommentNode(renderer, value) {
  ngDevMode && ngDevMode.rendererCreateComment++;
  return renderer.createComment(escapeCommentText(value));
}
function createElementNode(renderer, name, namespace) {
  ngDevMode && ngDevMode.rendererCreateElement++;
  return renderer.createElement(name, namespace);
}
function removeViewFromDOM(tView, lView) {
  const renderer = lView[RENDERER];
  applyView(tView, lView, renderer, 2, null, null);
  lView[HOST] = null;
  lView[T_HOST] = null;
}
function addViewToDOM(tView, parentTNode, renderer, lView, parentNativeNode, beforeNode) {
  lView[HOST] = parentNativeNode;
  lView[T_HOST] = parentTNode;
  applyView(tView, lView, renderer, 1, parentNativeNode, beforeNode);
}
function detachViewFromDOM(tView, lView) {
  applyView(tView, lView, lView[RENDERER], 2, null, null);
}
function destroyViewTree(rootView) {
  let lViewOrLContainer = rootView[CHILD_HEAD];
  if (!lViewOrLContainer) {
    return cleanUpView(rootView[TVIEW], rootView);
  }
  while (lViewOrLContainer) {
    let next = null;
    if (isLView(lViewOrLContainer)) {
      next = lViewOrLContainer[CHILD_HEAD];
    } else {
      ngDevMode && assertLContainer(lViewOrLContainer);
      const firstView = lViewOrLContainer[CONTAINER_HEADER_OFFSET];
      if (firstView)
        next = firstView;
    }
    if (!next) {
      while (lViewOrLContainer && !lViewOrLContainer[NEXT] && lViewOrLContainer !== rootView) {
        if (isLView(lViewOrLContainer)) {
          cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);
        }
        lViewOrLContainer = lViewOrLContainer[PARENT];
      }
      if (lViewOrLContainer === null)
        lViewOrLContainer = rootView;
      if (isLView(lViewOrLContainer)) {
        cleanUpView(lViewOrLContainer[TVIEW], lViewOrLContainer);
      }
      next = lViewOrLContainer && lViewOrLContainer[NEXT];
    }
    lViewOrLContainer = next;
  }
}
function insertView(tView, lView, lContainer, index) {
  ngDevMode && assertLView(lView);
  ngDevMode && assertLContainer(lContainer);
  const indexInContainer = CONTAINER_HEADER_OFFSET + index;
  const containerLength = lContainer.length;
  if (index > 0) {
    lContainer[indexInContainer - 1][NEXT] = lView;
  }
  if (index < containerLength - CONTAINER_HEADER_OFFSET) {
    lView[NEXT] = lContainer[indexInContainer];
    addToArray(lContainer, CONTAINER_HEADER_OFFSET + index, lView);
  } else {
    lContainer.push(lView);
    lView[NEXT] = null;
  }
  lView[PARENT] = lContainer;
  const declarationLContainer = lView[DECLARATION_LCONTAINER];
  if (declarationLContainer !== null && lContainer !== declarationLContainer) {
    trackMovedView(declarationLContainer, lView);
  }
  const lQueries = lView[QUERIES];
  if (lQueries !== null) {
    lQueries.insertView(tView);
  }
  updateAncestorTraversalFlagsOnAttach(lView);
  lView[FLAGS] |= 128;
}
function trackMovedView(declarationContainer, lView) {
  ngDevMode && assertDefined(lView, "LView required");
  ngDevMode && assertLContainer(declarationContainer);
  const movedViews = declarationContainer[MOVED_VIEWS];
  const insertedLContainer = lView[PARENT];
  ngDevMode && assertLContainer(insertedLContainer);
  const insertedComponentLView = insertedLContainer[PARENT][DECLARATION_COMPONENT_VIEW];
  ngDevMode && assertDefined(insertedComponentLView, "Missing insertedComponentLView");
  const declaredComponentLView = lView[DECLARATION_COMPONENT_VIEW];
  ngDevMode && assertDefined(declaredComponentLView, "Missing declaredComponentLView");
  if (declaredComponentLView !== insertedComponentLView) {
    declarationContainer[FLAGS] |= LContainerFlags.HasTransplantedViews;
  }
  if (movedViews === null) {
    declarationContainer[MOVED_VIEWS] = [lView];
  } else {
    movedViews.push(lView);
  }
}
function detachMovedView(declarationContainer, lView) {
  ngDevMode && assertLContainer(declarationContainer);
  ngDevMode && assertDefined(declarationContainer[MOVED_VIEWS], "A projected view should belong to a non-empty projected views collection");
  const movedViews = declarationContainer[MOVED_VIEWS];
  const declarationViewIndex = movedViews.indexOf(lView);
  const insertionLContainer = lView[PARENT];
  ngDevMode && assertLContainer(insertionLContainer);
  movedViews.splice(declarationViewIndex, 1);
}
function detachView(lContainer, removeIndex) {
  if (lContainer.length <= CONTAINER_HEADER_OFFSET)
    return;
  const indexInContainer = CONTAINER_HEADER_OFFSET + removeIndex;
  const viewToDetach = lContainer[indexInContainer];
  if (viewToDetach) {
    const declarationLContainer = viewToDetach[DECLARATION_LCONTAINER];
    if (declarationLContainer !== null && declarationLContainer !== lContainer) {
      detachMovedView(declarationLContainer, viewToDetach);
    }
    if (removeIndex > 0) {
      lContainer[indexInContainer - 1][NEXT] = viewToDetach[NEXT];
    }
    const removedLView = removeFromArray(lContainer, CONTAINER_HEADER_OFFSET + removeIndex);
    removeViewFromDOM(viewToDetach[TVIEW], viewToDetach);
    const lQueries = removedLView[QUERIES];
    if (lQueries !== null) {
      lQueries.detachView(removedLView[TVIEW]);
    }
    viewToDetach[PARENT] = null;
    viewToDetach[NEXT] = null;
    viewToDetach[FLAGS] &= ~128;
  }
  return viewToDetach;
}
function destroyLView(tView, lView) {
  if (!(lView[FLAGS] & 256)) {
    const renderer = lView[RENDERER];
    if (renderer.destroyNode) {
      applyView(tView, lView, renderer, 3, null, null);
    }
    destroyViewTree(lView);
  }
}
function cleanUpView(tView, lView) {
  if (!(lView[FLAGS] & 256)) {
    lView[FLAGS] &= ~128;
    lView[FLAGS] |= 256;
    lView[REACTIVE_TEMPLATE_CONSUMER] && consumerDestroy(lView[REACTIVE_TEMPLATE_CONSUMER]);
    executeOnDestroys(tView, lView);
    processCleanups(tView, lView);
    if (lView[TVIEW].type === 1) {
      ngDevMode && ngDevMode.rendererDestroy++;
      lView[RENDERER].destroy();
    }
    const declarationContainer = lView[DECLARATION_LCONTAINER];
    if (declarationContainer !== null && isLContainer(lView[PARENT])) {
      if (declarationContainer !== lView[PARENT]) {
        detachMovedView(declarationContainer, lView);
      }
      const lQueries = lView[QUERIES];
      if (lQueries !== null) {
        lQueries.detachView(tView);
      }
    }
    unregisterLView(lView);
  }
}
function processCleanups(tView, lView) {
  const tCleanup = tView.cleanup;
  const lCleanup = lView[CLEANUP];
  if (tCleanup !== null) {
    for (let i = 0; i < tCleanup.length - 1; i += 2) {
      if (typeof tCleanup[i] === "string") {
        const targetIdx = tCleanup[i + 3];
        ngDevMode && assertNumber(targetIdx, "cleanup target must be a number");
        if (targetIdx >= 0) {
          lCleanup[targetIdx]();
        } else {
          lCleanup[-targetIdx].unsubscribe();
        }
        i += 2;
      } else {
        const context2 = lCleanup[tCleanup[i + 1]];
        tCleanup[i].call(context2);
      }
    }
  }
  if (lCleanup !== null) {
    lView[CLEANUP] = null;
  }
  const destroyHooks = lView[ON_DESTROY_HOOKS];
  if (destroyHooks !== null) {
    lView[ON_DESTROY_HOOKS] = null;
    for (let i = 0; i < destroyHooks.length; i++) {
      const destroyHooksFn = destroyHooks[i];
      ngDevMode && assertFunction(destroyHooksFn, "Expecting destroy hook to be a function.");
      destroyHooksFn();
    }
  }
}
function executeOnDestroys(tView, lView) {
  let destroyHooks;
  if (tView != null && (destroyHooks = tView.destroyHooks) != null) {
    for (let i = 0; i < destroyHooks.length; i += 2) {
      const context2 = lView[destroyHooks[i]];
      if (!(context2 instanceof NodeInjectorFactory)) {
        const toCall = destroyHooks[i + 1];
        if (Array.isArray(toCall)) {
          for (let j = 0; j < toCall.length; j += 2) {
            const callContext = context2[toCall[j]];
            const hook = toCall[j + 1];
            profiler(4, callContext, hook);
            try {
              hook.call(callContext);
            } finally {
              profiler(5, callContext, hook);
            }
          }
        } else {
          profiler(4, context2, toCall);
          try {
            toCall.call(context2);
          } finally {
            profiler(5, context2, toCall);
          }
        }
      }
    }
  }
}
function getParentRElement(tView, tNode, lView) {
  return getClosestRElement(tView, tNode.parent, lView);
}
function getClosestRElement(tView, tNode, lView) {
  let parentTNode = tNode;
  while (parentTNode !== null && parentTNode.type & (8 | 32)) {
    tNode = parentTNode;
    parentTNode = tNode.parent;
  }
  if (parentTNode === null) {
    return lView[HOST];
  } else {
    ngDevMode && assertTNodeType(
      parentTNode,
      3 | 4
      /* TNodeType.Container */
    );
    const { componentOffset } = parentTNode;
    if (componentOffset > -1) {
      ngDevMode && assertTNodeForLView(parentTNode, lView);
      const { encapsulation } = tView.data[parentTNode.directiveStart + componentOffset];
      if (encapsulation === ViewEncapsulation$1.None || encapsulation === ViewEncapsulation$1.Emulated) {
        return null;
      }
    }
    return getNativeByTNode(parentTNode, lView);
  }
}
function nativeInsertBefore(renderer, parent, child, beforeNode, isMove) {
  ngDevMode && ngDevMode.rendererInsertBefore++;
  renderer.insertBefore(parent, child, beforeNode, isMove);
}
function nativeAppendChild(renderer, parent, child) {
  ngDevMode && ngDevMode.rendererAppendChild++;
  ngDevMode && assertDefined(parent, "parent node must be defined");
  renderer.appendChild(parent, child);
}
function nativeAppendOrInsertBefore(renderer, parent, child, beforeNode, isMove) {
  if (beforeNode !== null) {
    nativeInsertBefore(renderer, parent, child, beforeNode, isMove);
  } else {
    nativeAppendChild(renderer, parent, child);
  }
}
function nativeRemoveChild(renderer, parent, child, isHostElement) {
  renderer.removeChild(parent, child, isHostElement);
}
function nativeParentNode(renderer, node) {
  return renderer.parentNode(node);
}
function nativeNextSibling(renderer, node) {
  return renderer.nextSibling(node);
}
function getInsertInFrontOfRNode(parentTNode, currentTNode, lView) {
  return _getInsertInFrontOfRNodeWithI18n(parentTNode, currentTNode, lView);
}
function getInsertInFrontOfRNodeWithNoI18n(parentTNode, currentTNode, lView) {
  if (parentTNode.type & (8 | 32)) {
    return getNativeByTNode(parentTNode, lView);
  }
  return null;
}
var _getInsertInFrontOfRNodeWithI18n = getInsertInFrontOfRNodeWithNoI18n;
var _processI18nInsertBefore;
function setI18nHandling(getInsertInFrontOfRNodeWithI18n2, processI18nInsertBefore2) {
  _getInsertInFrontOfRNodeWithI18n = getInsertInFrontOfRNodeWithI18n2;
  _processI18nInsertBefore = processI18nInsertBefore2;
}
function appendChild(tView, lView, childRNode, childTNode) {
  const parentRNode = getParentRElement(tView, childTNode, lView);
  const renderer = lView[RENDERER];
  const parentTNode = childTNode.parent || lView[T_HOST];
  const anchorNode = getInsertInFrontOfRNode(parentTNode, childTNode, lView);
  if (parentRNode != null) {
    if (Array.isArray(childRNode)) {
      for (let i = 0; i < childRNode.length; i++) {
        nativeAppendOrInsertBefore(renderer, parentRNode, childRNode[i], anchorNode, false);
      }
    } else {
      nativeAppendOrInsertBefore(renderer, parentRNode, childRNode, anchorNode, false);
    }
  }
  _processI18nInsertBefore !== void 0 && _processI18nInsertBefore(renderer, childTNode, lView, childRNode, parentRNode);
}
function getFirstNativeNode(lView, tNode) {
  if (tNode !== null) {
    ngDevMode && assertTNodeType(
      tNode,
      3 | 12 | 32 | 16
      /* TNodeType.Projection */
    );
    const tNodeType = tNode.type;
    if (tNodeType & 3) {
      return getNativeByTNode(tNode, lView);
    } else if (tNodeType & 4) {
      return getBeforeNodeForView(-1, lView[tNode.index]);
    } else if (tNodeType & 8) {
      const elIcuContainerChild = tNode.child;
      if (elIcuContainerChild !== null) {
        return getFirstNativeNode(lView, elIcuContainerChild);
      } else {
        const rNodeOrLContainer = lView[tNode.index];
        if (isLContainer(rNodeOrLContainer)) {
          return getBeforeNodeForView(-1, rNodeOrLContainer);
        } else {
          return unwrapRNode(rNodeOrLContainer);
        }
      }
    } else if (tNodeType & 32) {
      let nextRNode = icuContainerIterate(tNode, lView);
      let rNode = nextRNode();
      return rNode || unwrapRNode(lView[tNode.index]);
    } else {
      const projectionNodes = getProjectionNodes(lView, tNode);
      if (projectionNodes !== null) {
        if (Array.isArray(projectionNodes)) {
          return projectionNodes[0];
        }
        const parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW]);
        ngDevMode && assertParentView(parentView);
        return getFirstNativeNode(parentView, projectionNodes);
      } else {
        return getFirstNativeNode(lView, tNode.next);
      }
    }
  }
  return null;
}
function getProjectionNodes(lView, tNode) {
  if (tNode !== null) {
    const componentView = lView[DECLARATION_COMPONENT_VIEW];
    const componentHost = componentView[T_HOST];
    const slotIdx = tNode.projection;
    ngDevMode && assertProjectionSlots(lView);
    return componentHost.projection[slotIdx];
  }
  return null;
}
function getBeforeNodeForView(viewIndexInContainer, lContainer) {
  const nextViewIndex = CONTAINER_HEADER_OFFSET + viewIndexInContainer + 1;
  if (nextViewIndex < lContainer.length) {
    const lView = lContainer[nextViewIndex];
    const firstTNodeOfView = lView[TVIEW].firstChild;
    if (firstTNodeOfView !== null) {
      return getFirstNativeNode(lView, firstTNodeOfView);
    }
  }
  return lContainer[NATIVE];
}
function nativeRemoveNode(renderer, rNode, isHostElement) {
  ngDevMode && ngDevMode.rendererRemoveNode++;
  const nativeParent = nativeParentNode(renderer, rNode);
  if (nativeParent) {
    nativeRemoveChild(renderer, nativeParent, rNode, isHostElement);
  }
}
function applyNodes(renderer, action, tNode, lView, parentRElement, beforeNode, isProjection) {
  while (tNode != null) {
    ngDevMode && assertTNodeForLView(tNode, lView);
    ngDevMode && assertTNodeType(
      tNode,
      3 | 12 | 16 | 32
      /* TNodeType.Icu */
    );
    const rawSlotValue = lView[tNode.index];
    const tNodeType = tNode.type;
    if (isProjection) {
      if (action === 0) {
        rawSlotValue && attachPatchData(unwrapRNode(rawSlotValue), lView);
        tNode.flags |= 2;
      }
    }
    if ((tNode.flags & 32) !== 32) {
      if (tNodeType & 8) {
        applyNodes(renderer, action, tNode.child, lView, parentRElement, beforeNode, false);
        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);
      } else if (tNodeType & 32) {
        const nextRNode = icuContainerIterate(tNode, lView);
        let rNode;
        while (rNode = nextRNode()) {
          applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);
        }
        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);
      } else if (tNodeType & 16) {
        applyProjectionRecursive(renderer, action, lView, tNode, parentRElement, beforeNode);
      } else {
        ngDevMode && assertTNodeType(
          tNode,
          3 | 4
          /* TNodeType.Container */
        );
        applyToElementOrContainer(action, renderer, parentRElement, rawSlotValue, beforeNode);
      }
    }
    tNode = isProjection ? tNode.projectionNext : tNode.next;
  }
}
function applyView(tView, lView, renderer, action, parentRElement, beforeNode) {
  applyNodes(renderer, action, tView.firstChild, lView, parentRElement, beforeNode, false);
}
function applyProjection(tView, lView, tProjectionNode) {
  const renderer = lView[RENDERER];
  const parentRNode = getParentRElement(tView, tProjectionNode, lView);
  const parentTNode = tProjectionNode.parent || lView[T_HOST];
  let beforeNode = getInsertInFrontOfRNode(parentTNode, tProjectionNode, lView);
  applyProjectionRecursive(renderer, 0, lView, tProjectionNode, parentRNode, beforeNode);
}
function applyProjectionRecursive(renderer, action, lView, tProjectionNode, parentRElement, beforeNode) {
  const componentLView = lView[DECLARATION_COMPONENT_VIEW];
  const componentNode = componentLView[T_HOST];
  ngDevMode && assertEqual(typeof tProjectionNode.projection, "number", "expecting projection index");
  const nodeToProjectOrRNodes = componentNode.projection[tProjectionNode.projection];
  if (Array.isArray(nodeToProjectOrRNodes)) {
    for (let i = 0; i < nodeToProjectOrRNodes.length; i++) {
      const rNode = nodeToProjectOrRNodes[i];
      applyToElementOrContainer(action, renderer, parentRElement, rNode, beforeNode);
    }
  } else {
    let nodeToProject = nodeToProjectOrRNodes;
    const projectedComponentLView = componentLView[PARENT];
    if (hasInSkipHydrationBlockFlag(tProjectionNode)) {
      nodeToProject.flags |= 128;
    }
    applyNodes(renderer, action, nodeToProject, projectedComponentLView, parentRElement, beforeNode, true);
  }
}
function applyContainer(renderer, action, lContainer, parentRElement, beforeNode) {
  ngDevMode && assertLContainer(lContainer);
  const anchor = lContainer[NATIVE];
  const native = unwrapRNode(lContainer);
  if (anchor !== native) {
    applyToElementOrContainer(action, renderer, parentRElement, anchor, beforeNode);
  }
  for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
    const lView = lContainer[i];
    applyView(lView[TVIEW], lView, renderer, action, parentRElement, anchor);
  }
}
function applyStyling(renderer, isClassBased, rNode, prop, value) {
  if (isClassBased) {
    if (!value) {
      ngDevMode && ngDevMode.rendererRemoveClass++;
      renderer.removeClass(rNode, prop);
    } else {
      ngDevMode && ngDevMode.rendererAddClass++;
      renderer.addClass(rNode, prop);
    }
  } else {
    let flags = prop.indexOf("-") === -1 ? void 0 : RendererStyleFlags2.DashCase;
    if (value == null) {
      ngDevMode && ngDevMode.rendererRemoveStyle++;
      renderer.removeStyle(rNode, prop, flags);
    } else {
      const isImportant = typeof value === "string" ? value.endsWith("!important") : false;
      if (isImportant) {
        value = value.slice(0, -10);
        flags |= RendererStyleFlags2.Important;
      }
      ngDevMode && ngDevMode.rendererSetStyle++;
      renderer.setStyle(rNode, prop, value, flags);
    }
  }
}
function writeDirectStyle(renderer, element, newValue) {
  ngDevMode && assertString(newValue, "'newValue' should be a string");
  renderer.setAttribute(element, "style", newValue);
  ngDevMode && ngDevMode.rendererSetStyle++;
}
function writeDirectClass(renderer, element, newValue) {
  ngDevMode && assertString(newValue, "'newValue' should be a string");
  if (newValue === "") {
    renderer.removeAttribute(element, "class");
  } else {
    renderer.setAttribute(element, "class", newValue);
  }
  ngDevMode && ngDevMode.rendererSetClassName++;
}
function setupStaticAttributes(renderer, element, tNode) {
  const { mergedAttrs, classes, styles } = tNode;
  if (mergedAttrs !== null) {
    setUpAttributes(renderer, element, mergedAttrs);
  }
  if (classes !== null) {
    writeDirectClass(renderer, element, classes);
  }
  if (styles !== null) {
    writeDirectStyle(renderer, element, styles);
  }
}
var policy$1;
function getPolicy$1() {
  if (policy$1 === void 0) {
    policy$1 = null;
    if (_global.trustedTypes) {
      try {
        policy$1 = _global.trustedTypes.createPolicy("angular", {
          createHTML: (s) => s,
          createScript: (s) => s,
          createScriptURL: (s) => s
        });
      } catch {
      }
    }
  }
  return policy$1;
}
function trustedHTMLFromString(html) {
  return getPolicy$1()?.createHTML(html) || html;
}
function trustedScriptURLFromString(url) {
  return getPolicy$1()?.createScriptURL(url) || url;
}
function \u0275\u0275validateIframeAttribute(attrValue, tagName, attrName) {
  const lView = getLView();
  const tNode = getSelectedTNode();
  const element = getNativeByTNode(tNode, lView);
  if (tNode.type === 2 && tagName.toLowerCase() === "iframe") {
    const iframe = element;
    iframe.src = "";
    iframe.srcdoc = trustedHTMLFromString("");
    nativeRemoveNode(lView[RENDERER], iframe);
    const errorMessage = ngDevMode && `Angular has detected that the \`${attrName}\` was applied as a binding to an <iframe>${getTemplateLocationDetails(lView)}. For security reasons, the \`${attrName}\` can be set on an <iframe> as a static attribute only. 
To fix this, switch the \`${attrName}\` binding to a static attribute in a template or in host bindings section.`;
    throw new RuntimeError(-910, errorMessage);
  }
  return attrValue;
}
var policy;
function getPolicy() {
  if (policy === void 0) {
    policy = null;
    if (_global.trustedTypes) {
      try {
        policy = _global.trustedTypes.createPolicy("angular#unsafe-bypass", {
          createHTML: (s) => s,
          createScript: (s) => s,
          createScriptURL: (s) => s
        });
      } catch {
      }
    }
  }
  return policy;
}
function trustedHTMLFromStringBypass(html) {
  return getPolicy()?.createHTML(html) || html;
}
function trustedScriptFromStringBypass(script) {
  return getPolicy()?.createScript(script) || script;
}
function trustedScriptURLFromStringBypass(url) {
  return getPolicy()?.createScriptURL(url) || url;
}
var SafeValueImpl = class {
  constructor(changingThisBreaksApplicationSecurity) {
    this.changingThisBreaksApplicationSecurity = changingThisBreaksApplicationSecurity;
  }
  toString() {
    return `SafeValue must use [property]=binding: ${this.changingThisBreaksApplicationSecurity} (see ${XSS_SECURITY_URL})`;
  }
};
var SafeHtmlImpl = class extends SafeValueImpl {
  getTypeName() {
    return "HTML";
  }
};
var SafeStyleImpl = class extends SafeValueImpl {
  getTypeName() {
    return "Style";
  }
};
var SafeScriptImpl = class extends SafeValueImpl {
  getTypeName() {
    return "Script";
  }
};
var SafeUrlImpl = class extends SafeValueImpl {
  getTypeName() {
    return "URL";
  }
};
var SafeResourceUrlImpl = class extends SafeValueImpl {
  getTypeName() {
    return "ResourceURL";
  }
};
function unwrapSafeValue(value) {
  return value instanceof SafeValueImpl ? value.changingThisBreaksApplicationSecurity : value;
}
function allowSanitizationBypassAndThrow(value, type) {
  const actualType = getSanitizationBypassType(value);
  if (actualType != null && actualType !== type) {
    if (actualType === "ResourceURL" && type === "URL")
      return true;
    throw new Error(`Required a safe ${type}, got a ${actualType} (see ${XSS_SECURITY_URL})`);
  }
  return actualType === type;
}
function getSanitizationBypassType(value) {
  return value instanceof SafeValueImpl && value.getTypeName() || null;
}
function bypassSanitizationTrustHtml(trustedHtml) {
  return new SafeHtmlImpl(trustedHtml);
}
function bypassSanitizationTrustStyle(trustedStyle) {
  return new SafeStyleImpl(trustedStyle);
}
function bypassSanitizationTrustScript(trustedScript) {
  return new SafeScriptImpl(trustedScript);
}
function bypassSanitizationTrustUrl(trustedUrl) {
  return new SafeUrlImpl(trustedUrl);
}
function bypassSanitizationTrustResourceUrl(trustedResourceUrl) {
  return new SafeResourceUrlImpl(trustedResourceUrl);
}
function getInertBodyHelper(defaultDoc) {
  const inertDocumentHelper = new InertDocumentHelper(defaultDoc);
  return isDOMParserAvailable() ? new DOMParserHelper(inertDocumentHelper) : inertDocumentHelper;
}
var DOMParserHelper = class {
  constructor(inertDocumentHelper) {
    this.inertDocumentHelper = inertDocumentHelper;
  }
  getInertBodyElement(html) {
    html = "<body><remove></remove>" + html;
    try {
      const body = new window.DOMParser().parseFromString(trustedHTMLFromString(html), "text/html").body;
      if (body === null) {
        return this.inertDocumentHelper.getInertBodyElement(html);
      }
      body.removeChild(body.firstChild);
      return body;
    } catch {
      return null;
    }
  }
};
var InertDocumentHelper = class {
  constructor(defaultDoc) {
    this.defaultDoc = defaultDoc;
    this.inertDocument = this.defaultDoc.implementation.createHTMLDocument("sanitization-inert");
  }
  getInertBodyElement(html) {
    const templateEl = this.inertDocument.createElement("template");
    templateEl.innerHTML = trustedHTMLFromString(html);
    return templateEl;
  }
};
function isDOMParserAvailable() {
  try {
    return !!new window.DOMParser().parseFromString(trustedHTMLFromString(""), "text/html");
  } catch {
    return false;
  }
}
var SAFE_URL_PATTERN = /^(?!javascript:)(?:[a-z0-9+.-]+:|[^&:\/?#]*(?:[\/?#]|$))/i;
function _sanitizeUrl(url) {
  url = String(url);
  if (url.match(SAFE_URL_PATTERN))
    return url;
  if (typeof ngDevMode === "undefined" || ngDevMode) {
    console.warn(`WARNING: sanitizing unsafe URL value ${url} (see ${XSS_SECURITY_URL})`);
  }
  return "unsafe:" + url;
}
function tagSet(tags) {
  const res = {};
  for (const t of tags.split(","))
    res[t] = true;
  return res;
}
function merge2(...sets) {
  const res = {};
  for (const s of sets) {
    for (const v in s) {
      if (s.hasOwnProperty(v))
        res[v] = true;
    }
  }
  return res;
}
var VOID_ELEMENTS = tagSet("area,br,col,hr,img,wbr");
var OPTIONAL_END_TAG_BLOCK_ELEMENTS = tagSet("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr");
var OPTIONAL_END_TAG_INLINE_ELEMENTS = tagSet("rp,rt");
var OPTIONAL_END_TAG_ELEMENTS = merge2(OPTIONAL_END_TAG_INLINE_ELEMENTS, OPTIONAL_END_TAG_BLOCK_ELEMENTS);
var BLOCK_ELEMENTS = merge2(OPTIONAL_END_TAG_BLOCK_ELEMENTS, tagSet("address,article,aside,blockquote,caption,center,del,details,dialog,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,main,map,menu,nav,ol,pre,section,summary,table,ul"));
var INLINE_ELEMENTS = merge2(OPTIONAL_END_TAG_INLINE_ELEMENTS, tagSet("a,abbr,acronym,audio,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,picture,q,ruby,rp,rt,s,samp,small,source,span,strike,strong,sub,sup,time,track,tt,u,var,video"));
var VALID_ELEMENTS = merge2(VOID_ELEMENTS, BLOCK_ELEMENTS, INLINE_ELEMENTS, OPTIONAL_END_TAG_ELEMENTS);
var URI_ATTRS = tagSet("background,cite,href,itemtype,longdesc,poster,src,xlink:href");
var HTML_ATTRS = tagSet("abbr,accesskey,align,alt,autoplay,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,controls,coords,datetime,default,dir,download,face,headers,height,hidden,hreflang,hspace,ismap,itemscope,itemprop,kind,label,lang,language,loop,media,muted,nohref,nowrap,open,preload,rel,rev,role,rows,rowspan,rules,scope,scrolling,shape,size,sizes,span,srclang,srcset,start,summary,tabindex,target,title,translate,type,usemap,valign,value,vspace,width");
var ARIA_ATTRS = tagSet("aria-activedescendant,aria-atomic,aria-autocomplete,aria-busy,aria-checked,aria-colcount,aria-colindex,aria-colspan,aria-controls,aria-current,aria-describedby,aria-details,aria-disabled,aria-dropeffect,aria-errormessage,aria-expanded,aria-flowto,aria-grabbed,aria-haspopup,aria-hidden,aria-invalid,aria-keyshortcuts,aria-label,aria-labelledby,aria-level,aria-live,aria-modal,aria-multiline,aria-multiselectable,aria-orientation,aria-owns,aria-placeholder,aria-posinset,aria-pressed,aria-readonly,aria-relevant,aria-required,aria-roledescription,aria-rowcount,aria-rowindex,aria-rowspan,aria-selected,aria-setsize,aria-sort,aria-valuemax,aria-valuemin,aria-valuenow,aria-valuetext");
var VALID_ATTRS = merge2(URI_ATTRS, HTML_ATTRS, ARIA_ATTRS);
var SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS = tagSet("script,style,template");
var SanitizingHtmlSerializer = class {
  constructor() {
    this.sanitizedSomething = false;
    this.buf = [];
  }
  sanitizeChildren(el) {
    let current = el.firstChild;
    let traverseContent = true;
    while (current) {
      if (current.nodeType === Node.ELEMENT_NODE) {
        traverseContent = this.startElement(current);
      } else if (current.nodeType === Node.TEXT_NODE) {
        this.chars(current.nodeValue);
      } else {
        this.sanitizedSomething = true;
      }
      if (traverseContent && current.firstChild) {
        current = current.firstChild;
        continue;
      }
      while (current) {
        if (current.nodeType === Node.ELEMENT_NODE) {
          this.endElement(current);
        }
        let next = this.checkClobberedElement(current, current.nextSibling);
        if (next) {
          current = next;
          break;
        }
        current = this.checkClobberedElement(current, current.parentNode);
      }
    }
    return this.buf.join("");
  }
  /**
   * Sanitizes an opening element tag (if valid) and returns whether the element's contents should
   * be traversed. Element content must always be traversed (even if the element itself is not
   * valid/safe), unless the element is one of `SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS`.
   *
   * @param element The element to sanitize.
   * @return True if the element's contents should be traversed.
   */
  startElement(element) {
    const tagName = element.nodeName.toLowerCase();
    if (!VALID_ELEMENTS.hasOwnProperty(tagName)) {
      this.sanitizedSomething = true;
      return !SKIP_TRAVERSING_CONTENT_IF_INVALID_ELEMENTS.hasOwnProperty(tagName);
    }
    this.buf.push("<");
    this.buf.push(tagName);
    const elAttrs = element.attributes;
    for (let i = 0; i < elAttrs.length; i++) {
      const elAttr = elAttrs.item(i);
      const attrName = elAttr.name;
      const lower = attrName.toLowerCase();
      if (!VALID_ATTRS.hasOwnProperty(lower)) {
        this.sanitizedSomething = true;
        continue;
      }
      let value = elAttr.value;
      if (URI_ATTRS[lower])
        value = _sanitizeUrl(value);
      this.buf.push(" ", attrName, '="', encodeEntities(value), '"');
    }
    this.buf.push(">");
    return true;
  }
  endElement(current) {
    const tagName = current.nodeName.toLowerCase();
    if (VALID_ELEMENTS.hasOwnProperty(tagName) && !VOID_ELEMENTS.hasOwnProperty(tagName)) {
      this.buf.push("</");
      this.buf.push(tagName);
      this.buf.push(">");
    }
  }
  chars(chars) {
    this.buf.push(encodeEntities(chars));
  }
  checkClobberedElement(node, nextNode) {
    if (nextNode && (node.compareDocumentPosition(nextNode) & Node.DOCUMENT_POSITION_CONTAINED_BY) === Node.DOCUMENT_POSITION_CONTAINED_BY) {
      throw new Error(`Failed to sanitize html because the element is clobbered: ${node.outerHTML}`);
    }
    return nextNode;
  }
};
var SURROGATE_PAIR_REGEXP = /[\uD800-\uDBFF][\uDC00-\uDFFF]/g;
var NON_ALPHANUMERIC_REGEXP = /([^\#-~ |!])/g;
function encodeEntities(value) {
  return value.replace(/&/g, "&amp;").replace(SURROGATE_PAIR_REGEXP, function(match2) {
    const hi = match2.charCodeAt(0);
    const low = match2.charCodeAt(1);
    return "&#" + ((hi - 55296) * 1024 + (low - 56320) + 65536) + ";";
  }).replace(NON_ALPHANUMERIC_REGEXP, function(match2) {
    return "&#" + match2.charCodeAt(0) + ";";
  }).replace(/</g, "&lt;").replace(/>/g, "&gt;");
}
var inertBodyHelper;
function _sanitizeHtml(defaultDoc, unsafeHtmlInput) {
  let inertBodyElement = null;
  try {
    inertBodyHelper = inertBodyHelper || getInertBodyHelper(defaultDoc);
    let unsafeHtml = unsafeHtmlInput ? String(unsafeHtmlInput) : "";
    inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);
    let mXSSAttempts = 5;
    let parsedHtml = unsafeHtml;
    do {
      if (mXSSAttempts === 0) {
        throw new Error("Failed to sanitize html because the input is unstable");
      }
      mXSSAttempts--;
      unsafeHtml = parsedHtml;
      parsedHtml = inertBodyElement.innerHTML;
      inertBodyElement = inertBodyHelper.getInertBodyElement(unsafeHtml);
    } while (unsafeHtml !== parsedHtml);
    const sanitizer = new SanitizingHtmlSerializer();
    const safeHtml = sanitizer.sanitizeChildren(getTemplateContent(inertBodyElement) || inertBodyElement);
    if ((typeof ngDevMode === "undefined" || ngDevMode) && sanitizer.sanitizedSomething) {
      console.warn(`WARNING: sanitizing HTML stripped some content, see ${XSS_SECURITY_URL}`);
    }
    return trustedHTMLFromString(safeHtml);
  } finally {
    if (inertBodyElement) {
      const parent = getTemplateContent(inertBodyElement) || inertBodyElement;
      while (parent.firstChild) {
        parent.removeChild(parent.firstChild);
      }
    }
  }
}
function getTemplateContent(el) {
  return "content" in el && isTemplateElement(el) ? el.content : null;
}
function isTemplateElement(el) {
  return el.nodeType === Node.ELEMENT_NODE && el.nodeName === "TEMPLATE";
}
var SecurityContext;
(function(SecurityContext2) {
  SecurityContext2[SecurityContext2["NONE"] = 0] = "NONE";
  SecurityContext2[SecurityContext2["HTML"] = 1] = "HTML";
  SecurityContext2[SecurityContext2["STYLE"] = 2] = "STYLE";
  SecurityContext2[SecurityContext2["SCRIPT"] = 3] = "SCRIPT";
  SecurityContext2[SecurityContext2["URL"] = 4] = "URL";
  SecurityContext2[SecurityContext2["RESOURCE_URL"] = 5] = "RESOURCE_URL";
})(SecurityContext || (SecurityContext = {}));
function \u0275\u0275sanitizeHtml(unsafeHtml) {
  const sanitizer = getSanitizer();
  if (sanitizer) {
    return trustedHTMLFromStringBypass(sanitizer.sanitize(SecurityContext.HTML, unsafeHtml) || "");
  }
  if (allowSanitizationBypassAndThrow(
    unsafeHtml,
    "HTML"
    /* BypassType.Html */
  )) {
    return trustedHTMLFromStringBypass(unwrapSafeValue(unsafeHtml));
  }
  return _sanitizeHtml(getDocument(), renderStringify(unsafeHtml));
}
function \u0275\u0275sanitizeStyle(unsafeStyle) {
  const sanitizer = getSanitizer();
  if (sanitizer) {
    return sanitizer.sanitize(SecurityContext.STYLE, unsafeStyle) || "";
  }
  if (allowSanitizationBypassAndThrow(
    unsafeStyle,
    "Style"
    /* BypassType.Style */
  )) {
    return unwrapSafeValue(unsafeStyle);
  }
  return renderStringify(unsafeStyle);
}
function \u0275\u0275sanitizeUrl(unsafeUrl) {
  const sanitizer = getSanitizer();
  if (sanitizer) {
    return sanitizer.sanitize(SecurityContext.URL, unsafeUrl) || "";
  }
  if (allowSanitizationBypassAndThrow(
    unsafeUrl,
    "URL"
    /* BypassType.Url */
  )) {
    return unwrapSafeValue(unsafeUrl);
  }
  return _sanitizeUrl(renderStringify(unsafeUrl));
}
function \u0275\u0275sanitizeResourceUrl(unsafeResourceUrl) {
  const sanitizer = getSanitizer();
  if (sanitizer) {
    return trustedScriptURLFromStringBypass(sanitizer.sanitize(SecurityContext.RESOURCE_URL, unsafeResourceUrl) || "");
  }
  if (allowSanitizationBypassAndThrow(
    unsafeResourceUrl,
    "ResourceURL"
    /* BypassType.ResourceUrl */
  )) {
    return trustedScriptURLFromStringBypass(unwrapSafeValue(unsafeResourceUrl));
  }
  throw new RuntimeError(904, ngDevMode && `unsafe value used in a resource URL context (see ${XSS_SECURITY_URL})`);
}
function \u0275\u0275sanitizeScript(unsafeScript) {
  const sanitizer = getSanitizer();
  if (sanitizer) {
    return trustedScriptFromStringBypass(sanitizer.sanitize(SecurityContext.SCRIPT, unsafeScript) || "");
  }
  if (allowSanitizationBypassAndThrow(
    unsafeScript,
    "Script"
    /* BypassType.Script */
  )) {
    return trustedScriptFromStringBypass(unwrapSafeValue(unsafeScript));
  }
  throw new RuntimeError(905, ngDevMode && "unsafe value used in a script context");
}
function \u0275\u0275trustConstantHtml(html) {
  if (ngDevMode && (!Array.isArray(html) || !Array.isArray(html.raw) || html.length !== 1)) {
    throw new Error(`Unexpected interpolation in trusted HTML constant: ${html.join("?")}`);
  }
  return trustedHTMLFromString(html[0]);
}
function \u0275\u0275trustConstantResourceUrl(url) {
  if (ngDevMode && (!Array.isArray(url) || !Array.isArray(url.raw) || url.length !== 1)) {
    throw new Error(`Unexpected interpolation in trusted URL constant: ${url.join("?")}`);
  }
  return trustedScriptURLFromString(url[0]);
}
function getUrlSanitizer(tag, prop) {
  if (prop === "src" && (tag === "embed" || tag === "frame" || tag === "iframe" || tag === "media" || tag === "script") || prop === "href" && (tag === "base" || tag === "link")) {
    return \u0275\u0275sanitizeResourceUrl;
  }
  return \u0275\u0275sanitizeUrl;
}
function \u0275\u0275sanitizeUrlOrResourceUrl(unsafeUrl, tag, prop) {
  return getUrlSanitizer(tag, prop)(unsafeUrl);
}
function validateAgainstEventProperties(name) {
  if (name.toLowerCase().startsWith("on")) {
    const errorMessage = `Binding to event property '${name}' is disallowed for security reasons, please use (${name.slice(2)})=...
If '${name}' is a directive input, make sure the directive is imported by the current module.`;
    throw new RuntimeError(306, errorMessage);
  }
}
function validateAgainstEventAttributes(name) {
  if (name.toLowerCase().startsWith("on")) {
    const errorMessage = `Binding to event attribute '${name}' is disallowed for security reasons, please use (${name.slice(2)})=...`;
    throw new RuntimeError(306, errorMessage);
  }
}
function getSanitizer() {
  const lView = getLView();
  return lView && lView[ENVIRONMENT].sanitizer;
}
function makeStateKey(key) {
  return key;
}
function initTransferState() {
  const transferState = new TransferState();
  if (inject(PLATFORM_ID) === "browser") {
    transferState.store = retrieveTransferredState(getDocument(), inject(APP_ID));
  }
  return transferState;
}
var _TransferState = class _TransferState {
  constructor() {
    this.store = {};
    this.onSerializeCallbacks = {};
  }
  /**
   * Get the value corresponding to a key. Return `defaultValue` if key is not found.
   */
  get(key, defaultValue) {
    return this.store[key] !== void 0 ? this.store[key] : defaultValue;
  }
  /**
   * Set the value corresponding to a key.
   */
  set(key, value) {
    this.store[key] = value;
  }
  /**
   * Remove a key from the store.
   */
  remove(key) {
    delete this.store[key];
  }
  /**
   * Test whether a key exists in the store.
   */
  hasKey(key) {
    return this.store.hasOwnProperty(key);
  }
  /**
   * Indicates whether the state is empty.
   */
  get isEmpty() {
    return Object.keys(this.store).length === 0;
  }
  /**
   * Register a callback to provide the value for a key when `toJson` is called.
   */
  onSerialize(key, callback) {
    this.onSerializeCallbacks[key] = callback;
  }
  /**
   * Serialize the current state of the store to JSON.
   */
  toJson() {
    for (const key in this.onSerializeCallbacks) {
      if (this.onSerializeCallbacks.hasOwnProperty(key)) {
        try {
          this.store[key] = this.onSerializeCallbacks[key]();
        } catch (e) {
          console.warn("Exception in onSerialize callback: ", e);
        }
      }
    }
    return JSON.stringify(this.store).replace(/</g, "\\u003C");
  }
};
_TransferState.\u0275prov = /** @pureOrBreakMyCode */
\u0275\u0275defineInjectable({
  token: _TransferState,
  providedIn: "root",
  factory: initTransferState
});
var TransferState = _TransferState;
function retrieveTransferredState(doc, appId) {
  const script = doc.getElementById(appId + "-state");
  if (script?.textContent) {
    try {
      return JSON.parse(script.textContent);
    } catch (e) {
      console.warn("Exception while restoring TransferState for app " + appId, e);
    }
  }
  return {};
}
var REFERENCE_NODE_HOST = "h";
var REFERENCE_NODE_BODY = "b";
var NodeNavigationStep;
(function(NodeNavigationStep2) {
  NodeNavigationStep2["FirstChild"] = "f";
  NodeNavigationStep2["NextSibling"] = "n";
})(NodeNavigationStep || (NodeNavigationStep = {}));
var TRANSFER_STATE_TOKEN_ID = "__nghData__";
var NGH_DATA_KEY = makeStateKey(TRANSFER_STATE_TOKEN_ID);
var _retrieveHydrationInfoImpl = (rNode, injector, isRootView2) => null;
function retrieveHydrationInfo(rNode, injector, isRootView2 = false) {
  return _retrieveHydrationInfoImpl(rNode, injector, isRootView2);
}
var ComponentRef$1 = class {
};
var ComponentFactory$1 = class {
};
function noComponentFactoryError(component) {
  const error = Error(`No component factory found for ${stringify(component)}.`);
  error[ERROR_COMPONENT] = component;
  return error;
}
var ERROR_COMPONENT = "ngComponent";
var _NullComponentFactoryResolver = class {
  resolveComponentFactory(component) {
    throw noComponentFactoryError(component);
  }
};
var _ComponentFactoryResolver$1 = class _ComponentFactoryResolver$1 {
};
_ComponentFactoryResolver$1.NULL = /* @__PURE__ */ new _NullComponentFactoryResolver();
var ComponentFactoryResolver$1 = _ComponentFactoryResolver$1;
function injectElementRef() {
  return createElementRef(getCurrentTNode(), getLView());
}
function createElementRef(tNode, lView) {
  return new ElementRef(getNativeByTNode(tNode, lView));
}
var _ElementRef = class _ElementRef {
  constructor(nativeElement) {
    this.nativeElement = nativeElement;
  }
};
_ElementRef.__NG_ELEMENT_ID__ = injectElementRef;
var ElementRef = _ElementRef;
function unwrapElementRef(value) {
  return value instanceof ElementRef ? value.nativeElement : value;
}
var RendererFactory2 = class {
};
var _Renderer2 = class _Renderer2 {
  constructor() {
    this.destroyNode = null;
  }
};
_Renderer2.__NG_ELEMENT_ID__ = () => injectRenderer2();
var Renderer2 = _Renderer2;
function injectRenderer2() {
  const lView = getLView();
  const tNode = getCurrentTNode();
  const nodeAtIndex = getComponentLViewByIndex(tNode.index, lView);
  return (isLView(nodeAtIndex) ? nodeAtIndex : lView)[RENDERER];
}
var _Sanitizer = class _Sanitizer {
};
_Sanitizer.\u0275prov = \u0275\u0275defineInjectable({
  token: _Sanitizer,
  providedIn: "root",
  factory: () => null
});
var Sanitizer = _Sanitizer;
var Version = class {
  constructor(full) {
    this.full = full;
    this.major = full.split(".")[0];
    this.minor = full.split(".")[1];
    this.patch = full.split(".").slice(2).join(".");
  }
};
var VERSION = new Version("17.0.7");
var NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR = {};
function untracked(nonReactiveReadsFn) {
  const prevConsumer = setActiveConsumer(null);
  try {
    return nonReactiveReadsFn();
  } finally {
    setActiveConsumer(prevConsumer);
  }
}
function isListLikeIterable(obj) {
  if (!isJsObject(obj))
    return false;
  return Array.isArray(obj) || !(obj instanceof Map) && // JS Map are iterables but return entries as [k, v]
  Symbol.iterator in obj;
}
function areIterablesEqual(a, b, comparator) {
  const iterator1 = a[Symbol.iterator]();
  const iterator2 = b[Symbol.iterator]();
  while (true) {
    const item1 = iterator1.next();
    const item2 = iterator2.next();
    if (item1.done && item2.done)
      return true;
    if (item1.done || item2.done)
      return false;
    if (!comparator(item1.value, item2.value))
      return false;
  }
}
function iterateListLike(obj, fn) {
  if (Array.isArray(obj)) {
    for (let i = 0; i < obj.length; i++) {
      fn(obj[i]);
    }
  } else {
    const iterator2 = obj[Symbol.iterator]();
    let item;
    while (!(item = iterator2.next()).done) {
      fn(item.value);
    }
  }
}
function isJsObject(o) {
  return o !== null && (typeof o === "function" || typeof o === "object");
}
var DefaultIterableDifferFactory = class {
  constructor() {
  }
  supports(obj) {
    return isListLikeIterable(obj);
  }
  create(trackByFn) {
    return new DefaultIterableDiffer(trackByFn);
  }
};
var trackByIdentity = (index, item) => item;
var DefaultIterableDiffer = class {
  constructor(trackByFn) {
    this.length = 0;
    this._linkedRecords = null;
    this._unlinkedRecords = null;
    this._previousItHead = null;
    this._itHead = null;
    this._itTail = null;
    this._additionsHead = null;
    this._additionsTail = null;
    this._movesHead = null;
    this._movesTail = null;
    this._removalsHead = null;
    this._removalsTail = null;
    this._identityChangesHead = null;
    this._identityChangesTail = null;
    this._trackByFn = trackByFn || trackByIdentity;
  }
  forEachItem(fn) {
    let record;
    for (record = this._itHead; record !== null; record = record._next) {
      fn(record);
    }
  }
  forEachOperation(fn) {
    let nextIt = this._itHead;
    let nextRemove = this._removalsHead;
    let addRemoveOffset = 0;
    let moveOffsets = null;
    while (nextIt || nextRemove) {
      const record = !nextRemove || nextIt && nextIt.currentIndex < getPreviousIndex(nextRemove, addRemoveOffset, moveOffsets) ? nextIt : nextRemove;
      const adjPreviousIndex = getPreviousIndex(record, addRemoveOffset, moveOffsets);
      const currentIndex = record.currentIndex;
      if (record === nextRemove) {
        addRemoveOffset--;
        nextRemove = nextRemove._nextRemoved;
      } else {
        nextIt = nextIt._next;
        if (record.previousIndex == null) {
          addRemoveOffset++;
        } else {
          if (!moveOffsets)
            moveOffsets = [];
          const localMovePreviousIndex = adjPreviousIndex - addRemoveOffset;
          const localCurrentIndex = currentIndex - addRemoveOffset;
          if (localMovePreviousIndex != localCurrentIndex) {
            for (let i = 0; i < localMovePreviousIndex; i++) {
              const offset = i < moveOffsets.length ? moveOffsets[i] : moveOffsets[i] = 0;
              const index = offset + i;
              if (localCurrentIndex <= index && index < localMovePreviousIndex) {
                moveOffsets[i] = offset + 1;
              }
            }
            const previousIndex = record.previousIndex;
            moveOffsets[previousIndex] = localCurrentIndex - localMovePreviousIndex;
          }
        }
      }
      if (adjPreviousIndex !== currentIndex) {
        fn(record, adjPreviousIndex, currentIndex);
      }
    }
  }
  forEachPreviousItem(fn) {
    let record;
    for (record = this._previousItHead; record !== null; record = record._nextPrevious) {
      fn(record);
    }
  }
  forEachAddedItem(fn) {
    let record;
    for (record = this._additionsHead; record !== null; record = record._nextAdded) {
      fn(record);
    }
  }
  forEachMovedItem(fn) {
    let record;
    for (record = this._movesHead; record !== null; record = record._nextMoved) {
      fn(record);
    }
  }
  forEachRemovedItem(fn) {
    let record;
    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
      fn(record);
    }
  }
  forEachIdentityChange(fn) {
    let record;
    for (record = this._identityChangesHead; record !== null; record = record._nextIdentityChange) {
      fn(record);
    }
  }
  diff(collection) {
    if (collection == null)
      collection = [];
    if (!isListLikeIterable(collection)) {
      throw new RuntimeError(900, ngDevMode && `Error trying to diff '${stringify(collection)}'. Only arrays and iterables are allowed`);
    }
    if (this.check(collection)) {
      return this;
    } else {
      return null;
    }
  }
  onDestroy() {
  }
  check(collection) {
    this._reset();
    let record = this._itHead;
    let mayBeDirty = false;
    let index;
    let item;
    let itemTrackBy;
    if (Array.isArray(collection)) {
      this.length = collection.length;
      for (let index2 = 0; index2 < this.length; index2++) {
        item = collection[index2];
        itemTrackBy = this._trackByFn(index2, item);
        if (record === null || !Object.is(record.trackById, itemTrackBy)) {
          record = this._mismatch(record, item, itemTrackBy, index2);
          mayBeDirty = true;
        } else {
          if (mayBeDirty) {
            record = this._verifyReinsertion(record, item, itemTrackBy, index2);
          }
          if (!Object.is(record.item, item))
            this._addIdentityChange(record, item);
        }
        record = record._next;
      }
    } else {
      index = 0;
      iterateListLike(collection, (item2) => {
        itemTrackBy = this._trackByFn(index, item2);
        if (record === null || !Object.is(record.trackById, itemTrackBy)) {
          record = this._mismatch(record, item2, itemTrackBy, index);
          mayBeDirty = true;
        } else {
          if (mayBeDirty) {
            record = this._verifyReinsertion(record, item2, itemTrackBy, index);
          }
          if (!Object.is(record.item, item2))
            this._addIdentityChange(record, item2);
        }
        record = record._next;
        index++;
      });
      this.length = index;
    }
    this._truncate(record);
    this.collection = collection;
    return this.isDirty;
  }
  /* CollectionChanges is considered dirty if it has any additions, moves, removals, or identity
   * changes.
   */
  get isDirty() {
    return this._additionsHead !== null || this._movesHead !== null || this._removalsHead !== null || this._identityChangesHead !== null;
  }
  /**
   * Reset the state of the change objects to show no changes. This means set previousKey to
   * currentKey, and clear all of the queues (additions, moves, removals).
   * Set the previousIndexes of moved and added items to their currentIndexes
   * Reset the list of additions, moves and removals
   *
   * @internal
   */
  _reset() {
    if (this.isDirty) {
      let record;
      for (record = this._previousItHead = this._itHead; record !== null; record = record._next) {
        record._nextPrevious = record._next;
      }
      for (record = this._additionsHead; record !== null; record = record._nextAdded) {
        record.previousIndex = record.currentIndex;
      }
      this._additionsHead = this._additionsTail = null;
      for (record = this._movesHead; record !== null; record = record._nextMoved) {
        record.previousIndex = record.currentIndex;
      }
      this._movesHead = this._movesTail = null;
      this._removalsHead = this._removalsTail = null;
      this._identityChangesHead = this._identityChangesTail = null;
    }
  }
  /**
   * This is the core function which handles differences between collections.
   *
   * - `record` is the record which we saw at this position last time. If null then it is a new
   *   item.
   * - `item` is the current item in the collection
   * - `index` is the position of the item in the collection
   *
   * @internal
   */
  _mismatch(record, item, itemTrackBy, index) {
    let previousRecord;
    if (record === null) {
      previousRecord = this._itTail;
    } else {
      previousRecord = record._prev;
      this._remove(record);
    }
    record = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);
    if (record !== null) {
      if (!Object.is(record.item, item))
        this._addIdentityChange(record, item);
      this._reinsertAfter(record, previousRecord, index);
    } else {
      record = this._linkedRecords === null ? null : this._linkedRecords.get(itemTrackBy, index);
      if (record !== null) {
        if (!Object.is(record.item, item))
          this._addIdentityChange(record, item);
        this._moveAfter(record, previousRecord, index);
      } else {
        record = this._addAfter(new IterableChangeRecord_(item, itemTrackBy), previousRecord, index);
      }
    }
    return record;
  }
  /**
   * This check is only needed if an array contains duplicates. (Short circuit of nothing dirty)
   *
   * Use case: `[a, a]` => `[b, a, a]`
   *
   * If we did not have this check then the insertion of `b` would:
   *   1) evict first `a`
   *   2) insert `b` at `0` index.
   *   3) leave `a` at index `1` as is. <-- this is wrong!
   *   3) reinsert `a` at index 2. <-- this is wrong!
   *
   * The correct behavior is:
   *   1) evict first `a`
   *   2) insert `b` at `0` index.
   *   3) reinsert `a` at index 1.
   *   3) move `a` at from `1` to `2`.
   *
   *
   * Double check that we have not evicted a duplicate item. We need to check if the item type may
   * have already been removed:
   * The insertion of b will evict the first 'a'. If we don't reinsert it now it will be reinserted
   * at the end. Which will show up as the two 'a's switching position. This is incorrect, since a
   * better way to think of it is as insert of 'b' rather then switch 'a' with 'b' and then add 'a'
   * at the end.
   *
   * @internal
   */
  _verifyReinsertion(record, item, itemTrackBy, index) {
    let reinsertRecord = this._unlinkedRecords === null ? null : this._unlinkedRecords.get(itemTrackBy, null);
    if (reinsertRecord !== null) {
      record = this._reinsertAfter(reinsertRecord, record._prev, index);
    } else if (record.currentIndex != index) {
      record.currentIndex = index;
      this._addToMoves(record, index);
    }
    return record;
  }
  /**
   * Get rid of any excess {@link IterableChangeRecord_}s from the previous collection
   *
   * - `record` The first excess {@link IterableChangeRecord_}.
   *
   * @internal
   */
  _truncate(record) {
    while (record !== null) {
      const nextRecord = record._next;
      this._addToRemovals(this._unlink(record));
      record = nextRecord;
    }
    if (this._unlinkedRecords !== null) {
      this._unlinkedRecords.clear();
    }
    if (this._additionsTail !== null) {
      this._additionsTail._nextAdded = null;
    }
    if (this._movesTail !== null) {
      this._movesTail._nextMoved = null;
    }
    if (this._itTail !== null) {
      this._itTail._next = null;
    }
    if (this._removalsTail !== null) {
      this._removalsTail._nextRemoved = null;
    }
    if (this._identityChangesTail !== null) {
      this._identityChangesTail._nextIdentityChange = null;
    }
  }
  /** @internal */
  _reinsertAfter(record, prevRecord, index) {
    if (this._unlinkedRecords !== null) {
      this._unlinkedRecords.remove(record);
    }
    const prev = record._prevRemoved;
    const next = record._nextRemoved;
    if (prev === null) {
      this._removalsHead = next;
    } else {
      prev._nextRemoved = next;
    }
    if (next === null) {
      this._removalsTail = prev;
    } else {
      next._prevRemoved = prev;
    }
    this._insertAfter(record, prevRecord, index);
    this._addToMoves(record, index);
    return record;
  }
  /** @internal */
  _moveAfter(record, prevRecord, index) {
    this._unlink(record);
    this._insertAfter(record, prevRecord, index);
    this._addToMoves(record, index);
    return record;
  }
  /** @internal */
  _addAfter(record, prevRecord, index) {
    this._insertAfter(record, prevRecord, index);
    if (this._additionsTail === null) {
      this._additionsTail = this._additionsHead = record;
    } else {
      this._additionsTail = this._additionsTail._nextAdded = record;
    }
    return record;
  }
  /** @internal */
  _insertAfter(record, prevRecord, index) {
    const next = prevRecord === null ? this._itHead : prevRecord._next;
    record._next = next;
    record._prev = prevRecord;
    if (next === null) {
      this._itTail = record;
    } else {
      next._prev = record;
    }
    if (prevRecord === null) {
      this._itHead = record;
    } else {
      prevRecord._next = record;
    }
    if (this._linkedRecords === null) {
      this._linkedRecords = new _DuplicateMap();
    }
    this._linkedRecords.put(record);
    record.currentIndex = index;
    return record;
  }
  /** @internal */
  _remove(record) {
    return this._addToRemovals(this._unlink(record));
  }
  /** @internal */
  _unlink(record) {
    if (this._linkedRecords !== null) {
      this._linkedRecords.remove(record);
    }
    const prev = record._prev;
    const next = record._next;
    if (prev === null) {
      this._itHead = next;
    } else {
      prev._next = next;
    }
    if (next === null) {
      this._itTail = prev;
    } else {
      next._prev = prev;
    }
    return record;
  }
  /** @internal */
  _addToMoves(record, toIndex) {
    if (record.previousIndex === toIndex) {
      return record;
    }
    if (this._movesTail === null) {
      this._movesTail = this._movesHead = record;
    } else {
      this._movesTail = this._movesTail._nextMoved = record;
    }
    return record;
  }
  _addToRemovals(record) {
    if (this._unlinkedRecords === null) {
      this._unlinkedRecords = new _DuplicateMap();
    }
    this._unlinkedRecords.put(record);
    record.currentIndex = null;
    record._nextRemoved = null;
    if (this._removalsTail === null) {
      this._removalsTail = this._removalsHead = record;
      record._prevRemoved = null;
    } else {
      record._prevRemoved = this._removalsTail;
      this._removalsTail = this._removalsTail._nextRemoved = record;
    }
    return record;
  }
  /** @internal */
  _addIdentityChange(record, item) {
    record.item = item;
    if (this._identityChangesTail === null) {
      this._identityChangesTail = this._identityChangesHead = record;
    } else {
      this._identityChangesTail = this._identityChangesTail._nextIdentityChange = record;
    }
    return record;
  }
};
var IterableChangeRecord_ = class {
  constructor(item, trackById) {
    this.item = item;
    this.trackById = trackById;
    this.currentIndex = null;
    this.previousIndex = null;
    this._nextPrevious = null;
    this._prev = null;
    this._next = null;
    this._prevDup = null;
    this._nextDup = null;
    this._prevRemoved = null;
    this._nextRemoved = null;
    this._nextAdded = null;
    this._nextMoved = null;
    this._nextIdentityChange = null;
  }
};
var _DuplicateItemRecordList = class {
  constructor() {
    this._head = null;
    this._tail = null;
  }
  /**
   * Append the record to the list of duplicates.
   *
   * Note: by design all records in the list of duplicates hold the same value in record.item.
   */
  add(record) {
    if (this._head === null) {
      this._head = this._tail = record;
      record._nextDup = null;
      record._prevDup = null;
    } else {
      this._tail._nextDup = record;
      record._prevDup = this._tail;
      record._nextDup = null;
      this._tail = record;
    }
  }
  // Returns a IterableChangeRecord_ having IterableChangeRecord_.trackById == trackById and
  // IterableChangeRecord_.currentIndex >= atOrAfterIndex
  get(trackById, atOrAfterIndex) {
    let record;
    for (record = this._head; record !== null; record = record._nextDup) {
      if ((atOrAfterIndex === null || atOrAfterIndex <= record.currentIndex) && Object.is(record.trackById, trackById)) {
        return record;
      }
    }
    return null;
  }
  /**
   * Remove one {@link IterableChangeRecord_} from the list of duplicates.
   *
   * Returns whether the list of duplicates is empty.
   */
  remove(record) {
    const prev = record._prevDup;
    const next = record._nextDup;
    if (prev === null) {
      this._head = next;
    } else {
      prev._nextDup = next;
    }
    if (next === null) {
      this._tail = prev;
    } else {
      next._prevDup = prev;
    }
    return this._head === null;
  }
};
var _DuplicateMap = class {
  constructor() {
    this.map = /* @__PURE__ */ new Map();
  }
  put(record) {
    const key = record.trackById;
    let duplicates = this.map.get(key);
    if (!duplicates) {
      duplicates = new _DuplicateItemRecordList();
      this.map.set(key, duplicates);
    }
    duplicates.add(record);
  }
  /**
   * Retrieve the `value` using key. Because the IterableChangeRecord_ value may be one which we
   * have already iterated over, we use the `atOrAfterIndex` to pretend it is not there.
   *
   * Use case: `[a, b, c, a, a]` if we are at index `3` which is the second `a` then asking if we
   * have any more `a`s needs to return the second `a`.
   */
  get(trackById, atOrAfterIndex) {
    const key = trackById;
    const recordList = this.map.get(key);
    return recordList ? recordList.get(trackById, atOrAfterIndex) : null;
  }
  /**
   * Removes a {@link IterableChangeRecord_} from the list of duplicates.
   *
   * The list of duplicates also is removed from the map if it gets empty.
   */
  remove(record) {
    const key = record.trackById;
    const recordList = this.map.get(key);
    if (recordList.remove(record)) {
      this.map.delete(key);
    }
    return record;
  }
  get isEmpty() {
    return this.map.size === 0;
  }
  clear() {
    this.map.clear();
  }
};
function getPreviousIndex(item, addRemoveOffset, moveOffsets) {
  const previousIndex = item.previousIndex;
  if (previousIndex === null)
    return previousIndex;
  let moveOffset = 0;
  if (moveOffsets && previousIndex < moveOffsets.length) {
    moveOffset = moveOffsets[previousIndex];
  }
  return previousIndex + addRemoveOffset + moveOffset;
}
var DefaultKeyValueDifferFactory = class {
  constructor() {
  }
  supports(obj) {
    return obj instanceof Map || isJsObject(obj);
  }
  create() {
    return new DefaultKeyValueDiffer();
  }
};
var DefaultKeyValueDiffer = class {
  constructor() {
    this._records = /* @__PURE__ */ new Map();
    this._mapHead = null;
    this._appendAfter = null;
    this._previousMapHead = null;
    this._changesHead = null;
    this._changesTail = null;
    this._additionsHead = null;
    this._additionsTail = null;
    this._removalsHead = null;
    this._removalsTail = null;
  }
  get isDirty() {
    return this._additionsHead !== null || this._changesHead !== null || this._removalsHead !== null;
  }
  forEachItem(fn) {
    let record;
    for (record = this._mapHead; record !== null; record = record._next) {
      fn(record);
    }
  }
  forEachPreviousItem(fn) {
    let record;
    for (record = this._previousMapHead; record !== null; record = record._nextPrevious) {
      fn(record);
    }
  }
  forEachChangedItem(fn) {
    let record;
    for (record = this._changesHead; record !== null; record = record._nextChanged) {
      fn(record);
    }
  }
  forEachAddedItem(fn) {
    let record;
    for (record = this._additionsHead; record !== null; record = record._nextAdded) {
      fn(record);
    }
  }
  forEachRemovedItem(fn) {
    let record;
    for (record = this._removalsHead; record !== null; record = record._nextRemoved) {
      fn(record);
    }
  }
  diff(map2) {
    if (!map2) {
      map2 = /* @__PURE__ */ new Map();
    } else if (!(map2 instanceof Map || isJsObject(map2))) {
      throw new RuntimeError(900, ngDevMode && `Error trying to diff '${stringify(map2)}'. Only maps and objects are allowed`);
    }
    return this.check(map2) ? this : null;
  }
  onDestroy() {
  }
  /**
   * Check the current state of the map vs the previous.
   * The algorithm is optimised for when the keys do no change.
   */
  check(map2) {
    this._reset();
    let insertBefore = this._mapHead;
    this._appendAfter = null;
    this._forEach(map2, (value, key) => {
      if (insertBefore && insertBefore.key === key) {
        this._maybeAddToChanges(insertBefore, value);
        this._appendAfter = insertBefore;
        insertBefore = insertBefore._next;
      } else {
        const record = this._getOrCreateRecordForKey(key, value);
        insertBefore = this._insertBeforeOrAppend(insertBefore, record);
      }
    });
    if (insertBefore) {
      if (insertBefore._prev) {
        insertBefore._prev._next = null;
      }
      this._removalsHead = insertBefore;
      for (let record = insertBefore; record !== null; record = record._nextRemoved) {
        if (record === this._mapHead) {
          this._mapHead = null;
        }
        this._records.delete(record.key);
        record._nextRemoved = record._next;
        record.previousValue = record.currentValue;
        record.currentValue = null;
        record._prev = null;
        record._next = null;
      }
    }
    if (this._changesTail)
      this._changesTail._nextChanged = null;
    if (this._additionsTail)
      this._additionsTail._nextAdded = null;
    return this.isDirty;
  }
  /**
   * Inserts a record before `before` or append at the end of the list when `before` is null.
   *
   * Notes:
   * - This method appends at `this._appendAfter`,
   * - This method updates `this._appendAfter`,
   * - The return value is the new value for the insertion pointer.
   */
  _insertBeforeOrAppend(before, record) {
    if (before) {
      const prev = before._prev;
      record._next = before;
      record._prev = prev;
      before._prev = record;
      if (prev) {
        prev._next = record;
      }
      if (before === this._mapHead) {
        this._mapHead = record;
      }
      this._appendAfter = before;
      return before;
    }
    if (this._appendAfter) {
      this._appendAfter._next = record;
      record._prev = this._appendAfter;
    } else {
      this._mapHead = record;
    }
    this._appendAfter = record;
    return null;
  }
  _getOrCreateRecordForKey(key, value) {
    if (this._records.has(key)) {
      const record2 = this._records.get(key);
      this._maybeAddToChanges(record2, value);
      const prev = record2._prev;
      const next = record2._next;
      if (prev) {
        prev._next = next;
      }
      if (next) {
        next._prev = prev;
      }
      record2._next = null;
      record2._prev = null;
      return record2;
    }
    const record = new KeyValueChangeRecord_(key);
    this._records.set(key, record);
    record.currentValue = value;
    this._addToAdditions(record);
    return record;
  }
  /** @internal */
  _reset() {
    if (this.isDirty) {
      let record;
      this._previousMapHead = this._mapHead;
      for (record = this._previousMapHead; record !== null; record = record._next) {
        record._nextPrevious = record._next;
      }
      for (record = this._changesHead; record !== null; record = record._nextChanged) {
        record.previousValue = record.currentValue;
      }
      for (record = this._additionsHead; record != null; record = record._nextAdded) {
        record.previousValue = record.currentValue;
      }
      this._changesHead = this._changesTail = null;
      this._additionsHead = this._additionsTail = null;
      this._removalsHead = null;
    }
  }
  // Add the record or a given key to the list of changes only when the value has actually changed
  _maybeAddToChanges(record, newValue) {
    if (!Object.is(newValue, record.currentValue)) {
      record.previousValue = record.currentValue;
      record.currentValue = newValue;
      this._addToChanges(record);
    }
  }
  _addToAdditions(record) {
    if (this._additionsHead === null) {
      this._additionsHead = this._additionsTail = record;
    } else {
      this._additionsTail._nextAdded = record;
      this._additionsTail = record;
    }
  }
  _addToChanges(record) {
    if (this._changesHead === null) {
      this._changesHead = this._changesTail = record;
    } else {
      this._changesTail._nextChanged = record;
      this._changesTail = record;
    }
  }
  /** @internal */
  _forEach(obj, fn) {
    if (obj instanceof Map) {
      obj.forEach(fn);
    } else {
      Object.keys(obj).forEach((k) => fn(obj[k], k));
    }
  }
};
var KeyValueChangeRecord_ = class {
  constructor(key) {
    this.key = key;
    this.previousValue = null;
    this.currentValue = null;
    this._nextPrevious = null;
    this._next = null;
    this._prev = null;
    this._nextAdded = null;
    this._nextRemoved = null;
    this._nextChanged = null;
  }
};
function defaultIterableDiffersFactory() {
  return new IterableDiffers([new DefaultIterableDifferFactory()]);
}
var _IterableDiffers = class _IterableDiffers {
  constructor(factories) {
    this.factories = factories;
  }
  static create(factories, parent) {
    if (parent != null) {
      const copied = parent.factories.slice();
      factories = factories.concat(copied);
    }
    return new _IterableDiffers(factories);
  }
  /**
   * Takes an array of {@link IterableDifferFactory} and returns a provider used to extend the
   * inherited {@link IterableDiffers} instance with the provided factories and return a new
   * {@link IterableDiffers} instance.
   *
   * @usageNotes
   * ### Example
   *
   * The following example shows how to extend an existing list of factories,
   * which will only be applied to the injector for this component and its children.
   * This step is all that's required to make a new {@link IterableDiffer} available.
   *
   * ```
   * @Component({
   *   viewProviders: [
   *     IterableDiffers.extend([new ImmutableListDiffer()])
   *   ]
   * })
   * ```
   */
  static extend(factories) {
    return {
      provide: _IterableDiffers,
      useFactory: (parent) => {
        return _IterableDiffers.create(factories, parent || defaultIterableDiffersFactory());
      },
      // Dependency technically isn't optional, but we can provide a better error message this way.
      deps: [[_IterableDiffers, new SkipSelf(), new Optional()]]
    };
  }
  find(iterable) {
    const factory = this.factories.find((f) => f.supports(iterable));
    if (factory != null) {
      return factory;
    } else {
      throw new RuntimeError(901, ngDevMode && `Cannot find a differ supporting object '${iterable}' of type '${getTypeNameForDebugging(iterable)}'`);
    }
  }
};
_IterableDiffers.\u0275prov = \u0275\u0275defineInjectable({ token: _IterableDiffers, providedIn: "root", factory: defaultIterableDiffersFactory });
var IterableDiffers = _IterableDiffers;
function getTypeNameForDebugging(type) {
  return type["name"] || typeof type;
}
function defaultKeyValueDiffersFactory() {
  return new KeyValueDiffers([new DefaultKeyValueDifferFactory()]);
}
var _KeyValueDiffers = class _KeyValueDiffers {
  constructor(factories) {
    this.factories = factories;
  }
  static create(factories, parent) {
    if (parent) {
      const copied = parent.factories.slice();
      factories = factories.concat(copied);
    }
    return new _KeyValueDiffers(factories);
  }
  /**
   * Takes an array of {@link KeyValueDifferFactory} and returns a provider used to extend the
   * inherited {@link KeyValueDiffers} instance with the provided factories and return a new
   * {@link KeyValueDiffers} instance.
   *
   * @usageNotes
   * ### Example
   *
   * The following example shows how to extend an existing list of factories,
   * which will only be applied to the injector for this component and its children.
   * This step is all that's required to make a new {@link KeyValueDiffer} available.
   *
   * ```
   * @Component({
   *   viewProviders: [
   *     KeyValueDiffers.extend([new ImmutableMapDiffer()])
   *   ]
   * })
   * ```
   */
  static extend(factories) {
    return {
      provide: _KeyValueDiffers,
      useFactory: (parent) => {
        return _KeyValueDiffers.create(factories, parent || defaultKeyValueDiffersFactory());
      },
      // Dependency technically isn't optional, but we can provide a better error message this way.
      deps: [[_KeyValueDiffers, new SkipSelf(), new Optional()]]
    };
  }
  find(kv) {
    const factory = this.factories.find((f) => f.supports(kv));
    if (factory) {
      return factory;
    }
    throw new RuntimeError(901, ngDevMode && `Cannot find a differ supporting object '${kv}'`);
  }
};
_KeyValueDiffers.\u0275prov = \u0275\u0275defineInjectable({ token: _KeyValueDiffers, providedIn: "root", factory: defaultKeyValueDiffersFactory });
var KeyValueDiffers = _KeyValueDiffers;
function devModeEqual(a, b) {
  const isListLikeIterableA = isListLikeIterable(a);
  const isListLikeIterableB = isListLikeIterable(b);
  if (isListLikeIterableA && isListLikeIterableB) {
    return areIterablesEqual(a, b, devModeEqual);
  } else {
    const isAObject = a && (typeof a === "object" || typeof a === "function");
    const isBObject = b && (typeof b === "object" || typeof b === "function");
    if (!isListLikeIterableA && isAObject && !isListLikeIterableB && isBObject) {
      return true;
    } else {
      return Object.is(a, b);
    }
  }
}
function collectNativeNodes(tView, lView, tNode, result, isProjection = false) {
  while (tNode !== null) {
    ngDevMode && assertTNodeType(
      tNode,
      3 | 12 | 16 | 32
      /* TNodeType.Icu */
    );
    const lNode = lView[tNode.index];
    if (lNode !== null) {
      result.push(unwrapRNode(lNode));
    }
    if (isLContainer(lNode)) {
      collectNativeNodesInLContainer(lNode, result);
    }
    const tNodeType = tNode.type;
    if (tNodeType & 8) {
      collectNativeNodes(tView, lView, tNode.child, result);
    } else if (tNodeType & 32) {
      const nextRNode = icuContainerIterate(tNode, lView);
      let rNode;
      while (rNode = nextRNode()) {
        result.push(rNode);
      }
    } else if (tNodeType & 16) {
      const nodesInSlot = getProjectionNodes(lView, tNode);
      if (Array.isArray(nodesInSlot)) {
        result.push(...nodesInSlot);
      } else {
        const parentView = getLViewParent(lView[DECLARATION_COMPONENT_VIEW]);
        ngDevMode && assertParentView(parentView);
        collectNativeNodes(parentView[TVIEW], parentView, nodesInSlot, result, true);
      }
    }
    tNode = isProjection ? tNode.projectionNext : tNode.next;
  }
  return result;
}
function collectNativeNodesInLContainer(lContainer, result) {
  for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
    const lViewInAContainer = lContainer[i];
    const lViewFirstChildTNode = lViewInAContainer[TVIEW].firstChild;
    if (lViewFirstChildTNode !== null) {
      collectNativeNodes(lViewInAContainer[TVIEW], lViewInAContainer, lViewFirstChildTNode, result);
    }
  }
  if (lContainer[NATIVE] !== lContainer[HOST]) {
    result.push(lContainer[NATIVE]);
  }
}
var freeConsumers = [];
function getOrBorrowReactiveLViewConsumer(lView) {
  return lView[REACTIVE_TEMPLATE_CONSUMER] ?? borrowReactiveLViewConsumer(lView);
}
function borrowReactiveLViewConsumer(lView) {
  const consumer = freeConsumers.pop() ?? Object.create(REACTIVE_LVIEW_CONSUMER_NODE);
  consumer.lView = lView;
  return consumer;
}
function maybeReturnReactiveLViewConsumer(consumer) {
  if (consumer.lView[REACTIVE_TEMPLATE_CONSUMER] === consumer) {
    return;
  }
  consumer.lView = null;
  freeConsumers.push(consumer);
}
var REACTIVE_LVIEW_CONSUMER_NODE = __spreadProps(__spreadValues({}, REACTIVE_NODE), {
  consumerIsAlwaysLive: true,
  consumerMarkedDirty: (node) => {
    markAncestorsForTraversal(node.lView);
  },
  consumerOnSignalRead() {
    this.lView[REACTIVE_TEMPLATE_CONSUMER] = this;
  }
});
var ERROR_ORIGINAL_ERROR = "ngOriginalError";
function getOriginalError(error) {
  return error[ERROR_ORIGINAL_ERROR];
}
var ErrorHandler = class {
  constructor() {
    this._console = console;
  }
  handleError(error) {
    const originalError = this._findOriginalError(error);
    this._console.error("ERROR", error);
    if (originalError) {
      this._console.error("ORIGINAL ERROR", originalError);
    }
  }
  /** @internal */
  _findOriginalError(error) {
    let e = error && getOriginalError(error);
    while (e && getOriginalError(e)) {
      e = getOriginalError(e);
    }
    return e || null;
  }
};
var INTERNAL_APPLICATION_ERROR_HANDLER = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "internal error handler" : "", {
  providedIn: "root",
  factory: () => {
    const userErrorHandler = inject(ErrorHandler);
    return userErrorHandler.handleError.bind(void 0);
  }
});
var IS_HYDRATION_DOM_REUSE_ENABLED = new InjectionToken(typeof ngDevMode === "undefined" || !!ngDevMode ? "IS_HYDRATION_DOM_REUSE_ENABLED" : "");
var PRESERVE_HOST_CONTENT_DEFAULT = false;
var PRESERVE_HOST_CONTENT = new InjectionToken(typeof ngDevMode === "undefined" || !!ngDevMode ? "PRESERVE_HOST_CONTENT" : "", {
  providedIn: "root",
  factory: () => PRESERVE_HOST_CONTENT_DEFAULT
});
function normalizeDebugBindingName(name) {
  name = camelCaseToDashCase(name.replace(/[$@]/g, "_"));
  return `ng-reflect-${name}`;
}
var CAMEL_CASE_REGEXP = /([A-Z])/g;
function camelCaseToDashCase(input) {
  return input.replace(CAMEL_CASE_REGEXP, (...m) => "-" + m[1].toLowerCase());
}
function normalizeDebugBindingValue(value) {
  try {
    return value != null ? value.toString().slice(0, 30) : value;
  } catch (e) {
    return "[ERROR] Exception while trying to serialize the value";
  }
}
var VALUE_STRING_LENGTH_LIMIT = 200;
function throwMultipleComponentError(tNode, first2, second) {
  throw new RuntimeError(-300, `Multiple components match node with tagname ${tNode.value}: ${stringifyForError(first2)} and ${stringifyForError(second)}`);
}
function throwErrorIfNoChangesMode(creationMode, oldValue, currValue, propName, lView) {
  const hostComponentDef = getDeclarationComponentDef(lView);
  const componentClassName = hostComponentDef?.type?.name;
  const field = propName ? ` for '${propName}'` : "";
  let msg = `ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value${field}: '${formatValue(oldValue)}'. Current value: '${formatValue(currValue)}'.${componentClassName ? ` Expression location: ${componentClassName} component` : ""}`;
  if (creationMode) {
    msg += ` It seems like the view has been created after its parent and its children have been dirty checked. Has it been created in a change detection hook?`;
  }
  throw new RuntimeError(-100, msg);
}
function formatValue(value) {
  let strValue = String(value);
  try {
    if (Array.isArray(value) || strValue === "[object Object]") {
      strValue = JSON.stringify(value);
    }
  } catch (error) {
  }
  return strValue.length > VALUE_STRING_LENGTH_LIMIT ? strValue.substring(0, VALUE_STRING_LENGTH_LIMIT) + "\u2026" : strValue;
}
function constructDetailsForInterpolation(lView, rootIndex, expressionIndex, meta, changedValue) {
  const [propName, prefix, ...chunks] = meta.split(INTERPOLATION_DELIMITER);
  let oldValue = prefix, newValue = prefix;
  for (let i = 0; i < chunks.length; i++) {
    const slotIdx = rootIndex + i;
    oldValue += `${lView[slotIdx]}${chunks[i]}`;
    newValue += `${slotIdx === expressionIndex ? changedValue : lView[slotIdx]}${chunks[i]}`;
  }
  return { propName, oldValue, newValue };
}
function getExpressionChangedErrorDetails(lView, bindingIndex, oldValue, newValue) {
  const tData = lView[TVIEW].data;
  const metadata = tData[bindingIndex];
  if (typeof metadata === "string") {
    if (metadata.indexOf(INTERPOLATION_DELIMITER) > -1) {
      return constructDetailsForInterpolation(lView, bindingIndex, bindingIndex, metadata, newValue);
    }
    return { propName: metadata, oldValue, newValue };
  }
  if (metadata === null) {
    let idx = bindingIndex - 1;
    while (typeof tData[idx] !== "string" && tData[idx + 1] === null) {
      idx--;
    }
    const meta = tData[idx];
    if (typeof meta === "string") {
      const matches = meta.match(new RegExp(INTERPOLATION_DELIMITER, "g"));
      if (matches && matches.length - 1 > bindingIndex - idx) {
        return constructDetailsForInterpolation(lView, idx, bindingIndex, meta, newValue);
      }
    }
  }
  return { propName: void 0, oldValue, newValue };
}
var NO_CHANGE = typeof ngDevMode === "undefined" || ngDevMode ? { __brand__: "NO_CHANGE" } : {};
function \u0275\u0275advance(delta) {
  ngDevMode && assertGreaterThan(delta, 0, "Can only advance forward");
  selectIndexInternal(getTView(), getLView(), getSelectedIndex() + delta, !!ngDevMode && isInCheckNoChangesMode());
}
function selectIndexInternal(tView, lView, index, checkNoChangesMode) {
  ngDevMode && assertIndexInDeclRange(lView[TVIEW], index);
  if (!checkNoChangesMode) {
    const hooksInitPhaseCompleted = (lView[FLAGS] & 3) === 3;
    if (hooksInitPhaseCompleted) {
      const preOrderCheckHooks = tView.preOrderCheckHooks;
      if (preOrderCheckHooks !== null) {
        executeCheckHooks(lView, preOrderCheckHooks, index);
      }
    } else {
      const preOrderHooks = tView.preOrderHooks;
      if (preOrderHooks !== null) {
        executeInitAndCheckHooks(lView, preOrderHooks, 0, index);
      }
    }
  }
  setSelectedIndex(index);
}
function \u0275\u0275directiveInject(token, flags = InjectFlags.Default) {
  const lView = getLView();
  if (lView === null) {
    ngDevMode && assertInjectImplementationNotEqual(\u0275\u0275directiveInject);
    return \u0275\u0275inject(token, flags);
  }
  const tNode = getCurrentTNode();
  const value = getOrCreateInjectable(tNode, lView, resolveForwardRef(token), flags);
  ngDevMode && emitInjectEvent(token, value, flags);
  return value;
}
function \u0275\u0275invalidFactory() {
  const msg = ngDevMode ? `This constructor was not compatible with Dependency Injection.` : "invalid";
  throw new Error(msg);
}
function processHostBindingOpCodes(tView, lView) {
  const hostBindingOpCodes = tView.hostBindingOpCodes;
  if (hostBindingOpCodes === null)
    return;
  try {
    for (let i = 0; i < hostBindingOpCodes.length; i++) {
      const opCode = hostBindingOpCodes[i];
      if (opCode < 0) {
        setSelectedIndex(~opCode);
      } else {
        const directiveIdx = opCode;
        const bindingRootIndx = hostBindingOpCodes[++i];
        const hostBindingFn = hostBindingOpCodes[++i];
        setBindingRootForHostBindings(bindingRootIndx, directiveIdx);
        const context2 = lView[directiveIdx];
        hostBindingFn(2, context2);
      }
    }
  } finally {
    setSelectedIndex(-1);
  }
}
function createLView(parentLView, tView, context2, flags, host, tHostNode, environment, renderer, injector, embeddedViewInjector, hydrationInfo) {
  const lView = tView.blueprint.slice();
  lView[HOST] = host;
  lView[FLAGS] = flags | 4 | 128 | 8;
  if (embeddedViewInjector !== null || parentLView && parentLView[FLAGS] & 2048) {
    lView[FLAGS] |= 2048;
  }
  resetPreOrderHookFlags(lView);
  ngDevMode && tView.declTNode && parentLView && assertTNodeForLView(tView.declTNode, parentLView);
  lView[PARENT] = lView[DECLARATION_VIEW] = parentLView;
  lView[CONTEXT] = context2;
  lView[ENVIRONMENT] = environment || parentLView && parentLView[ENVIRONMENT];
  ngDevMode && assertDefined(lView[ENVIRONMENT], "LViewEnvironment is required");
  lView[RENDERER] = renderer || parentLView && parentLView[RENDERER];
  ngDevMode && assertDefined(lView[RENDERER], "Renderer is required");
  lView[INJECTOR$1] = injector || parentLView && parentLView[INJECTOR$1] || null;
  lView[T_HOST] = tHostNode;
  lView[ID] = getUniqueLViewId();
  lView[HYDRATION] = hydrationInfo;
  lView[EMBEDDED_VIEW_INJECTOR] = embeddedViewInjector;
  ngDevMode && assertEqual(tView.type == 2 ? parentLView !== null : true, true, "Embedded views must have parentLView");
  lView[DECLARATION_COMPONENT_VIEW] = tView.type == 2 ? parentLView[DECLARATION_COMPONENT_VIEW] : lView;
  return lView;
}
function getOrCreateTNode(tView, index, type, name, attrs) {
  ngDevMode && index !== 0 && // 0 are bogus nodes and they are OK. See `createContainerRef` in
  // `view_engine_compatibility` for additional context.
  assertGreaterThanOrEqual(index, HEADER_OFFSET, "TNodes can't be in the LView header.");
  ngDevMode && assertPureTNodeType(type);
  let tNode = tView.data[index];
  if (tNode === null) {
    tNode = createTNodeAtIndex(tView, index, type, name, attrs);
    if (isInI18nBlock()) {
      tNode.flags |= 32;
    }
  } else if (tNode.type & 64) {
    tNode.type = type;
    tNode.value = name;
    tNode.attrs = attrs;
    const parent = getCurrentParentTNode();
    tNode.injectorIndex = parent === null ? -1 : parent.injectorIndex;
    ngDevMode && assertTNodeForTView(tNode, tView);
    ngDevMode && assertEqual(index, tNode.index, "Expecting same index");
  }
  setCurrentTNode(tNode, true);
  return tNode;
}
function createTNodeAtIndex(tView, index, type, name, attrs) {
  const currentTNode = getCurrentTNodePlaceholderOk();
  const isParent = isCurrentTNodeParent();
  const parent = isParent ? currentTNode : currentTNode && currentTNode.parent;
  const tNode = tView.data[index] = createTNode(tView, parent, type, index, name, attrs);
  if (tView.firstChild === null) {
    tView.firstChild = tNode;
  }
  if (currentTNode !== null) {
    if (isParent) {
      if (currentTNode.child == null && tNode.parent !== null) {
        currentTNode.child = tNode;
      }
    } else {
      if (currentTNode.next === null) {
        currentTNode.next = tNode;
        tNode.prev = currentTNode;
      }
    }
  }
  return tNode;
}
function allocExpando(tView, lView, numSlotsToAlloc, initialValue) {
  if (numSlotsToAlloc === 0)
    return -1;
  if (ngDevMode) {
    assertFirstCreatePass(tView);
    assertSame(tView, lView[TVIEW], "`LView` must be associated with `TView`!");
    assertEqual(tView.data.length, lView.length, "Expecting LView to be same size as TView");
    assertEqual(tView.data.length, tView.blueprint.length, "Expecting Blueprint to be same size as TView");
    assertFirstUpdatePass(tView);
  }
  const allocIdx = lView.length;
  for (let i = 0; i < numSlotsToAlloc; i++) {
    lView.push(initialValue);
    tView.blueprint.push(initialValue);
    tView.data.push(null);
  }
  return allocIdx;
}
function executeTemplate(tView, lView, templateFn, rf, context2) {
  const prevSelectedIndex = getSelectedIndex();
  const isUpdatePhase = rf & 2;
  try {
    setSelectedIndex(-1);
    if (isUpdatePhase && lView.length > HEADER_OFFSET) {
      selectIndexInternal(tView, lView, HEADER_OFFSET, !!ngDevMode && isInCheckNoChangesMode());
    }
    const preHookType = isUpdatePhase ? 2 : 0;
    profiler(preHookType, context2);
    templateFn(rf, context2);
  } finally {
    setSelectedIndex(prevSelectedIndex);
    const postHookType = isUpdatePhase ? 3 : 1;
    profiler(postHookType, context2);
  }
}
function executeContentQueries(tView, tNode, lView) {
  if (isContentQueryHost(tNode)) {
    const prevConsumer = setActiveConsumer(null);
    try {
      const start = tNode.directiveStart;
      const end = tNode.directiveEnd;
      for (let directiveIndex = start; directiveIndex < end; directiveIndex++) {
        const def = tView.data[directiveIndex];
        if (def.contentQueries) {
          def.contentQueries(1, lView[directiveIndex], directiveIndex);
        }
      }
    } finally {
      setActiveConsumer(prevConsumer);
    }
  }
}
function createDirectivesInstances(tView, lView, tNode) {
  if (!getBindingsEnabled())
    return;
  instantiateAllDirectives(tView, lView, tNode, getNativeByTNode(tNode, lView));
  if ((tNode.flags & 64) === 64) {
    invokeDirectivesHostBindings(tView, lView, tNode);
  }
}
function saveResolvedLocalsInData(viewData, tNode, localRefExtractor = getNativeByTNode) {
  const localNames = tNode.localNames;
  if (localNames !== null) {
    let localIndex = tNode.index + 1;
    for (let i = 0; i < localNames.length; i += 2) {
      const index = localNames[i + 1];
      const value = index === -1 ? localRefExtractor(tNode, viewData) : viewData[index];
      viewData[localIndex++] = value;
    }
  }
}
function getOrCreateComponentTView(def) {
  const tView = def.tView;
  if (tView === null || tView.incompleteFirstPass) {
    const declTNode = null;
    return def.tView = createTView(1, declTNode, def.template, def.decls, def.vars, def.directiveDefs, def.pipeDefs, def.viewQuery, def.schemas, def.consts, def.id);
  }
  return tView;
}
function createTView(type, declTNode, templateFn, decls, vars, directives, pipes, viewQuery, schemas, constsOrFactory, ssrId) {
  ngDevMode && ngDevMode.tView++;
  const bindingStartIndex = HEADER_OFFSET + decls;
  const initialViewLength = bindingStartIndex + vars;
  const blueprint = createViewBlueprint(bindingStartIndex, initialViewLength);
  const consts = typeof constsOrFactory === "function" ? constsOrFactory() : constsOrFactory;
  const tView = blueprint[TVIEW] = {
    type,
    blueprint,
    template: templateFn,
    queries: null,
    viewQuery,
    declTNode,
    data: blueprint.slice().fill(null, bindingStartIndex),
    bindingStartIndex,
    expandoStartIndex: initialViewLength,
    hostBindingOpCodes: null,
    firstCreatePass: true,
    firstUpdatePass: true,
    staticViewQueries: false,
    staticContentQueries: false,
    preOrderHooks: null,
    preOrderCheckHooks: null,
    contentHooks: null,
    contentCheckHooks: null,
    viewHooks: null,
    viewCheckHooks: null,
    destroyHooks: null,
    cleanup: null,
    contentQueries: null,
    components: null,
    directiveRegistry: typeof directives === "function" ? directives() : directives,
    pipeRegistry: typeof pipes === "function" ? pipes() : pipes,
    firstChild: null,
    schemas,
    consts,
    incompleteFirstPass: false,
    ssrId
  };
  if (ngDevMode) {
    Object.seal(tView);
  }
  return tView;
}
function createViewBlueprint(bindingStartIndex, initialViewLength) {
  const blueprint = [];
  for (let i = 0; i < initialViewLength; i++) {
    blueprint.push(i < bindingStartIndex ? null : NO_CHANGE);
  }
  return blueprint;
}
function locateHostElement(renderer, elementOrSelector, encapsulation, injector) {
  const preserveHostContent = injector.get(PRESERVE_HOST_CONTENT, PRESERVE_HOST_CONTENT_DEFAULT);
  const preserveContent = preserveHostContent || encapsulation === ViewEncapsulation$1.ShadowDom;
  const rootElement = renderer.selectRootElement(elementOrSelector, preserveContent);
  applyRootElementTransform(rootElement);
  return rootElement;
}
function applyRootElementTransform(rootElement) {
  _applyRootElementTransformImpl(rootElement);
}
var _applyRootElementTransformImpl = (rootElement) => null;
function storeCleanupWithContext(tView, lView, context2, cleanupFn) {
  const lCleanup = getOrCreateLViewCleanup(lView);
  ngDevMode && assertDefined(context2, "Cleanup context is mandatory when registering framework-level destroy hooks");
  lCleanup.push(context2);
  if (tView.firstCreatePass) {
    getOrCreateTViewCleanup(tView).push(cleanupFn, lCleanup.length - 1);
  } else {
    if (ngDevMode) {
      Object.freeze(getOrCreateTViewCleanup(tView));
    }
  }
}
function createTNode(tView, tParent, type, index, value, attrs) {
  ngDevMode && index !== 0 && // 0 are bogus nodes and they are OK. See `createContainerRef` in
  // `view_engine_compatibility` for additional context.
  assertGreaterThanOrEqual(index, HEADER_OFFSET, "TNodes can't be in the LView header.");
  ngDevMode && assertNotSame(attrs, void 0, "'undefined' is not valid value for 'attrs'");
  ngDevMode && ngDevMode.tNode++;
  ngDevMode && tParent && assertTNodeForTView(tParent, tView);
  let injectorIndex = tParent ? tParent.injectorIndex : -1;
  let flags = 0;
  if (isInSkipHydrationBlock$1()) {
    flags |= 128;
  }
  const tNode = {
    type,
    index,
    insertBeforeIndex: null,
    injectorIndex,
    directiveStart: -1,
    directiveEnd: -1,
    directiveStylingLast: -1,
    componentOffset: -1,
    propertyBindings: null,
    flags,
    providerIndexes: 0,
    value,
    attrs,
    mergedAttrs: null,
    localNames: null,
    initialInputs: void 0,
    inputs: null,
    outputs: null,
    tView: null,
    next: null,
    prev: null,
    projectionNext: null,
    child: null,
    parent: tParent,
    projection: null,
    styles: null,
    stylesWithoutHost: null,
    residualStyles: void 0,
    classes: null,
    classesWithoutHost: null,
    residualClasses: void 0,
    classBindings: 0,
    styleBindings: 0
  };
  if (ngDevMode) {
    Object.seal(tNode);
  }
  return tNode;
}
function generatePropertyAliases(aliasMap, directiveIndex, propertyAliases, hostDirectiveAliasMap) {
  for (let publicName in aliasMap) {
    if (aliasMap.hasOwnProperty(publicName)) {
      propertyAliases = propertyAliases === null ? {} : propertyAliases;
      const internalName = aliasMap[publicName];
      if (hostDirectiveAliasMap === null) {
        addPropertyAlias(propertyAliases, directiveIndex, publicName, internalName);
      } else if (hostDirectiveAliasMap.hasOwnProperty(publicName)) {
        addPropertyAlias(propertyAliases, directiveIndex, hostDirectiveAliasMap[publicName], internalName);
      }
    }
  }
  return propertyAliases;
}
function addPropertyAlias(propertyAliases, directiveIndex, publicName, internalName) {
  if (propertyAliases.hasOwnProperty(publicName)) {
    propertyAliases[publicName].push(directiveIndex, internalName);
  } else {
    propertyAliases[publicName] = [directiveIndex, internalName];
  }
}
function initializeInputAndOutputAliases(tView, tNode, hostDirectiveDefinitionMap) {
  ngDevMode && assertFirstCreatePass(tView);
  const start = tNode.directiveStart;
  const end = tNode.directiveEnd;
  const tViewData = tView.data;
  const tNodeAttrs = tNode.attrs;
  const inputsFromAttrs = [];
  let inputsStore = null;
  let outputsStore = null;
  for (let directiveIndex = start; directiveIndex < end; directiveIndex++) {
    const directiveDef = tViewData[directiveIndex];
    const aliasData = hostDirectiveDefinitionMap ? hostDirectiveDefinitionMap.get(directiveDef) : null;
    const aliasedInputs = aliasData ? aliasData.inputs : null;
    const aliasedOutputs = aliasData ? aliasData.outputs : null;
    inputsStore = generatePropertyAliases(directiveDef.inputs, directiveIndex, inputsStore, aliasedInputs);
    outputsStore = generatePropertyAliases(directiveDef.outputs, directiveIndex, outputsStore, aliasedOutputs);
    const initialInputs = inputsStore !== null && tNodeAttrs !== null && !isInlineTemplate(tNode) ? generateInitialInputs(inputsStore, directiveIndex, tNodeAttrs) : null;
    inputsFromAttrs.push(initialInputs);
  }
  if (inputsStore !== null) {
    if (inputsStore.hasOwnProperty("class")) {
      tNode.flags |= 8;
    }
    if (inputsStore.hasOwnProperty("style")) {
      tNode.flags |= 16;
    }
  }
  tNode.initialInputs = inputsFromAttrs;
  tNode.inputs = inputsStore;
  tNode.outputs = outputsStore;
}
function mapPropName(name) {
  if (name === "class")
    return "className";
  if (name === "for")
    return "htmlFor";
  if (name === "formaction")
    return "formAction";
  if (name === "innerHtml")
    return "innerHTML";
  if (name === "readonly")
    return "readOnly";
  if (name === "tabindex")
    return "tabIndex";
  return name;
}
function elementPropertyInternal(tView, tNode, lView, propName, value, renderer, sanitizer, nativeOnly) {
  ngDevMode && assertNotSame(value, NO_CHANGE, "Incoming value should never be NO_CHANGE.");
  const element = getNativeByTNode(tNode, lView);
  let inputData = tNode.inputs;
  let dataValue;
  if (!nativeOnly && inputData != null && (dataValue = inputData[propName])) {
    setInputsForProperty(tView, lView, dataValue, propName, value);
    if (isComponentHost(tNode))
      markDirtyIfOnPush(lView, tNode.index);
    if (ngDevMode) {
      setNgReflectProperties(lView, element, tNode.type, dataValue, value);
    }
  } else if (tNode.type & 3) {
    propName = mapPropName(propName);
    if (ngDevMode) {
      validateAgainstEventProperties(propName);
      if (!isPropertyValid(element, propName, tNode.value, tView.schemas)) {
        handleUnknownPropertyError(propName, tNode.value, tNode.type, lView);
      }
      ngDevMode.rendererSetProperty++;
    }
    value = sanitizer != null ? sanitizer(value, tNode.value || "", propName) : value;
    renderer.setProperty(element, propName, value);
  } else if (tNode.type & 12) {
    if (ngDevMode && !matchingSchemas(tView.schemas, tNode.value)) {
      handleUnknownPropertyError(propName, tNode.value, tNode.type, lView);
    }
  }
}
function markDirtyIfOnPush(lView, viewIndex) {
  ngDevMode && assertLView(lView);
  const childComponentLView = getComponentLViewByIndex(viewIndex, lView);
  if (!(childComponentLView[FLAGS] & 16)) {
    childComponentLView[FLAGS] |= 64;
  }
}
function setNgReflectProperty(lView, element, type, attrName, value) {
  const renderer = lView[RENDERER];
  attrName = normalizeDebugBindingName(attrName);
  const debugValue = normalizeDebugBindingValue(value);
  if (type & 3) {
    if (value == null) {
      renderer.removeAttribute(element, attrName);
    } else {
      renderer.setAttribute(element, attrName, debugValue);
    }
  } else {
    const textContent = escapeCommentText(`bindings=${JSON.stringify({ [attrName]: debugValue }, null, 2)}`);
    renderer.setValue(element, textContent);
  }
}
function setNgReflectProperties(lView, element, type, dataValue, value) {
  if (type & (3 | 4)) {
    for (let i = 0; i < dataValue.length; i += 2) {
      setNgReflectProperty(lView, element, type, dataValue[i + 1], value);
    }
  }
}
function resolveDirectives(tView, lView, tNode, localRefs) {
  ngDevMode && assertFirstCreatePass(tView);
  if (getBindingsEnabled()) {
    const exportsMap = localRefs === null ? null : { "": -1 };
    const matchResult = findDirectiveDefMatches(tView, tNode);
    let directiveDefs;
    let hostDirectiveDefs;
    if (matchResult === null) {
      directiveDefs = hostDirectiveDefs = null;
    } else {
      [directiveDefs, hostDirectiveDefs] = matchResult;
    }
    if (directiveDefs !== null) {
      initializeDirectives(tView, lView, tNode, directiveDefs, exportsMap, hostDirectiveDefs);
    }
    if (exportsMap)
      cacheMatchingLocalNames(tNode, localRefs, exportsMap);
  }
  tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, tNode.attrs);
}
function initializeDirectives(tView, lView, tNode, directives, exportsMap, hostDirectiveDefs) {
  ngDevMode && assertFirstCreatePass(tView);
  for (let i = 0; i < directives.length; i++) {
    diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, directives[i].type);
  }
  initTNodeFlags(tNode, tView.data.length, directives.length);
  for (let i = 0; i < directives.length; i++) {
    const def = directives[i];
    if (def.providersResolver)
      def.providersResolver(def);
  }
  let preOrderHooksFound = false;
  let preOrderCheckHooksFound = false;
  let directiveIdx = allocExpando(tView, lView, directives.length, null);
  ngDevMode && assertSame(directiveIdx, tNode.directiveStart, "TNode.directiveStart should point to just allocated space");
  for (let i = 0; i < directives.length; i++) {
    const def = directives[i];
    tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, def.hostAttrs);
    configureViewWithDirective(tView, tNode, lView, directiveIdx, def);
    saveNameToExportMap(directiveIdx, def, exportsMap);
    if (def.contentQueries !== null)
      tNode.flags |= 4;
    if (def.hostBindings !== null || def.hostAttrs !== null || def.hostVars !== 0)
      tNode.flags |= 64;
    const lifeCycleHooks = def.type.prototype;
    if (!preOrderHooksFound && (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngOnInit || lifeCycleHooks.ngDoCheck)) {
      (tView.preOrderHooks ??= []).push(tNode.index);
      preOrderHooksFound = true;
    }
    if (!preOrderCheckHooksFound && (lifeCycleHooks.ngOnChanges || lifeCycleHooks.ngDoCheck)) {
      (tView.preOrderCheckHooks ??= []).push(tNode.index);
      preOrderCheckHooksFound = true;
    }
    directiveIdx++;
  }
  initializeInputAndOutputAliases(tView, tNode, hostDirectiveDefs);
}
function registerHostBindingOpCodes(tView, tNode, directiveIdx, directiveVarsIdx, def) {
  ngDevMode && assertFirstCreatePass(tView);
  const hostBindings = def.hostBindings;
  if (hostBindings) {
    let hostBindingOpCodes = tView.hostBindingOpCodes;
    if (hostBindingOpCodes === null) {
      hostBindingOpCodes = tView.hostBindingOpCodes = [];
    }
    const elementIndx = ~tNode.index;
    if (lastSelectedElementIdx(hostBindingOpCodes) != elementIndx) {
      hostBindingOpCodes.push(elementIndx);
    }
    hostBindingOpCodes.push(directiveIdx, directiveVarsIdx, hostBindings);
  }
}
function lastSelectedElementIdx(hostBindingOpCodes) {
  let i = hostBindingOpCodes.length;
  while (i > 0) {
    const value = hostBindingOpCodes[--i];
    if (typeof value === "number" && value < 0) {
      return value;
    }
  }
  return 0;
}
function instantiateAllDirectives(tView, lView, tNode, native) {
  const start = tNode.directiveStart;
  const end = tNode.directiveEnd;
  if (isComponentHost(tNode)) {
    ngDevMode && assertTNodeType(
      tNode,
      3
      /* TNodeType.AnyRNode */
    );
    addComponentLogic(lView, tNode, tView.data[start + tNode.componentOffset]);
  }
  if (!tView.firstCreatePass) {
    getOrCreateNodeInjectorForNode(tNode, lView);
  }
  attachPatchData(native, lView);
  const initialInputs = tNode.initialInputs;
  for (let i = start; i < end; i++) {
    const def = tView.data[i];
    const directive = getNodeInjectable(lView, tView, i, tNode);
    attachPatchData(directive, lView);
    if (initialInputs !== null) {
      setInputsFromAttrs(lView, i - start, directive, def, tNode, initialInputs);
    }
    if (isComponentDef(def)) {
      const componentView = getComponentLViewByIndex(tNode.index, lView);
      componentView[CONTEXT] = getNodeInjectable(lView, tView, i, tNode);
    }
  }
}
function invokeDirectivesHostBindings(tView, lView, tNode) {
  const start = tNode.directiveStart;
  const end = tNode.directiveEnd;
  const elementIndex = tNode.index;
  const currentDirectiveIndex = getCurrentDirectiveIndex();
  try {
    setSelectedIndex(elementIndex);
    for (let dirIndex = start; dirIndex < end; dirIndex++) {
      const def = tView.data[dirIndex];
      const directive = lView[dirIndex];
      setCurrentDirectiveIndex(dirIndex);
      if (def.hostBindings !== null || def.hostVars !== 0 || def.hostAttrs !== null) {
        invokeHostBindingsInCreationMode(def, directive);
      }
    }
  } finally {
    setSelectedIndex(-1);
    setCurrentDirectiveIndex(currentDirectiveIndex);
  }
}
function invokeHostBindingsInCreationMode(def, directive) {
  if (def.hostBindings !== null) {
    def.hostBindings(1, directive);
  }
}
function findDirectiveDefMatches(tView, tNode) {
  ngDevMode && assertFirstCreatePass(tView);
  ngDevMode && assertTNodeType(
    tNode,
    3 | 12
    /* TNodeType.AnyContainer */
  );
  const registry = tView.directiveRegistry;
  let matches = null;
  let hostDirectiveDefs = null;
  if (registry) {
    for (let i = 0; i < registry.length; i++) {
      const def = registry[i];
      if (isNodeMatchingSelectorList(
        tNode,
        def.selectors,
        /* isProjectionMode */
        false
      )) {
        matches || (matches = []);
        if (isComponentDef(def)) {
          if (ngDevMode) {
            assertTNodeType(tNode, 2, `"${tNode.value}" tags cannot be used as component hosts. Please use a different tag to activate the ${stringify(def.type)} component.`);
            if (isComponentHost(tNode)) {
              throwMultipleComponentError(tNode, matches.find(isComponentDef).type, def.type);
            }
          }
          if (def.findHostDirectiveDefs !== null) {
            const hostDirectiveMatches = [];
            hostDirectiveDefs = hostDirectiveDefs || /* @__PURE__ */ new Map();
            def.findHostDirectiveDefs(def, hostDirectiveMatches, hostDirectiveDefs);
            matches.unshift(...hostDirectiveMatches, def);
            const componentOffset = hostDirectiveMatches.length;
            markAsComponentHost(tView, tNode, componentOffset);
          } else {
            matches.unshift(def);
            markAsComponentHost(tView, tNode, 0);
          }
        } else {
          hostDirectiveDefs = hostDirectiveDefs || /* @__PURE__ */ new Map();
          def.findHostDirectiveDefs?.(def, matches, hostDirectiveDefs);
          matches.push(def);
        }
      }
    }
  }
  ngDevMode && matches !== null && assertNoDuplicateDirectives(matches);
  return matches === null ? null : [matches, hostDirectiveDefs];
}
function markAsComponentHost(tView, hostTNode, componentOffset) {
  ngDevMode && assertFirstCreatePass(tView);
  ngDevMode && assertGreaterThan(componentOffset, -1, "componentOffset must be great than -1");
  hostTNode.componentOffset = componentOffset;
  (tView.components ??= []).push(hostTNode.index);
}
function cacheMatchingLocalNames(tNode, localRefs, exportsMap) {
  if (localRefs) {
    const localNames = tNode.localNames = [];
    for (let i = 0; i < localRefs.length; i += 2) {
      const index = exportsMap[localRefs[i + 1]];
      if (index == null)
        throw new RuntimeError(-301, ngDevMode && `Export of name '${localRefs[i + 1]}' not found!`);
      localNames.push(localRefs[i], index);
    }
  }
}
function saveNameToExportMap(directiveIdx, def, exportsMap) {
  if (exportsMap) {
    if (def.exportAs) {
      for (let i = 0; i < def.exportAs.length; i++) {
        exportsMap[def.exportAs[i]] = directiveIdx;
      }
    }
    if (isComponentDef(def))
      exportsMap[""] = directiveIdx;
  }
}
function initTNodeFlags(tNode, index, numberOfDirectives) {
  ngDevMode && assertNotEqual(numberOfDirectives, tNode.directiveEnd - tNode.directiveStart, "Reached the max number of directives");
  tNode.flags |= 1;
  tNode.directiveStart = index;
  tNode.directiveEnd = index + numberOfDirectives;
  tNode.providerIndexes = index;
}
function configureViewWithDirective(tView, tNode, lView, directiveIndex, def) {
  ngDevMode && assertGreaterThanOrEqual(directiveIndex, HEADER_OFFSET, "Must be in Expando section");
  tView.data[directiveIndex] = def;
  const directiveFactory = def.factory || (def.factory = getFactoryDef(def.type, true));
  const nodeInjectorFactory = new NodeInjectorFactory(directiveFactory, isComponentDef(def), \u0275\u0275directiveInject);
  tView.blueprint[directiveIndex] = nodeInjectorFactory;
  lView[directiveIndex] = nodeInjectorFactory;
  registerHostBindingOpCodes(tView, tNode, directiveIndex, allocExpando(tView, lView, def.hostVars, NO_CHANGE), def);
}
function addComponentLogic(lView, hostTNode, def) {
  const native = getNativeByTNode(hostTNode, lView);
  const tView = getOrCreateComponentTView(def);
  const rendererFactory = lView[ENVIRONMENT].rendererFactory;
  let lViewFlags = 16;
  if (def.signals) {
    lViewFlags = 4096;
  } else if (def.onPush) {
    lViewFlags = 64;
  }
  const componentView = addToViewTree(lView, createLView(lView, tView, null, lViewFlags, native, hostTNode, null, rendererFactory.createRenderer(native, def), null, null, null));
  lView[hostTNode.index] = componentView;
}
function elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace) {
  if (ngDevMode) {
    assertNotSame(value, NO_CHANGE, "Incoming value should never be NO_CHANGE.");
    validateAgainstEventAttributes(name);
    assertTNodeType(tNode, 2, `Attempted to set attribute \`${name}\` on a container node. Host bindings are not valid on ng-container or ng-template.`);
  }
  const element = getNativeByTNode(tNode, lView);
  setElementAttribute(lView[RENDERER], element, namespace, tNode.value, name, value, sanitizer);
}
function setElementAttribute(renderer, element, namespace, tagName, name, value, sanitizer) {
  if (value == null) {
    ngDevMode && ngDevMode.rendererRemoveAttribute++;
    renderer.removeAttribute(element, name, namespace);
  } else {
    ngDevMode && ngDevMode.rendererSetAttribute++;
    const strValue = sanitizer == null ? renderStringify(value) : sanitizer(value, tagName || "", name);
    renderer.setAttribute(element, name, strValue, namespace);
  }
}
function setInputsFromAttrs(lView, directiveIndex, instance, def, tNode, initialInputData) {
  const initialInputs = initialInputData[directiveIndex];
  if (initialInputs !== null) {
    for (let i = 0; i < initialInputs.length; ) {
      const publicName = initialInputs[i++];
      const privateName = initialInputs[i++];
      const value = initialInputs[i++];
      writeToDirectiveInput(def, instance, publicName, privateName, value);
      if (ngDevMode) {
        const nativeElement = getNativeByTNode(tNode, lView);
        setNgReflectProperty(lView, nativeElement, tNode.type, privateName, value);
      }
    }
  }
}
function writeToDirectiveInput(def, instance, publicName, privateName, value) {
  const prevConsumer = setActiveConsumer(null);
  try {
    const inputTransforms = def.inputTransforms;
    if (inputTransforms !== null && inputTransforms.hasOwnProperty(privateName)) {
      value = inputTransforms[privateName].call(instance, value);
    }
    if (def.setInput !== null) {
      def.setInput(instance, value, publicName, privateName);
    } else {
      instance[privateName] = value;
    }
  } finally {
    setActiveConsumer(prevConsumer);
  }
}
function generateInitialInputs(inputs, directiveIndex, attrs) {
  let inputsToStore = null;
  let i = 0;
  while (i < attrs.length) {
    const attrName = attrs[i];
    if (attrName === 0) {
      i += 4;
      continue;
    } else if (attrName === 5) {
      i += 2;
      continue;
    }
    if (typeof attrName === "number")
      break;
    if (inputs.hasOwnProperty(attrName)) {
      if (inputsToStore === null)
        inputsToStore = [];
      const inputConfig = inputs[attrName];
      for (let j = 0; j < inputConfig.length; j += 2) {
        if (inputConfig[j] === directiveIndex) {
          inputsToStore.push(attrName, inputConfig[j + 1], attrs[i + 1]);
          break;
        }
      }
    }
    i += 2;
  }
  return inputsToStore;
}
function createLContainer(hostNative, currentView, native, tNode) {
  ngDevMode && assertLView(currentView);
  const lContainer = [
    hostNative,
    true,
    0,
    currentView,
    null,
    tNode,
    null,
    native,
    null,
    null
    // moved views
  ];
  ngDevMode && assertEqual(lContainer.length, CONTAINER_HEADER_OFFSET, "Should allocate correct number of slots for LContainer header.");
  return lContainer;
}
function refreshContentQueries(tView, lView) {
  const contentQueries = tView.contentQueries;
  if (contentQueries !== null) {
    const prevConsumer = setActiveConsumer(null);
    try {
      for (let i = 0; i < contentQueries.length; i += 2) {
        const queryStartIdx = contentQueries[i];
        const directiveDefIdx = contentQueries[i + 1];
        if (directiveDefIdx !== -1) {
          const directiveDef = tView.data[directiveDefIdx];
          ngDevMode && assertDefined(directiveDef, "DirectiveDef not found.");
          ngDevMode && assertDefined(directiveDef.contentQueries, "contentQueries function should be defined");
          setCurrentQueryIndex(queryStartIdx);
          directiveDef.contentQueries(2, lView[directiveDefIdx], directiveDefIdx);
        }
      }
    } finally {
      setActiveConsumer(prevConsumer);
    }
  }
}
function addToViewTree(lView, lViewOrLContainer) {
  if (lView[CHILD_HEAD]) {
    lView[CHILD_TAIL][NEXT] = lViewOrLContainer;
  } else {
    lView[CHILD_HEAD] = lViewOrLContainer;
  }
  lView[CHILD_TAIL] = lViewOrLContainer;
  return lViewOrLContainer;
}
function executeViewQueryFn(flags, viewQueryFn, component) {
  ngDevMode && assertDefined(viewQueryFn, "View queries function to execute must be defined.");
  setCurrentQueryIndex(0);
  const prevConsumer = setActiveConsumer(null);
  try {
    viewQueryFn(flags, component);
  } finally {
    setActiveConsumer(prevConsumer);
  }
}
function storePropertyBindingMetadata(tData, tNode, propertyName, bindingIndex, ...interpolationParts) {
  if (tData[bindingIndex] === null) {
    if (tNode.inputs == null || !tNode.inputs[propertyName]) {
      const propBindingIdxs = tNode.propertyBindings || (tNode.propertyBindings = []);
      propBindingIdxs.push(bindingIndex);
      let bindingMetadata = propertyName;
      if (interpolationParts.length > 0) {
        bindingMetadata += INTERPOLATION_DELIMITER + interpolationParts.join(INTERPOLATION_DELIMITER);
      }
      tData[bindingIndex] = bindingMetadata;
    }
  }
}
function getOrCreateLViewCleanup(view) {
  return view[CLEANUP] || (view[CLEANUP] = []);
}
function getOrCreateTViewCleanup(tView) {
  return tView.cleanup || (tView.cleanup = []);
}
function loadComponentRenderer(currentDef, tNode, lView) {
  if (currentDef === null || isComponentDef(currentDef)) {
    lView = unwrapLView(lView[tNode.index]);
  }
  return lView[RENDERER];
}
function handleError(lView, error) {
  const injector = lView[INJECTOR$1];
  const errorHandler2 = injector ? injector.get(ErrorHandler, null) : null;
  errorHandler2 && errorHandler2.handleError(error);
}
function setInputsForProperty(tView, lView, inputs, publicName, value) {
  for (let i = 0; i < inputs.length; ) {
    const index = inputs[i++];
    const privateName = inputs[i++];
    const instance = lView[index];
    ngDevMode && assertIndexInRange(lView, index);
    const def = tView.data[index];
    writeToDirectiveInput(def, instance, publicName, privateName, value);
  }
}
function textBindingInternal(lView, index, value) {
  ngDevMode && assertString(value, "Value should be a string");
  ngDevMode && assertNotSame(value, NO_CHANGE, "value should not be NO_CHANGE");
  ngDevMode && assertIndexInRange(lView, index);
  const element = getNativeByIndex(index, lView);
  ngDevMode && assertDefined(element, "native element should exist");
  updateTextNode(lView[RENDERER], element, value);
}
var MAXIMUM_REFRESH_RERUNS = 100;
function detectChangesInternal(lView, notifyErrorHandler = true) {
  const environment = lView[ENVIRONMENT];
  const rendererFactory = environment.rendererFactory;
  const afterRenderEventManager = environment.afterRenderEventManager;
  const checkNoChangesMode = !!ngDevMode && isInCheckNoChangesMode();
  if (!checkNoChangesMode) {
    rendererFactory.begin?.();
    afterRenderEventManager?.begin();
  }
  try {
    detectChangesInViewWhileDirty(lView);
  } catch (error) {
    if (notifyErrorHandler) {
      handleError(lView, error);
    }
    throw error;
  } finally {
    if (!checkNoChangesMode) {
      rendererFactory.end?.();
      environment.inlineEffectRunner?.flush();
      afterRenderEventManager?.end();
    }
  }
}
function detectChangesInViewWhileDirty(lView) {
  detectChangesInView(
    lView,
    0
    /* ChangeDetectionMode.Global */
  );
  let retries = 0;
  while (requiresRefreshOrTraversal(lView)) {
    if (retries === MAXIMUM_REFRESH_RERUNS) {
      throw new RuntimeError(103, ngDevMode && "Infinite change detection while trying to refresh views. There may be components which each cause the other to require a refresh, causing an infinite loop.");
    }
    retries++;
    detectChangesInView(
      lView,
      1
      /* ChangeDetectionMode.Targeted */
    );
  }
}
function checkNoChangesInternal(lView, notifyErrorHandler = true) {
  setIsInCheckNoChangesMode(true);
  try {
    detectChangesInternal(lView, notifyErrorHandler);
  } finally {
    setIsInCheckNoChangesMode(false);
  }
}
function refreshView(tView, lView, templateFn, context2) {
  ngDevMode && assertEqual(isCreationMode(lView), false, "Should be run in update mode");
  const flags = lView[FLAGS];
  if ((flags & 256) === 256)
    return;
  const isInCheckNoChangesPass = ngDevMode && isInCheckNoChangesMode();
  !isInCheckNoChangesPass && lView[ENVIRONMENT].inlineEffectRunner?.flush();
  enterView(lView);
  let prevConsumer = null;
  let currentConsumer = null;
  if (!isInCheckNoChangesPass && viewShouldHaveReactiveConsumer(tView)) {
    currentConsumer = getOrBorrowReactiveLViewConsumer(lView);
    prevConsumer = consumerBeforeComputation(currentConsumer);
  }
  try {
    resetPreOrderHookFlags(lView);
    setBindingIndex(tView.bindingStartIndex);
    if (templateFn !== null) {
      executeTemplate(tView, lView, templateFn, 2, context2);
    }
    const hooksInitPhaseCompleted = (flags & 3) === 3;
    if (!isInCheckNoChangesPass) {
      if (hooksInitPhaseCompleted) {
        const preOrderCheckHooks = tView.preOrderCheckHooks;
        if (preOrderCheckHooks !== null) {
          executeCheckHooks(lView, preOrderCheckHooks, null);
        }
      } else {
        const preOrderHooks = tView.preOrderHooks;
        if (preOrderHooks !== null) {
          executeInitAndCheckHooks(lView, preOrderHooks, 0, null);
        }
        incrementInitPhaseFlags(
          lView,
          0
          /* InitPhaseState.OnInitHooksToBeRun */
        );
      }
    }
    markTransplantedViewsForRefresh(lView);
    detectChangesInEmbeddedViews(
      lView,
      0
      /* ChangeDetectionMode.Global */
    );
    if (tView.contentQueries !== null) {
      refreshContentQueries(tView, lView);
    }
    if (!isInCheckNoChangesPass) {
      if (hooksInitPhaseCompleted) {
        const contentCheckHooks = tView.contentCheckHooks;
        if (contentCheckHooks !== null) {
          executeCheckHooks(lView, contentCheckHooks);
        }
      } else {
        const contentHooks = tView.contentHooks;
        if (contentHooks !== null) {
          executeInitAndCheckHooks(
            lView,
            contentHooks,
            1
            /* InitPhaseState.AfterContentInitHooksToBeRun */
          );
        }
        incrementInitPhaseFlags(
          lView,
          1
          /* InitPhaseState.AfterContentInitHooksToBeRun */
        );
      }
    }
    processHostBindingOpCodes(tView, lView);
    const components = tView.components;
    if (components !== null) {
      detectChangesInChildComponents(
        lView,
        components,
        0
        /* ChangeDetectionMode.Global */
      );
    }
    const viewQuery = tView.viewQuery;
    if (viewQuery !== null) {
      executeViewQueryFn(2, viewQuery, context2);
    }
    if (!isInCheckNoChangesPass) {
      if (hooksInitPhaseCompleted) {
        const viewCheckHooks = tView.viewCheckHooks;
        if (viewCheckHooks !== null) {
          executeCheckHooks(lView, viewCheckHooks);
        }
      } else {
        const viewHooks = tView.viewHooks;
        if (viewHooks !== null) {
          executeInitAndCheckHooks(
            lView,
            viewHooks,
            2
            /* InitPhaseState.AfterViewInitHooksToBeRun */
          );
        }
        incrementInitPhaseFlags(
          lView,
          2
          /* InitPhaseState.AfterViewInitHooksToBeRun */
        );
      }
    }
    if (tView.firstUpdatePass === true) {
      tView.firstUpdatePass = false;
    }
    if (lView[EFFECTS_TO_SCHEDULE]) {
      for (const notifyEffect of lView[EFFECTS_TO_SCHEDULE]) {
        notifyEffect();
      }
      lView[EFFECTS_TO_SCHEDULE] = null;
    }
    if (!isInCheckNoChangesPass) {
      lView[FLAGS] &= ~(64 | 8);
    }
  } catch (e) {
    markAncestorsForTraversal(lView);
    throw e;
  } finally {
    if (currentConsumer !== null) {
      consumerAfterComputation(currentConsumer, prevConsumer);
      maybeReturnReactiveLViewConsumer(currentConsumer);
    }
    leaveView();
  }
}
function viewShouldHaveReactiveConsumer(tView) {
  return tView.type !== 2;
}
function detectChangesInEmbeddedViews(lView, mode) {
  for (let lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {
    lContainer[FLAGS] &= ~LContainerFlags.HasChildViewsToRefresh;
    for (let i = CONTAINER_HEADER_OFFSET; i < lContainer.length; i++) {
      const embeddedLView = lContainer[i];
      detectChangesInViewIfAttached(embeddedLView, mode);
    }
  }
}
function markTransplantedViewsForRefresh(lView) {
  for (let lContainer = getFirstLContainer(lView); lContainer !== null; lContainer = getNextLContainer(lContainer)) {
    if (!(lContainer[FLAGS] & LContainerFlags.HasTransplantedViews))
      continue;
    const movedViews = lContainer[MOVED_VIEWS];
    ngDevMode && assertDefined(movedViews, "Transplanted View flags set but missing MOVED_VIEWS");
    for (let i = 0; i < movedViews.length; i++) {
      const movedLView = movedViews[i];
      const insertionLContainer = movedLView[PARENT];
      ngDevMode && assertLContainer(insertionLContainer);
      markViewForRefresh(movedLView);
    }
  }
}
function detectChangesInComponent(hostLView, componentHostIdx, mode) {
  ngDevMode && assertEqual(isCreationMode(hostLView), false, "Should be run in update mode");
  const componentView = getComponentLViewByIndex(componentHostIdx, hostLView);
  detectChangesInViewIfAttached(componentView, mode);
}
function detectChangesInViewIfAttached(lView, mode) {
  if (!viewAttachedToChangeDetector(lView)) {
    return;
  }
  detectChangesInView(lView, mode);
}
function detectChangesInView(lView, mode) {
  const isInCheckNoChangesPass = ngDevMode && isInCheckNoChangesMode();
  const tView = lView[TVIEW];
  const flags = lView[FLAGS];
  const consumer = lView[REACTIVE_TEMPLATE_CONSUMER];
  let shouldRefreshView = !!(mode === 0 && flags & 16);
  shouldRefreshView ||= !!(flags & 64 && mode === 0 && !isInCheckNoChangesPass);
  shouldRefreshView ||= !!(flags & 1024);
  shouldRefreshView ||= !!(consumer?.dirty && consumerPollProducersForChange(consumer));
  if (consumer) {
    consumer.dirty = false;
  }
  lView[FLAGS] &= ~(8192 | 1024);
  if (shouldRefreshView) {
    refreshView(tView, lView, tView.template, lView[CONTEXT]);
  } else if (flags & 8192) {
    detectChangesInEmbeddedViews(
      lView,
      1
      /* ChangeDetectionMode.Targeted */
    );
    const components = tView.components;
    if (components !== null) {
      detectChangesInChildComponents(
        lView,
        components,
        1
        /* ChangeDetectionMode.Targeted */
      );
    }
  }
}
function detectChangesInChildComponents(hostLView, components, mode) {
  for (let i = 0; i < components.length; i++) {
    detectChangesInComponent(hostLView, components[i], mode);
  }
}
function markViewDirty(lView) {
  while (lView) {
    lView[FLAGS] |= 64;
    const parent = getLViewParent(lView);
    if (isRootView(lView) && !parent) {
      return lView;
    }
    lView = parent;
  }
  return null;
}
var ViewRef$1 = class {
  get rootNodes() {
    const lView = this._lView;
    const tView = lView[TVIEW];
    return collectNativeNodes(tView, lView, tView.firstChild, []);
  }
  constructor(_lView, _cdRefInjectingView, notifyErrorHandler = true) {
    this._lView = _lView;
    this._cdRefInjectingView = _cdRefInjectingView;
    this.notifyErrorHandler = notifyErrorHandler;
    this._appRef = null;
    this._attachedToViewContainer = false;
  }
  get context() {
    return this._lView[CONTEXT];
  }
  /**
   * @deprecated Replacing the full context object is not supported. Modify the context
   *   directly, or consider using a `Proxy` if you need to replace the full object.
   * // TODO(devversion): Remove this.
   */
  set context(value) {
    if (ngDevMode) {
      console.warn("Angular: Replacing the `context` object of an `EmbeddedViewRef` is deprecated.");
    }
    this._lView[CONTEXT] = value;
  }
  get destroyed() {
    return (this._lView[FLAGS] & 256) === 256;
  }
  destroy() {
    if (this._appRef) {
      this._appRef.detachView(this);
    } else if (this._attachedToViewContainer) {
      const parent = this._lView[PARENT];
      if (isLContainer(parent)) {
        const viewRefs = parent[VIEW_REFS];
        const index = viewRefs ? viewRefs.indexOf(this) : -1;
        if (index > -1) {
          ngDevMode && assertEqual(index, parent.indexOf(this._lView) - CONTAINER_HEADER_OFFSET, "An attached view should be in the same position within its container as its ViewRef in the VIEW_REFS array.");
          detachView(parent, index);
          removeFromArray(viewRefs, index);
        }
      }
      this._attachedToViewContainer = false;
    }
    destroyLView(this._lView[TVIEW], this._lView);
  }
  onDestroy(callback) {
    storeLViewOnDestroy(this._lView, callback);
  }
  /**
   * Marks a view and all of its ancestors dirty.
   *
   * This can be used to ensure an {@link ChangeDetectionStrategy#OnPush} component is
   * checked when it needs to be re-rendered but the two normal triggers haven't marked it
   * dirty (i.e. inputs haven't changed and events haven't fired in the view).
   *
   * <!-- TODO: Add a link to a chapter on OnPush components -->
   *
   * @usageNotes
   * ### Example
   *
   * ```typescript
   * @Component({
   *   selector: 'app-root',
   *   template: `Number of ticks: {{numberOfTicks}}`
   *   changeDetection: ChangeDetectionStrategy.OnPush,
   * })
   * class AppComponent {
   *   numberOfTicks = 0;
   *
   *   constructor(private ref: ChangeDetectorRef) {
   *     setInterval(() => {
   *       this.numberOfTicks++;
   *       // the following is required, otherwise the view will not be updated
   *       this.ref.markForCheck();
   *     }, 1000);
   *   }
   * }
   * ```
   */
  markForCheck() {
    markViewDirty(this._cdRefInjectingView || this._lView);
  }
  /**
   * Detaches the view from the change detection tree.
   *
   * Detached views will not be checked during change detection runs until they are
   * re-attached, even if they are dirty. `detach` can be used in combination with
   * {@link ChangeDetectorRef#detectChanges} to implement local change
   * detection checks.
   *
   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
   * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
   *
   * @usageNotes
   * ### Example
   *
   * The following example defines a component with a large list of readonly data.
   * Imagine the data changes constantly, many times per second. For performance reasons,
   * we want to check and update the list every five seconds. We can do that by detaching
   * the component's change detector and doing a local check every five seconds.
   *
   * ```typescript
   * class DataProvider {
   *   // in a real application the returned data will be different every time
   *   get data() {
   *     return [1,2,3,4,5];
   *   }
   * }
   *
   * @Component({
   *   selector: 'giant-list',
   *   template: `
   *     <li *ngFor="let d of dataProvider.data">Data {{d}}</li>
   *   `,
   * })
   * class GiantList {
   *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {
   *     ref.detach();
   *     setInterval(() => {
   *       this.ref.detectChanges();
   *     }, 5000);
   *   }
   * }
   *
   * @Component({
   *   selector: 'app',
   *   providers: [DataProvider],
   *   template: `
   *     <giant-list><giant-list>
   *   `,
   * })
   * class App {
   * }
   * ```
   */
  detach() {
    this._lView[FLAGS] &= ~128;
  }
  /**
   * Re-attaches a view to the change detection tree.
   *
   * This can be used to re-attach views that were previously detached from the tree
   * using {@link ChangeDetectorRef#detach}. Views are attached to the tree by default.
   *
   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
   *
   * @usageNotes
   * ### Example
   *
   * The following example creates a component displaying `live` data. The component will detach
   * its change detector from the main change detector tree when the component's live property
   * is set to false.
   *
   * ```typescript
   * class DataProvider {
   *   data = 1;
   *
   *   constructor() {
   *     setInterval(() => {
   *       this.data = this.data * 2;
   *     }, 500);
   *   }
   * }
   *
   * @Component({
   *   selector: 'live-data',
   *   inputs: ['live'],
   *   template: 'Data: {{dataProvider.data}}'
   * })
   * class LiveData {
   *   constructor(private ref: ChangeDetectorRef, private dataProvider: DataProvider) {}
   *
   *   set live(value) {
   *     if (value) {
   *       this.ref.reattach();
   *     } else {
   *       this.ref.detach();
   *     }
   *   }
   * }
   *
   * @Component({
   *   selector: 'app-root',
   *   providers: [DataProvider],
   *   template: `
   *     Live Update: <input type="checkbox" [(ngModel)]="live">
   *     <live-data [live]="live"><live-data>
   *   `,
   * })
   * class AppComponent {
   *   live = true;
   * }
   * ```
   */
  reattach() {
    updateAncestorTraversalFlagsOnAttach(this._lView);
    this._lView[FLAGS] |= 128;
  }
  /**
   * Checks the view and its children.
   *
   * This can also be used in combination with {@link ChangeDetectorRef#detach} to implement
   * local change detection checks.
   *
   * <!-- TODO: Add a link to a chapter on detach/reattach/local digest -->
   * <!-- TODO: Add a live demo once ref.detectChanges is merged into master -->
   *
   * @usageNotes
   * ### Example
   *
   * The following example defines a component with a large list of readonly data.
   * Imagine, the data changes constantly, many times per second. For performance reasons,
   * we want to check and update the list every five seconds.
   *
   * We can do that by detaching the component's change detector and doing a local change detection
   * check every five seconds.
   *
   * See {@link ChangeDetectorRef#detach} for more information.
   */
  detectChanges() {
    this._lView[FLAGS] |= 1024;
    detectChangesInternal(this._lView, this.notifyErrorHandler);
  }
  /**
   * Checks the change detector and its children, and throws if any changes are detected.
   *
   * This is used in development mode to verify that running change detection doesn't
   * introduce other changes.
   */
  checkNoChanges() {
    if (ngDevMode) {
      checkNoChangesInternal(this._lView, this.notifyErrorHandler);
    }
  }
  attachToViewContainerRef() {
    if (this._appRef) {
      throw new RuntimeError(902, ngDevMode && "This view is already attached directly to the ApplicationRef!");
    }
    this._attachedToViewContainer = true;
  }
  detachFromAppRef() {
    this._appRef = null;
    detachViewFromDOM(this._lView[TVIEW], this._lView);
  }
  attachToAppRef(appRef) {
    if (this._attachedToViewContainer) {
      throw new RuntimeError(902, ngDevMode && "This view is already attached to a ViewContainer!");
    }
    this._appRef = appRef;
  }
};
var _ChangeDetectorRef = class _ChangeDetectorRef {
};
_ChangeDetectorRef.__NG_ELEMENT_ID__ = injectChangeDetectorRef;
var ChangeDetectorRef = _ChangeDetectorRef;
function injectChangeDetectorRef(flags) {
  return createViewRef(
    getCurrentTNode(),
    getLView(),
    (flags & 16) === 16
    /* InternalInjectFlags.ForPipe */
  );
}
function createViewRef(tNode, lView, isPipe2) {
  if (isComponentHost(tNode) && !isPipe2) {
    const componentView = getComponentLViewByIndex(tNode.index, lView);
    return new ViewRef$1(componentView, componentView);
  } else if (tNode.type & (3 | 12 | 32)) {
    const hostComponentView = lView[DECLARATION_COMPONENT_VIEW];
    return new ViewRef$1(hostComponentView, lView);
  }
  return null;
}
var keyValDiff = [new DefaultKeyValueDifferFactory()];
var iterableDiff = [new DefaultIterableDifferFactory()];
var defaultIterableDiffers = new IterableDiffers(iterableDiff);
var defaultKeyValueDiffers = new KeyValueDiffers(keyValDiff);
var _DestroyRef = class _DestroyRef {
};
_DestroyRef.__NG_ELEMENT_ID__ = injectDestroyRef;
_DestroyRef.__NG_ENV_ID__ = (injector) => injector;
var DestroyRef = _DestroyRef;
var NodeInjectorDestroyRef = class extends DestroyRef {
  constructor(_lView) {
    super();
    this._lView = _lView;
  }
  onDestroy(callback) {
    storeLViewOnDestroy(this._lView, callback);
    return () => removeLViewOnDestroy(this._lView, callback);
  }
};
function injectDestroyRef() {
  return new NodeInjectorDestroyRef(getLView());
}
var APP_EFFECT_SCHEDULER = new InjectionToken("", {
  providedIn: "root",
  factory: () => inject(EffectScheduler)
});
var _EffectScheduler = class _EffectScheduler {
};
_EffectScheduler.\u0275prov = \u0275\u0275defineInjectable({
  token: _EffectScheduler,
  providedIn: "root",
  factory: () => new ZoneAwareMicrotaskScheduler()
});
var EffectScheduler = _EffectScheduler;
var _ZoneAwareQueueingScheduler = class _ZoneAwareQueueingScheduler {
  constructor() {
    this.queuedEffectCount = 0;
    this.queues = /* @__PURE__ */ new Map();
  }
  scheduleEffect(handle) {
    const zone = handle.creationZone;
    if (!this.queues.has(zone)) {
      this.queues.set(zone, /* @__PURE__ */ new Set());
    }
    const queue = this.queues.get(zone);
    if (queue.has(handle)) {
      return;
    }
    this.queuedEffectCount++;
    queue.add(handle);
  }
  /**
   * Run all scheduled effects.
   *
   * Execution order of effects within the same zone is guaranteed to be FIFO, but there is no
   * ordering guarantee between effects scheduled in different zones.
   */
  flush() {
    while (this.queuedEffectCount > 0) {
      for (const [zone, queue] of this.queues) {
        if (zone === null) {
          this.flushQueue(queue);
        } else {
          zone.run(() => this.flushQueue(queue));
        }
      }
    }
  }
  flushQueue(queue) {
    for (const handle of queue) {
      queue.delete(handle);
      this.queuedEffectCount--;
      handle.run();
    }
  }
};
_ZoneAwareQueueingScheduler.\u0275prov = \u0275\u0275defineInjectable({
  token: _ZoneAwareQueueingScheduler,
  providedIn: "root",
  factory: () => new _ZoneAwareQueueingScheduler()
});
var ZoneAwareQueueingScheduler = _ZoneAwareQueueingScheduler;
var ZoneAwareMicrotaskScheduler = class {
  constructor() {
    this.hasQueuedFlush = false;
    this.delegate = new ZoneAwareQueueingScheduler();
    this.flushTask = () => {
      this.delegate.flush();
      this.hasQueuedFlush = false;
    };
  }
  scheduleEffect(handle) {
    this.delegate.scheduleEffect(handle);
    if (!this.hasQueuedFlush) {
      queueMicrotask(this.flushTask);
      this.hasQueuedFlush = true;
    }
  }
};
var markedFeatures = /* @__PURE__ */ new Set();
function performanceMarkFeature(feature) {
  if (markedFeatures.has(feature)) {
    return;
  }
  markedFeatures.add(feature);
  performance?.mark?.("mark_feature_usage", { detail: { feature } });
}
var EventEmitter_ = class extends Subject {
  constructor(isAsync = false) {
    super();
    this.__isAsync = isAsync;
  }
  emit(value) {
    super.next(value);
  }
  subscribe(observerOrNext, error, complete) {
    let nextFn = observerOrNext;
    let errorFn = error || (() => null);
    let completeFn = complete;
    if (observerOrNext && typeof observerOrNext === "object") {
      const observer = observerOrNext;
      nextFn = observer.next?.bind(observer);
      errorFn = observer.error?.bind(observer);
      completeFn = observer.complete?.bind(observer);
    }
    if (this.__isAsync) {
      errorFn = _wrapInTimeout(errorFn);
      if (nextFn) {
        nextFn = _wrapInTimeout(nextFn);
      }
      if (completeFn) {
        completeFn = _wrapInTimeout(completeFn);
      }
    }
    const sink = super.subscribe({ next: nextFn, error: errorFn, complete: completeFn });
    if (observerOrNext instanceof Subscription) {
      observerOrNext.add(sink);
    }
    return sink;
  }
};
function _wrapInTimeout(fn) {
  return (value) => {
    setTimeout(fn, void 0, value);
  };
}
var EventEmitter = EventEmitter_;
function noop2(...args) {
}
function getNativeRequestAnimationFrame() {
  const isBrowser = typeof _global["requestAnimationFrame"] === "function";
  let nativeRequestAnimationFrame = _global[isBrowser ? "requestAnimationFrame" : "setTimeout"];
  let nativeCancelAnimationFrame = _global[isBrowser ? "cancelAnimationFrame" : "clearTimeout"];
  if (typeof Zone !== "undefined" && nativeRequestAnimationFrame && nativeCancelAnimationFrame) {
    const unpatchedRequestAnimationFrame = nativeRequestAnimationFrame[Zone.__symbol__("OriginalDelegate")];
    if (unpatchedRequestAnimationFrame) {
      nativeRequestAnimationFrame = unpatchedRequestAnimationFrame;
    }
    const unpatchedCancelAnimationFrame = nativeCancelAnimationFrame[Zone.__symbol__("OriginalDelegate")];
    if (unpatchedCancelAnimationFrame) {
      nativeCancelAnimationFrame = unpatchedCancelAnimationFrame;
    }
  }
  return { nativeRequestAnimationFrame, nativeCancelAnimationFrame };
}
var AsyncStackTaggingZoneSpec = class {
  constructor(namePrefix, consoleAsyncStackTaggingImpl = console) {
    this.name = "asyncStackTagging for " + namePrefix;
    this.createTask = consoleAsyncStackTaggingImpl?.createTask ?? (() => null);
  }
  onScheduleTask(delegate, _current, target, task) {
    task.consoleTask = this.createTask(`Zone - ${task.source || task.type}`);
    return delegate.scheduleTask(target, task);
  }
  onInvokeTask(delegate, _currentZone, targetZone, task, applyThis, applyArgs) {
    let ret;
    if (task.consoleTask) {
      ret = task.consoleTask.run(() => delegate.invokeTask(targetZone, task, applyThis, applyArgs));
    } else {
      ret = delegate.invokeTask(targetZone, task, applyThis, applyArgs);
    }
    return ret;
  }
};
var NgZone = class _NgZone {
  constructor({ enableLongStackTrace = false, shouldCoalesceEventChangeDetection = false, shouldCoalesceRunChangeDetection = false }) {
    this.hasPendingMacrotasks = false;
    this.hasPendingMicrotasks = false;
    this.isStable = true;
    this.onUnstable = new EventEmitter(false);
    this.onMicrotaskEmpty = new EventEmitter(false);
    this.onStable = new EventEmitter(false);
    this.onError = new EventEmitter(false);
    if (typeof Zone == "undefined") {
      throw new RuntimeError(908, ngDevMode && `In this configuration Angular requires Zone.js`);
    }
    Zone.assertZonePatched();
    const self = this;
    self._nesting = 0;
    self._outer = self._inner = Zone.current;
    if (ngDevMode) {
      self._inner = self._inner.fork(new AsyncStackTaggingZoneSpec("Angular"));
    }
    if (Zone["TaskTrackingZoneSpec"]) {
      self._inner = self._inner.fork(new Zone["TaskTrackingZoneSpec"]());
    }
    if (enableLongStackTrace && Zone["longStackTraceZoneSpec"]) {
      self._inner = self._inner.fork(Zone["longStackTraceZoneSpec"]);
    }
    self.shouldCoalesceEventChangeDetection = !shouldCoalesceRunChangeDetection && shouldCoalesceEventChangeDetection;
    self.shouldCoalesceRunChangeDetection = shouldCoalesceRunChangeDetection;
    self.lastRequestAnimationFrameId = -1;
    self.nativeRequestAnimationFrame = getNativeRequestAnimationFrame().nativeRequestAnimationFrame;
    forkInnerZoneWithAngularBehavior(self);
  }
  /**
    This method checks whether the method call happens within an Angular Zone instance.
  */
  static isInAngularZone() {
    return typeof Zone !== "undefined" && Zone.current.get("isAngularZone") === true;
  }
  /**
    Assures that the method is called within the Angular Zone, otherwise throws an error.
  */
  static assertInAngularZone() {
    if (!_NgZone.isInAngularZone()) {
      throw new RuntimeError(909, ngDevMode && "Expected to be in Angular Zone, but it is not!");
    }
  }
  /**
    Assures that the method is called outside of the Angular Zone, otherwise throws an error.
  */
  static assertNotInAngularZone() {
    if (_NgZone.isInAngularZone()) {
      throw new RuntimeError(909, ngDevMode && "Expected to not be in Angular Zone, but it is!");
    }
  }
  /**
   * Executes the `fn` function synchronously within the Angular zone and returns value returned by
   * the function.
   *
   * Running functions via `run` allows you to reenter Angular zone from a task that was executed
   * outside of the Angular zone (typically started via {@link #runOutsideAngular}).
   *
   * Any future tasks or microtasks scheduled from within this function will continue executing from
   * within the Angular zone.
   *
   * If a synchronous error happens it will be rethrown and not reported via `onError`.
   */
  run(fn, applyThis, applyArgs) {
    return this._inner.run(fn, applyThis, applyArgs);
  }
  /**
   * Executes the `fn` function synchronously within the Angular zone as a task and returns value
   * returned by the function.
   *
   * Running functions via `run` allows you to reenter Angular zone from a task that was executed
   * outside of the Angular zone (typically started via {@link #runOutsideAngular}).
   *
   * Any future tasks or microtasks scheduled from within this function will continue executing from
   * within the Angular zone.
   *
   * If a synchronous error happens it will be rethrown and not reported via `onError`.
   */
  runTask(fn, applyThis, applyArgs, name) {
    const zone = this._inner;
    const task = zone.scheduleEventTask("NgZoneEvent: " + name, fn, EMPTY_PAYLOAD, noop2, noop2);
    try {
      return zone.runTask(task, applyThis, applyArgs);
    } finally {
      zone.cancelTask(task);
    }
  }
  /**
   * Same as `run`, except that synchronous errors are caught and forwarded via `onError` and not
   * rethrown.
   */
  runGuarded(fn, applyThis, applyArgs) {
    return this._inner.runGuarded(fn, applyThis, applyArgs);
  }
  /**
   * Executes the `fn` function synchronously in Angular's parent zone and returns value returned by
   * the function.
   *
   * Running functions via {@link #runOutsideAngular} allows you to escape Angular's zone and do
   * work that
   * doesn't trigger Angular change-detection or is subject to Angular's error handling.
   *
   * Any future tasks or microtasks scheduled from within this function will continue executing from
   * outside of the Angular zone.
   *
   * Use {@link #run} to reenter the Angular zone and do work that updates the application model.
   */
  runOutsideAngular(fn) {
    return this._outer.run(fn);
  }
};
var EMPTY_PAYLOAD = {};
function checkStable(zone) {
  if (zone._nesting == 0 && !zone.hasPendingMicrotasks && !zone.isStable) {
    try {
      zone._nesting++;
      zone.onMicrotaskEmpty.emit(null);
    } finally {
      zone._nesting--;
      if (!zone.hasPendingMicrotasks) {
        try {
          zone.runOutsideAngular(() => zone.onStable.emit(null));
        } finally {
          zone.isStable = true;
        }
      }
    }
  }
}
function delayChangeDetectionForEvents(zone) {
  if (zone.isCheckStableRunning || zone.lastRequestAnimationFrameId !== -1) {
    return;
  }
  zone.lastRequestAnimationFrameId = zone.nativeRequestAnimationFrame.call(_global, () => {
    if (!zone.fakeTopEventTask) {
      zone.fakeTopEventTask = Zone.root.scheduleEventTask("fakeTopEventTask", () => {
        zone.lastRequestAnimationFrameId = -1;
        updateMicroTaskStatus(zone);
        zone.isCheckStableRunning = true;
        checkStable(zone);
        zone.isCheckStableRunning = false;
      }, void 0, () => {
      }, () => {
      });
    }
    zone.fakeTopEventTask.invoke();
  });
  updateMicroTaskStatus(zone);
}
function forkInnerZoneWithAngularBehavior(zone) {
  const delayChangeDetectionForEventsDelegate = () => {
    delayChangeDetectionForEvents(zone);
  };
  zone._inner = zone._inner.fork({
    name: "angular",
    properties: { "isAngularZone": true },
    onInvokeTask: (delegate, current, target, task, applyThis, applyArgs) => {
      if (shouldBeIgnoredByZone(applyArgs)) {
        return delegate.invokeTask(target, task, applyThis, applyArgs);
      }
      try {
        onEnter(zone);
        return delegate.invokeTask(target, task, applyThis, applyArgs);
      } finally {
        if (zone.shouldCoalesceEventChangeDetection && task.type === "eventTask" || zone.shouldCoalesceRunChangeDetection) {
          delayChangeDetectionForEventsDelegate();
        }
        onLeave(zone);
      }
    },
    onInvoke: (delegate, current, target, callback, applyThis, applyArgs, source) => {
      try {
        onEnter(zone);
        return delegate.invoke(target, callback, applyThis, applyArgs, source);
      } finally {
        if (zone.shouldCoalesceRunChangeDetection) {
          delayChangeDetectionForEventsDelegate();
        }
        onLeave(zone);
      }
    },
    onHasTask: (delegate, current, target, hasTaskState) => {
      delegate.hasTask(target, hasTaskState);
      if (current === target) {
        if (hasTaskState.change == "microTask") {
          zone._hasPendingMicrotasks = hasTaskState.microTask;
          updateMicroTaskStatus(zone);
          checkStable(zone);
        } else if (hasTaskState.change == "macroTask") {
          zone.hasPendingMacrotasks = hasTaskState.macroTask;
        }
      }
    },
    onHandleError: (delegate, current, target, error) => {
      delegate.handleError(target, error);
      zone.runOutsideAngular(() => zone.onError.emit(error));
      return false;
    }
  });
}
function updateMicroTaskStatus(zone) {
  if (zone._hasPendingMicrotasks || (zone.shouldCoalesceEventChangeDetection || zone.shouldCoalesceRunChangeDetection) && zone.lastRequestAnimationFrameId !== -1) {
    zone.hasPendingMicrotasks = true;
  } else {
    zone.hasPendingMicrotasks = false;
  }
}
function onEnter(zone) {
  zone._nesting++;
  if (zone.isStable) {
    zone.isStable = false;
    zone.onUnstable.emit(null);
  }
}
function onLeave(zone) {
  zone._nesting--;
  checkStable(zone);
}
var NoopNgZone = class {
  constructor() {
    this.hasPendingMicrotasks = false;
    this.hasPendingMacrotasks = false;
    this.isStable = true;
    this.onUnstable = new EventEmitter();
    this.onMicrotaskEmpty = new EventEmitter();
    this.onStable = new EventEmitter();
    this.onError = new EventEmitter();
  }
  run(fn, applyThis, applyArgs) {
    return fn.apply(applyThis, applyArgs);
  }
  runGuarded(fn, applyThis, applyArgs) {
    return fn.apply(applyThis, applyArgs);
  }
  runOutsideAngular(fn) {
    return fn();
  }
  runTask(fn, applyThis, applyArgs, name) {
    return fn.apply(applyThis, applyArgs);
  }
};
var ZONE_IS_STABLE_OBSERVABLE = new InjectionToken(ngDevMode ? "isStable Observable" : "", {
  providedIn: "root",
  // TODO(atscott): Replace this with a suitable default like `new
  // BehaviorSubject(true).asObservable`. Again, long term this won't exist on ApplicationRef at
  // all but until we can remove it, we need a default value zoneless.
  factory: isStableFactory
});
function isStableFactory() {
  const zone = inject(NgZone);
  let _stable = true;
  const isCurrentlyStable = new Observable((observer) => {
    _stable = zone.isStable && !zone.hasPendingMacrotasks && !zone.hasPendingMicrotasks;
    zone.runOutsideAngular(() => {
      observer.next(_stable);
      observer.complete();
    });
  });
  const isStable = new Observable((observer) => {
    let stableSub;
    zone.runOutsideAngular(() => {
      stableSub = zone.onStable.subscribe(() => {
        NgZone.assertNotInAngularZone();
        queueMicrotask(() => {
          if (!_stable && !zone.hasPendingMacrotasks && !zone.hasPendingMicrotasks) {
            _stable = true;
            observer.next(true);
          }
        });
      });
    });
    const unstableSub = zone.onUnstable.subscribe(() => {
      NgZone.assertInAngularZone();
      if (_stable) {
        _stable = false;
        zone.runOutsideAngular(() => {
          observer.next(false);
        });
      }
    });
    return () => {
      stableSub.unsubscribe();
      unstableSub.unsubscribe();
    };
  });
  return merge(isCurrentlyStable, isStable.pipe(share()));
}
function shouldBeIgnoredByZone(applyArgs) {
  if (!Array.isArray(applyArgs)) {
    return false;
  }
  if (applyArgs.length !== 1) {
    return false;
  }
  return applyArgs[0].data?.["__ignore_ng_zone__"] === true;
}
function getNgZone(ngZoneToUse = "zone.js", options) {
  if (ngZoneToUse === "noop") {
    return new NoopNgZone();
  }
  if (ngZoneToUse === "zone.js") {
    return new NgZone(options);
  }
  return ngZoneToUse;
}
var AfterRenderPhase;
(function(AfterRenderPhase2) {
  AfterRenderPhase2[AfterRenderPhase2["EarlyRead"] = 0] = "EarlyRead";
  AfterRenderPhase2[AfterRenderPhase2["Write"] = 1] = "Write";
  AfterRenderPhase2[AfterRenderPhase2["MixedReadWrite"] = 2] = "MixedReadWrite";
  AfterRenderPhase2[AfterRenderPhase2["Read"] = 3] = "Read";
})(AfterRenderPhase || (AfterRenderPhase = {}));
var NOOP_AFTER_RENDER_REF = {
  destroy() {
  }
};
function internalAfterNextRender(callback, options) {
  const injector = options?.injector ?? inject(Injector);
  if (!isPlatformBrowser(injector))
    return;
  const afterRenderEventManager = injector.get(AfterRenderEventManager);
  afterRenderEventManager.internalCallbacks.push(callback);
}
function afterNextRender(callback, options) {
  !options && assertInInjectionContext(afterNextRender);
  const injector = options?.injector ?? inject(Injector);
  if (!isPlatformBrowser(injector)) {
    return NOOP_AFTER_RENDER_REF;
  }
  performanceMarkFeature("NgAfterNextRender");
  const afterRenderEventManager = injector.get(AfterRenderEventManager);
  const callbackHandler = afterRenderEventManager.handler ??= new AfterRenderCallbackHandlerImpl();
  const phase = options?.phase ?? AfterRenderPhase.MixedReadWrite;
  const destroy = () => {
    callbackHandler.unregister(instance);
    unregisterFn();
  };
  const unregisterFn = injector.get(DestroyRef).onDestroy(destroy);
  const instance = new AfterRenderCallback(injector, phase, () => {
    destroy();
    callback();
  });
  callbackHandler.register(instance);
  return { destroy };
}
var AfterRenderCallback = class {
  constructor(injector, phase, callbackFn) {
    this.phase = phase;
    this.callbackFn = callbackFn;
    this.zone = injector.get(NgZone);
    this.errorHandler = injector.get(ErrorHandler, null, { optional: true });
  }
  invoke() {
    try {
      this.zone.runOutsideAngular(this.callbackFn);
    } catch (err) {
      this.errorHandler?.handleError(err);
    }
  }
};
var AfterRenderCallbackHandlerImpl = class {
  constructor() {
    this.executingCallbacks = false;
    this.buckets = {
      // Note: the order of these keys controls the order the phases are run.
      [AfterRenderPhase.EarlyRead]: /* @__PURE__ */ new Set(),
      [AfterRenderPhase.Write]: /* @__PURE__ */ new Set(),
      [AfterRenderPhase.MixedReadWrite]: /* @__PURE__ */ new Set(),
      [AfterRenderPhase.Read]: /* @__PURE__ */ new Set()
    };
    this.deferredCallbacks = /* @__PURE__ */ new Set();
  }
  validateBegin() {
    if (this.executingCallbacks) {
      throw new RuntimeError(102, ngDevMode && "A new render operation began before the previous operation ended. Did you trigger change detection from afterRender or afterNextRender?");
    }
  }
  register(callback) {
    const target = this.executingCallbacks ? this.deferredCallbacks : this.buckets[callback.phase];
    target.add(callback);
  }
  unregister(callback) {
    this.buckets[callback.phase].delete(callback);
    this.deferredCallbacks.delete(callback);
  }
  execute() {
    this.executingCallbacks = true;
    for (const bucket of Object.values(this.buckets)) {
      for (const callback of bucket) {
        callback.invoke();
      }
    }
    this.executingCallbacks = false;
    for (const callback of this.deferredCallbacks) {
      this.buckets[callback.phase].add(callback);
    }
    this.deferredCallbacks.clear();
  }
  destroy() {
    for (const bucket of Object.values(this.buckets)) {
      bucket.clear();
    }
    this.deferredCallbacks.clear();
  }
};
var _AfterRenderEventManager = class _AfterRenderEventManager {
  constructor() {
    this.renderDepth = 0;
    this.handler = null;
    this.internalCallbacks = [];
  }
  /**
   * Mark the beginning of a render operation (i.e. CD cycle).
   * Throws if called while executing callbacks.
   */
  begin() {
    this.handler?.validateBegin();
    this.renderDepth++;
  }
  /**
   * Mark the end of a render operation. Callbacks will be
   * executed if there are no more pending operations.
   */
  end() {
    ngDevMode && assertGreaterThan(this.renderDepth, 0, "renderDepth must be greater than 0");
    this.renderDepth--;
    if (this.renderDepth === 0) {
      for (const callback of this.internalCallbacks) {
        callback();
      }
      this.internalCallbacks.length = 0;
      this.handler?.execute();
    }
  }
  ngOnDestroy() {
    this.handler?.destroy();
    this.handler = null;
    this.internalCallbacks.length = 0;
  }
};
_AfterRenderEventManager.\u0275prov = \u0275\u0275defineInjectable({
  token: _AfterRenderEventManager,
  providedIn: "root",
  factory: () => new _AfterRenderEventManager()
});
var AfterRenderEventManager = _AfterRenderEventManager;
function renderComponent(hostLView, componentHostIdx) {
  ngDevMode && assertEqual(isCreationMode(hostLView), true, "Should be run in creation mode");
  const componentView = getComponentLViewByIndex(componentHostIdx, hostLView);
  const componentTView = componentView[TVIEW];
  syncViewWithBlueprint(componentTView, componentView);
  const hostRNode = componentView[HOST];
  if (hostRNode !== null && componentView[HYDRATION] === null) {
    componentView[HYDRATION] = retrieveHydrationInfo(hostRNode, componentView[INJECTOR$1]);
  }
  renderView(componentTView, componentView, componentView[CONTEXT]);
}
function syncViewWithBlueprint(tView, lView) {
  for (let i = lView.length; i < tView.blueprint.length; i++) {
    lView.push(tView.blueprint[i]);
  }
}
function renderView(tView, lView, context2) {
  ngDevMode && assertEqual(isCreationMode(lView), true, "Should be run in creation mode");
  enterView(lView);
  try {
    const viewQuery = tView.viewQuery;
    if (viewQuery !== null) {
      executeViewQueryFn(1, viewQuery, context2);
    }
    const templateFn = tView.template;
    if (templateFn !== null) {
      executeTemplate(tView, lView, templateFn, 1, context2);
    }
    if (tView.firstCreatePass) {
      tView.firstCreatePass = false;
    }
    if (tView.staticContentQueries) {
      refreshContentQueries(tView, lView);
    }
    if (tView.staticViewQueries) {
      executeViewQueryFn(2, tView.viewQuery, context2);
    }
    const components = tView.components;
    if (components !== null) {
      renderChildComponents(lView, components);
    }
  } catch (error) {
    if (tView.firstCreatePass) {
      tView.incompleteFirstPass = true;
      tView.firstCreatePass = false;
    }
    throw error;
  } finally {
    lView[FLAGS] &= ~4;
    leaveView();
  }
}
function renderChildComponents(hostLView, components) {
  for (let i = 0; i < components.length; i++) {
    renderComponent(hostLView, components[i]);
  }
}
function computeStaticStyling(tNode, attrs, writeToHost) {
  ngDevMode && assertFirstCreatePass(getTView(), "Expecting to be called in first template pass only");
  let styles = writeToHost ? tNode.styles : null;
  let classes = writeToHost ? tNode.classes : null;
  let mode = 0;
  if (attrs !== null) {
    for (let i = 0; i < attrs.length; i++) {
      const value = attrs[i];
      if (typeof value === "number") {
        mode = value;
      } else if (mode == 1) {
        classes = concatStringsWithSpace(classes, value);
      } else if (mode == 2) {
        const style2 = value;
        const styleValue = attrs[++i];
        styles = concatStringsWithSpace(styles, style2 + ": " + styleValue + ";");
      }
    }
  }
  writeToHost ? tNode.styles = styles : tNode.stylesWithoutHost = styles;
  writeToHost ? tNode.classes = classes : tNode.classesWithoutHost = classes;
}
var ComponentFactoryResolver = class extends ComponentFactoryResolver$1 {
  /**
   * @param ngModule The NgModuleRef to which all resolved factories are bound.
   */
  constructor(ngModule) {
    super();
    this.ngModule = ngModule;
  }
  resolveComponentFactory(component) {
    ngDevMode && assertComponentType(component);
    const componentDef = getComponentDef(component);
    return new ComponentFactory(componentDef, this.ngModule);
  }
};
function toRefArray(map2) {
  const array = [];
  for (let nonMinified in map2) {
    if (map2.hasOwnProperty(nonMinified)) {
      const minified = map2[nonMinified];
      array.push({ propName: minified, templateName: nonMinified });
    }
  }
  return array;
}
function getNamespace(elementName) {
  const name = elementName.toLowerCase();
  return name === "svg" ? SVG_NAMESPACE : name === "math" ? MATH_ML_NAMESPACE : null;
}
var ChainedInjector = class {
  constructor(injector, parentInjector) {
    this.injector = injector;
    this.parentInjector = parentInjector;
  }
  get(token, notFoundValue, flags) {
    flags = convertToBitFlags(flags);
    const value = this.injector.get(token, NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR, flags);
    if (value !== NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR || notFoundValue === NOT_FOUND_CHECK_ONLY_ELEMENT_INJECTOR) {
      return value;
    }
    return this.parentInjector.get(token, notFoundValue, flags);
  }
};
var ComponentFactory = class extends ComponentFactory$1 {
  get inputs() {
    const componentDef = this.componentDef;
    const inputTransforms = componentDef.inputTransforms;
    const refArray = toRefArray(componentDef.inputs);
    if (inputTransforms !== null) {
      for (const input of refArray) {
        if (inputTransforms.hasOwnProperty(input.propName)) {
          input.transform = inputTransforms[input.propName];
        }
      }
    }
    return refArray;
  }
  get outputs() {
    return toRefArray(this.componentDef.outputs);
  }
  /**
   * @param componentDef The component definition.
   * @param ngModule The NgModuleRef to which the factory is bound.
   */
  constructor(componentDef, ngModule) {
    super();
    this.componentDef = componentDef;
    this.ngModule = ngModule;
    this.componentType = componentDef.type;
    this.selector = stringifyCSSSelectorList(componentDef.selectors);
    this.ngContentSelectors = componentDef.ngContentSelectors ? componentDef.ngContentSelectors : [];
    this.isBoundToModule = !!ngModule;
  }
  create(injector, projectableNodes, rootSelectorOrNode, environmentInjector) {
    if (ngDevMode && false) {
      if (depsTracker.isOrphanComponent(this.componentType)) {
        throw new RuntimeError(1001, `Orphan component found! Trying to render the component ${debugStringifyTypeForError(this.componentType)} without first loading the NgModule that declares it. It is recommended to make this component standalone in order to avoid this error. If this is not possible now, import the component's NgModule in the appropriate NgModule, or the standalone component in which you are trying to render this component. If this is a lazy import, load the NgModule lazily as well and use its module injector.`);
      }
    }
    environmentInjector = environmentInjector || this.ngModule;
    let realEnvironmentInjector = environmentInjector instanceof EnvironmentInjector ? environmentInjector : environmentInjector?.injector;
    if (realEnvironmentInjector && this.componentDef.getStandaloneInjector !== null) {
      realEnvironmentInjector = this.componentDef.getStandaloneInjector(realEnvironmentInjector) || realEnvironmentInjector;
    }
    const rootViewInjector = realEnvironmentInjector ? new ChainedInjector(injector, realEnvironmentInjector) : injector;
    const rendererFactory = rootViewInjector.get(RendererFactory2, null);
    if (rendererFactory === null) {
      throw new RuntimeError(407, ngDevMode && "Angular was not able to inject a renderer (RendererFactory2). Likely this is due to a broken DI hierarchy. Make sure that any injector used to create this component has a correct parent.");
    }
    const sanitizer = rootViewInjector.get(Sanitizer, null);
    const afterRenderEventManager = rootViewInjector.get(AfterRenderEventManager, null);
    const environment = {
      rendererFactory,
      sanitizer,
      // We don't use inline effects (yet).
      inlineEffectRunner: null,
      afterRenderEventManager
    };
    const hostRenderer = rendererFactory.createRenderer(null, this.componentDef);
    const elementName = this.componentDef.selectors[0][0] || "div";
    const hostRNode = rootSelectorOrNode ? locateHostElement(hostRenderer, rootSelectorOrNode, this.componentDef.encapsulation, rootViewInjector) : createElementNode(hostRenderer, elementName, getNamespace(elementName));
    const signalFlags = 4096 | 512;
    const nonSignalFlags = this.componentDef.onPush ? 64 | 512 : 16 | 512;
    const rootFlags = this.componentDef.signals ? signalFlags : nonSignalFlags;
    let hydrationInfo = null;
    if (hostRNode !== null) {
      hydrationInfo = retrieveHydrationInfo(
        hostRNode,
        rootViewInjector,
        true
        /* isRootView */
      );
    }
    const rootTView = createTView(0, null, null, 1, 0, null, null, null, null, null, null);
    const rootLView = createLView(null, rootTView, null, rootFlags, null, null, environment, hostRenderer, rootViewInjector, null, hydrationInfo);
    enterView(rootLView);
    let component;
    let tElementNode;
    try {
      const rootComponentDef = this.componentDef;
      let rootDirectives;
      let hostDirectiveDefs = null;
      if (rootComponentDef.findHostDirectiveDefs) {
        rootDirectives = [];
        hostDirectiveDefs = /* @__PURE__ */ new Map();
        rootComponentDef.findHostDirectiveDefs(rootComponentDef, rootDirectives, hostDirectiveDefs);
        rootDirectives.push(rootComponentDef);
        ngDevMode && assertNoDuplicateDirectives(rootDirectives);
      } else {
        rootDirectives = [rootComponentDef];
      }
      const hostTNode = createRootComponentTNode(rootLView, hostRNode);
      const componentView = createRootComponentView(hostTNode, hostRNode, rootComponentDef, rootDirectives, rootLView, environment, hostRenderer);
      tElementNode = getTNode(rootTView, HEADER_OFFSET);
      if (hostRNode) {
        setRootNodeAttributes(hostRenderer, rootComponentDef, hostRNode, rootSelectorOrNode);
      }
      if (projectableNodes !== void 0) {
        projectNodes(tElementNode, this.ngContentSelectors, projectableNodes);
      }
      component = createRootComponent(componentView, rootComponentDef, rootDirectives, hostDirectiveDefs, rootLView, [LifecycleHooksFeature]);
      renderView(rootTView, rootLView, null);
    } finally {
      leaveView();
    }
    return new ComponentRef(this.componentType, component, createElementRef(tElementNode, rootLView), rootLView, tElementNode);
  }
};
var ComponentRef = class extends ComponentRef$1 {
  constructor(componentType, instance, location2, _rootLView, _tNode) {
    super();
    this.location = location2;
    this._rootLView = _rootLView;
    this._tNode = _tNode;
    this.previousInputValues = null;
    this.instance = instance;
    this.hostView = this.changeDetectorRef = new ViewRef$1(
      _rootLView,
      void 0,
      /* _cdRefInjectingView */
      false
    );
    this.componentType = componentType;
  }
  setInput(name, value) {
    const inputData = this._tNode.inputs;
    let dataValue;
    if (inputData !== null && (dataValue = inputData[name])) {
      this.previousInputValues ??= /* @__PURE__ */ new Map();
      if (this.previousInputValues.has(name) && Object.is(this.previousInputValues.get(name), value)) {
        return;
      }
      const lView = this._rootLView;
      setInputsForProperty(lView[TVIEW], lView, dataValue, name, value);
      this.previousInputValues.set(name, value);
      const childComponentLView = getComponentLViewByIndex(this._tNode.index, lView);
      markViewDirty(childComponentLView);
    } else {
      if (ngDevMode) {
        const cmpNameForError = stringifyForError(this.componentType);
        let message = `Can't set value of the '${name}' input on the '${cmpNameForError}' component. `;
        message += `Make sure that the '${name}' property is annotated with @Input() or a mapped @Input('${name}') exists.`;
        reportUnknownPropertyError(message);
      }
    }
  }
  get injector() {
    return new NodeInjector(this._tNode, this._rootLView);
  }
  destroy() {
    this.hostView.destroy();
  }
  onDestroy(callback) {
    this.hostView.onDestroy(callback);
  }
};
function createRootComponentTNode(lView, rNode) {
  const tView = lView[TVIEW];
  const index = HEADER_OFFSET;
  ngDevMode && assertIndexInRange(lView, index);
  lView[index] = rNode;
  return getOrCreateTNode(tView, index, 2, "#host", null);
}
function createRootComponentView(tNode, hostRNode, rootComponentDef, rootDirectives, rootView, environment, hostRenderer) {
  const tView = rootView[TVIEW];
  applyRootComponentStyling(rootDirectives, tNode, hostRNode, hostRenderer);
  let hydrationInfo = null;
  if (hostRNode !== null) {
    hydrationInfo = retrieveHydrationInfo(hostRNode, rootView[INJECTOR$1]);
  }
  const viewRenderer = environment.rendererFactory.createRenderer(hostRNode, rootComponentDef);
  let lViewFlags = 16;
  if (rootComponentDef.signals) {
    lViewFlags = 4096;
  } else if (rootComponentDef.onPush) {
    lViewFlags = 64;
  }
  const componentView = createLView(rootView, getOrCreateComponentTView(rootComponentDef), null, lViewFlags, rootView[tNode.index], tNode, environment, viewRenderer, null, null, hydrationInfo);
  if (tView.firstCreatePass) {
    markAsComponentHost(tView, tNode, rootDirectives.length - 1);
  }
  addToViewTree(rootView, componentView);
  return rootView[tNode.index] = componentView;
}
function applyRootComponentStyling(rootDirectives, tNode, rNode, hostRenderer) {
  for (const def of rootDirectives) {
    tNode.mergedAttrs = mergeHostAttrs(tNode.mergedAttrs, def.hostAttrs);
  }
  if (tNode.mergedAttrs !== null) {
    computeStaticStyling(tNode, tNode.mergedAttrs, true);
    if (rNode !== null) {
      setupStaticAttributes(hostRenderer, rNode, tNode);
    }
  }
}
function createRootComponent(componentView, rootComponentDef, rootDirectives, hostDirectiveDefs, rootLView, hostFeatures) {
  const rootTNode = getCurrentTNode();
  ngDevMode && assertDefined(rootTNode, "tNode should have been already created");
  const tView = rootLView[TVIEW];
  const native = getNativeByTNode(rootTNode, rootLView);
  initializeDirectives(tView, rootLView, rootTNode, rootDirectives, null, hostDirectiveDefs);
  for (let i = 0; i < rootDirectives.length; i++) {
    const directiveIndex = rootTNode.directiveStart + i;
    const directiveInstance = getNodeInjectable(rootLView, tView, directiveIndex, rootTNode);
    attachPatchData(directiveInstance, rootLView);
  }
  invokeDirectivesHostBindings(tView, rootLView, rootTNode);
  if (native) {
    attachPatchData(native, rootLView);
  }
  ngDevMode && assertGreaterThan(rootTNode.componentOffset, -1, "componentOffset must be great than -1");
  const component = getNodeInjectable(rootLView, tView, rootTNode.directiveStart + rootTNode.componentOffset, rootTNode);
  componentView[CONTEXT] = rootLView[CONTEXT] = component;
  if (hostFeatures !== null) {
    for (const feature of hostFeatures) {
      feature(component, rootComponentDef);
    }
  }
  executeContentQueries(tView, rootTNode, componentView);
  return component;
}
function setRootNodeAttributes(hostRenderer, componentDef, hostRNode, rootSelectorOrNode) {
  if (rootSelectorOrNode) {
    setUpAttributes(hostRenderer, hostRNode, ["ng-version", VERSION.full]);
  } else {
    const { attrs, classes } = extractAttrsAndClassesFromSelector(componentDef.selectors[0]);
    if (attrs) {
      setUpAttributes(hostRenderer, hostRNode, attrs);
    }
    if (classes && classes.length > 0) {
      writeDirectClass(hostRenderer, hostRNode, classes.join(" "));
    }
  }
}
function projectNodes(tNode, ngContentSelectors, projectableNodes) {
  const projection = tNode.projection = [];
  for (let i = 0; i < ngContentSelectors.length; i++) {
    const nodesforSlot = projectableNodes[i];
    projection.push(nodesforSlot != null ? Array.from(nodesforSlot) : null);
  }
}
function LifecycleHooksFeature() {
  const tNode = getCurrentTNode();
  ngDevMode && assertDefined(tNode, "TNode is required");
  registerPostOrderHooks(getLView()[TVIEW], tNode);
}
function getSuperType(type) {
  return Object.getPrototypeOf(type.prototype).constructor;
}
function \u0275\u0275InheritDefinitionFeature(definition) {
  let superType = getSuperType(definition.type);
  let shouldInheritFields = true;
  const inheritanceChain = [definition];
  while (superType) {
    let superDef = void 0;
    if (isComponentDef(definition)) {
      superDef = superType.\u0275cmp || superType.\u0275dir;
    } else {
      if (superType.\u0275cmp) {
        throw new RuntimeError(903, ngDevMode && `Directives cannot inherit Components. Directive ${stringifyForError(definition.type)} is attempting to extend component ${stringifyForError(superType)}`);
      }
      superDef = superType.\u0275dir;
    }
    if (superDef) {
      if (shouldInheritFields) {
        inheritanceChain.push(superDef);
        const writeableDef = definition;
        writeableDef.inputs = maybeUnwrapEmpty(definition.inputs);
        writeableDef.inputTransforms = maybeUnwrapEmpty(definition.inputTransforms);
        writeableDef.declaredInputs = maybeUnwrapEmpty(definition.declaredInputs);
        writeableDef.outputs = maybeUnwrapEmpty(definition.outputs);
        const superHostBindings = superDef.hostBindings;
        superHostBindings && inheritHostBindings(definition, superHostBindings);
        const superViewQuery = superDef.viewQuery;
        const superContentQueries = superDef.contentQueries;
        superViewQuery && inheritViewQuery(definition, superViewQuery);
        superContentQueries && inheritContentQueries(definition, superContentQueries);
        fillProperties(definition.inputs, superDef.inputs);
        fillProperties(definition.declaredInputs, superDef.declaredInputs);
        fillProperties(definition.outputs, superDef.outputs);
        if (superDef.inputTransforms !== null) {
          if (writeableDef.inputTransforms === null) {
            writeableDef.inputTransforms = {};
          }
          fillProperties(writeableDef.inputTransforms, superDef.inputTransforms);
        }
        if (isComponentDef(superDef) && superDef.data.animation) {
          const defData = definition.data;
          defData.animation = (defData.animation || []).concat(superDef.data.animation);
        }
      }
      const features = superDef.features;
      if (features) {
        for (let i = 0; i < features.length; i++) {
          const feature = features[i];
          if (feature && feature.ngInherit) {
            feature(definition);
          }
          if (feature === \u0275\u0275InheritDefinitionFeature) {
            shouldInheritFields = false;
          }
        }
      }
    }
    superType = Object.getPrototypeOf(superType);
  }
  mergeHostAttrsAcrossInheritance(inheritanceChain);
}
function mergeHostAttrsAcrossInheritance(inheritanceChain) {
  let hostVars = 0;
  let hostAttrs = null;
  for (let i = inheritanceChain.length - 1; i >= 0; i--) {
    const def = inheritanceChain[i];
    def.hostVars = hostVars += def.hostVars;
    def.hostAttrs = mergeHostAttrs(def.hostAttrs, hostAttrs = mergeHostAttrs(hostAttrs, def.hostAttrs));
  }
}
function maybeUnwrapEmpty(value) {
  if (value === EMPTY_OBJ) {
    return {};
  } else if (value === EMPTY_ARRAY) {
    return [];
  } else {
    return value;
  }
}
function inheritViewQuery(definition, superViewQuery) {
  const prevViewQuery = definition.viewQuery;
  if (prevViewQuery) {
    definition.viewQuery = (rf, ctx) => {
      superViewQuery(rf, ctx);
      prevViewQuery(rf, ctx);
    };
  } else {
    definition.viewQuery = superViewQuery;
  }
}
function inheritContentQueries(definition, superContentQueries) {
  const prevContentQueries = definition.contentQueries;
  if (prevContentQueries) {
    definition.contentQueries = (rf, ctx, directiveIndex) => {
      superContentQueries(rf, ctx, directiveIndex);
      prevContentQueries(rf, ctx, directiveIndex);
    };
  } else {
    definition.contentQueries = superContentQueries;
  }
}
function inheritHostBindings(definition, superHostBindings) {
  const prevHostBindings = definition.hostBindings;
  if (prevHostBindings) {
    definition.hostBindings = (rf, ctx) => {
      superHostBindings(rf, ctx);
      prevHostBindings(rf, ctx);
    };
  } else {
    definition.hostBindings = superHostBindings;
  }
}
var COPY_DIRECTIVE_FIELDS = [
  // The child class should use the providers of its parent.
  "providersResolver"
  // Not listed here are any fields which are handled by the `ɵɵInheritDefinitionFeature`, such
  // as inputs, outputs, and host binding functions.
];
var COPY_COMPONENT_FIELDS = [
  // The child class should use the template function of its parent, including all template
  // semantics.
  "template",
  "decls",
  "consts",
  "vars",
  "onPush",
  "ngContentSelectors",
  // The child class should use the CSS styles of its parent, including all styling semantics.
  "styles",
  "encapsulation",
  // The child class should be checked by the runtime in the same way as its parent.
  "schemas"
];
function \u0275\u0275CopyDefinitionFeature(definition) {
  let superType = getSuperType(definition.type);
  let superDef = void 0;
  if (isComponentDef(definition)) {
    superDef = superType.\u0275cmp;
  } else {
    superDef = superType.\u0275dir;
  }
  const defAny = definition;
  for (const field of COPY_DIRECTIVE_FIELDS) {
    defAny[field] = superDef[field];
  }
  if (isComponentDef(superDef)) {
    for (const field of COPY_COMPONENT_FIELDS) {
      defAny[field] = superDef[field];
    }
  }
}
function \u0275\u0275HostDirectivesFeature(rawHostDirectives) {
  const feature = (definition) => {
    const resolved2 = (Array.isArray(rawHostDirectives) ? rawHostDirectives : rawHostDirectives()).map((dir) => {
      return typeof dir === "function" ? { directive: resolveForwardRef(dir), inputs: EMPTY_OBJ, outputs: EMPTY_OBJ } : {
        directive: resolveForwardRef(dir.directive),
        inputs: bindingArrayToMap(dir.inputs),
        outputs: bindingArrayToMap(dir.outputs)
      };
    });
    if (definition.hostDirectives === null) {
      definition.findHostDirectiveDefs = findHostDirectiveDefs;
      definition.hostDirectives = resolved2;
    } else {
      definition.hostDirectives.unshift(...resolved2);
    }
  };
  feature.ngInherit = true;
  return feature;
}
function findHostDirectiveDefs(currentDef, matchedDefs, hostDirectiveDefs) {
  if (currentDef.hostDirectives !== null) {
    for (const hostDirectiveConfig of currentDef.hostDirectives) {
      const hostDirectiveDef = getDirectiveDef(hostDirectiveConfig.directive);
      if (typeof ngDevMode === "undefined" || ngDevMode) {
        validateHostDirective(hostDirectiveConfig, hostDirectiveDef);
      }
      patchDeclaredInputs(hostDirectiveDef.declaredInputs, hostDirectiveConfig.inputs);
      findHostDirectiveDefs(hostDirectiveDef, matchedDefs, hostDirectiveDefs);
      hostDirectiveDefs.set(hostDirectiveDef, hostDirectiveConfig);
      matchedDefs.push(hostDirectiveDef);
    }
  }
}
function bindingArrayToMap(bindings) {
  if (bindings === void 0 || bindings.length === 0) {
    return EMPTY_OBJ;
  }
  const result = {};
  for (let i = 0; i < bindings.length; i += 2) {
    result[bindings[i]] = bindings[i + 1];
  }
  return result;
}
function patchDeclaredInputs(declaredInputs, exposedInputs) {
  for (const publicName in exposedInputs) {
    if (exposedInputs.hasOwnProperty(publicName)) {
      const remappedPublicName = exposedInputs[publicName];
      const privateName = declaredInputs[publicName];
      if ((typeof ngDevMode === "undefined" || ngDevMode) && declaredInputs.hasOwnProperty(remappedPublicName)) {
        assertEqual(declaredInputs[remappedPublicName], declaredInputs[publicName], `Conflicting host directive input alias ${publicName}.`);
      }
      declaredInputs[remappedPublicName] = privateName;
    }
  }
}
function validateHostDirective(hostDirectiveConfig, directiveDef) {
  const type = hostDirectiveConfig.directive;
  if (directiveDef === null) {
    if (getComponentDef(type) !== null) {
      throw new RuntimeError(310, `Host directive ${type.name} cannot be a component.`);
    }
    throw new RuntimeError(307, `Could not resolve metadata for host directive ${type.name}. Make sure that the ${type.name} class is annotated with an @Directive decorator.`);
  }
  if (!directiveDef.standalone) {
    throw new RuntimeError(308, `Host directive ${directiveDef.type.name} must be standalone.`);
  }
  validateMappings("input", directiveDef, hostDirectiveConfig.inputs);
  validateMappings("output", directiveDef, hostDirectiveConfig.outputs);
}
function validateMappings(bindingType, def, hostDirectiveBindings) {
  const className = def.type.name;
  const bindings = bindingType === "input" ? def.inputs : def.outputs;
  for (const publicName in hostDirectiveBindings) {
    if (hostDirectiveBindings.hasOwnProperty(publicName)) {
      if (!bindings.hasOwnProperty(publicName)) {
        throw new RuntimeError(311, `Directive ${className} does not have an ${bindingType} with a public name of ${publicName}.`);
      }
      const remappedPublicName = hostDirectiveBindings[publicName];
      if (bindings.hasOwnProperty(remappedPublicName) && remappedPublicName !== publicName && bindings[remappedPublicName] !== publicName) {
        throw new RuntimeError(312, `Cannot alias ${bindingType} ${publicName} of host directive ${className} to ${remappedPublicName}, because it already has a different ${bindingType} with the same public name.`);
      }
    }
  }
}
function \u0275\u0275InputTransformsFeature(definition) {
  const inputs = definition.inputConfig;
  const inputTransforms = {};
  for (const minifiedKey in inputs) {
    if (inputs.hasOwnProperty(minifiedKey)) {
      const value = inputs[minifiedKey];
      if (Array.isArray(value) && value[2]) {
        inputTransforms[minifiedKey] = value[2];
      }
    }
  }
  definition.inputTransforms = inputTransforms;
}
function updateBinding(lView, bindingIndex, value) {
  return lView[bindingIndex] = value;
}
function getBinding(lView, bindingIndex) {
  ngDevMode && assertIndexInRange(lView, bindingIndex);
  ngDevMode && assertNotSame(lView[bindingIndex], NO_CHANGE, "Stored value should never be NO_CHANGE.");
  return lView[bindingIndex];
}
function bindingUpdated(lView, bindingIndex, value) {
  ngDevMode && assertNotSame(value, NO_CHANGE, "Incoming value should never be NO_CHANGE.");
  ngDevMode && assertLessThan(bindingIndex, lView.length, `Slot should have been initialized to NO_CHANGE`);
  const oldValue = lView[bindingIndex];
  if (Object.is(oldValue, value)) {
    return false;
  } else {
    if (ngDevMode && isInCheckNoChangesMode()) {
      const oldValueToCompare = oldValue !== NO_CHANGE ? oldValue : void 0;
      if (!devModeEqual(oldValueToCompare, value)) {
        const details = getExpressionChangedErrorDetails(lView, bindingIndex, oldValueToCompare, value);
        throwErrorIfNoChangesMode(oldValue === NO_CHANGE, details.oldValue, details.newValue, details.propName, lView);
      }
      return false;
    }
    lView[bindingIndex] = value;
    return true;
  }
}
function bindingUpdated2(lView, bindingIndex, exp1, exp2) {
  const different = bindingUpdated(lView, bindingIndex, exp1);
  return bindingUpdated(lView, bindingIndex + 1, exp2) || different;
}
function bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) {
  const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);
  return bindingUpdated(lView, bindingIndex + 2, exp3) || different;
}
function bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) {
  const different = bindingUpdated2(lView, bindingIndex, exp1, exp2);
  return bindingUpdated2(lView, bindingIndex + 2, exp3, exp4) || different;
}
function \u0275\u0275attribute(name, value, sanitizer, namespace) {
  const lView = getLView();
  const bindingIndex = nextBindingIndex();
  if (bindingUpdated(lView, bindingIndex, value)) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, name, value, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, "attr." + name, bindingIndex);
  }
  return \u0275\u0275attribute;
}
function interpolationV(lView, values) {
  ngDevMode && assertLessThan(2, values.length, "should have at least 3 values");
  ngDevMode && assertEqual(values.length % 2, 1, "should have an odd number of values");
  let isBindingUpdated = false;
  let bindingIndex = getBindingIndex();
  for (let i = 1; i < values.length; i += 2) {
    isBindingUpdated = bindingUpdated(lView, bindingIndex++, values[i]) || isBindingUpdated;
  }
  setBindingIndex(bindingIndex);
  if (!isBindingUpdated) {
    return NO_CHANGE;
  }
  let content = values[0];
  for (let i = 1; i < values.length; i += 2) {
    content += renderStringify(values[i]) + values[i + 1];
  }
  return content;
}
function interpolation1(lView, prefix, v0, suffix) {
  const different = bindingUpdated(lView, nextBindingIndex(), v0);
  return different ? prefix + renderStringify(v0) + suffix : NO_CHANGE;
}
function interpolation2(lView, prefix, v0, i0, v1, suffix) {
  const bindingIndex = getBindingIndex();
  const different = bindingUpdated2(lView, bindingIndex, v0, v1);
  incrementBindingIndex(2);
  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + suffix : NO_CHANGE;
}
function interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix) {
  const bindingIndex = getBindingIndex();
  const different = bindingUpdated3(lView, bindingIndex, v0, v1, v2);
  incrementBindingIndex(3);
  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + suffix : NO_CHANGE;
}
function interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
  const bindingIndex = getBindingIndex();
  const different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
  incrementBindingIndex(4);
  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + suffix : NO_CHANGE;
}
function interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {
  const bindingIndex = getBindingIndex();
  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
  different = bindingUpdated(lView, bindingIndex + 4, v4) || different;
  incrementBindingIndex(5);
  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + suffix : NO_CHANGE;
}
function interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {
  const bindingIndex = getBindingIndex();
  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
  different = bindingUpdated2(lView, bindingIndex + 4, v4, v5) || different;
  incrementBindingIndex(6);
  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + suffix : NO_CHANGE;
}
function interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {
  const bindingIndex = getBindingIndex();
  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
  different = bindingUpdated3(lView, bindingIndex + 4, v4, v5, v6) || different;
  incrementBindingIndex(7);
  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 + renderStringify(v6) + suffix : NO_CHANGE;
}
function interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {
  const bindingIndex = getBindingIndex();
  let different = bindingUpdated4(lView, bindingIndex, v0, v1, v2, v3);
  different = bindingUpdated4(lView, bindingIndex + 4, v4, v5, v6, v7) || different;
  incrementBindingIndex(8);
  return different ? prefix + renderStringify(v0) + i0 + renderStringify(v1) + i1 + renderStringify(v2) + i2 + renderStringify(v3) + i3 + renderStringify(v4) + i4 + renderStringify(v5) + i5 + renderStringify(v6) + i6 + renderStringify(v7) + suffix : NO_CHANGE;
}
function \u0275\u0275attributeInterpolate1(attrName, prefix, v0, suffix, sanitizer, namespace) {
  const lView = getLView();
  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, "attr." + attrName, getBindingIndex() - 1, prefix, suffix);
  }
  return \u0275\u0275attributeInterpolate1;
}
function \u0275\u0275attributeInterpolate2(attrName, prefix, v0, i0, v1, suffix, sanitizer, namespace) {
  const lView = getLView();
  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, "attr." + attrName, getBindingIndex() - 2, prefix, i0, suffix);
  }
  return \u0275\u0275attributeInterpolate2;
}
function \u0275\u0275attributeInterpolate3(attrName, prefix, v0, i0, v1, i1, v2, suffix, sanitizer, namespace) {
  const lView = getLView();
  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, "attr." + attrName, getBindingIndex() - 3, prefix, i0, i1, suffix);
  }
  return \u0275\u0275attributeInterpolate3;
}
function \u0275\u0275attributeInterpolate4(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, sanitizer, namespace) {
  const lView = getLView();
  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, "attr." + attrName, getBindingIndex() - 4, prefix, i0, i1, i2, suffix);
  }
  return \u0275\u0275attributeInterpolate4;
}
function \u0275\u0275attributeInterpolate5(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, sanitizer, namespace) {
  const lView = getLView();
  const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, "attr." + attrName, getBindingIndex() - 5, prefix, i0, i1, i2, i3, suffix);
  }
  return \u0275\u0275attributeInterpolate5;
}
function \u0275\u0275attributeInterpolate6(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, sanitizer, namespace) {
  const lView = getLView();
  const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, "attr." + attrName, getBindingIndex() - 6, prefix, i0, i1, i2, i3, i4, suffix);
  }
  return \u0275\u0275attributeInterpolate6;
}
function \u0275\u0275attributeInterpolate7(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, sanitizer, namespace) {
  const lView = getLView();
  const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, "attr." + attrName, getBindingIndex() - 7, prefix, i0, i1, i2, i3, i4, i5, suffix);
  }
  return \u0275\u0275attributeInterpolate7;
}
function \u0275\u0275attributeInterpolate8(attrName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, sanitizer, namespace) {
  const lView = getLView();
  const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, attrName, interpolatedValue, sanitizer, namespace);
    ngDevMode && storePropertyBindingMetadata(getTView().data, tNode, "attr." + attrName, getBindingIndex() - 8, prefix, i0, i1, i2, i3, i4, i5, i6, suffix);
  }
  return \u0275\u0275attributeInterpolate8;
}
function \u0275\u0275attributeInterpolateV(attrName, values, sanitizer, namespace) {
  const lView = getLView();
  const interpolated = interpolationV(lView, values);
  if (interpolated !== NO_CHANGE) {
    const tNode = getSelectedTNode();
    elementAttributeInternal(tNode, lView, attrName, interpolated, sanitizer, namespace);
    if (ngDevMode) {
      const interpolationInBetween = [values[0]];
      for (let i = 2; i < values.length; i += 2) {
        interpolationInBetween.push(values[i]);
      }
      storePropertyBindingMetadata(getTView().data, tNode, "attr." + attrName, getBindingIndex() - interpolationInBetween.length + 1, ...interpolationInBetween);
    }
  }
  return \u0275\u0275attributeInterpolateV;
}
function toTStylingRange(prev, next) {
  ngDevMode && assertNumberInRange(
    prev,
    0,
    32767
    /* StylingRange.UNSIGNED_MASK */
  );
  ngDevMode && assertNumberInRange(
    next,
    0,
    32767
    /* StylingRange.UNSIGNED_MASK */
  );
  return prev << 17 | next << 2;
}
function getTStylingRangePrev(tStylingRange) {
  ngDevMode && assertNumber(tStylingRange, "expected number");
  return tStylingRange >> 17 & 32767;
}
function getTStylingRangePrevDuplicate(tStylingRange) {
  ngDevMode && assertNumber(tStylingRange, "expected number");
  return (tStylingRange & 2) == 2;
}
function setTStylingRangePrev(tStylingRange, previous) {
  ngDevMode && assertNumber(tStylingRange, "expected number");
  ngDevMode && assertNumberInRange(
    previous,
    0,
    32767
    /* StylingRange.UNSIGNED_MASK */
  );
  return tStylingRange & ~4294836224 | previous << 17;
}
function setTStylingRangePrevDuplicate(tStylingRange) {
  ngDevMode && assertNumber(tStylingRange, "expected number");
  return tStylingRange | 2;
}
function getTStylingRangeNext(tStylingRange) {
  ngDevMode && assertNumber(tStylingRange, "expected number");
  return (tStylingRange & 131068) >> 2;
}
function setTStylingRangeNext(tStylingRange, next) {
  ngDevMode && assertNumber(tStylingRange, "expected number");
  ngDevMode && assertNumberInRange(
    next,
    0,
    32767
    /* StylingRange.UNSIGNED_MASK */
  );
  return tStylingRange & ~131068 | //
  next << 2;
}
function getTStylingRangeNextDuplicate(tStylingRange) {
  ngDevMode && assertNumber(tStylingRange, "expected number");
  return (tStylingRange & 1) === 1;
}
function setTStylingRangeNextDuplicate(tStylingRange) {
  ngDevMode && assertNumber(tStylingRange, "expected number");
  return tStylingRange | 1;
}
function insertTStylingBinding(tData, tNode, tStylingKeyWithStatic, index, isHostBinding, isClassBinding) {
  ngDevMode && assertFirstUpdatePass(getTView());
  let tBindings = isClassBinding ? tNode.classBindings : tNode.styleBindings;
  let tmplHead = getTStylingRangePrev(tBindings);
  let tmplTail = getTStylingRangeNext(tBindings);
  tData[index] = tStylingKeyWithStatic;
  let isKeyDuplicateOfStatic = false;
  let tStylingKey;
  if (Array.isArray(tStylingKeyWithStatic)) {
    const staticKeyValueArray = tStylingKeyWithStatic;
    tStylingKey = staticKeyValueArray[1];
    if (tStylingKey === null || keyValueArrayIndexOf(staticKeyValueArray, tStylingKey) > 0) {
      isKeyDuplicateOfStatic = true;
    }
  } else {
    tStylingKey = tStylingKeyWithStatic;
  }
  if (isHostBinding) {
    const hasTemplateBindings = tmplTail !== 0;
    if (hasTemplateBindings) {
      const previousNode = getTStylingRangePrev(tData[tmplHead + 1]);
      tData[index + 1] = toTStylingRange(previousNode, tmplHead);
      if (previousNode !== 0) {
        tData[previousNode + 1] = setTStylingRangeNext(tData[previousNode + 1], index);
      }
      tData[tmplHead + 1] = setTStylingRangePrev(tData[tmplHead + 1], index);
    } else {
      tData[index + 1] = toTStylingRange(tmplHead, 0);
      if (tmplHead !== 0) {
        tData[tmplHead + 1] = setTStylingRangeNext(tData[tmplHead + 1], index);
      }
      tmplHead = index;
    }
  } else {
    tData[index + 1] = toTStylingRange(tmplTail, 0);
    ngDevMode && assertEqual(tmplHead !== 0 && tmplTail === 0, false, "Adding template bindings after hostBindings is not allowed.");
    if (tmplHead === 0) {
      tmplHead = index;
    } else {
      tData[tmplTail + 1] = setTStylingRangeNext(tData[tmplTail + 1], index);
    }
    tmplTail = index;
  }
  if (isKeyDuplicateOfStatic) {
    tData[index + 1] = setTStylingRangePrevDuplicate(tData[index + 1]);
  }
  markDuplicates(tData, tStylingKey, index, true, isClassBinding);
  markDuplicates(tData, tStylingKey, index, false, isClassBinding);
  markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding);
  tBindings = toTStylingRange(tmplHead, tmplTail);
  if (isClassBinding) {
    tNode.classBindings = tBindings;
  } else {
    tNode.styleBindings = tBindings;
  }
}
function markDuplicateOfResidualStyling(tNode, tStylingKey, tData, index, isClassBinding) {
  const residual = isClassBinding ? tNode.residualClasses : tNode.residualStyles;
  if (residual != null && typeof tStylingKey == "string" && keyValueArrayIndexOf(residual, tStylingKey) >= 0) {
    tData[index + 1] = setTStylingRangeNextDuplicate(tData[index + 1]);
  }
}
function markDuplicates(tData, tStylingKey, index, isPrevDir, isClassBinding) {
  const tStylingAtIndex = tData[index + 1];
  const isMap = tStylingKey === null;
  let cursor = isPrevDir ? getTStylingRangePrev(tStylingAtIndex) : getTStylingRangeNext(tStylingAtIndex);
  let foundDuplicate = false;
  while (cursor !== 0 && (foundDuplicate === false || isMap)) {
    ngDevMode && assertIndexInRange(tData, cursor);
    const tStylingValueAtCursor = tData[cursor];
    const tStyleRangeAtCursor = tData[cursor + 1];
    if (isStylingMatch(tStylingValueAtCursor, tStylingKey)) {
      foundDuplicate = true;
      tData[cursor + 1] = isPrevDir ? setTStylingRangeNextDuplicate(tStyleRangeAtCursor) : setTStylingRangePrevDuplicate(tStyleRangeAtCursor);
    }
    cursor = isPrevDir ? getTStylingRangePrev(tStyleRangeAtCursor) : getTStylingRangeNext(tStyleRangeAtCursor);
  }
  if (foundDuplicate) {
    tData[index + 1] = isPrevDir ? setTStylingRangePrevDuplicate(tStylingAtIndex) : setTStylingRangeNextDuplicate(tStylingAtIndex);
  }
}
function isStylingMatch(tStylingKeyCursor, tStylingKey) {
  ngDevMode && assertNotEqual(Array.isArray(tStylingKey), true, "Expected that 'tStylingKey' has been unwrapped");
  if (tStylingKeyCursor === null || // If the cursor is `null` it means that we have map at that
  // location so we must assume that we have a match.
  tStylingKey == null || // If `tStylingKey` is `null` then it is a map therefor assume that it
  // contains a match.
  (Array.isArray(tStylingKeyCursor) ? tStylingKeyCursor[1] : tStylingKeyCursor) === tStylingKey) {
    return true;
  } else if (Array.isArray(tStylingKeyCursor) && typeof tStylingKey === "string") {
    return keyValueArrayIndexOf(tStylingKeyCursor, tStylingKey) >= 0;
  }
  return false;
}
var parserState = {
  textEnd: 0,
  key: 0,
  keyEnd: 0,
  value: 0,
  valueEnd: 0
};
function getLastParsedKey(text) {
  return text.substring(parserState.key, parserState.keyEnd);
}
function getLastParsedValue(text) {
  return text.substring(parserState.value, parserState.valueEnd);
}
function parseClassName(text) {
  resetParserState(text);
  return parseClassNameNext(text, consumeWhitespace(text, 0, parserState.textEnd));
}
function parseClassNameNext(text, index) {
  const end = parserState.textEnd;
  if (end === index) {
    return -1;
  }
  index = parserState.keyEnd = consumeClassToken(text, parserState.key = index, end);
  return consumeWhitespace(text, index, end);
}
function parseStyle(text) {
  resetParserState(text);
  return parseStyleNext(text, consumeWhitespace(text, 0, parserState.textEnd));
}
function parseStyleNext(text, startIndex) {
  const end = parserState.textEnd;
  let index = parserState.key = consumeWhitespace(text, startIndex, end);
  if (end === index) {
    return -1;
  }
  index = parserState.keyEnd = consumeStyleKey(text, index, end);
  index = consumeSeparator(
    text,
    index,
    end,
    58
    /* CharCode.COLON */
  );
  index = parserState.value = consumeWhitespace(text, index, end);
  index = parserState.valueEnd = consumeStyleValue(text, index, end);
  return consumeSeparator(
    text,
    index,
    end,
    59
    /* CharCode.SEMI_COLON */
  );
}
function resetParserState(text) {
  parserState.key = 0;
  parserState.keyEnd = 0;
  parserState.value = 0;
  parserState.valueEnd = 0;
  parserState.textEnd = text.length;
}
function consumeWhitespace(text, startIndex, endIndex) {
  while (startIndex < endIndex && text.charCodeAt(startIndex) <= 32) {
    startIndex++;
  }
  return startIndex;
}
function consumeClassToken(text, startIndex, endIndex) {
  while (startIndex < endIndex && text.charCodeAt(startIndex) > 32) {
    startIndex++;
  }
  return startIndex;
}
function consumeStyleKey(text, startIndex, endIndex) {
  let ch;
  while (startIndex < endIndex && ((ch = text.charCodeAt(startIndex)) === 45 || ch === 95 || (ch & -33) >= 65 && (ch & -33) <= 90 || ch >= 48 && ch <= 57)) {
    startIndex++;
  }
  return startIndex;
}
function consumeSeparator(text, startIndex, endIndex, separator) {
  startIndex = consumeWhitespace(text, startIndex, endIndex);
  if (startIndex < endIndex) {
    if (ngDevMode && text.charCodeAt(startIndex) !== separator) {
      malformedStyleError(text, String.fromCharCode(separator), startIndex);
    }
    startIndex++;
  }
  return startIndex;
}
function consumeStyleValue(text, startIndex, endIndex) {
  let ch1 = -1;
  let ch2 = -1;
  let ch3 = -1;
  let i = startIndex;
  let lastChIndex = i;
  while (i < endIndex) {
    const ch = text.charCodeAt(i++);
    if (ch === 59) {
      return lastChIndex;
    } else if (ch === 34 || ch === 39) {
      lastChIndex = i = consumeQuotedText(text, ch, i, endIndex);
    } else if (startIndex === i - 4 && // We have seen only 4 characters so far "URL(" (Ignore "foo_URL()")
    ch3 === 85 && ch2 === 82 && ch1 === 76 && ch === 40) {
      lastChIndex = i = consumeQuotedText(text, 41, i, endIndex);
    } else if (ch > 32) {
      lastChIndex = i;
    }
    ch3 = ch2;
    ch2 = ch1;
    ch1 = ch & -33;
  }
  return lastChIndex;
}
function consumeQuotedText(text, quoteCharCode, startIndex, endIndex) {
  let ch1 = -1;
  let index = startIndex;
  while (index < endIndex) {
    const ch = text.charCodeAt(index++);
    if (ch == quoteCharCode && ch1 !== 92) {
      return index;
    }
    if (ch == 92 && ch1 === 92) {
      ch1 = 0;
    } else {
      ch1 = ch;
    }
  }
  throw ngDevMode ? malformedStyleError(text, String.fromCharCode(quoteCharCode), endIndex) : new Error();
}
function malformedStyleError(text, expecting, index) {
  ngDevMode && assertEqual(typeof text === "string", true, "String expected here");
  throw throwError2(`Malformed style at location ${index} in string '` + text.substring(0, index) + "[>>" + text.substring(index, index + 1) + "<<]" + text.slice(index + 1) + `'. Expecting '${expecting}'.`);
}
function \u0275\u0275property(propName, value, sanitizer) {
  const lView = getLView();
  const bindingIndex = nextBindingIndex();
  if (bindingUpdated(lView, bindingIndex, value)) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);
  }
  return \u0275\u0275property;
}
function setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased) {
  const inputs = tNode.inputs;
  const property = isClassBased ? "class" : "style";
  setInputsForProperty(tView, lView, inputs[property], property, value);
}
function \u0275\u0275styleProp(prop, value, suffix) {
  checkStylingProperty(prop, value, suffix, false);
  return \u0275\u0275styleProp;
}
function \u0275\u0275classProp(className, value) {
  checkStylingProperty(className, value, null, true);
  return \u0275\u0275classProp;
}
function \u0275\u0275styleMap(styles) {
  checkStylingMap(styleKeyValueArraySet, styleStringParser, styles, false);
}
function styleStringParser(keyValueArray, text) {
  for (let i = parseStyle(text); i >= 0; i = parseStyleNext(text, i)) {
    styleKeyValueArraySet(keyValueArray, getLastParsedKey(text), getLastParsedValue(text));
  }
}
function \u0275\u0275classMap(classes) {
  checkStylingMap(classKeyValueArraySet, classStringParser, classes, true);
}
function classStringParser(keyValueArray, text) {
  for (let i = parseClassName(text); i >= 0; i = parseClassNameNext(text, i)) {
    keyValueArraySet(keyValueArray, getLastParsedKey(text), true);
  }
}
function checkStylingProperty(prop, value, suffix, isClassBased) {
  const lView = getLView();
  const tView = getTView();
  const bindingIndex = incrementBindingIndex(2);
  if (tView.firstUpdatePass) {
    stylingFirstUpdatePass(tView, prop, bindingIndex, isClassBased);
  }
  if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {
    const tNode = tView.data[getSelectedIndex()];
    updateStyling(tView, tNode, lView, lView[RENDERER], prop, lView[bindingIndex + 1] = normalizeSuffix(value, suffix), isClassBased, bindingIndex);
  }
}
function checkStylingMap(keyValueArraySet2, stringParser, value, isClassBased) {
  const tView = getTView();
  const bindingIndex = incrementBindingIndex(2);
  if (tView.firstUpdatePass) {
    stylingFirstUpdatePass(tView, null, bindingIndex, isClassBased);
  }
  const lView = getLView();
  if (value !== NO_CHANGE && bindingUpdated(lView, bindingIndex, value)) {
    const tNode = tView.data[getSelectedIndex()];
    if (hasStylingInputShadow(tNode, isClassBased) && !isInHostBindings(tView, bindingIndex)) {
      if (ngDevMode) {
        const tStylingKey = tView.data[bindingIndex];
        assertEqual(Array.isArray(tStylingKey) ? tStylingKey[1] : tStylingKey, false, "Styling linked list shadow input should be marked as 'false'");
      }
      let staticPrefix = isClassBased ? tNode.classesWithoutHost : tNode.stylesWithoutHost;
      ngDevMode && isClassBased === false && staticPrefix !== null && assertEqual(staticPrefix.endsWith(";"), true, "Expecting static portion to end with ';'");
      if (staticPrefix !== null) {
        value = concatStringsWithSpace(staticPrefix, value ? value : "");
      }
      setDirectiveInputsWhichShadowsStyling(tView, tNode, lView, value, isClassBased);
    } else {
      updateStylingMap(tView, tNode, lView, lView[RENDERER], lView[bindingIndex + 1], lView[bindingIndex + 1] = toStylingKeyValueArray(keyValueArraySet2, stringParser, value), isClassBased, bindingIndex);
    }
  }
}
function isInHostBindings(tView, bindingIndex) {
  return bindingIndex >= tView.expandoStartIndex;
}
function stylingFirstUpdatePass(tView, tStylingKey, bindingIndex, isClassBased) {
  ngDevMode && assertFirstUpdatePass(tView);
  const tData = tView.data;
  if (tData[bindingIndex + 1] === null) {
    const tNode = tData[getSelectedIndex()];
    ngDevMode && assertDefined(tNode, "TNode expected");
    const isHostBindings = isInHostBindings(tView, bindingIndex);
    if (hasStylingInputShadow(tNode, isClassBased) && tStylingKey === null && !isHostBindings) {
      tStylingKey = false;
    }
    tStylingKey = wrapInStaticStylingKey(tData, tNode, tStylingKey, isClassBased);
    insertTStylingBinding(tData, tNode, tStylingKey, bindingIndex, isHostBindings, isClassBased);
  }
}
function wrapInStaticStylingKey(tData, tNode, stylingKey, isClassBased) {
  const hostDirectiveDef = getCurrentDirectiveDef(tData);
  let residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;
  if (hostDirectiveDef === null) {
    const isFirstStylingInstructionInTemplate = (isClassBased ? tNode.classBindings : tNode.styleBindings) === 0;
    if (isFirstStylingInstructionInTemplate) {
      stylingKey = collectStylingFromDirectives(null, tData, tNode, stylingKey, isClassBased);
      stylingKey = collectStylingFromTAttrs(stylingKey, tNode.attrs, isClassBased);
      residual = null;
    }
  } else {
    const directiveStylingLast = tNode.directiveStylingLast;
    const isFirstStylingInstructionInHostBinding = directiveStylingLast === -1 || tData[directiveStylingLast] !== hostDirectiveDef;
    if (isFirstStylingInstructionInHostBinding) {
      stylingKey = collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased);
      if (residual === null) {
        let templateStylingKey = getTemplateHeadTStylingKey(tData, tNode, isClassBased);
        if (templateStylingKey !== void 0 && Array.isArray(templateStylingKey)) {
          templateStylingKey = collectStylingFromDirectives(null, tData, tNode, templateStylingKey[1], isClassBased);
          templateStylingKey = collectStylingFromTAttrs(templateStylingKey, tNode.attrs, isClassBased);
          setTemplateHeadTStylingKey(tData, tNode, isClassBased, templateStylingKey);
        }
      } else {
        residual = collectResidual(tData, tNode, isClassBased);
      }
    }
  }
  if (residual !== void 0) {
    isClassBased ? tNode.residualClasses = residual : tNode.residualStyles = residual;
  }
  return stylingKey;
}
function getTemplateHeadTStylingKey(tData, tNode, isClassBased) {
  const bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;
  if (getTStylingRangeNext(bindings) === 0) {
    return void 0;
  }
  return tData[getTStylingRangePrev(bindings)];
}
function setTemplateHeadTStylingKey(tData, tNode, isClassBased, tStylingKey) {
  const bindings = isClassBased ? tNode.classBindings : tNode.styleBindings;
  ngDevMode && assertNotEqual(getTStylingRangeNext(bindings), 0, "Expecting to have at least one template styling binding.");
  tData[getTStylingRangePrev(bindings)] = tStylingKey;
}
function collectResidual(tData, tNode, isClassBased) {
  let residual = void 0;
  const directiveEnd = tNode.directiveEnd;
  ngDevMode && assertNotEqual(tNode.directiveStylingLast, -1, "By the time this function gets called at least one hostBindings-node styling instruction must have executed.");
  for (let i = 1 + tNode.directiveStylingLast; i < directiveEnd; i++) {
    const attrs = tData[i].hostAttrs;
    residual = collectStylingFromTAttrs(residual, attrs, isClassBased);
  }
  return collectStylingFromTAttrs(residual, tNode.attrs, isClassBased);
}
function collectStylingFromDirectives(hostDirectiveDef, tData, tNode, stylingKey, isClassBased) {
  let currentDirective = null;
  const directiveEnd = tNode.directiveEnd;
  let directiveStylingLast = tNode.directiveStylingLast;
  if (directiveStylingLast === -1) {
    directiveStylingLast = tNode.directiveStart;
  } else {
    directiveStylingLast++;
  }
  while (directiveStylingLast < directiveEnd) {
    currentDirective = tData[directiveStylingLast];
    ngDevMode && assertDefined(currentDirective, "expected to be defined");
    stylingKey = collectStylingFromTAttrs(stylingKey, currentDirective.hostAttrs, isClassBased);
    if (currentDirective === hostDirectiveDef)
      break;
    directiveStylingLast++;
  }
  if (hostDirectiveDef !== null) {
    tNode.directiveStylingLast = directiveStylingLast;
  }
  return stylingKey;
}
function collectStylingFromTAttrs(stylingKey, attrs, isClassBased) {
  const desiredMarker = isClassBased ? 1 : 2;
  let currentMarker = -1;
  if (attrs !== null) {
    for (let i = 0; i < attrs.length; i++) {
      const item = attrs[i];
      if (typeof item === "number") {
        currentMarker = item;
      } else {
        if (currentMarker === desiredMarker) {
          if (!Array.isArray(stylingKey)) {
            stylingKey = stylingKey === void 0 ? [] : ["", stylingKey];
          }
          keyValueArraySet(stylingKey, item, isClassBased ? true : attrs[++i]);
        }
      }
    }
  }
  return stylingKey === void 0 ? null : stylingKey;
}
function toStylingKeyValueArray(keyValueArraySet2, stringParser, value) {
  if (value == null || value === "")
    return EMPTY_ARRAY;
  const styleKeyValueArray = [];
  const unwrappedValue = unwrapSafeValue(value);
  if (Array.isArray(unwrappedValue)) {
    for (let i = 0; i < unwrappedValue.length; i++) {
      keyValueArraySet2(styleKeyValueArray, unwrappedValue[i], true);
    }
  } else if (typeof unwrappedValue === "object") {
    for (const key in unwrappedValue) {
      if (unwrappedValue.hasOwnProperty(key)) {
        keyValueArraySet2(styleKeyValueArray, key, unwrappedValue[key]);
      }
    }
  } else if (typeof unwrappedValue === "string") {
    stringParser(styleKeyValueArray, unwrappedValue);
  } else {
    ngDevMode && throwError2("Unsupported styling type " + typeof unwrappedValue + ": " + unwrappedValue);
  }
  return styleKeyValueArray;
}
function styleKeyValueArraySet(keyValueArray, key, value) {
  keyValueArraySet(keyValueArray, key, unwrapSafeValue(value));
}
function classKeyValueArraySet(keyValueArray, key, value) {
  const stringKey = String(key);
  if (stringKey !== "" && !stringKey.includes(" ")) {
    keyValueArraySet(keyValueArray, stringKey, value);
  }
}
function updateStylingMap(tView, tNode, lView, renderer, oldKeyValueArray, newKeyValueArray, isClassBased, bindingIndex) {
  if (oldKeyValueArray === NO_CHANGE) {
    oldKeyValueArray = EMPTY_ARRAY;
  }
  let oldIndex = 0;
  let newIndex = 0;
  let oldKey = 0 < oldKeyValueArray.length ? oldKeyValueArray[0] : null;
  let newKey = 0 < newKeyValueArray.length ? newKeyValueArray[0] : null;
  while (oldKey !== null || newKey !== null) {
    ngDevMode && assertLessThan(oldIndex, 999, "Are we stuck in infinite loop?");
    ngDevMode && assertLessThan(newIndex, 999, "Are we stuck in infinite loop?");
    const oldValue = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex + 1] : void 0;
    const newValue = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex + 1] : void 0;
    let setKey = null;
    let setValue = void 0;
    if (oldKey === newKey) {
      oldIndex += 2;
      newIndex += 2;
      if (oldValue !== newValue) {
        setKey = newKey;
        setValue = newValue;
      }
    } else if (newKey === null || oldKey !== null && oldKey < newKey) {
      oldIndex += 2;
      setKey = oldKey;
    } else {
      ngDevMode && assertDefined(newKey, "Expecting to have a valid key");
      newIndex += 2;
      setKey = newKey;
      setValue = newValue;
    }
    if (setKey !== null) {
      updateStyling(tView, tNode, lView, renderer, setKey, setValue, isClassBased, bindingIndex);
    }
    oldKey = oldIndex < oldKeyValueArray.length ? oldKeyValueArray[oldIndex] : null;
    newKey = newIndex < newKeyValueArray.length ? newKeyValueArray[newIndex] : null;
  }
}
function updateStyling(tView, tNode, lView, renderer, prop, value, isClassBased, bindingIndex) {
  if (!(tNode.type & 3)) {
    return;
  }
  const tData = tView.data;
  const tRange = tData[bindingIndex + 1];
  const higherPriorityValue = getTStylingRangeNextDuplicate(tRange) ? findStylingValue(tData, tNode, lView, prop, getTStylingRangeNext(tRange), isClassBased) : void 0;
  if (!isStylingValuePresent(higherPriorityValue)) {
    if (!isStylingValuePresent(value)) {
      if (getTStylingRangePrevDuplicate(tRange)) {
        value = findStylingValue(tData, null, lView, prop, bindingIndex, isClassBased);
      }
    }
    const rNode = getNativeByIndex(getSelectedIndex(), lView);
    applyStyling(renderer, isClassBased, rNode, prop, value);
  }
}
function findStylingValue(tData, tNode, lView, prop, index, isClassBased) {
  const isPrevDirection = tNode === null;
  let value = void 0;
  while (index > 0) {
    const rawKey = tData[index];
    const containsStatics = Array.isArray(rawKey);
    const key = containsStatics ? rawKey[1] : rawKey;
    const isStylingMap = key === null;
    let valueAtLViewIndex = lView[index + 1];
    if (valueAtLViewIndex === NO_CHANGE) {
      valueAtLViewIndex = isStylingMap ? EMPTY_ARRAY : void 0;
    }
    let currentValue = isStylingMap ? keyValueArrayGet(valueAtLViewIndex, prop) : key === prop ? valueAtLViewIndex : void 0;
    if (containsStatics && !isStylingValuePresent(currentValue)) {
      currentValue = keyValueArrayGet(rawKey, prop);
    }
    if (isStylingValuePresent(currentValue)) {
      value = currentValue;
      if (isPrevDirection) {
        return value;
      }
    }
    const tRange = tData[index + 1];
    index = isPrevDirection ? getTStylingRangePrev(tRange) : getTStylingRangeNext(tRange);
  }
  if (tNode !== null) {
    let residual = isClassBased ? tNode.residualClasses : tNode.residualStyles;
    if (residual != null) {
      value = keyValueArrayGet(residual, prop);
    }
  }
  return value;
}
function isStylingValuePresent(value) {
  return value !== void 0;
}
function normalizeSuffix(value, suffix) {
  if (value == null || value === "") {
  } else if (typeof suffix === "string") {
    value = value + suffix;
  } else if (typeof value === "object") {
    value = stringify(unwrapSafeValue(value));
  }
  return value;
}
function hasStylingInputShadow(tNode, isClassBased) {
  return (tNode.flags & (isClassBased ? 8 : 16)) !== 0;
}
function \u0275\u0275classMapInterpolate1(prefix, v0, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);
  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
function \u0275\u0275classMapInterpolate2(prefix, v0, i0, v1, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);
  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
function \u0275\u0275classMapInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
function \u0275\u0275classMapInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
function \u0275\u0275classMapInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
function \u0275\u0275classMapInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
function \u0275\u0275classMapInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
function \u0275\u0275classMapInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
function \u0275\u0275classMapInterpolateV(values) {
  const lView = getLView();
  const interpolatedValue = interpolationV(lView, values);
  checkStylingMap(keyValueArraySet, classStringParser, interpolatedValue, true);
}
function \u0275\u0275componentInstance() {
  const instance = getLView()[DECLARATION_COMPONENT_VIEW][CONTEXT];
  ngDevMode && assertDefined(instance, "Expected component instance to be defined");
  return instance;
}
var REF_EXTRACTOR_REGEXP = new RegExp(`^(\\d+)*(${REFERENCE_NODE_BODY}|${REFERENCE_NODE_HOST})*(.*)`);
var _findMatchingDehydratedViewImpl = (lContainer, template) => null;
function findMatchingDehydratedView(lContainer, template) {
  return _findMatchingDehydratedViewImpl(lContainer, template);
}
var LiveCollection = class {
  destroy(item) {
  }
  updateValue(index, value) {
  }
  // operations below could be implemented on top of the operations defined so far, but having
  // them explicitly allow clear expression of intent and potentially more performant
  // implementations
  swap(index1, index2) {
    const startIdx = Math.min(index1, index2);
    const endIdx = Math.max(index1, index2);
    const endItem = this.detach(endIdx);
    if (endIdx - startIdx > 1) {
      const startItem = this.detach(startIdx);
      this.attach(startIdx, endItem);
      this.attach(endIdx, startItem);
    } else {
      this.attach(startIdx, endItem);
    }
  }
  move(prevIndex, newIdx) {
    this.attach(newIdx, this.detach(prevIndex));
  }
};
function valuesMatching(liveIdx, liveValue, newIdx, newValue, trackBy) {
  if (liveIdx === newIdx && Object.is(liveValue, newValue)) {
    return 1;
  } else if (Object.is(trackBy(liveIdx, liveValue), trackBy(newIdx, newValue))) {
    return -1;
  }
  return 0;
}
function reconcile(liveCollection, newCollection, trackByFn) {
  let detachedItems = void 0;
  let liveKeysInTheFuture = void 0;
  let liveStartIdx = 0;
  let liveEndIdx = liveCollection.length - 1;
  if (Array.isArray(newCollection)) {
    let newEndIdx = newCollection.length - 1;
    while (liveStartIdx <= liveEndIdx && liveStartIdx <= newEndIdx) {
      const liveStartValue = liveCollection.at(liveStartIdx);
      const newStartValue = newCollection[liveStartIdx];
      const isStartMatching = valuesMatching(liveStartIdx, liveStartValue, liveStartIdx, newStartValue, trackByFn);
      if (isStartMatching !== 0) {
        if (isStartMatching < 0) {
          liveCollection.updateValue(liveStartIdx, newStartValue);
        }
        liveStartIdx++;
        continue;
      }
      const liveEndValue = liveCollection.at(liveEndIdx);
      const newEndValue = newCollection[newEndIdx];
      const isEndMatching = valuesMatching(liveEndIdx, liveEndValue, newEndIdx, newEndValue, trackByFn);
      if (isEndMatching !== 0) {
        if (isEndMatching < 0) {
          liveCollection.updateValue(liveEndIdx, newEndValue);
        }
        liveEndIdx--;
        newEndIdx--;
        continue;
      }
      const liveStartKey = trackByFn(liveStartIdx, liveStartValue);
      const liveEndKey = trackByFn(liveEndIdx, liveEndValue);
      const newStartKey = trackByFn(liveStartIdx, newStartValue);
      if (Object.is(newStartKey, liveEndKey)) {
        const newEndKey = trackByFn(newEndIdx, newEndValue);
        if (Object.is(newEndKey, liveStartKey)) {
          liveCollection.swap(liveStartIdx, liveEndIdx);
          liveCollection.updateValue(liveEndIdx, newEndValue);
          newEndIdx--;
          liveEndIdx--;
        } else {
          liveCollection.move(liveEndIdx, liveStartIdx);
        }
        liveCollection.updateValue(liveStartIdx, newStartValue);
        liveStartIdx++;
        continue;
      }
      detachedItems ??= new UniqueValueMultiKeyMap();
      liveKeysInTheFuture ??= initLiveItemsInTheFuture(liveCollection, liveStartIdx, liveEndIdx, trackByFn);
      if (attachPreviouslyDetached(liveCollection, detachedItems, liveStartIdx, newStartKey)) {
        liveCollection.updateValue(liveStartIdx, newStartValue);
        liveStartIdx++;
        liveEndIdx++;
      } else if (!liveKeysInTheFuture.has(newStartKey)) {
        const newItem = liveCollection.create(liveStartIdx, newCollection[liveStartIdx]);
        liveCollection.attach(liveStartIdx, newItem);
        liveStartIdx++;
        liveEndIdx++;
      } else {
        detachedItems.set(liveStartKey, liveCollection.detach(liveStartIdx));
        liveEndIdx--;
      }
    }
    while (liveStartIdx <= newEndIdx) {
      createOrAttach(liveCollection, detachedItems, trackByFn, liveStartIdx, newCollection[liveStartIdx]);
      liveStartIdx++;
    }
  } else if (newCollection != null) {
    const newCollectionIterator = newCollection[Symbol.iterator]();
    let newIterationResult = newCollectionIterator.next();
    while (!newIterationResult.done && liveStartIdx <= liveEndIdx) {
      const liveValue = liveCollection.at(liveStartIdx);
      const newValue = newIterationResult.value;
      const isStartMatching = valuesMatching(liveStartIdx, liveValue, liveStartIdx, newValue, trackByFn);
      if (isStartMatching !== 0) {
        if (isStartMatching < 0) {
          liveCollection.updateValue(liveStartIdx, newValue);
        }
        liveStartIdx++;
        newIterationResult = newCollectionIterator.next();
      } else {
        detachedItems ??= new UniqueValueMultiKeyMap();
        liveKeysInTheFuture ??= initLiveItemsInTheFuture(liveCollection, liveStartIdx, liveEndIdx, trackByFn);
        const newKey = trackByFn(liveStartIdx, newValue);
        if (attachPreviouslyDetached(liveCollection, detachedItems, liveStartIdx, newKey)) {
          liveCollection.updateValue(liveStartIdx, newValue);
          liveStartIdx++;
          liveEndIdx++;
          newIterationResult = newCollectionIterator.next();
        } else if (!liveKeysInTheFuture.has(newKey)) {
          liveCollection.attach(liveStartIdx, liveCollection.create(liveStartIdx, newValue));
          liveStartIdx++;
          liveEndIdx++;
          newIterationResult = newCollectionIterator.next();
        } else {
          const liveKey = trackByFn(liveStartIdx, liveValue);
          detachedItems.set(liveKey, liveCollection.detach(liveStartIdx));
          liveEndIdx--;
        }
      }
    }
    while (!newIterationResult.done) {
      createOrAttach(liveCollection, detachedItems, trackByFn, liveCollection.length, newIterationResult.value);
      newIterationResult = newCollectionIterator.next();
    }
  }
  while (liveStartIdx <= liveEndIdx) {
    liveCollection.destroy(liveCollection.detach(liveEndIdx--));
  }
  detachedItems?.forEach((item) => {
    liveCollection.destroy(item);
  });
}
function attachPreviouslyDetached(prevCollection, detachedItems, index, key) {
  if (detachedItems !== void 0 && detachedItems.has(key)) {
    prevCollection.attach(index, detachedItems.get(key));
    detachedItems.delete(key);
    return true;
  }
  return false;
}
function createOrAttach(liveCollection, detachedItems, trackByFn, index, value) {
  if (!attachPreviouslyDetached(liveCollection, detachedItems, index, trackByFn(index, value))) {
    const newItem = liveCollection.create(index, value);
    liveCollection.attach(index, newItem);
  } else {
    liveCollection.updateValue(index, value);
  }
}
function initLiveItemsInTheFuture(liveCollection, start, end, trackByFn) {
  const keys = /* @__PURE__ */ new Set();
  for (let i = start; i <= end; i++) {
    keys.add(trackByFn(i, liveCollection.at(i)));
  }
  return keys;
}
var UniqueValueMultiKeyMap = class {
  constructor() {
    this.kvMap = /* @__PURE__ */ new Map();
    this._vMap = void 0;
  }
  has(key) {
    return this.kvMap.has(key);
  }
  delete(key) {
    if (!this.has(key))
      return false;
    const value = this.kvMap.get(key);
    if (this._vMap !== void 0 && this._vMap.has(value)) {
      this.kvMap.set(key, this._vMap.get(value));
      this._vMap.delete(value);
    } else {
      this.kvMap.delete(key);
    }
    return true;
  }
  get(key) {
    return this.kvMap.get(key);
  }
  set(key, value) {
    if (this.kvMap.has(key)) {
      let prevValue = this.kvMap.get(key);
      ngDevMode && assertNotSame(prevValue, value, `Detected a duplicated value ${value} for the key ${key}`);
      if (this._vMap === void 0) {
        this._vMap = /* @__PURE__ */ new Map();
      }
      const vMap = this._vMap;
      while (vMap.has(prevValue)) {
        prevValue = vMap.get(prevValue);
      }
      vMap.set(prevValue, value);
    } else {
      this.kvMap.set(key, value);
    }
  }
  forEach(cb) {
    for (let [key, value] of this.kvMap) {
      cb(value, key);
      if (this._vMap !== void 0) {
        const vMap = this._vMap;
        while (vMap.has(value)) {
          value = vMap.get(value);
          cb(value, key);
        }
      }
    }
  }
};
function createAndRenderEmbeddedLView(declarationLView, templateTNode, context2, options) {
  const embeddedTView = templateTNode.tView;
  ngDevMode && assertDefined(embeddedTView, "TView must be defined for a template node.");
  ngDevMode && assertTNodeForLView(templateTNode, declarationLView);
  const isSignalView = declarationLView[FLAGS] & 4096;
  const viewFlags = isSignalView ? 4096 : 16;
  const embeddedLView = createLView(declarationLView, embeddedTView, context2, viewFlags, null, templateTNode, null, null, null, options?.injector ?? null, options?.dehydratedView ?? null);
  const declarationLContainer = declarationLView[templateTNode.index];
  ngDevMode && assertLContainer(declarationLContainer);
  embeddedLView[DECLARATION_LCONTAINER] = declarationLContainer;
  const declarationViewLQueries = declarationLView[QUERIES];
  if (declarationViewLQueries !== null) {
    embeddedLView[QUERIES] = declarationViewLQueries.createEmbeddedView(embeddedTView);
  }
  renderView(embeddedTView, embeddedLView, context2);
  return embeddedLView;
}
function getLViewFromLContainer(lContainer, index) {
  const adjustedIndex = CONTAINER_HEADER_OFFSET + index;
  if (adjustedIndex < lContainer.length) {
    const lView = lContainer[adjustedIndex];
    ngDevMode && assertLView(lView);
    return lView;
  }
  return void 0;
}
function shouldAddViewToDom(tNode, dehydratedView) {
  return !dehydratedView || dehydratedView.firstChild === null || hasInSkipHydrationBlockFlag(tNode);
}
function addLViewToLContainer(lContainer, lView, index, addToDOM = true) {
  const tView = lView[TVIEW];
  insertView(tView, lView, lContainer, index);
  if (addToDOM) {
    const beforeNode = getBeforeNodeForView(index, lContainer);
    const renderer = lView[RENDERER];
    const parentRNode = nativeParentNode(renderer, lContainer[NATIVE]);
    if (parentRNode !== null) {
      addViewToDOM(tView, lContainer[T_HOST], renderer, lView, parentRNode, beforeNode);
    }
  }
  const hydrationInfo = lView[HYDRATION];
  if (hydrationInfo !== null && hydrationInfo.firstChild !== null) {
    hydrationInfo.firstChild = null;
  }
}
function removeLViewFromLContainer(lContainer, index) {
  const lView = detachView(lContainer, index);
  if (lView !== void 0) {
    destroyLView(lView[TVIEW], lView);
  }
  return lView;
}
var _ViewContainerRef = class _ViewContainerRef {
};
_ViewContainerRef.__NG_ELEMENT_ID__ = injectViewContainerRef;
var ViewContainerRef = _ViewContainerRef;
function injectViewContainerRef() {
  const previousTNode = getCurrentTNode();
  return createContainerRef(previousTNode, getLView());
}
var VE_ViewContainerRef = ViewContainerRef;
var R3ViewContainerRef = class ViewContainerRef2 extends VE_ViewContainerRef {
  constructor(_lContainer, _hostTNode, _hostLView) {
    super();
    this._lContainer = _lContainer;
    this._hostTNode = _hostTNode;
    this._hostLView = _hostLView;
  }
  get element() {
    return createElementRef(this._hostTNode, this._hostLView);
  }
  get injector() {
    return new NodeInjector(this._hostTNode, this._hostLView);
  }
  /** @deprecated No replacement */
  get parentInjector() {
    const parentLocation = getParentInjectorLocation(this._hostTNode, this._hostLView);
    if (hasParentInjector(parentLocation)) {
      const parentView = getParentInjectorView(parentLocation, this._hostLView);
      const injectorIndex = getParentInjectorIndex(parentLocation);
      ngDevMode && assertNodeInjector(parentView, injectorIndex);
      const parentTNode = parentView[TVIEW].data[
        injectorIndex + 8
        /* NodeInjectorOffset.TNODE */
      ];
      return new NodeInjector(parentTNode, parentView);
    } else {
      return new NodeInjector(null, this._hostLView);
    }
  }
  clear() {
    while (this.length > 0) {
      this.remove(this.length - 1);
    }
  }
  get(index) {
    const viewRefs = getViewRefs(this._lContainer);
    return viewRefs !== null && viewRefs[index] || null;
  }
  get length() {
    return this._lContainer.length - CONTAINER_HEADER_OFFSET;
  }
  createEmbeddedView(templateRef, context2, indexOrOptions) {
    let index;
    let injector;
    if (typeof indexOrOptions === "number") {
      index = indexOrOptions;
    } else if (indexOrOptions != null) {
      index = indexOrOptions.index;
      injector = indexOrOptions.injector;
    }
    const dehydratedView = findMatchingDehydratedView(this._lContainer, templateRef.ssrId);
    const viewRef = templateRef.createEmbeddedViewImpl(context2 || {}, injector, dehydratedView);
    this.insertImpl(viewRef, index, shouldAddViewToDom(this._hostTNode, dehydratedView));
    return viewRef;
  }
  createComponent(componentFactoryOrType, indexOrOptions, injector, projectableNodes, environmentInjector) {
    const isComponentFactory = componentFactoryOrType && !isType(componentFactoryOrType);
    let index;
    if (isComponentFactory) {
      if (ngDevMode) {
        assertEqual(typeof indexOrOptions !== "object", true, "It looks like Component factory was provided as the first argument and an options object as the second argument. This combination of arguments is incompatible. You can either change the first argument to provide Component type or change the second argument to be a number (representing an index at which to insert the new component's host view into this container)");
      }
      index = indexOrOptions;
    } else {
      if (ngDevMode) {
        assertDefined(getComponentDef(componentFactoryOrType), `Provided Component class doesn't contain Component definition. Please check whether provided class has @Component decorator.`);
        assertEqual(typeof indexOrOptions !== "number", true, "It looks like Component type was provided as the first argument and a number (representing an index at which to insert the new component's host view into this container as the second argument. This combination of arguments is incompatible. Please use an object as the second argument instead.");
      }
      const options = indexOrOptions || {};
      if (ngDevMode && options.environmentInjector && options.ngModuleRef) {
        throwError2(`Cannot pass both environmentInjector and ngModuleRef options to createComponent().`);
      }
      index = options.index;
      injector = options.injector;
      projectableNodes = options.projectableNodes;
      environmentInjector = options.environmentInjector || options.ngModuleRef;
    }
    const componentFactory = isComponentFactory ? componentFactoryOrType : new ComponentFactory(getComponentDef(componentFactoryOrType));
    const contextInjector = injector || this.parentInjector;
    if (!environmentInjector && componentFactory.ngModule == null) {
      const _injector = isComponentFactory ? contextInjector : this.parentInjector;
      const result = _injector.get(EnvironmentInjector, null);
      if (result) {
        environmentInjector = result;
      }
    }
    const componentDef = getComponentDef(componentFactory.componentType ?? {});
    const dehydratedView = findMatchingDehydratedView(this._lContainer, componentDef?.id ?? null);
    const rNode = dehydratedView?.firstChild ?? null;
    const componentRef = componentFactory.create(contextInjector, projectableNodes, rNode, environmentInjector);
    this.insertImpl(componentRef.hostView, index, shouldAddViewToDom(this._hostTNode, dehydratedView));
    return componentRef;
  }
  insert(viewRef, index) {
    return this.insertImpl(viewRef, index, true);
  }
  insertImpl(viewRef, index, addToDOM) {
    const lView = viewRef._lView;
    if (ngDevMode && viewRef.destroyed) {
      throw new Error("Cannot insert a destroyed View in a ViewContainer!");
    }
    if (viewAttachedToContainer(lView)) {
      const prevIdx = this.indexOf(viewRef);
      if (prevIdx !== -1) {
        this.detach(prevIdx);
      } else {
        const prevLContainer = lView[PARENT];
        ngDevMode && assertEqual(isLContainer(prevLContainer), true, "An attached view should have its PARENT point to a container.");
        const prevVCRef = new R3ViewContainerRef(prevLContainer, prevLContainer[T_HOST], prevLContainer[PARENT]);
        prevVCRef.detach(prevVCRef.indexOf(viewRef));
      }
    }
    const adjustedIdx = this._adjustIndex(index);
    const lContainer = this._lContainer;
    addLViewToLContainer(lContainer, lView, adjustedIdx, addToDOM);
    viewRef.attachToViewContainerRef();
    addToArray(getOrCreateViewRefs(lContainer), adjustedIdx, viewRef);
    return viewRef;
  }
  move(viewRef, newIndex) {
    if (ngDevMode && viewRef.destroyed) {
      throw new Error("Cannot move a destroyed View in a ViewContainer!");
    }
    return this.insert(viewRef, newIndex);
  }
  indexOf(viewRef) {
    const viewRefsArr = getViewRefs(this._lContainer);
    return viewRefsArr !== null ? viewRefsArr.indexOf(viewRef) : -1;
  }
  remove(index) {
    const adjustedIdx = this._adjustIndex(index, -1);
    const detachedView = detachView(this._lContainer, adjustedIdx);
    if (detachedView) {
      removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx);
      destroyLView(detachedView[TVIEW], detachedView);
    }
  }
  detach(index) {
    const adjustedIdx = this._adjustIndex(index, -1);
    const view = detachView(this._lContainer, adjustedIdx);
    const wasDetached = view && removeFromArray(getOrCreateViewRefs(this._lContainer), adjustedIdx) != null;
    return wasDetached ? new ViewRef$1(view) : null;
  }
  _adjustIndex(index, shift = 0) {
    if (index == null) {
      return this.length + shift;
    }
    if (ngDevMode) {
      assertGreaterThan(index, -1, `ViewRef index must be positive, got ${index}`);
      assertLessThan(index, this.length + 1 + shift, "index");
    }
    return index;
  }
};
function getViewRefs(lContainer) {
  return lContainer[VIEW_REFS];
}
function getOrCreateViewRefs(lContainer) {
  return lContainer[VIEW_REFS] || (lContainer[VIEW_REFS] = []);
}
function createContainerRef(hostTNode, hostLView) {
  ngDevMode && assertTNodeType(
    hostTNode,
    12 | 3
    /* TNodeType.AnyRNode */
  );
  let lContainer;
  const slotValue = hostLView[hostTNode.index];
  if (isLContainer(slotValue)) {
    lContainer = slotValue;
  } else {
    lContainer = createLContainer(slotValue, hostLView, null, hostTNode);
    hostLView[hostTNode.index] = lContainer;
    addToViewTree(hostLView, lContainer);
  }
  _locateOrCreateAnchorNode(lContainer, hostLView, hostTNode, slotValue);
  return new R3ViewContainerRef(lContainer, hostTNode, hostLView);
}
function insertAnchorNode(hostLView, hostTNode) {
  const renderer = hostLView[RENDERER];
  ngDevMode && ngDevMode.rendererCreateComment++;
  const commentNode = renderer.createComment(ngDevMode ? "container" : "");
  const hostNative = getNativeByTNode(hostTNode, hostLView);
  const parentOfHostNative = nativeParentNode(renderer, hostNative);
  nativeInsertBefore(renderer, parentOfHostNative, commentNode, nativeNextSibling(renderer, hostNative), false);
  return commentNode;
}
var _locateOrCreateAnchorNode = createAnchorNode;
var _populateDehydratedViewsInLContainer = (lContainer, tNode, hostLView) => false;
function populateDehydratedViewsInLContainer(lContainer, tNode, hostLView) {
  return _populateDehydratedViewsInLContainer(lContainer, tNode, hostLView);
}
function createAnchorNode(lContainer, hostLView, hostTNode, slotValue) {
  if (lContainer[NATIVE])
    return;
  let commentNode;
  if (hostTNode.type & 8) {
    commentNode = unwrapRNode(slotValue);
  } else {
    commentNode = insertAnchorNode(hostLView, hostTNode);
  }
  lContainer[NATIVE] = commentNode;
}
function templateFirstCreatePass(index, tView, lView, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex) {
  ngDevMode && assertFirstCreatePass(tView);
  ngDevMode && ngDevMode.firstCreatePass++;
  const tViewConsts = tView.consts;
  const tNode = getOrCreateTNode(tView, index, 4, tagName || null, getConstant(tViewConsts, attrsIndex));
  resolveDirectives(tView, lView, tNode, getConstant(tViewConsts, localRefsIndex));
  registerPostOrderHooks(tView, tNode);
  const embeddedTView = tNode.tView = createTView(
    2,
    tNode,
    templateFn,
    decls,
    vars,
    tView.directiveRegistry,
    tView.pipeRegistry,
    null,
    tView.schemas,
    tViewConsts,
    null
    /* ssrId */
  );
  if (tView.queries !== null) {
    tView.queries.template(tView, tNode);
    embeddedTView.queries = tView.queries.embeddedTView(tNode);
  }
  return tNode;
}
function \u0275\u0275template(index, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex, localRefExtractor) {
  const lView = getLView();
  const tView = getTView();
  const adjustedIndex = index + HEADER_OFFSET;
  const tNode = tView.firstCreatePass ? templateFirstCreatePass(adjustedIndex, tView, lView, templateFn, decls, vars, tagName, attrsIndex, localRefsIndex) : tView.data[adjustedIndex];
  setCurrentTNode(tNode, false);
  const comment = _locateOrCreateContainerAnchor(tView, lView, tNode, index);
  if (wasLastNodeCreated()) {
    appendChild(tView, lView, comment, tNode);
  }
  attachPatchData(comment, lView);
  const lContainer = createLContainer(comment, lView, comment, tNode);
  lView[adjustedIndex] = lContainer;
  addToViewTree(lView, lContainer);
  populateDehydratedViewsInLContainer(lContainer, tNode, lView);
  if (isDirectiveHost(tNode)) {
    createDirectivesInstances(tView, lView, tNode);
  }
  if (localRefsIndex != null) {
    saveResolvedLocalsInData(lView, tNode, localRefExtractor);
  }
  return \u0275\u0275template;
}
var _locateOrCreateContainerAnchor = createContainerAnchorImpl;
function createContainerAnchorImpl(tView, lView, tNode, index) {
  lastNodeWasCreated(true);
  return lView[RENDERER].createComment(ngDevMode ? "container" : "");
}
function \u0275\u0275conditional(containerIndex, matchingTemplateIndex, value) {
  performanceMarkFeature("NgControlFlow");
  const hostLView = getLView();
  const bindingIndex = nextBindingIndex();
  const lContainer = getLContainer(hostLView, HEADER_OFFSET + containerIndex);
  const viewInContainerIdx = 0;
  if (bindingUpdated(hostLView, bindingIndex, matchingTemplateIndex)) {
    const prevConsumer = setActiveConsumer(null);
    try {
      removeLViewFromLContainer(lContainer, viewInContainerIdx);
      if (matchingTemplateIndex !== -1) {
        const templateTNode = getExistingTNode(hostLView[TVIEW], HEADER_OFFSET + matchingTemplateIndex);
        const dehydratedView = findMatchingDehydratedView(lContainer, templateTNode.tView.ssrId);
        const embeddedLView = createAndRenderEmbeddedLView(hostLView, templateTNode, value, { dehydratedView });
        addLViewToLContainer(lContainer, embeddedLView, viewInContainerIdx, shouldAddViewToDom(templateTNode, dehydratedView));
      }
    } finally {
      setActiveConsumer(prevConsumer);
    }
  } else {
    const lView = getLViewFromLContainer(lContainer, viewInContainerIdx);
    if (lView !== void 0) {
      lView[CONTEXT] = value;
    }
  }
}
var RepeaterContext = class {
  constructor(lContainer, $implicit, $index) {
    this.lContainer = lContainer;
    this.$implicit = $implicit;
    this.$index = $index;
  }
  get $count() {
    return this.lContainer.length - CONTAINER_HEADER_OFFSET;
  }
};
function \u0275\u0275repeaterTrackByIndex(index) {
  return index;
}
function \u0275\u0275repeaterTrackByIdentity(_, value) {
  return value;
}
var RepeaterMetadata = class {
  constructor(hasEmptyBlock, trackByFn, liveCollection) {
    this.hasEmptyBlock = hasEmptyBlock;
    this.trackByFn = trackByFn;
    this.liveCollection = liveCollection;
  }
};
function \u0275\u0275repeaterCreate(index, templateFn, decls, vars, tagName, attrsIndex, trackByFn, trackByUsesComponentInstance, emptyTemplateFn, emptyDecls, emptyVars) {
  performanceMarkFeature("NgControlFlow");
  const hasEmptyBlock = emptyTemplateFn !== void 0;
  const hostLView = getLView();
  const boundTrackBy = trackByUsesComponentInstance ? (
    // We only want to bind when necessary, because it produces a
    // new function. For pure functions it's not necessary.
    trackByFn.bind(hostLView[DECLARATION_COMPONENT_VIEW][CONTEXT])
  ) : trackByFn;
  const metadata = new RepeaterMetadata(hasEmptyBlock, boundTrackBy);
  hostLView[HEADER_OFFSET + index] = metadata;
  \u0275\u0275template(index + 1, templateFn, decls, vars, tagName, attrsIndex);
  if (hasEmptyBlock) {
    ngDevMode && assertDefined(emptyDecls, "Missing number of declarations for the empty repeater block.");
    ngDevMode && assertDefined(emptyVars, "Missing number of bindings for the empty repeater block.");
    \u0275\u0275template(index + 2, emptyTemplateFn, emptyDecls, emptyVars);
  }
}
var LiveCollectionLContainerImpl = class extends LiveCollection {
  constructor(lContainer, hostLView, templateTNode) {
    super();
    this.lContainer = lContainer;
    this.hostLView = hostLView;
    this.templateTNode = templateTNode;
    this.needsIndexUpdate = false;
  }
  get length() {
    return this.lContainer.length - CONTAINER_HEADER_OFFSET;
  }
  at(index) {
    return this.getLView(index)[CONTEXT].$implicit;
  }
  attach(index, lView) {
    const dehydratedView = lView[HYDRATION];
    this.needsIndexUpdate ||= index !== this.length;
    addLViewToLContainer(this.lContainer, lView, index, shouldAddViewToDom(this.templateTNode, dehydratedView));
  }
  detach(index) {
    this.needsIndexUpdate ||= index !== this.length - 1;
    return detachExistingView(this.lContainer, index);
  }
  create(index, value) {
    const dehydratedView = findMatchingDehydratedView(this.lContainer, this.templateTNode.tView.ssrId);
    const embeddedLView = createAndRenderEmbeddedLView(this.hostLView, this.templateTNode, new RepeaterContext(this.lContainer, value, index), { dehydratedView });
    return embeddedLView;
  }
  destroy(lView) {
    destroyLView(lView[TVIEW], lView);
  }
  updateValue(index, value) {
    this.getLView(index)[CONTEXT].$implicit = value;
  }
  reset() {
    this.needsIndexUpdate = false;
  }
  updateIndexes() {
    if (this.needsIndexUpdate) {
      for (let i = 0; i < this.length; i++) {
        this.getLView(i)[CONTEXT].$index = i;
      }
    }
  }
  getLView(index) {
    return getExistingLViewFromLContainer(this.lContainer, index);
  }
};
function \u0275\u0275repeater(collection) {
  const prevConsumer = setActiveConsumer(null);
  const metadataSlotIdx = getSelectedIndex();
  try {
    const hostLView = getLView();
    const hostTView = hostLView[TVIEW];
    const metadata = hostLView[metadataSlotIdx];
    if (metadata.liveCollection === void 0) {
      const containerIndex = metadataSlotIdx + 1;
      const lContainer = getLContainer(hostLView, containerIndex);
      const itemTemplateTNode = getExistingTNode(hostTView, containerIndex);
      metadata.liveCollection = new LiveCollectionLContainerImpl(lContainer, hostLView, itemTemplateTNode);
    } else {
      metadata.liveCollection.reset();
    }
    const liveCollection = metadata.liveCollection;
    reconcile(liveCollection, collection, metadata.trackByFn);
    liveCollection.updateIndexes();
    if (metadata.hasEmptyBlock) {
      const bindingIndex = nextBindingIndex();
      const isCollectionEmpty = liveCollection.length === 0;
      if (bindingUpdated(hostLView, bindingIndex, isCollectionEmpty)) {
        const emptyTemplateIndex = metadataSlotIdx + 2;
        const lContainerForEmpty = getLContainer(hostLView, emptyTemplateIndex);
        if (isCollectionEmpty) {
          const emptyTemplateTNode = getExistingTNode(hostTView, emptyTemplateIndex);
          const dehydratedView = findMatchingDehydratedView(lContainerForEmpty, emptyTemplateTNode.tView.ssrId);
          const embeddedLView = createAndRenderEmbeddedLView(hostLView, emptyTemplateTNode, void 0, { dehydratedView });
          addLViewToLContainer(lContainerForEmpty, embeddedLView, 0, shouldAddViewToDom(emptyTemplateTNode, dehydratedView));
        } else {
          removeLViewFromLContainer(lContainerForEmpty, 0);
        }
      }
    }
  } finally {
    setActiveConsumer(prevConsumer);
  }
}
function getLContainer(lView, index) {
  const lContainer = lView[index];
  ngDevMode && assertLContainer(lContainer);
  return lContainer;
}
function detachExistingView(lContainer, index) {
  const existingLView = detachView(lContainer, index);
  ngDevMode && assertLView(existingLView);
  return existingLView;
}
function getExistingLViewFromLContainer(lContainer, index) {
  const existingLView = getLViewFromLContainer(lContainer, index);
  ngDevMode && assertLView(existingLView);
  return existingLView;
}
function getExistingTNode(tView, index) {
  const tNode = getTNode(tView, index);
  ngDevMode && assertTNode(tNode);
  return tNode;
}
var DeferDependenciesLoadingState;
(function(DeferDependenciesLoadingState2) {
  DeferDependenciesLoadingState2[DeferDependenciesLoadingState2["NOT_STARTED"] = 0] = "NOT_STARTED";
  DeferDependenciesLoadingState2[DeferDependenciesLoadingState2["IN_PROGRESS"] = 1] = "IN_PROGRESS";
  DeferDependenciesLoadingState2[DeferDependenciesLoadingState2["COMPLETE"] = 2] = "COMPLETE";
  DeferDependenciesLoadingState2[DeferDependenciesLoadingState2["FAILED"] = 3] = "FAILED";
})(DeferDependenciesLoadingState || (DeferDependenciesLoadingState = {}));
var MINIMUM_SLOT = 0;
var LOADING_AFTER_SLOT = 1;
var DeferBlockState;
(function(DeferBlockState2) {
  DeferBlockState2[DeferBlockState2["Placeholder"] = 0] = "Placeholder";
  DeferBlockState2[DeferBlockState2["Loading"] = 1] = "Loading";
  DeferBlockState2[DeferBlockState2["Complete"] = 2] = "Complete";
  DeferBlockState2[DeferBlockState2["Error"] = 3] = "Error";
})(DeferBlockState || (DeferBlockState = {}));
var DeferBlockInternalState;
(function(DeferBlockInternalState2) {
  DeferBlockInternalState2[DeferBlockInternalState2["Initial"] = -1] = "Initial";
})(DeferBlockInternalState || (DeferBlockInternalState = {}));
var NEXT_DEFER_BLOCK_STATE = 0;
var DEFER_BLOCK_STATE = 1;
var STATE_IS_FROZEN_UNTIL = 2;
var LOADING_AFTER_CLEANUP_FN = 3;
var TRIGGER_CLEANUP_FNS = 4;
var PREFETCH_TRIGGER_CLEANUP_FNS = 5;
var DeferBlockBehavior;
(function(DeferBlockBehavior2) {
  DeferBlockBehavior2[DeferBlockBehavior2["Manual"] = 0] = "Manual";
  DeferBlockBehavior2[DeferBlockBehavior2["Playthrough"] = 1] = "Playthrough";
})(DeferBlockBehavior || (DeferBlockBehavior = {}));
function storeTriggerCleanupFn(type, lDetails, cleanupFn) {
  const key = type === 1 ? PREFETCH_TRIGGER_CLEANUP_FNS : TRIGGER_CLEANUP_FNS;
  if (lDetails[key] === null) {
    lDetails[key] = [];
  }
  lDetails[key].push(cleanupFn);
}
function invokeTriggerCleanupFns(type, lDetails) {
  const key = type === 1 ? PREFETCH_TRIGGER_CLEANUP_FNS : TRIGGER_CLEANUP_FNS;
  const cleanupFns = lDetails[key];
  if (cleanupFns !== null) {
    for (const cleanupFn of cleanupFns) {
      cleanupFn();
    }
    lDetails[key] = null;
  }
}
function invokeAllTriggerCleanupFns(lDetails) {
  invokeTriggerCleanupFns(1, lDetails);
  invokeTriggerCleanupFns(0, lDetails);
}
function getDeferBlockDataIndex(deferBlockIndex) {
  return deferBlockIndex + 1;
}
function getLDeferBlockDetails(lView, tNode) {
  const tView = lView[TVIEW];
  const slotIndex = getDeferBlockDataIndex(tNode.index);
  ngDevMode && assertIndexInDeclRange(tView, slotIndex);
  return lView[slotIndex];
}
function setLDeferBlockDetails(lView, deferBlockIndex, lDetails) {
  const tView = lView[TVIEW];
  const slotIndex = getDeferBlockDataIndex(deferBlockIndex);
  ngDevMode && assertIndexInDeclRange(tView, slotIndex);
  lView[slotIndex] = lDetails;
}
function getTDeferBlockDetails(tView, tNode) {
  const slotIndex = getDeferBlockDataIndex(tNode.index);
  ngDevMode && assertIndexInDeclRange(tView, slotIndex);
  return tView.data[slotIndex];
}
function setTDeferBlockDetails(tView, deferBlockIndex, deferBlockConfig) {
  const slotIndex = getDeferBlockDataIndex(deferBlockIndex);
  ngDevMode && assertIndexInDeclRange(tView, slotIndex);
  tView.data[slotIndex] = deferBlockConfig;
}
function getTemplateIndexForState(newState, hostLView, tNode) {
  const tView = hostLView[TVIEW];
  const tDetails = getTDeferBlockDetails(tView, tNode);
  switch (newState) {
    case DeferBlockState.Complete:
      return tDetails.primaryTmplIndex;
    case DeferBlockState.Loading:
      return tDetails.loadingTmplIndex;
    case DeferBlockState.Error:
      return tDetails.errorTmplIndex;
    case DeferBlockState.Placeholder:
      return tDetails.placeholderTmplIndex;
    default:
      ngDevMode && throwError2(`Unexpected defer block state: ${newState}`);
      return null;
  }
}
function getMinimumDurationForState(tDetails, currentState) {
  if (currentState === DeferBlockState.Placeholder) {
    return tDetails.placeholderBlockConfig?.[MINIMUM_SLOT] ?? null;
  } else if (currentState === DeferBlockState.Loading) {
    return tDetails.loadingBlockConfig?.[MINIMUM_SLOT] ?? null;
  }
  return null;
}
function getLoadingBlockAfter(tDetails) {
  return tDetails.loadingBlockConfig?.[LOADING_AFTER_SLOT] ?? null;
}
function addDepsToRegistry(currentDeps, newDeps) {
  if (!currentDeps || currentDeps.length === 0) {
    return newDeps;
  }
  const currentDepSet = new Set(currentDeps);
  for (const dep of newDeps) {
    currentDepSet.add(dep);
  }
  return currentDeps.length === currentDepSet.size ? currentDeps : Array.from(currentDepSet);
}
function getPrimaryBlockTNode(tView, tDetails) {
  const adjustedIndex = tDetails.primaryTmplIndex + HEADER_OFFSET;
  return getTNode(tView, adjustedIndex);
}
function assertDeferredDependenciesLoaded(tDetails) {
  assertEqual(tDetails.loadingState, DeferDependenciesLoadingState.COMPLETE, "Expecting all deferred dependencies to be loaded.");
}
var eventListenerOptions = {
  passive: true,
  capture: true
};
var hoverTriggers = /* @__PURE__ */ new WeakMap();
var interactionTriggers = /* @__PURE__ */ new WeakMap();
var viewportTriggers = /* @__PURE__ */ new WeakMap();
var interactionEventNames = ["click", "keydown"];
var hoverEventNames = ["mouseenter", "focusin"];
var intersectionObserver = null;
var observedViewportElements = 0;
var DeferEventEntry = class {
  constructor() {
    this.callbacks = /* @__PURE__ */ new Set();
    this.listener = () => {
      for (const callback of this.callbacks) {
        callback();
      }
    };
  }
};
function onInteraction(trigger2, callback) {
  let entry = interactionTriggers.get(trigger2);
  if (!entry) {
    entry = new DeferEventEntry();
    interactionTriggers.set(trigger2, entry);
    ngDevMode && NgZone.assertInAngularZone();
    for (const name of interactionEventNames) {
      trigger2.addEventListener(name, entry.listener, eventListenerOptions);
    }
  }
  entry.callbacks.add(callback);
  return () => {
    const { callbacks, listener } = entry;
    callbacks.delete(callback);
    if (callbacks.size === 0) {
      interactionTriggers.delete(trigger2);
      for (const name of interactionEventNames) {
        trigger2.removeEventListener(name, listener, eventListenerOptions);
      }
    }
  };
}
function onHover(trigger2, callback) {
  let entry = hoverTriggers.get(trigger2);
  if (!entry) {
    entry = new DeferEventEntry();
    hoverTriggers.set(trigger2, entry);
    ngDevMode && NgZone.assertInAngularZone();
    for (const name of hoverEventNames) {
      trigger2.addEventListener(name, entry.listener, eventListenerOptions);
    }
  }
  entry.callbacks.add(callback);
  return () => {
    const { callbacks, listener } = entry;
    callbacks.delete(callback);
    if (callbacks.size === 0) {
      for (const name of hoverEventNames) {
        trigger2.removeEventListener(name, listener, eventListenerOptions);
      }
      hoverTriggers.delete(trigger2);
    }
  };
}
function onViewport(trigger2, callback, injector) {
  const ngZone = injector.get(NgZone);
  let entry = viewportTriggers.get(trigger2);
  intersectionObserver = intersectionObserver || ngZone.runOutsideAngular(() => {
    return new IntersectionObserver((entries) => {
      for (const current of entries) {
        if (current.isIntersecting && viewportTriggers.has(current.target)) {
          ngZone.run(viewportTriggers.get(current.target).listener);
        }
      }
    });
  });
  if (!entry) {
    entry = new DeferEventEntry();
    ngZone.runOutsideAngular(() => intersectionObserver.observe(trigger2));
    viewportTriggers.set(trigger2, entry);
    observedViewportElements++;
  }
  entry.callbacks.add(callback);
  return () => {
    if (!viewportTriggers.has(trigger2)) {
      return;
    }
    entry.callbacks.delete(callback);
    if (entry.callbacks.size === 0) {
      intersectionObserver?.unobserve(trigger2);
      viewportTriggers.delete(trigger2);
      observedViewportElements--;
    }
    if (observedViewportElements === 0) {
      intersectionObserver?.disconnect();
      intersectionObserver = null;
    }
  };
}
function getTriggerLView(deferredHostLView, deferredTNode, walkUpTimes) {
  if (walkUpTimes == null) {
    return deferredHostLView;
  }
  if (walkUpTimes >= 0) {
    return walkUpViews(walkUpTimes, deferredHostLView);
  }
  const deferredContainer = deferredHostLView[deferredTNode.index];
  ngDevMode && assertLContainer(deferredContainer);
  const triggerLView = deferredContainer[CONTAINER_HEADER_OFFSET] ?? null;
  if (ngDevMode && triggerLView !== null) {
    const lDetails = getLDeferBlockDetails(deferredHostLView, deferredTNode);
    const renderedState = lDetails[DEFER_BLOCK_STATE];
    assertEqual(renderedState, DeferBlockState.Placeholder, "Expected a placeholder to be rendered in this defer block.");
    assertLView(triggerLView);
  }
  return triggerLView;
}
function getTriggerElement(triggerLView, triggerIndex) {
  const element = getNativeByIndex(HEADER_OFFSET + triggerIndex, triggerLView);
  ngDevMode && assertElement(element);
  return element;
}
function registerDomTrigger(initialLView, tNode, triggerIndex, walkUpTimes, registerFn, callback, type) {
  const injector = initialLView[INJECTOR$1];
  function pollDomTrigger() {
    if (isDestroyed(initialLView)) {
      return;
    }
    const lDetails = getLDeferBlockDetails(initialLView, tNode);
    const renderedState = lDetails[DEFER_BLOCK_STATE];
    if (renderedState !== DeferBlockInternalState.Initial && renderedState !== DeferBlockState.Placeholder) {
      return;
    }
    const triggerLView = getTriggerLView(initialLView, tNode, walkUpTimes);
    if (!triggerLView) {
      internalAfterNextRender(pollDomTrigger, { injector });
      return;
    }
    if (isDestroyed(triggerLView)) {
      return;
    }
    const element = getTriggerElement(triggerLView, triggerIndex);
    const cleanup = registerFn(element, () => {
      if (initialLView !== triggerLView) {
        removeLViewOnDestroy(triggerLView, cleanup);
      }
      callback();
    }, injector);
    if (initialLView !== triggerLView) {
      storeLViewOnDestroy(triggerLView, cleanup);
    }
    storeTriggerCleanupFn(type, lDetails, cleanup);
  }
  internalAfterNextRender(pollDomTrigger, { injector });
}
function onIdle(callback, lView) {
  const injector = lView[INJECTOR$1];
  const scheduler = injector.get(IdleScheduler);
  const cleanupFn = () => scheduler.remove(callback);
  scheduler.add(callback);
  return cleanupFn;
}
var _requestIdleCallback = () => typeof requestIdleCallback !== "undefined" ? requestIdleCallback : setTimeout;
var _cancelIdleCallback = () => typeof requestIdleCallback !== "undefined" ? cancelIdleCallback : clearTimeout;
var _IdleScheduler = class _IdleScheduler {
  constructor() {
    this.executingCallbacks = false;
    this.idleId = null;
    this.current = /* @__PURE__ */ new Set();
    this.deferred = /* @__PURE__ */ new Set();
    this.ngZone = inject(NgZone);
    this.requestIdleCallbackFn = _requestIdleCallback().bind(globalThis);
    this.cancelIdleCallbackFn = _cancelIdleCallback().bind(globalThis);
  }
  add(callback) {
    const target = this.executingCallbacks ? this.deferred : this.current;
    target.add(callback);
    if (this.idleId === null) {
      this.scheduleIdleCallback();
    }
  }
  remove(callback) {
    const { current, deferred } = this;
    current.delete(callback);
    deferred.delete(callback);
    if (current.size === 0 && deferred.size === 0) {
      this.cancelIdleCallback();
    }
  }
  scheduleIdleCallback() {
    const callback = () => {
      this.cancelIdleCallback();
      this.executingCallbacks = true;
      for (const callback2 of this.current) {
        callback2();
      }
      this.current.clear();
      this.executingCallbacks = false;
      if (this.deferred.size > 0) {
        for (const callback2 of this.deferred) {
          this.current.add(callback2);
        }
        this.deferred.clear();
        this.scheduleIdleCallback();
      }
    };
    this.idleId = this.requestIdleCallbackFn(() => this.ngZone.run(callback));
  }
  cancelIdleCallback() {
    if (this.idleId !== null) {
      this.cancelIdleCallbackFn(this.idleId);
      this.idleId = null;
    }
  }
  ngOnDestroy() {
    this.cancelIdleCallback();
    this.current.clear();
    this.deferred.clear();
  }
};
_IdleScheduler.\u0275prov = \u0275\u0275defineInjectable({
  token: _IdleScheduler,
  providedIn: "root",
  factory: () => new _IdleScheduler()
});
var IdleScheduler = _IdleScheduler;
function onTimer(delay) {
  return (callback, lView) => scheduleTimerTrigger(delay, callback, lView);
}
function scheduleTimerTrigger(delay, callback, lView) {
  const injector = lView[INJECTOR$1];
  const scheduler = injector.get(TimerScheduler);
  const cleanupFn = () => scheduler.remove(callback);
  scheduler.add(delay, callback);
  return cleanupFn;
}
var _TimerScheduler = class _TimerScheduler {
  constructor() {
    this.executingCallbacks = false;
    this.timeoutId = null;
    this.invokeTimerAt = null;
    this.current = [];
    this.deferred = [];
  }
  add(delay, callback) {
    const target = this.executingCallbacks ? this.deferred : this.current;
    this.addToQueue(target, Date.now() + delay, callback);
    this.scheduleTimer();
  }
  remove(callback) {
    const { current, deferred } = this;
    const callbackIndex = this.removeFromQueue(current, callback);
    if (callbackIndex === -1) {
      this.removeFromQueue(deferred, callback);
    }
    if (current.length === 0 && deferred.length === 0) {
      this.clearTimeout();
    }
  }
  addToQueue(target, invokeAt, callback) {
    let insertAtIndex = target.length;
    for (let i = 0; i < target.length; i += 2) {
      const invokeQueuedCallbackAt = target[i];
      if (invokeQueuedCallbackAt > invokeAt) {
        insertAtIndex = i;
        break;
      }
    }
    arrayInsert2(target, insertAtIndex, invokeAt, callback);
  }
  removeFromQueue(target, callback) {
    let index = -1;
    for (let i = 0; i < target.length; i += 2) {
      const queuedCallback = target[i + 1];
      if (queuedCallback === callback) {
        index = i;
        break;
      }
    }
    if (index > -1) {
      arraySplice(target, index, 2);
    }
    return index;
  }
  scheduleTimer() {
    const callback = () => {
      this.clearTimeout();
      this.executingCallbacks = true;
      const current = [...this.current];
      const now = Date.now();
      for (let i = 0; i < current.length; i += 2) {
        const invokeAt = current[i];
        const callback2 = current[i + 1];
        if (invokeAt <= now) {
          callback2();
        } else {
          break;
        }
      }
      let lastCallbackIndex = -1;
      for (let i = 0; i < this.current.length; i += 2) {
        const invokeAt = this.current[i];
        if (invokeAt <= now) {
          lastCallbackIndex = i + 1;
        } else {
          break;
        }
      }
      if (lastCallbackIndex >= 0) {
        arraySplice(this.current, 0, lastCallbackIndex + 1);
      }
      this.executingCallbacks = false;
      if (this.deferred.length > 0) {
        for (let i = 0; i < this.deferred.length; i += 2) {
          const invokeAt = this.deferred[i];
          const callback2 = this.deferred[i + 1];
          this.addToQueue(this.current, invokeAt, callback2);
        }
        this.deferred.length = 0;
      }
      this.scheduleTimer();
    };
    const FRAME_DURATION_MS = 16;
    if (this.current.length > 0) {
      const now = Date.now();
      const invokeAt = this.current[0];
      if (this.timeoutId === null || // Reschedule a timer in case a queue contains an item with
      // an earlier timestamp and the delta is more than an average
      // frame duration.
      this.invokeTimerAt && this.invokeTimerAt - invokeAt > FRAME_DURATION_MS) {
        this.clearTimeout();
        const timeout = Math.max(invokeAt - now, FRAME_DURATION_MS);
        this.invokeTimerAt = invokeAt;
        this.timeoutId = setTimeout(callback, timeout);
      }
    }
  }
  clearTimeout() {
    if (this.timeoutId !== null) {
      clearTimeout(this.timeoutId);
      this.timeoutId = null;
    }
  }
  ngOnDestroy() {
    this.clearTimeout();
    this.current.length = 0;
    this.deferred.length = 0;
  }
};
_TimerScheduler.\u0275prov = \u0275\u0275defineInjectable({
  token: _TimerScheduler,
  providedIn: "root",
  factory: () => new _TimerScheduler()
});
var TimerScheduler = _TimerScheduler;
var DEFER_BLOCK_DEPENDENCY_INTERCEPTOR = new InjectionToken("DEFER_BLOCK_DEPENDENCY_INTERCEPTOR");
var DEFER_BLOCK_CONFIG = new InjectionToken(ngDevMode ? "DEFER_BLOCK_CONFIG" : "");
function shouldTriggerDeferBlock(injector) {
  const config2 = injector.get(DEFER_BLOCK_CONFIG, null, { optional: true });
  if (config2?.behavior === DeferBlockBehavior.Manual) {
    return false;
  }
  return isPlatformBrowser(injector);
}
var applyDeferBlockStateWithSchedulingImpl = null;
function \u0275\u0275deferEnableTimerScheduling(tView, tDetails, placeholderConfigIndex, loadingConfigIndex) {
  const tViewConsts = tView.consts;
  if (placeholderConfigIndex != null) {
    tDetails.placeholderBlockConfig = getConstant(tViewConsts, placeholderConfigIndex);
  }
  if (loadingConfigIndex != null) {
    tDetails.loadingBlockConfig = getConstant(tViewConsts, loadingConfigIndex);
  }
  if (applyDeferBlockStateWithSchedulingImpl === null) {
    applyDeferBlockStateWithSchedulingImpl = applyDeferBlockStateWithScheduling;
  }
}
function \u0275\u0275defer(index, primaryTmplIndex, dependencyResolverFn, loadingTmplIndex, placeholderTmplIndex, errorTmplIndex, loadingConfigIndex, placeholderConfigIndex, enableTimerScheduling) {
  const lView = getLView();
  const tView = getTView();
  const adjustedIndex = index + HEADER_OFFSET;
  \u0275\u0275template(index, null, 0, 0);
  if (tView.firstCreatePass) {
    performanceMarkFeature("NgDefer");
    const tDetails = {
      primaryTmplIndex,
      loadingTmplIndex: loadingTmplIndex ?? null,
      placeholderTmplIndex: placeholderTmplIndex ?? null,
      errorTmplIndex: errorTmplIndex ?? null,
      placeholderBlockConfig: null,
      loadingBlockConfig: null,
      dependencyResolverFn: dependencyResolverFn ?? null,
      loadingState: DeferDependenciesLoadingState.NOT_STARTED,
      loadingPromise: null
    };
    enableTimerScheduling?.(tView, tDetails, placeholderConfigIndex, loadingConfigIndex);
    setTDeferBlockDetails(tView, adjustedIndex, tDetails);
  }
  const tNode = getCurrentTNode();
  const lContainer = lView[adjustedIndex];
  populateDehydratedViewsInLContainer(lContainer, tNode, lView);
  const lDetails = [
    null,
    DeferBlockInternalState.Initial,
    null,
    null,
    null,
    null
    // PREFETCH_TRIGGER_CLEANUP_FNS
  ];
  setLDeferBlockDetails(lView, adjustedIndex, lDetails);
  const cleanupTriggersFn = () => invokeAllTriggerCleanupFns(lDetails);
  storeTriggerCleanupFn(0, lDetails, () => removeLViewOnDestroy(lView, cleanupTriggersFn));
  storeLViewOnDestroy(lView, cleanupTriggersFn);
}
function \u0275\u0275deferWhen(rawValue) {
  const lView = getLView();
  const bindingIndex = nextBindingIndex();
  if (bindingUpdated(lView, bindingIndex, rawValue)) {
    const prevConsumer = setActiveConsumer(null);
    try {
      const value = Boolean(rawValue);
      const tNode = getSelectedTNode();
      const lDetails = getLDeferBlockDetails(lView, tNode);
      const renderedState = lDetails[DEFER_BLOCK_STATE];
      if (value === false && renderedState === DeferBlockInternalState.Initial) {
        renderPlaceholder(lView, tNode);
      } else if (value === true && (renderedState === DeferBlockInternalState.Initial || renderedState === DeferBlockState.Placeholder)) {
        triggerDeferBlock(lView, tNode);
      }
    } finally {
      setActiveConsumer(prevConsumer);
    }
  }
}
function \u0275\u0275deferPrefetchWhen(rawValue) {
  const lView = getLView();
  const bindingIndex = nextBindingIndex();
  if (bindingUpdated(lView, bindingIndex, rawValue)) {
    const prevConsumer = setActiveConsumer(null);
    try {
      const value = Boolean(rawValue);
      const tView = lView[TVIEW];
      const tNode = getSelectedTNode();
      const tDetails = getTDeferBlockDetails(tView, tNode);
      if (value === true && tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {
        triggerPrefetching(tDetails, lView, tNode);
      }
    } finally {
      setActiveConsumer(prevConsumer);
    }
  }
}
function \u0275\u0275deferOnIdle() {
  scheduleDelayedTrigger(onIdle);
}
function \u0275\u0275deferPrefetchOnIdle() {
  scheduleDelayedPrefetching(onIdle);
}
function \u0275\u0275deferOnImmediate() {
  const lView = getLView();
  const tNode = getCurrentTNode();
  const tView = lView[TVIEW];
  const tDetails = getTDeferBlockDetails(tView, tNode);
  if (tDetails.loadingTmplIndex === null) {
    renderPlaceholder(lView, tNode);
  }
  triggerDeferBlock(lView, tNode);
}
function \u0275\u0275deferPrefetchOnImmediate() {
  const lView = getLView();
  const tNode = getCurrentTNode();
  const tView = lView[TVIEW];
  const tDetails = getTDeferBlockDetails(tView, tNode);
  if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {
    triggerResourceLoading(tDetails, lView, tNode);
  }
}
function \u0275\u0275deferOnTimer(delay) {
  scheduleDelayedTrigger(onTimer(delay));
}
function \u0275\u0275deferPrefetchOnTimer(delay) {
  scheduleDelayedPrefetching(onTimer(delay));
}
function \u0275\u0275deferOnHover(triggerIndex, walkUpTimes) {
  const lView = getLView();
  const tNode = getCurrentTNode();
  renderPlaceholder(lView, tNode);
  registerDomTrigger(
    lView,
    tNode,
    triggerIndex,
    walkUpTimes,
    onHover,
    () => triggerDeferBlock(lView, tNode),
    0
    /* TriggerType.Regular */
  );
}
function \u0275\u0275deferPrefetchOnHover(triggerIndex, walkUpTimes) {
  const lView = getLView();
  const tNode = getCurrentTNode();
  const tView = lView[TVIEW];
  const tDetails = getTDeferBlockDetails(tView, tNode);
  if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {
    registerDomTrigger(
      lView,
      tNode,
      triggerIndex,
      walkUpTimes,
      onHover,
      () => triggerPrefetching(tDetails, lView, tNode),
      1
      /* TriggerType.Prefetch */
    );
  }
}
function \u0275\u0275deferOnInteraction(triggerIndex, walkUpTimes) {
  const lView = getLView();
  const tNode = getCurrentTNode();
  renderPlaceholder(lView, tNode);
  registerDomTrigger(
    lView,
    tNode,
    triggerIndex,
    walkUpTimes,
    onInteraction,
    () => triggerDeferBlock(lView, tNode),
    0
    /* TriggerType.Regular */
  );
}
function \u0275\u0275deferPrefetchOnInteraction(triggerIndex, walkUpTimes) {
  const lView = getLView();
  const tNode = getCurrentTNode();
  const tView = lView[TVIEW];
  const tDetails = getTDeferBlockDetails(tView, tNode);
  if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {
    registerDomTrigger(
      lView,
      tNode,
      triggerIndex,
      walkUpTimes,
      onInteraction,
      () => triggerPrefetching(tDetails, lView, tNode),
      1
      /* TriggerType.Prefetch */
    );
  }
}
function \u0275\u0275deferOnViewport(triggerIndex, walkUpTimes) {
  const lView = getLView();
  const tNode = getCurrentTNode();
  renderPlaceholder(lView, tNode);
  registerDomTrigger(
    lView,
    tNode,
    triggerIndex,
    walkUpTimes,
    onViewport,
    () => triggerDeferBlock(lView, tNode),
    0
    /* TriggerType.Regular */
  );
}
function \u0275\u0275deferPrefetchOnViewport(triggerIndex, walkUpTimes) {
  const lView = getLView();
  const tNode = getCurrentTNode();
  const tView = lView[TVIEW];
  const tDetails = getTDeferBlockDetails(tView, tNode);
  if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {
    registerDomTrigger(
      lView,
      tNode,
      triggerIndex,
      walkUpTimes,
      onViewport,
      () => triggerPrefetching(tDetails, lView, tNode),
      1
      /* TriggerType.Prefetch */
    );
  }
}
function scheduleDelayedTrigger(scheduleFn) {
  const lView = getLView();
  const tNode = getCurrentTNode();
  renderPlaceholder(lView, tNode);
  const cleanupFn = scheduleFn(() => triggerDeferBlock(lView, tNode), lView);
  const lDetails = getLDeferBlockDetails(lView, tNode);
  storeTriggerCleanupFn(0, lDetails, cleanupFn);
}
function scheduleDelayedPrefetching(scheduleFn) {
  const lView = getLView();
  const tNode = getCurrentTNode();
  const tView = lView[TVIEW];
  const tDetails = getTDeferBlockDetails(tView, tNode);
  if (tDetails.loadingState === DeferDependenciesLoadingState.NOT_STARTED) {
    const lDetails = getLDeferBlockDetails(lView, tNode);
    const prefetch = () => triggerPrefetching(tDetails, lView, tNode);
    const cleanupFn = scheduleFn(prefetch, lView);
    storeTriggerCleanupFn(1, lDetails, cleanupFn);
  }
}
function renderDeferBlockState(newState, tNode, lContainer, skipTimerScheduling = false) {
  const hostLView = lContainer[PARENT];
  const hostTView = hostLView[TVIEW];
  if (isDestroyed(hostLView))
    return;
  ngDevMode && assertTNodeForLView(tNode, hostLView);
  const lDetails = getLDeferBlockDetails(hostLView, tNode);
  ngDevMode && assertDefined(lDetails, "Expected a defer block state defined");
  const currentState = lDetails[DEFER_BLOCK_STATE];
  if (isValidStateChange(currentState, newState) && isValidStateChange(lDetails[NEXT_DEFER_BLOCK_STATE] ?? -1, newState)) {
    const tDetails = getTDeferBlockDetails(hostTView, tNode);
    const needsScheduling = !skipTimerScheduling && (getLoadingBlockAfter(tDetails) !== null || getMinimumDurationForState(tDetails, DeferBlockState.Loading) !== null || getMinimumDurationForState(tDetails, DeferBlockState.Placeholder));
    if (ngDevMode && needsScheduling) {
      assertDefined(applyDeferBlockStateWithSchedulingImpl, "Expected scheduling function to be defined");
    }
    const applyStateFn = needsScheduling ? applyDeferBlockStateWithSchedulingImpl : applyDeferBlockState;
    try {
      applyStateFn(newState, lDetails, lContainer, tNode, hostLView);
    } catch (error) {
      handleError(hostLView, error);
    }
  }
}
function applyDeferBlockState(newState, lDetails, lContainer, tNode, hostLView) {
  const stateTmplIndex = getTemplateIndexForState(newState, hostLView, tNode);
  if (stateTmplIndex !== null) {
    lDetails[DEFER_BLOCK_STATE] = newState;
    const hostTView = hostLView[TVIEW];
    const adjustedIndex = stateTmplIndex + HEADER_OFFSET;
    const tNode2 = getTNode(hostTView, adjustedIndex);
    const viewIndex = 0;
    removeLViewFromLContainer(lContainer, viewIndex);
    const dehydratedView = findMatchingDehydratedView(lContainer, tNode2.tView.ssrId);
    const embeddedLView = createAndRenderEmbeddedLView(hostLView, tNode2, null, { dehydratedView });
    addLViewToLContainer(lContainer, embeddedLView, viewIndex, shouldAddViewToDom(tNode2, dehydratedView));
    markViewDirty(embeddedLView);
  }
}
function applyDeferBlockStateWithScheduling(newState, lDetails, lContainer, tNode, hostLView) {
  const now = Date.now();
  const hostTView = hostLView[TVIEW];
  const tDetails = getTDeferBlockDetails(hostTView, tNode);
  if (lDetails[STATE_IS_FROZEN_UNTIL] === null || lDetails[STATE_IS_FROZEN_UNTIL] <= now) {
    lDetails[STATE_IS_FROZEN_UNTIL] = null;
    const loadingAfter = getLoadingBlockAfter(tDetails);
    const inLoadingAfterPhase = lDetails[LOADING_AFTER_CLEANUP_FN] !== null;
    if (newState === DeferBlockState.Loading && loadingAfter !== null && !inLoadingAfterPhase) {
      lDetails[NEXT_DEFER_BLOCK_STATE] = newState;
      const cleanupFn = scheduleDeferBlockUpdate(loadingAfter, lDetails, tNode, lContainer, hostLView);
      lDetails[LOADING_AFTER_CLEANUP_FN] = cleanupFn;
    } else {
      if (newState > DeferBlockState.Loading && inLoadingAfterPhase) {
        lDetails[LOADING_AFTER_CLEANUP_FN]();
        lDetails[LOADING_AFTER_CLEANUP_FN] = null;
        lDetails[NEXT_DEFER_BLOCK_STATE] = null;
      }
      applyDeferBlockState(newState, lDetails, lContainer, tNode, hostLView);
      const duration = getMinimumDurationForState(tDetails, newState);
      if (duration !== null) {
        lDetails[STATE_IS_FROZEN_UNTIL] = now + duration;
        scheduleDeferBlockUpdate(duration, lDetails, tNode, lContainer, hostLView);
      }
    }
  } else {
    lDetails[NEXT_DEFER_BLOCK_STATE] = newState;
  }
}
function scheduleDeferBlockUpdate(timeout, lDetails, tNode, lContainer, hostLView) {
  const callback = () => {
    const nextState = lDetails[NEXT_DEFER_BLOCK_STATE];
    lDetails[STATE_IS_FROZEN_UNTIL] = null;
    lDetails[NEXT_DEFER_BLOCK_STATE] = null;
    if (nextState !== null) {
      renderDeferBlockState(nextState, tNode, lContainer);
    }
  };
  return scheduleTimerTrigger(timeout, callback, hostLView);
}
function isValidStateChange(currentState, newState) {
  return currentState < newState;
}
function triggerPrefetching(tDetails, lView, tNode) {
  if (lView[INJECTOR$1] && shouldTriggerDeferBlock(lView[INJECTOR$1])) {
    triggerResourceLoading(tDetails, lView, tNode);
  }
}
function triggerResourceLoading(tDetails, lView, tNode) {
  const injector = lView[INJECTOR$1];
  const tView = lView[TVIEW];
  if (tDetails.loadingState !== DeferDependenciesLoadingState.NOT_STARTED) {
    return;
  }
  const lDetails = getLDeferBlockDetails(lView, tNode);
  const primaryBlockTNode = getPrimaryBlockTNode(tView, tDetails);
  tDetails.loadingState = DeferDependenciesLoadingState.IN_PROGRESS;
  invokeTriggerCleanupFns(1, lDetails);
  let dependenciesFn = tDetails.dependencyResolverFn;
  if (ngDevMode) {
    const deferDependencyInterceptor = injector.get(DEFER_BLOCK_DEPENDENCY_INTERCEPTOR, null, { optional: true });
    if (deferDependencyInterceptor) {
      dependenciesFn = deferDependencyInterceptor.intercept(dependenciesFn);
    }
  }
  if (!dependenciesFn) {
    tDetails.loadingPromise = Promise.resolve().then(() => {
      tDetails.loadingPromise = null;
      tDetails.loadingState = DeferDependenciesLoadingState.COMPLETE;
    });
    return;
  }
  tDetails.loadingPromise = Promise.allSettled(dependenciesFn()).then((results) => {
    let failed = false;
    const directiveDefs = [];
    const pipeDefs = [];
    for (const result of results) {
      if (result.status === "fulfilled") {
        const dependency = result.value;
        const directiveDef = getComponentDef(dependency) || getDirectiveDef(dependency);
        if (directiveDef) {
          directiveDefs.push(directiveDef);
        } else {
          const pipeDef = getPipeDef$1(dependency);
          if (pipeDef) {
            pipeDefs.push(pipeDef);
          }
        }
      } else {
        failed = true;
        break;
      }
    }
    tDetails.loadingPromise = null;
    if (failed) {
      tDetails.loadingState = DeferDependenciesLoadingState.FAILED;
      if (tDetails.errorTmplIndex === null) {
        const templateLocation = getTemplateLocationDetails(lView);
        const error = new RuntimeError(750, ngDevMode && `Loading dependencies for \`@defer\` block failed, but no \`@error\` block was configured${templateLocation}. Consider using the \`@error\` block to render an error state.`);
        handleError(lView, error);
      }
    } else {
      tDetails.loadingState = DeferDependenciesLoadingState.COMPLETE;
      const primaryBlockTView = primaryBlockTNode.tView;
      if (directiveDefs.length > 0) {
        primaryBlockTView.directiveRegistry = addDepsToRegistry(primaryBlockTView.directiveRegistry, directiveDefs);
      }
      if (pipeDefs.length > 0) {
        primaryBlockTView.pipeRegistry = addDepsToRegistry(primaryBlockTView.pipeRegistry, pipeDefs);
      }
    }
  });
}
function renderPlaceholder(lView, tNode) {
  const lContainer = lView[tNode.index];
  ngDevMode && assertLContainer(lContainer);
  renderDeferBlockState(DeferBlockState.Placeholder, tNode, lContainer);
}
function renderDeferStateAfterResourceLoading(tDetails, tNode, lContainer) {
  ngDevMode && assertDefined(tDetails.loadingPromise, "Expected loading Promise to exist on this defer block");
  tDetails.loadingPromise.then(() => {
    if (tDetails.loadingState === DeferDependenciesLoadingState.COMPLETE) {
      ngDevMode && assertDeferredDependenciesLoaded(tDetails);
      renderDeferBlockState(DeferBlockState.Complete, tNode, lContainer);
    } else if (tDetails.loadingState === DeferDependenciesLoadingState.FAILED) {
      renderDeferBlockState(DeferBlockState.Error, tNode, lContainer);
    }
  });
}
function triggerDeferBlock(lView, tNode) {
  const tView = lView[TVIEW];
  const lContainer = lView[tNode.index];
  const injector = lView[INJECTOR$1];
  ngDevMode && assertLContainer(lContainer);
  if (!shouldTriggerDeferBlock(injector))
    return;
  const lDetails = getLDeferBlockDetails(lView, tNode);
  const tDetails = getTDeferBlockDetails(tView, tNode);
  invokeAllTriggerCleanupFns(lDetails);
  switch (tDetails.loadingState) {
    case DeferDependenciesLoadingState.NOT_STARTED:
      renderDeferBlockState(DeferBlockState.Loading, tNode, lContainer);
      triggerResourceLoading(tDetails, lView, tNode);
      if (tDetails.loadingState === DeferDependenciesLoadingState.IN_PROGRESS) {
        renderDeferStateAfterResourceLoading(tDetails, tNode, lContainer);
      }
      break;
    case DeferDependenciesLoadingState.IN_PROGRESS:
      renderDeferBlockState(DeferBlockState.Loading, tNode, lContainer);
      renderDeferStateAfterResourceLoading(tDetails, tNode, lContainer);
      break;
    case DeferDependenciesLoadingState.COMPLETE:
      ngDevMode && assertDeferredDependenciesLoaded(tDetails);
      renderDeferBlockState(DeferBlockState.Complete, tNode, lContainer);
      break;
    case DeferDependenciesLoadingState.FAILED:
      renderDeferBlockState(DeferBlockState.Error, tNode, lContainer);
      break;
    default:
      if (ngDevMode) {
        throwError2("Unknown defer block state");
      }
  }
}
function elementStartFirstCreatePass(index, tView, lView, name, attrsIndex, localRefsIndex) {
  ngDevMode && assertFirstCreatePass(tView);
  ngDevMode && ngDevMode.firstCreatePass++;
  const tViewConsts = tView.consts;
  const attrs = getConstant(tViewConsts, attrsIndex);
  const tNode = getOrCreateTNode(tView, index, 2, name, attrs);
  resolveDirectives(tView, lView, tNode, getConstant(tViewConsts, localRefsIndex));
  if (tNode.attrs !== null) {
    computeStaticStyling(tNode, tNode.attrs, false);
  }
  if (tNode.mergedAttrs !== null) {
    computeStaticStyling(tNode, tNode.mergedAttrs, true);
  }
  if (tView.queries !== null) {
    tView.queries.elementStart(tView, tNode);
  }
  return tNode;
}
function \u0275\u0275elementStart(index, name, attrsIndex, localRefsIndex) {
  const lView = getLView();
  const tView = getTView();
  const adjustedIndex = HEADER_OFFSET + index;
  ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, "elements should be created before any bindings");
  ngDevMode && assertIndexInRange(lView, adjustedIndex);
  const renderer = lView[RENDERER];
  const tNode = tView.firstCreatePass ? elementStartFirstCreatePass(adjustedIndex, tView, lView, name, attrsIndex, localRefsIndex) : tView.data[adjustedIndex];
  const native = _locateOrCreateElementNode(tView, lView, tNode, renderer, name, index);
  lView[adjustedIndex] = native;
  const hasDirectives = isDirectiveHost(tNode);
  if (ngDevMode && tView.firstCreatePass) {
    validateElementIsKnown(native, lView, tNode.value, tView.schemas, hasDirectives);
  }
  setCurrentTNode(tNode, true);
  setupStaticAttributes(renderer, native, tNode);
  if ((tNode.flags & 32) !== 32 && wasLastNodeCreated()) {
    appendChild(tView, lView, native, tNode);
  }
  if (getElementDepthCount() === 0) {
    attachPatchData(native, lView);
  }
  increaseElementDepthCount();
  if (hasDirectives) {
    createDirectivesInstances(tView, lView, tNode);
    executeContentQueries(tView, tNode, lView);
  }
  if (localRefsIndex !== null) {
    saveResolvedLocalsInData(lView, tNode);
  }
  return \u0275\u0275elementStart;
}
function \u0275\u0275elementEnd() {
  let currentTNode = getCurrentTNode();
  ngDevMode && assertDefined(currentTNode, "No parent node to close.");
  if (isCurrentTNodeParent()) {
    setCurrentTNodeAsNotParent();
  } else {
    ngDevMode && assertHasParent(getCurrentTNode());
    currentTNode = currentTNode.parent;
    setCurrentTNode(currentTNode, false);
  }
  const tNode = currentTNode;
  ngDevMode && assertTNodeType(
    tNode,
    3
    /* TNodeType.AnyRNode */
  );
  if (isSkipHydrationRootTNode(tNode)) {
    leaveSkipHydrationBlock();
  }
  decreaseElementDepthCount();
  const tView = getTView();
  if (tView.firstCreatePass) {
    registerPostOrderHooks(tView, currentTNode);
    if (isContentQueryHost(currentTNode)) {
      tView.queries.elementEnd(currentTNode);
    }
  }
  if (tNode.classesWithoutHost != null && hasClassInput(tNode)) {
    setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.classesWithoutHost, true);
  }
  if (tNode.stylesWithoutHost != null && hasStyleInput(tNode)) {
    setDirectiveInputsWhichShadowsStyling(tView, tNode, getLView(), tNode.stylesWithoutHost, false);
  }
  return \u0275\u0275elementEnd;
}
function \u0275\u0275element(index, name, attrsIndex, localRefsIndex) {
  \u0275\u0275elementStart(index, name, attrsIndex, localRefsIndex);
  \u0275\u0275elementEnd();
  return \u0275\u0275element;
}
var _locateOrCreateElementNode = (tView, lView, tNode, renderer, name, index) => {
  lastNodeWasCreated(true);
  return createElementNode(renderer, name, getNamespace$1());
};
function elementContainerStartFirstCreatePass(index, tView, lView, attrsIndex, localRefsIndex) {
  ngDevMode && ngDevMode.firstCreatePass++;
  const tViewConsts = tView.consts;
  const attrs = getConstant(tViewConsts, attrsIndex);
  const tNode = getOrCreateTNode(tView, index, 8, "ng-container", attrs);
  if (attrs !== null) {
    computeStaticStyling(tNode, attrs, true);
  }
  const localRefs = getConstant(tViewConsts, localRefsIndex);
  resolveDirectives(tView, lView, tNode, localRefs);
  if (tView.queries !== null) {
    tView.queries.elementStart(tView, tNode);
  }
  return tNode;
}
function \u0275\u0275elementContainerStart(index, attrsIndex, localRefsIndex) {
  const lView = getLView();
  const tView = getTView();
  const adjustedIndex = index + HEADER_OFFSET;
  ngDevMode && assertIndexInRange(lView, adjustedIndex);
  ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, "element containers should be created before any bindings");
  const tNode = tView.firstCreatePass ? elementContainerStartFirstCreatePass(adjustedIndex, tView, lView, attrsIndex, localRefsIndex) : tView.data[adjustedIndex];
  setCurrentTNode(tNode, true);
  const comment = _locateOrCreateElementContainerNode(tView, lView, tNode, index);
  lView[adjustedIndex] = comment;
  if (wasLastNodeCreated()) {
    appendChild(tView, lView, comment, tNode);
  }
  attachPatchData(comment, lView);
  if (isDirectiveHost(tNode)) {
    createDirectivesInstances(tView, lView, tNode);
    executeContentQueries(tView, tNode, lView);
  }
  if (localRefsIndex != null) {
    saveResolvedLocalsInData(lView, tNode);
  }
  return \u0275\u0275elementContainerStart;
}
function \u0275\u0275elementContainerEnd() {
  let currentTNode = getCurrentTNode();
  const tView = getTView();
  if (isCurrentTNodeParent()) {
    setCurrentTNodeAsNotParent();
  } else {
    ngDevMode && assertHasParent(currentTNode);
    currentTNode = currentTNode.parent;
    setCurrentTNode(currentTNode, false);
  }
  ngDevMode && assertTNodeType(
    currentTNode,
    8
    /* TNodeType.ElementContainer */
  );
  if (tView.firstCreatePass) {
    registerPostOrderHooks(tView, currentTNode);
    if (isContentQueryHost(currentTNode)) {
      tView.queries.elementEnd(currentTNode);
    }
  }
  return \u0275\u0275elementContainerEnd;
}
function \u0275\u0275elementContainer(index, attrsIndex, localRefsIndex) {
  \u0275\u0275elementContainerStart(index, attrsIndex, localRefsIndex);
  \u0275\u0275elementContainerEnd();
  return \u0275\u0275elementContainer;
}
var _locateOrCreateElementContainerNode = (tView, lView, tNode, index) => {
  lastNodeWasCreated(true);
  return createCommentNode(lView[RENDERER], ngDevMode ? "ng-container" : "");
};
function \u0275\u0275getCurrentView() {
  return getLView();
}
function \u0275\u0275hostProperty(propName, value, sanitizer) {
  const lView = getLView();
  const bindingIndex = nextBindingIndex();
  if (bindingUpdated(lView, bindingIndex, value)) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, value, lView[RENDERER], sanitizer, true);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);
  }
  return \u0275\u0275hostProperty;
}
function \u0275\u0275syntheticHostProperty(propName, value, sanitizer) {
  const lView = getLView();
  const bindingIndex = nextBindingIndex();
  if (bindingUpdated(lView, bindingIndex, value)) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    const currentDef = getCurrentDirectiveDef(tView.data);
    const renderer = loadComponentRenderer(currentDef, tNode, lView);
    elementPropertyInternal(tView, tNode, lView, propName, value, renderer, sanitizer, true);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, bindingIndex);
  }
  return \u0275\u0275syntheticHostProperty;
}
if (false) {
  (function() {
    _global["ngI18nClosureMode"] = // TODO(FW-1250): validate that this actually, you know, works.
    // tslint:disable-next-line:no-toplevel-property-access
    typeof goog !== "undefined" && typeof goog.getMsg === "function";
  })();
}
var u = void 0;
function plural(val) {
  const n = val, i = Math.floor(Math.abs(val)), v = val.toString().replace(/^[^.]*\.?/, "").length;
  if (i === 1 && v === 0)
    return 1;
  return 5;
}
var localeEn = ["en", [["a", "p"], ["AM", "PM"], u], [["AM", "PM"], u, u], [["S", "M", "T", "W", "T", "F", "S"], ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"], ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"], ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"]], u, [["J", "F", "M", "A", "M", "J", "J", "A", "S", "O", "N", "D"], ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"], ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]], u, [["B", "A"], ["BC", "AD"], ["Before Christ", "Anno Domini"]], 0, [6, 0], ["M/d/yy", "MMM d, y", "MMMM d, y", "EEEE, MMMM d, y"], ["h:mm a", "h:mm:ss a", "h:mm:ss a z", "h:mm:ss a zzzz"], ["{1}, {0}", u, "{1} 'at' {0}", u], [".", ",", ";", "%", "+", "-", "E", "\xD7", "\u2030", "\u221E", "NaN", ":"], ["#,##0.###", "#,##0%", "\xA4#,##0.00", "#E0"], "USD", "$", "US Dollar", {}, "ltr", plural];
var LOCALE_DATA = {};
function findLocaleData(locale) {
  const normalizedLocale = normalizeLocale(locale);
  let match2 = getLocaleData(normalizedLocale);
  if (match2) {
    return match2;
  }
  const parentLocale = normalizedLocale.split("-")[0];
  match2 = getLocaleData(parentLocale);
  if (match2) {
    return match2;
  }
  if (parentLocale === "en") {
    return localeEn;
  }
  throw new RuntimeError(701, ngDevMode && `Missing locale data for the locale "${locale}".`);
}
function getLocalePluralCase(locale) {
  const data = findLocaleData(locale);
  return data[LocaleDataIndex.PluralCase];
}
function getLocaleData(normalizedLocale) {
  if (!(normalizedLocale in LOCALE_DATA)) {
    LOCALE_DATA[normalizedLocale] = _global.ng && _global.ng.common && _global.ng.common.locales && _global.ng.common.locales[normalizedLocale];
  }
  return LOCALE_DATA[normalizedLocale];
}
var LocaleDataIndex;
(function(LocaleDataIndex2) {
  LocaleDataIndex2[LocaleDataIndex2["LocaleId"] = 0] = "LocaleId";
  LocaleDataIndex2[LocaleDataIndex2["DayPeriodsFormat"] = 1] = "DayPeriodsFormat";
  LocaleDataIndex2[LocaleDataIndex2["DayPeriodsStandalone"] = 2] = "DayPeriodsStandalone";
  LocaleDataIndex2[LocaleDataIndex2["DaysFormat"] = 3] = "DaysFormat";
  LocaleDataIndex2[LocaleDataIndex2["DaysStandalone"] = 4] = "DaysStandalone";
  LocaleDataIndex2[LocaleDataIndex2["MonthsFormat"] = 5] = "MonthsFormat";
  LocaleDataIndex2[LocaleDataIndex2["MonthsStandalone"] = 6] = "MonthsStandalone";
  LocaleDataIndex2[LocaleDataIndex2["Eras"] = 7] = "Eras";
  LocaleDataIndex2[LocaleDataIndex2["FirstDayOfWeek"] = 8] = "FirstDayOfWeek";
  LocaleDataIndex2[LocaleDataIndex2["WeekendRange"] = 9] = "WeekendRange";
  LocaleDataIndex2[LocaleDataIndex2["DateFormat"] = 10] = "DateFormat";
  LocaleDataIndex2[LocaleDataIndex2["TimeFormat"] = 11] = "TimeFormat";
  LocaleDataIndex2[LocaleDataIndex2["DateTimeFormat"] = 12] = "DateTimeFormat";
  LocaleDataIndex2[LocaleDataIndex2["NumberSymbols"] = 13] = "NumberSymbols";
  LocaleDataIndex2[LocaleDataIndex2["NumberFormats"] = 14] = "NumberFormats";
  LocaleDataIndex2[LocaleDataIndex2["CurrencyCode"] = 15] = "CurrencyCode";
  LocaleDataIndex2[LocaleDataIndex2["CurrencySymbol"] = 16] = "CurrencySymbol";
  LocaleDataIndex2[LocaleDataIndex2["CurrencyName"] = 17] = "CurrencyName";
  LocaleDataIndex2[LocaleDataIndex2["Currencies"] = 18] = "Currencies";
  LocaleDataIndex2[LocaleDataIndex2["Directionality"] = 19] = "Directionality";
  LocaleDataIndex2[LocaleDataIndex2["PluralCase"] = 20] = "PluralCase";
  LocaleDataIndex2[LocaleDataIndex2["ExtraData"] = 21] = "ExtraData";
})(LocaleDataIndex || (LocaleDataIndex = {}));
function normalizeLocale(locale) {
  return locale.toLowerCase().replace(/_/g, "-");
}
var pluralMapping = ["zero", "one", "two", "few", "many"];
function getPluralCase(value, locale) {
  const plural2 = getLocalePluralCase(locale)(parseInt(value, 10));
  const result = pluralMapping[plural2];
  return result !== void 0 ? result : "other";
}
var DEFAULT_LOCALE_ID = "en-US";
var USD_CURRENCY_CODE = "USD";
var ELEMENT_MARKER = {
  marker: "element"
};
var ICU_MARKER = {
  marker: "ICU"
};
var I18nCreateOpCode;
(function(I18nCreateOpCode2) {
  I18nCreateOpCode2[I18nCreateOpCode2["SHIFT"] = 2] = "SHIFT";
  I18nCreateOpCode2[I18nCreateOpCode2["APPEND_EAGERLY"] = 1] = "APPEND_EAGERLY";
  I18nCreateOpCode2[I18nCreateOpCode2["COMMENT"] = 2] = "COMMENT";
})(I18nCreateOpCode || (I18nCreateOpCode = {}));
var LOCALE_ID$1 = DEFAULT_LOCALE_ID;
function setLocaleId(localeId) {
  assertDefined(localeId, `Expected localeId to be defined`);
  if (typeof localeId === "string") {
    LOCALE_ID$1 = localeId.toLowerCase().replace(/_/g, "-");
  }
}
function getLocaleId() {
  return LOCALE_ID$1;
}
function getInsertInFrontOfRNodeWithI18n(parentTNode, currentTNode, lView) {
  const tNodeInsertBeforeIndex = currentTNode.insertBeforeIndex;
  const insertBeforeIndex = Array.isArray(tNodeInsertBeforeIndex) ? tNodeInsertBeforeIndex[0] : tNodeInsertBeforeIndex;
  if (insertBeforeIndex === null) {
    return getInsertInFrontOfRNodeWithNoI18n(parentTNode, currentTNode, lView);
  } else {
    ngDevMode && assertIndexInRange(lView, insertBeforeIndex);
    return unwrapRNode(lView[insertBeforeIndex]);
  }
}
function processI18nInsertBefore(renderer, childTNode, lView, childRNode, parentRElement) {
  const tNodeInsertBeforeIndex = childTNode.insertBeforeIndex;
  if (Array.isArray(tNodeInsertBeforeIndex)) {
    ngDevMode && assertDomNode(childRNode);
    let i18nParent = childRNode;
    let anchorRNode = null;
    if (!(childTNode.type & 3)) {
      anchorRNode = i18nParent;
      i18nParent = parentRElement;
    }
    if (i18nParent !== null && childTNode.componentOffset === -1) {
      for (let i = 1; i < tNodeInsertBeforeIndex.length; i++) {
        const i18nChild = lView[tNodeInsertBeforeIndex[i]];
        nativeInsertBefore(renderer, i18nParent, i18nChild, anchorRNode, false);
      }
    }
  }
}
function addTNodeAndUpdateInsertBeforeIndex(previousTNodes, newTNode) {
  ngDevMode && assertEqual(newTNode.insertBeforeIndex, null, "We expect that insertBeforeIndex is not set");
  previousTNodes.push(newTNode);
  if (previousTNodes.length > 1) {
    for (let i = previousTNodes.length - 2; i >= 0; i--) {
      const existingTNode = previousTNodes[i];
      if (!isI18nText(existingTNode)) {
        if (isNewTNodeCreatedBefore(existingTNode, newTNode) && getInsertBeforeIndex(existingTNode) === null) {
          setInsertBeforeIndex(existingTNode, newTNode.index);
        }
      }
    }
  }
}
function isI18nText(tNode) {
  return !(tNode.type & 64);
}
function isNewTNodeCreatedBefore(existingTNode, newTNode) {
  return isI18nText(newTNode) || existingTNode.index > newTNode.index;
}
function getInsertBeforeIndex(tNode) {
  const index = tNode.insertBeforeIndex;
  return Array.isArray(index) ? index[0] : index;
}
function setInsertBeforeIndex(tNode, value) {
  const index = tNode.insertBeforeIndex;
  if (Array.isArray(index)) {
    index[0] = value;
  } else {
    setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);
    tNode.insertBeforeIndex = value;
  }
}
function getTIcu(tView, index) {
  const value = tView.data[index];
  if (value === null || typeof value === "string")
    return null;
  if (ngDevMode && !(value.hasOwnProperty("tView") || value.hasOwnProperty("currentCaseLViewIndex"))) {
    throwError2("We expect to get 'null'|'TIcu'|'TIcuContainer', but got: " + value);
  }
  const tIcu = value.hasOwnProperty("currentCaseLViewIndex") ? value : value.value;
  ngDevMode && assertTIcu(tIcu);
  return tIcu;
}
function setTIcu(tView, index, tIcu) {
  const tNode = tView.data[index];
  ngDevMode && assertEqual(tNode === null || tNode.hasOwnProperty("tView"), true, "We expect to get 'null'|'TIcuContainer'");
  if (tNode === null) {
    tView.data[index] = tIcu;
  } else {
    ngDevMode && assertTNodeType(
      tNode,
      32
      /* TNodeType.Icu */
    );
    tNode.value = tIcu;
  }
}
function setTNodeInsertBeforeIndex(tNode, index) {
  ngDevMode && assertTNode(tNode);
  let insertBeforeIndex = tNode.insertBeforeIndex;
  if (insertBeforeIndex === null) {
    setI18nHandling(getInsertInFrontOfRNodeWithI18n, processI18nInsertBefore);
    insertBeforeIndex = tNode.insertBeforeIndex = [null, index];
  } else {
    assertEqual(Array.isArray(insertBeforeIndex), true, "Expecting array here");
    insertBeforeIndex.push(index);
  }
}
function createTNodePlaceholder(tView, previousTNodes, index) {
  const tNode = createTNodeAtIndex(tView, index, 64, null, null);
  addTNodeAndUpdateInsertBeforeIndex(previousTNodes, tNode);
  return tNode;
}
function getCurrentICUCaseIndex(tIcu, lView) {
  const currentCase = lView[tIcu.currentCaseLViewIndex];
  return currentCase === null ? currentCase : currentCase < 0 ? ~currentCase : currentCase;
}
function getParentFromIcuCreateOpCode(mergedCode) {
  return mergedCode >>> 17;
}
function getRefFromIcuCreateOpCode(mergedCode) {
  return (mergedCode & 131070) >>> 1;
}
function getInstructionFromIcuCreateOpCode(mergedCode) {
  return mergedCode & 1;
}
function icuCreateOpCode(opCode, parentIdx, refIdx) {
  ngDevMode && assertGreaterThanOrEqual(parentIdx, 0, "Missing parent index");
  ngDevMode && assertGreaterThan(refIdx, 0, "Missing ref index");
  return opCode | parentIdx << 17 | refIdx << 1;
}
var changeMask = 0;
var changeMaskCounter = 0;
function setMaskBit(hasChange) {
  if (hasChange) {
    changeMask = changeMask | 1 << Math.min(changeMaskCounter, 31);
  }
  changeMaskCounter++;
}
function applyI18n(tView, lView, index) {
  if (changeMaskCounter > 0) {
    ngDevMode && assertDefined(tView, `tView should be defined`);
    const tI18n = tView.data[index];
    const updateOpCodes = Array.isArray(tI18n) ? tI18n : tI18n.update;
    const bindingsStartIndex = getBindingIndex() - changeMaskCounter - 1;
    applyUpdateOpCodes(tView, lView, updateOpCodes, bindingsStartIndex, changeMask);
  }
  changeMask = 0;
  changeMaskCounter = 0;
}
function applyCreateOpCodes(lView, createOpCodes, parentRNode, insertInFrontOf) {
  const renderer = lView[RENDERER];
  for (let i = 0; i < createOpCodes.length; i++) {
    const opCode = createOpCodes[i++];
    const text = createOpCodes[i];
    const isComment = (opCode & I18nCreateOpCode.COMMENT) === I18nCreateOpCode.COMMENT;
    const appendNow = (opCode & I18nCreateOpCode.APPEND_EAGERLY) === I18nCreateOpCode.APPEND_EAGERLY;
    const index = opCode >>> I18nCreateOpCode.SHIFT;
    let rNode = lView[index];
    if (rNode === null) {
      rNode = lView[index] = isComment ? renderer.createComment(text) : createTextNode(renderer, text);
    }
    if (appendNow && parentRNode !== null) {
      nativeInsertBefore(renderer, parentRNode, rNode, insertInFrontOf, false);
    }
  }
}
function applyMutableOpCodes(tView, mutableOpCodes, lView, anchorRNode) {
  ngDevMode && assertDomNode(anchorRNode);
  const renderer = lView[RENDERER];
  let rootIdx = null;
  let rootRNode;
  for (let i = 0; i < mutableOpCodes.length; i++) {
    const opCode = mutableOpCodes[i];
    if (typeof opCode == "string") {
      const textNodeIndex = mutableOpCodes[++i];
      if (lView[textNodeIndex] === null) {
        ngDevMode && ngDevMode.rendererCreateTextNode++;
        ngDevMode && assertIndexInRange(lView, textNodeIndex);
        lView[textNodeIndex] = createTextNode(renderer, opCode);
      }
    } else if (typeof opCode == "number") {
      switch (opCode & 1) {
        case 0:
          const parentIdx = getParentFromIcuCreateOpCode(opCode);
          if (rootIdx === null) {
            rootIdx = parentIdx;
            rootRNode = nativeParentNode(renderer, anchorRNode);
          }
          let insertInFrontOf;
          let parentRNode;
          if (parentIdx === rootIdx) {
            insertInFrontOf = anchorRNode;
            parentRNode = rootRNode;
          } else {
            insertInFrontOf = null;
            parentRNode = unwrapRNode(lView[parentIdx]);
          }
          if (parentRNode !== null) {
            ngDevMode && assertDomNode(parentRNode);
            const refIdx = getRefFromIcuCreateOpCode(opCode);
            ngDevMode && assertGreaterThan(refIdx, HEADER_OFFSET, "Missing ref");
            const child = lView[refIdx];
            ngDevMode && assertDomNode(child);
            nativeInsertBefore(renderer, parentRNode, child, insertInFrontOf, false);
            const tIcu = getTIcu(tView, refIdx);
            if (tIcu !== null && typeof tIcu === "object") {
              ngDevMode && assertTIcu(tIcu);
              const caseIndex = getCurrentICUCaseIndex(tIcu, lView);
              if (caseIndex !== null) {
                applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, lView[tIcu.anchorIdx]);
              }
            }
          }
          break;
        case 1:
          const elementNodeIndex = opCode >>> 1;
          const attrName = mutableOpCodes[++i];
          const attrValue = mutableOpCodes[++i];
          setElementAttribute(renderer, getNativeByIndex(elementNodeIndex, lView), null, null, attrName, attrValue, null);
          break;
        default:
          if (ngDevMode) {
            throw new RuntimeError(700, `Unable to determine the type of mutate operation for "${opCode}"`);
          }
      }
    } else {
      switch (opCode) {
        case ICU_MARKER:
          const commentValue = mutableOpCodes[++i];
          const commentNodeIndex = mutableOpCodes[++i];
          if (lView[commentNodeIndex] === null) {
            ngDevMode && assertEqual(typeof commentValue, "string", `Expected "${commentValue}" to be a comment node value`);
            ngDevMode && ngDevMode.rendererCreateComment++;
            ngDevMode && assertIndexInExpandoRange(lView, commentNodeIndex);
            const commentRNode = lView[commentNodeIndex] = createCommentNode(renderer, commentValue);
            attachPatchData(commentRNode, lView);
          }
          break;
        case ELEMENT_MARKER:
          const tagName = mutableOpCodes[++i];
          const elementNodeIndex = mutableOpCodes[++i];
          if (lView[elementNodeIndex] === null) {
            ngDevMode && assertEqual(typeof tagName, "string", `Expected "${tagName}" to be an element node tag name`);
            ngDevMode && ngDevMode.rendererCreateElement++;
            ngDevMode && assertIndexInExpandoRange(lView, elementNodeIndex);
            const elementRNode = lView[elementNodeIndex] = createElementNode(renderer, tagName, null);
            attachPatchData(elementRNode, lView);
          }
          break;
        default:
          ngDevMode && throwError2(`Unable to determine the type of mutate operation for "${opCode}"`);
      }
    }
  }
}
function applyUpdateOpCodes(tView, lView, updateOpCodes, bindingsStartIndex, changeMask2) {
  for (let i = 0; i < updateOpCodes.length; i++) {
    const checkBit = updateOpCodes[i];
    const skipCodes = updateOpCodes[++i];
    if (checkBit & changeMask2) {
      let value = "";
      for (let j = i + 1; j <= i + skipCodes; j++) {
        const opCode = updateOpCodes[j];
        if (typeof opCode == "string") {
          value += opCode;
        } else if (typeof opCode == "number") {
          if (opCode < 0) {
            value += renderStringify(lView[bindingsStartIndex - opCode]);
          } else {
            const nodeIndex = opCode >>> 2;
            switch (opCode & 3) {
              case 1:
                const propName = updateOpCodes[++j];
                const sanitizeFn = updateOpCodes[++j];
                const tNodeOrTagName = tView.data[nodeIndex];
                ngDevMode && assertDefined(tNodeOrTagName, "Experting TNode or string");
                if (typeof tNodeOrTagName === "string") {
                  setElementAttribute(lView[RENDERER], lView[nodeIndex], null, tNodeOrTagName, propName, value, sanitizeFn);
                } else {
                  elementPropertyInternal(tView, tNodeOrTagName, lView, propName, value, lView[RENDERER], sanitizeFn, false);
                }
                break;
              case 0:
                const rText = lView[nodeIndex];
                rText !== null && updateTextNode(lView[RENDERER], rText, value);
                break;
              case 2:
                applyIcuSwitchCase(tView, getTIcu(tView, nodeIndex), lView, value);
                break;
              case 3:
                applyIcuUpdateCase(tView, getTIcu(tView, nodeIndex), bindingsStartIndex, lView);
                break;
            }
          }
        }
      }
    } else {
      const opCode = updateOpCodes[i + 1];
      if (opCode > 0 && (opCode & 3) === 3) {
        const nodeIndex = opCode >>> 2;
        const tIcu = getTIcu(tView, nodeIndex);
        const currentIndex = lView[tIcu.currentCaseLViewIndex];
        if (currentIndex < 0) {
          applyIcuUpdateCase(tView, tIcu, bindingsStartIndex, lView);
        }
      }
    }
    i += skipCodes;
  }
}
function applyIcuUpdateCase(tView, tIcu, bindingsStartIndex, lView) {
  ngDevMode && assertIndexInRange(lView, tIcu.currentCaseLViewIndex);
  let activeCaseIndex = lView[tIcu.currentCaseLViewIndex];
  if (activeCaseIndex !== null) {
    let mask = changeMask;
    if (activeCaseIndex < 0) {
      activeCaseIndex = lView[tIcu.currentCaseLViewIndex] = ~activeCaseIndex;
      mask = -1;
    }
    applyUpdateOpCodes(tView, lView, tIcu.update[activeCaseIndex], bindingsStartIndex, mask);
  }
}
function applyIcuSwitchCase(tView, tIcu, lView, value) {
  const caseIndex = getCaseIndex(tIcu, value);
  let activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);
  if (activeCaseIndex !== caseIndex) {
    applyIcuSwitchCaseRemove(tView, tIcu, lView);
    lView[tIcu.currentCaseLViewIndex] = caseIndex === null ? null : ~caseIndex;
    if (caseIndex !== null) {
      const anchorRNode = lView[tIcu.anchorIdx];
      if (anchorRNode) {
        ngDevMode && assertDomNode(anchorRNode);
        applyMutableOpCodes(tView, tIcu.create[caseIndex], lView, anchorRNode);
      }
    }
  }
}
function applyIcuSwitchCaseRemove(tView, tIcu, lView) {
  let activeCaseIndex = getCurrentICUCaseIndex(tIcu, lView);
  if (activeCaseIndex !== null) {
    const removeCodes = tIcu.remove[activeCaseIndex];
    for (let i = 0; i < removeCodes.length; i++) {
      const nodeOrIcuIndex = removeCodes[i];
      if (nodeOrIcuIndex > 0) {
        const rNode = getNativeByIndex(nodeOrIcuIndex, lView);
        rNode !== null && nativeRemoveNode(lView[RENDERER], rNode);
      } else {
        applyIcuSwitchCaseRemove(tView, getTIcu(tView, ~nodeOrIcuIndex), lView);
      }
    }
  }
}
function getCaseIndex(icuExpression, bindingValue) {
  let index = icuExpression.cases.indexOf(bindingValue);
  if (index === -1) {
    switch (icuExpression.type) {
      case 1: {
        const resolvedCase = getPluralCase(bindingValue, getLocaleId());
        index = icuExpression.cases.indexOf(resolvedCase);
        if (index === -1 && resolvedCase !== "other") {
          index = icuExpression.cases.indexOf("other");
        }
        break;
      }
      case 0: {
        index = icuExpression.cases.indexOf("other");
        break;
      }
    }
  }
  return index === -1 ? null : index;
}
function loadIcuContainerVisitor() {
  const _stack = [];
  let _index = -1;
  let _lView;
  let _removes;
  function icuContainerIteratorStart(tIcuContainerNode, lView) {
    _lView = lView;
    while (_stack.length)
      _stack.pop();
    ngDevMode && assertTNodeForLView(tIcuContainerNode, lView);
    enterIcu(tIcuContainerNode.value, lView);
    return icuContainerIteratorNext;
  }
  function enterIcu(tIcu, lView) {
    _index = 0;
    const currentCase = getCurrentICUCaseIndex(tIcu, lView);
    if (currentCase !== null) {
      ngDevMode && assertNumberInRange(currentCase, 0, tIcu.cases.length - 1);
      _removes = tIcu.remove[currentCase];
    } else {
      _removes = EMPTY_ARRAY;
    }
  }
  function icuContainerIteratorNext() {
    if (_index < _removes.length) {
      const removeOpCode = _removes[_index++];
      ngDevMode && assertNumber(removeOpCode, "Expecting OpCode number");
      if (removeOpCode > 0) {
        const rNode = _lView[removeOpCode];
        ngDevMode && assertDomNode(rNode);
        return rNode;
      } else {
        _stack.push(_index, _removes);
        const tIcuIndex = ~removeOpCode;
        const tIcu = _lView[TVIEW].data[tIcuIndex];
        ngDevMode && assertTIcu(tIcu);
        enterIcu(tIcu, _lView);
        return icuContainerIteratorNext();
      }
    } else {
      if (_stack.length === 0) {
        return null;
      } else {
        _removes = _stack.pop();
        _index = _stack.pop();
        return icuContainerIteratorNext();
      }
    }
  }
  return icuContainerIteratorStart;
}
function i18nCreateOpCodesToString(opcodes) {
  const createOpCodes = opcodes || (Array.isArray(this) ? this : []);
  let lines = [];
  for (let i = 0; i < createOpCodes.length; i++) {
    const opCode = createOpCodes[i++];
    const text = createOpCodes[i];
    const isComment = (opCode & I18nCreateOpCode.COMMENT) === I18nCreateOpCode.COMMENT;
    const appendNow = (opCode & I18nCreateOpCode.APPEND_EAGERLY) === I18nCreateOpCode.APPEND_EAGERLY;
    const index = opCode >>> I18nCreateOpCode.SHIFT;
    lines.push(`lView[${index}] = document.${isComment ? "createComment" : "createText"}(${JSON.stringify(text)});`);
    if (appendNow) {
      lines.push(`parent.appendChild(lView[${index}]);`);
    }
  }
  return lines;
}
function i18nUpdateOpCodesToString(opcodes) {
  const parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));
  let lines = [];
  function consumeOpCode(value) {
    const ref = value >>> 2;
    const opCode = value & 3;
    switch (opCode) {
      case 0:
        return `(lView[${ref}] as Text).textContent = $$$`;
      case 1:
        const attrName = parser.consumeString();
        const sanitizationFn = parser.consumeFunction();
        const value2 = sanitizationFn ? `(${sanitizationFn})($$$)` : "$$$";
        return `(lView[${ref}] as Element).setAttribute('${attrName}', ${value2})`;
      case 2:
        return `icuSwitchCase(${ref}, $$$)`;
      case 3:
        return `icuUpdateCase(${ref})`;
    }
    throw new Error("unexpected OpCode");
  }
  while (parser.hasMore()) {
    let mask = parser.consumeNumber();
    let size = parser.consumeNumber();
    const end = parser.i + size;
    const statements = [];
    let statement = "";
    while (parser.i < end) {
      let value = parser.consumeNumberOrString();
      if (typeof value === "string") {
        statement += value;
      } else if (value < 0) {
        statement += "${lView[i" + value + "]}";
      } else {
        const opCodeText = consumeOpCode(value);
        statements.push(opCodeText.replace("$$$", "`" + statement + "`") + ";");
        statement = "";
      }
    }
    lines.push(`if (mask & 0b${mask.toString(2)}) { ${statements.join(" ")} }`);
  }
  return lines;
}
function icuCreateOpCodesToString(opcodes) {
  const parser = new OpCodeParser(opcodes || (Array.isArray(this) ? this : []));
  let lines = [];
  function consumeOpCode(opCode) {
    const parent = getParentFromIcuCreateOpCode(opCode);
    const ref = getRefFromIcuCreateOpCode(opCode);
    switch (getInstructionFromIcuCreateOpCode(opCode)) {
      case 0:
        return `(lView[${parent}] as Element).appendChild(lView[${lastRef}])`;
      case 1:
        return `(lView[${ref}] as Element).setAttribute("${parser.consumeString()}", "${parser.consumeString()}")`;
    }
    throw new Error("Unexpected OpCode: " + getInstructionFromIcuCreateOpCode(opCode));
  }
  let lastRef = -1;
  while (parser.hasMore()) {
    let value = parser.consumeNumberStringOrMarker();
    if (value === ICU_MARKER) {
      const text = parser.consumeString();
      lastRef = parser.consumeNumber();
      lines.push(`lView[${lastRef}] = document.createComment("${text}")`);
    } else if (value === ELEMENT_MARKER) {
      const text = parser.consumeString();
      lastRef = parser.consumeNumber();
      lines.push(`lView[${lastRef}] = document.createElement("${text}")`);
    } else if (typeof value === "string") {
      lastRef = parser.consumeNumber();
      lines.push(`lView[${lastRef}] = document.createTextNode("${value}")`);
    } else if (typeof value === "number") {
      const line = consumeOpCode(value);
      line && lines.push(line);
    } else {
      throw new Error("Unexpected value");
    }
  }
  return lines;
}
function i18nRemoveOpCodesToString(opcodes) {
  const removeCodes = opcodes || (Array.isArray(this) ? this : []);
  let lines = [];
  for (let i = 0; i < removeCodes.length; i++) {
    const nodeOrIcuIndex = removeCodes[i];
    if (nodeOrIcuIndex > 0) {
      lines.push(`remove(lView[${nodeOrIcuIndex}])`);
    } else {
      lines.push(`removeNestedICU(${~nodeOrIcuIndex})`);
    }
  }
  return lines;
}
var OpCodeParser = class {
  constructor(codes) {
    this.i = 0;
    this.codes = codes;
  }
  hasMore() {
    return this.i < this.codes.length;
  }
  consumeNumber() {
    let value = this.codes[this.i++];
    assertNumber(value, "expecting number in OpCode");
    return value;
  }
  consumeString() {
    let value = this.codes[this.i++];
    assertString(value, "expecting string in OpCode");
    return value;
  }
  consumeFunction() {
    let value = this.codes[this.i++];
    if (value === null || typeof value === "function") {
      return value;
    }
    throw new Error("expecting function in OpCode");
  }
  consumeNumberOrString() {
    let value = this.codes[this.i++];
    if (typeof value === "string") {
      return value;
    }
    assertNumber(value, "expecting number or string in OpCode");
    return value;
  }
  consumeNumberStringOrMarker() {
    let value = this.codes[this.i++];
    if (typeof value === "string" || typeof value === "number" || value == ICU_MARKER || value == ELEMENT_MARKER) {
      return value;
    }
    assertNumber(value, "expecting number, string, ICU_MARKER or ELEMENT_MARKER in OpCode");
    return value;
  }
};
var BINDING_REGEXP = /�(\d+):?\d*�/gi;
var ICU_REGEXP = /({\s*�\d+:?\d*�\s*,\s*\S{6}\s*,[\s\S]*})/gi;
var NESTED_ICU = /�(\d+)�/;
var ICU_BLOCK_REGEXP = /^\s*(�\d+:?\d*�)\s*,\s*(select|plural)\s*,/;
var MARKER = `\uFFFD`;
var SUBTEMPLATE_REGEXP = /�\/?\*(\d+:\d+)�/gi;
var PH_REGEXP = /�(\/?[#*]\d+):?\d*�/gi;
var NGSP_UNICODE_REGEXP = /\uE500/g;
function replaceNgsp(value) {
  return value.replace(NGSP_UNICODE_REGEXP, " ");
}
function attachDebugGetter(obj, debugGetter) {
  if (ngDevMode) {
    Object.defineProperty(obj, "debug", { get: debugGetter, enumerable: false });
  } else {
    throw new Error("This method should be guarded with `ngDevMode` so that it can be tree shaken in production!");
  }
}
function i18nStartFirstCreatePass(tView, parentTNodeIndex, lView, index, message, subTemplateIndex) {
  const rootTNode = getCurrentParentTNode();
  const createOpCodes = [];
  const updateOpCodes = [];
  const existingTNodeStack = [[]];
  if (ngDevMode) {
    attachDebugGetter(createOpCodes, i18nCreateOpCodesToString);
    attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);
  }
  message = getTranslationForTemplate(message, subTemplateIndex);
  const msgParts = replaceNgsp(message).split(PH_REGEXP);
  for (let i = 0; i < msgParts.length; i++) {
    let value = msgParts[i];
    if ((i & 1) === 0) {
      const parts = i18nParseTextIntoPartsAndICU(value);
      for (let j = 0; j < parts.length; j++) {
        let part = parts[j];
        if ((j & 1) === 0) {
          const text = part;
          ngDevMode && assertString(text, "Parsed ICU part should be string");
          if (text !== "") {
            i18nStartFirstCreatePassProcessTextNode(tView, rootTNode, existingTNodeStack[0], createOpCodes, updateOpCodes, lView, text);
          }
        } else {
          const icuExpression = part;
          if (typeof icuExpression !== "object") {
            throw new Error(`Unable to parse ICU expression in "${message}" message.`);
          }
          const icuContainerTNode = createTNodeAndAddOpCode(tView, rootTNode, existingTNodeStack[0], lView, createOpCodes, ngDevMode ? `ICU ${index}:${icuExpression.mainBinding}` : "", true);
          const icuNodeIndex = icuContainerTNode.index;
          ngDevMode && assertGreaterThanOrEqual(icuNodeIndex, HEADER_OFFSET, "Index must be in absolute LView offset");
          icuStart(tView, lView, updateOpCodes, parentTNodeIndex, icuExpression, icuNodeIndex);
        }
      }
    } else {
      const isClosing = value.charCodeAt(0) === 47;
      const type = value.charCodeAt(isClosing ? 1 : 0);
      ngDevMode && assertOneOf(
        type,
        42,
        35
        /* CharCode.HASH */
      );
      const index2 = HEADER_OFFSET + Number.parseInt(value.substring(isClosing ? 2 : 1));
      if (isClosing) {
        existingTNodeStack.shift();
        setCurrentTNode(getCurrentParentTNode(), false);
      } else {
        const tNode = createTNodePlaceholder(tView, existingTNodeStack[0], index2);
        existingTNodeStack.unshift([]);
        setCurrentTNode(tNode, true);
      }
    }
  }
  tView.data[index] = {
    create: createOpCodes,
    update: updateOpCodes
  };
}
function createTNodeAndAddOpCode(tView, rootTNode, existingTNodes, lView, createOpCodes, text, isICU) {
  const i18nNodeIdx = allocExpando(tView, lView, 1, null);
  let opCode = i18nNodeIdx << I18nCreateOpCode.SHIFT;
  let parentTNode = getCurrentParentTNode();
  if (rootTNode === parentTNode) {
    parentTNode = null;
  }
  if (parentTNode === null) {
    opCode |= I18nCreateOpCode.APPEND_EAGERLY;
  }
  if (isICU) {
    opCode |= I18nCreateOpCode.COMMENT;
    ensureIcuContainerVisitorLoaded(loadIcuContainerVisitor);
  }
  createOpCodes.push(opCode, text === null ? "" : text);
  const tNode = createTNodeAtIndex(tView, i18nNodeIdx, isICU ? 32 : 1, text === null ? ngDevMode ? "{{?}}" : "" : text, null);
  addTNodeAndUpdateInsertBeforeIndex(existingTNodes, tNode);
  const tNodeIdx = tNode.index;
  setCurrentTNode(
    tNode,
    false
    /* Text nodes are self closing */
  );
  if (parentTNode !== null && rootTNode !== parentTNode) {
    setTNodeInsertBeforeIndex(parentTNode, tNodeIdx);
  }
  return tNode;
}
function i18nStartFirstCreatePassProcessTextNode(tView, rootTNode, existingTNodes, createOpCodes, updateOpCodes, lView, text) {
  const hasBinding = text.match(BINDING_REGEXP);
  const tNode = createTNodeAndAddOpCode(tView, rootTNode, existingTNodes, lView, createOpCodes, hasBinding ? null : text, false);
  if (hasBinding) {
    generateBindingUpdateOpCodes(updateOpCodes, text, tNode.index, null, 0, null);
  }
}
function i18nAttributesFirstPass(tView, index, values) {
  const previousElement = getCurrentTNode();
  const previousElementIndex = previousElement.index;
  const updateOpCodes = [];
  if (ngDevMode) {
    attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);
  }
  if (tView.firstCreatePass && tView.data[index] === null) {
    for (let i = 0; i < values.length; i += 2) {
      const attrName = values[i];
      const message = values[i + 1];
      if (message !== "") {
        if (ICU_REGEXP.test(message)) {
          throw new Error(`ICU expressions are not supported in attributes. Message: "${message}".`);
        }
        generateBindingUpdateOpCodes(updateOpCodes, message, previousElementIndex, attrName, countBindings(updateOpCodes), null);
      }
    }
    tView.data[index] = updateOpCodes;
  }
}
function generateBindingUpdateOpCodes(updateOpCodes, str, destinationNode, attrName, bindingStart, sanitizeFn) {
  ngDevMode && assertGreaterThanOrEqual(destinationNode, HEADER_OFFSET, "Index must be in absolute LView offset");
  const maskIndex = updateOpCodes.length;
  const sizeIndex = maskIndex + 1;
  updateOpCodes.push(null, null);
  const startIndex = maskIndex + 2;
  if (ngDevMode) {
    attachDebugGetter(updateOpCodes, i18nUpdateOpCodesToString);
  }
  const textParts = str.split(BINDING_REGEXP);
  let mask = 0;
  for (let j = 0; j < textParts.length; j++) {
    const textValue = textParts[j];
    if (j & 1) {
      const bindingIndex = bindingStart + parseInt(textValue, 10);
      updateOpCodes.push(-1 - bindingIndex);
      mask = mask | toMaskBit(bindingIndex);
    } else if (textValue !== "") {
      updateOpCodes.push(textValue);
    }
  }
  updateOpCodes.push(destinationNode << 2 | (attrName ? 1 : 0));
  if (attrName) {
    updateOpCodes.push(attrName, sanitizeFn);
  }
  updateOpCodes[maskIndex] = mask;
  updateOpCodes[sizeIndex] = updateOpCodes.length - startIndex;
  return mask;
}
function countBindings(opCodes) {
  let count = 0;
  for (let i = 0; i < opCodes.length; i++) {
    const opCode = opCodes[i];
    if (typeof opCode === "number" && opCode < 0) {
      count++;
    }
  }
  return count;
}
function toMaskBit(bindingIndex) {
  return 1 << Math.min(bindingIndex, 31);
}
function isRootTemplateMessage(subTemplateIndex) {
  return subTemplateIndex === -1;
}
function removeInnerTemplateTranslation(message) {
  let match2;
  let res = "";
  let index = 0;
  let inTemplate = false;
  let tagMatched;
  while ((match2 = SUBTEMPLATE_REGEXP.exec(message)) !== null) {
    if (!inTemplate) {
      res += message.substring(index, match2.index + match2[0].length);
      tagMatched = match2[1];
      inTemplate = true;
    } else {
      if (match2[0] === `${MARKER}/*${tagMatched}${MARKER}`) {
        index = match2.index;
        inTemplate = false;
      }
    }
  }
  ngDevMode && assertEqual(inTemplate, false, `Tag mismatch: unable to find the end of the sub-template in the translation "${message}"`);
  res += message.slice(index);
  return res;
}
function getTranslationForTemplate(message, subTemplateIndex) {
  if (isRootTemplateMessage(subTemplateIndex)) {
    return removeInnerTemplateTranslation(message);
  } else {
    const start = message.indexOf(`:${subTemplateIndex}${MARKER}`) + 2 + subTemplateIndex.toString().length;
    const end = message.search(new RegExp(`${MARKER}\\/\\*\\d+:${subTemplateIndex}${MARKER}`));
    return removeInnerTemplateTranslation(message.substring(start, end));
  }
}
function icuStart(tView, lView, updateOpCodes, parentIdx, icuExpression, anchorIdx) {
  ngDevMode && assertDefined(icuExpression, "ICU expression must be defined");
  let bindingMask = 0;
  const tIcu = {
    type: icuExpression.type,
    currentCaseLViewIndex: allocExpando(tView, lView, 1, null),
    anchorIdx,
    cases: [],
    create: [],
    remove: [],
    update: []
  };
  addUpdateIcuSwitch(updateOpCodes, icuExpression, anchorIdx);
  setTIcu(tView, anchorIdx, tIcu);
  const values = icuExpression.values;
  for (let i = 0; i < values.length; i++) {
    const valueArr = values[i];
    const nestedIcus = [];
    for (let j = 0; j < valueArr.length; j++) {
      const value = valueArr[j];
      if (typeof value !== "string") {
        const icuIndex = nestedIcus.push(value) - 1;
        valueArr[j] = `<!--\uFFFD${icuIndex}\uFFFD-->`;
      }
    }
    bindingMask = parseIcuCase(tView, tIcu, lView, updateOpCodes, parentIdx, icuExpression.cases[i], valueArr.join(""), nestedIcus) | bindingMask;
  }
  if (bindingMask) {
    addUpdateIcuUpdate(updateOpCodes, bindingMask, anchorIdx);
  }
}
function parseICUBlock(pattern) {
  const cases = [];
  const values = [];
  let icuType = 1;
  let mainBinding = 0;
  pattern = pattern.replace(ICU_BLOCK_REGEXP, function(str, binding, type) {
    if (type === "select") {
      icuType = 0;
    } else {
      icuType = 1;
    }
    mainBinding = parseInt(binding.slice(1), 10);
    return "";
  });
  const parts = i18nParseTextIntoPartsAndICU(pattern);
  for (let pos = 0; pos < parts.length; ) {
    let key = parts[pos++].trim();
    if (icuType === 1) {
      key = key.replace(/\s*(?:=)?(\w+)\s*/, "$1");
    }
    if (key.length) {
      cases.push(key);
    }
    const blocks = i18nParseTextIntoPartsAndICU(parts[pos++]);
    if (cases.length > values.length) {
      values.push(blocks);
    }
  }
  return { type: icuType, mainBinding, cases, values };
}
function i18nParseTextIntoPartsAndICU(pattern) {
  if (!pattern) {
    return [];
  }
  let prevPos = 0;
  const braceStack = [];
  const results = [];
  const braces = /[{}]/g;
  braces.lastIndex = 0;
  let match2;
  while (match2 = braces.exec(pattern)) {
    const pos = match2.index;
    if (match2[0] == "}") {
      braceStack.pop();
      if (braceStack.length == 0) {
        const block = pattern.substring(prevPos, pos);
        if (ICU_BLOCK_REGEXP.test(block)) {
          results.push(parseICUBlock(block));
        } else {
          results.push(block);
        }
        prevPos = pos + 1;
      }
    } else {
      if (braceStack.length == 0) {
        const substring2 = pattern.substring(prevPos, pos);
        results.push(substring2);
        prevPos = pos + 1;
      }
      braceStack.push("{");
    }
  }
  const substring = pattern.substring(prevPos);
  results.push(substring);
  return results;
}
function parseIcuCase(tView, tIcu, lView, updateOpCodes, parentIdx, caseName, unsafeCaseHtml, nestedIcus) {
  const create = [];
  const remove2 = [];
  const update = [];
  if (ngDevMode) {
    attachDebugGetter(create, icuCreateOpCodesToString);
    attachDebugGetter(remove2, i18nRemoveOpCodesToString);
    attachDebugGetter(update, i18nUpdateOpCodesToString);
  }
  tIcu.cases.push(caseName);
  tIcu.create.push(create);
  tIcu.remove.push(remove2);
  tIcu.update.push(update);
  const inertBodyHelper2 = getInertBodyHelper(getDocument());
  const inertBodyElement = inertBodyHelper2.getInertBodyElement(unsafeCaseHtml);
  ngDevMode && assertDefined(inertBodyElement, "Unable to generate inert body element");
  const inertRootNode = getTemplateContent(inertBodyElement) || inertBodyElement;
  if (inertRootNode) {
    return walkIcuTree(tView, tIcu, lView, updateOpCodes, create, remove2, update, inertRootNode, parentIdx, nestedIcus, 0);
  } else {
    return 0;
  }
}
function walkIcuTree(tView, tIcu, lView, sharedUpdateOpCodes, create, remove2, update, parentNode, parentIdx, nestedIcus, depth) {
  let bindingMask = 0;
  let currentNode = parentNode.firstChild;
  while (currentNode) {
    const newIndex = allocExpando(tView, lView, 1, null);
    switch (currentNode.nodeType) {
      case Node.ELEMENT_NODE:
        const element = currentNode;
        const tagName = element.tagName.toLowerCase();
        if (VALID_ELEMENTS.hasOwnProperty(tagName)) {
          addCreateNodeAndAppend(create, ELEMENT_MARKER, tagName, parentIdx, newIndex);
          tView.data[newIndex] = tagName;
          const elAttrs = element.attributes;
          for (let i = 0; i < elAttrs.length; i++) {
            const attr = elAttrs.item(i);
            const lowerAttrName = attr.name.toLowerCase();
            const hasBinding2 = !!attr.value.match(BINDING_REGEXP);
            if (hasBinding2) {
              if (VALID_ATTRS.hasOwnProperty(lowerAttrName)) {
                if (URI_ATTRS[lowerAttrName]) {
                  generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, 0, _sanitizeUrl);
                } else {
                  generateBindingUpdateOpCodes(update, attr.value, newIndex, attr.name, 0, null);
                }
              } else {
                ngDevMode && console.warn(`WARNING: ignoring unsafe attribute value ${lowerAttrName} on element ${tagName} (see ${XSS_SECURITY_URL})`);
              }
            } else {
              addCreateAttribute(create, newIndex, attr);
            }
          }
          bindingMask = walkIcuTree(tView, tIcu, lView, sharedUpdateOpCodes, create, remove2, update, currentNode, newIndex, nestedIcus, depth + 1) | bindingMask;
          addRemoveNode(remove2, newIndex, depth);
        }
        break;
      case Node.TEXT_NODE:
        const value = currentNode.textContent || "";
        const hasBinding = value.match(BINDING_REGEXP);
        addCreateNodeAndAppend(create, null, hasBinding ? "" : value, parentIdx, newIndex);
        addRemoveNode(remove2, newIndex, depth);
        if (hasBinding) {
          bindingMask = generateBindingUpdateOpCodes(update, value, newIndex, null, 0, null) | bindingMask;
        }
        break;
      case Node.COMMENT_NODE:
        const isNestedIcu = NESTED_ICU.exec(currentNode.textContent || "");
        if (isNestedIcu) {
          const nestedIcuIndex = parseInt(isNestedIcu[1], 10);
          const icuExpression = nestedIcus[nestedIcuIndex];
          addCreateNodeAndAppend(create, ICU_MARKER, ngDevMode ? `nested ICU ${nestedIcuIndex}` : "", parentIdx, newIndex);
          icuStart(tView, lView, sharedUpdateOpCodes, parentIdx, icuExpression, newIndex);
          addRemoveNestedIcu(remove2, newIndex, depth);
        }
        break;
    }
    currentNode = currentNode.nextSibling;
  }
  return bindingMask;
}
function addRemoveNode(remove2, index, depth) {
  if (depth === 0) {
    remove2.push(index);
  }
}
function addRemoveNestedIcu(remove2, index, depth) {
  if (depth === 0) {
    remove2.push(~index);
    remove2.push(index);
  }
}
function addUpdateIcuSwitch(update, icuExpression, index) {
  update.push(
    toMaskBit(icuExpression.mainBinding),
    2,
    -1 - icuExpression.mainBinding,
    index << 2 | 2
    /* I18nUpdateOpCode.IcuSwitch */
  );
}
function addUpdateIcuUpdate(update, bindingMask, index) {
  update.push(
    bindingMask,
    1,
    index << 2 | 3
    /* I18nUpdateOpCode.IcuUpdate */
  );
}
function addCreateNodeAndAppend(create, marker, text, appendToParentIdx, createAtIdx) {
  if (marker !== null) {
    create.push(marker);
  }
  create.push(text, createAtIdx, icuCreateOpCode(0, appendToParentIdx, createAtIdx));
}
function addCreateAttribute(create, newIndex, attr) {
  create.push(newIndex << 1 | 1, attr.name, attr.value);
}
var ROOT_TEMPLATE_ID = 0;
var PP_MULTI_VALUE_PLACEHOLDERS_REGEXP = /\[(�.+?�?)\]/;
var PP_PLACEHOLDERS_REGEXP = /\[(�.+?�?)\]|(�\/?\*\d+:\d+�)/g;
var PP_ICU_VARS_REGEXP = /({\s*)(VAR_(PLURAL|SELECT)(_\d+)?)(\s*,)/g;
var PP_ICU_PLACEHOLDERS_REGEXP = /{([A-Z0-9_]+)}/g;
var PP_ICUS_REGEXP = /�I18N_EXP_(ICU(_\d+)?)�/g;
var PP_CLOSE_TEMPLATE_REGEXP = /\/\*/;
var PP_TEMPLATE_ID_REGEXP = /\d+\:(\d+)/;
function i18nPostprocess(message, replacements = {}) {
  let result = message;
  if (PP_MULTI_VALUE_PLACEHOLDERS_REGEXP.test(message)) {
    const matches = {};
    const templateIdsStack = [ROOT_TEMPLATE_ID];
    result = result.replace(PP_PLACEHOLDERS_REGEXP, (m, phs, tmpl) => {
      const content = phs || tmpl;
      const placeholders = matches[content] || [];
      if (!placeholders.length) {
        content.split("|").forEach((placeholder2) => {
          const match2 = placeholder2.match(PP_TEMPLATE_ID_REGEXP);
          const templateId2 = match2 ? parseInt(match2[1], 10) : ROOT_TEMPLATE_ID;
          const isCloseTemplateTag2 = PP_CLOSE_TEMPLATE_REGEXP.test(placeholder2);
          placeholders.push([templateId2, isCloseTemplateTag2, placeholder2]);
        });
        matches[content] = placeholders;
      }
      if (!placeholders.length) {
        throw new Error(`i18n postprocess: unmatched placeholder - ${content}`);
      }
      const currentTemplateId = templateIdsStack[templateIdsStack.length - 1];
      let idx = 0;
      for (let i = 0; i < placeholders.length; i++) {
        if (placeholders[i][0] === currentTemplateId) {
          idx = i;
          break;
        }
      }
      const [templateId, isCloseTemplateTag, placeholder] = placeholders[idx];
      if (isCloseTemplateTag) {
        templateIdsStack.pop();
      } else if (currentTemplateId !== templateId) {
        templateIdsStack.push(templateId);
      }
      placeholders.splice(idx, 1);
      return placeholder;
    });
  }
  if (!Object.keys(replacements).length) {
    return result;
  }
  result = result.replace(PP_ICU_VARS_REGEXP, (match2, start, key, _type, _idx, end) => {
    return replacements.hasOwnProperty(key) ? `${start}${replacements[key]}${end}` : match2;
  });
  result = result.replace(PP_ICU_PLACEHOLDERS_REGEXP, (match2, key) => {
    return replacements.hasOwnProperty(key) ? replacements[key] : match2;
  });
  result = result.replace(PP_ICUS_REGEXP, (match2, key) => {
    if (replacements.hasOwnProperty(key)) {
      const list = replacements[key];
      if (!list.length) {
        throw new Error(`i18n postprocess: unmatched ICU - ${match2} with key: ${key}`);
      }
      return list.shift();
    }
    return match2;
  });
  return result;
}
function \u0275\u0275i18nStart(index, messageIndex, subTemplateIndex = -1) {
  const tView = getTView();
  const lView = getLView();
  const adjustedIndex = HEADER_OFFSET + index;
  ngDevMode && assertDefined(tView, `tView should be defined`);
  const message = getConstant(tView.consts, messageIndex);
  const parentTNode = getCurrentParentTNode();
  if (tView.firstCreatePass) {
    i18nStartFirstCreatePass(tView, parentTNode === null ? 0 : parentTNode.index, lView, adjustedIndex, message, subTemplateIndex);
  }
  if (tView.type === 2) {
    const componentLView = lView[DECLARATION_COMPONENT_VIEW];
    componentLView[FLAGS] |= 32;
  } else {
    lView[FLAGS] |= 32;
  }
  const tI18n = tView.data[adjustedIndex];
  const sameViewParentTNode = parentTNode === lView[T_HOST] ? null : parentTNode;
  const parentRNode = getClosestRElement(tView, sameViewParentTNode, lView);
  const insertInFrontOf = parentTNode && parentTNode.type & 8 ? lView[parentTNode.index] : null;
  applyCreateOpCodes(lView, tI18n.create, parentRNode, insertInFrontOf);
  setInI18nBlock(true);
}
function \u0275\u0275i18nEnd() {
  setInI18nBlock(false);
}
function \u0275\u0275i18n(index, messageIndex, subTemplateIndex) {
  \u0275\u0275i18nStart(index, messageIndex, subTemplateIndex);
  \u0275\u0275i18nEnd();
}
function \u0275\u0275i18nAttributes(index, attrsIndex) {
  const tView = getTView();
  ngDevMode && assertDefined(tView, `tView should be defined`);
  const attrs = getConstant(tView.consts, attrsIndex);
  i18nAttributesFirstPass(tView, index + HEADER_OFFSET, attrs);
}
function \u0275\u0275i18nExp(value) {
  const lView = getLView();
  setMaskBit(bindingUpdated(lView, nextBindingIndex(), value));
  return \u0275\u0275i18nExp;
}
function \u0275\u0275i18nApply(index) {
  applyI18n(getTView(), getLView(), index + HEADER_OFFSET);
}
function \u0275\u0275i18nPostprocess(message, replacements = {}) {
  return i18nPostprocess(message, replacements);
}
function isPromise2(obj) {
  return !!obj && typeof obj.then === "function";
}
function isSubscribable(obj) {
  return !!obj && typeof obj.subscribe === "function";
}
function \u0275\u0275listener(eventName, listenerFn, useCapture, eventTargetResolver) {
  const lView = getLView();
  const tView = getTView();
  const tNode = getCurrentTNode();
  listenerInternal(tView, lView, lView[RENDERER], tNode, eventName, listenerFn, eventTargetResolver);
  return \u0275\u0275listener;
}
function \u0275\u0275syntheticHostListener(eventName, listenerFn) {
  const tNode = getCurrentTNode();
  const lView = getLView();
  const tView = getTView();
  const currentDef = getCurrentDirectiveDef(tView.data);
  const renderer = loadComponentRenderer(currentDef, tNode, lView);
  listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn);
  return \u0275\u0275syntheticHostListener;
}
function findExistingListener(tView, lView, eventName, tNodeIdx) {
  const tCleanup = tView.cleanup;
  if (tCleanup != null) {
    for (let i = 0; i < tCleanup.length - 1; i += 2) {
      const cleanupEventName = tCleanup[i];
      if (cleanupEventName === eventName && tCleanup[i + 1] === tNodeIdx) {
        const lCleanup = lView[CLEANUP];
        const listenerIdxInLCleanup = tCleanup[i + 2];
        return lCleanup.length > listenerIdxInLCleanup ? lCleanup[listenerIdxInLCleanup] : null;
      }
      if (typeof cleanupEventName === "string") {
        i += 2;
      }
    }
  }
  return null;
}
function listenerInternal(tView, lView, renderer, tNode, eventName, listenerFn, eventTargetResolver) {
  const isTNodeDirectiveHost = isDirectiveHost(tNode);
  const firstCreatePass = tView.firstCreatePass;
  const tCleanup = firstCreatePass && getOrCreateTViewCleanup(tView);
  const context2 = lView[CONTEXT];
  const lCleanup = getOrCreateLViewCleanup(lView);
  ngDevMode && assertTNodeType(
    tNode,
    3 | 12
    /* TNodeType.AnyContainer */
  );
  let processOutputs = true;
  if (tNode.type & 3 || eventTargetResolver) {
    const native = getNativeByTNode(tNode, lView);
    const target = eventTargetResolver ? eventTargetResolver(native) : native;
    const lCleanupIndex = lCleanup.length;
    const idxOrTargetGetter = eventTargetResolver ? (_lView) => eventTargetResolver(unwrapRNode(_lView[tNode.index])) : tNode.index;
    let existingListener = null;
    if (!eventTargetResolver && isTNodeDirectiveHost) {
      existingListener = findExistingListener(tView, lView, eventName, tNode.index);
    }
    if (existingListener !== null) {
      const lastListenerFn = existingListener.__ngLastListenerFn__ || existingListener;
      lastListenerFn.__ngNextListenerFn__ = listenerFn;
      existingListener.__ngLastListenerFn__ = listenerFn;
      processOutputs = false;
    } else {
      listenerFn = wrapListener(
        tNode,
        lView,
        context2,
        listenerFn,
        false
        /** preventDefault */
      );
      const cleanupFn = renderer.listen(target, eventName, listenerFn);
      ngDevMode && ngDevMode.rendererAddEventListener++;
      lCleanup.push(listenerFn, cleanupFn);
      tCleanup && tCleanup.push(eventName, idxOrTargetGetter, lCleanupIndex, lCleanupIndex + 1);
    }
  } else {
    listenerFn = wrapListener(
      tNode,
      lView,
      context2,
      listenerFn,
      false
      /** preventDefault */
    );
  }
  const outputs = tNode.outputs;
  let props;
  if (processOutputs && outputs !== null && (props = outputs[eventName])) {
    const propsLength = props.length;
    if (propsLength) {
      for (let i = 0; i < propsLength; i += 2) {
        const index = props[i];
        ngDevMode && assertIndexInRange(lView, index);
        const minifiedName = props[i + 1];
        const directiveInstance = lView[index];
        const output = directiveInstance[minifiedName];
        if (ngDevMode && !isSubscribable(output)) {
          throw new Error(`@Output ${minifiedName} not initialized in '${directiveInstance.constructor.name}'.`);
        }
        const subscription = output.subscribe(listenerFn);
        const idx = lCleanup.length;
        lCleanup.push(listenerFn, subscription);
        tCleanup && tCleanup.push(eventName, tNode.index, idx, -(idx + 1));
      }
    }
  }
}
function executeListenerWithErrorHandling(lView, context2, listenerFn, e) {
  try {
    profiler(6, context2, listenerFn);
    return listenerFn(e) !== false;
  } catch (error) {
    handleError(lView, error);
    return false;
  } finally {
    profiler(7, context2, listenerFn);
  }
}
function wrapListener(tNode, lView, context2, listenerFn, wrapWithPreventDefault) {
  return function wrapListenerIn_markDirtyAndPreventDefault(e) {
    if (e === Function) {
      return listenerFn;
    }
    const startView = tNode.componentOffset > -1 ? getComponentLViewByIndex(tNode.index, lView) : lView;
    markViewDirty(startView);
    let result = executeListenerWithErrorHandling(lView, context2, listenerFn, e);
    let nextListenerFn = wrapListenerIn_markDirtyAndPreventDefault.__ngNextListenerFn__;
    while (nextListenerFn) {
      result = executeListenerWithErrorHandling(lView, context2, nextListenerFn, e) && result;
      nextListenerFn = nextListenerFn.__ngNextListenerFn__;
    }
    if (wrapWithPreventDefault && result === false) {
      e.preventDefault();
    }
    return result;
  };
}
function \u0275\u0275nextContext(level = 1) {
  return nextContextImpl(level);
}
function matchingProjectionSlotIndex(tNode, projectionSlots) {
  let wildcardNgContentIndex = null;
  const ngProjectAsAttrVal = getProjectAsAttrValue(tNode);
  for (let i = 0; i < projectionSlots.length; i++) {
    const slotValue = projectionSlots[i];
    if (slotValue === "*") {
      wildcardNgContentIndex = i;
      continue;
    }
    if (ngProjectAsAttrVal === null ? isNodeMatchingSelectorList(
      tNode,
      slotValue,
      /* isProjectionMode */
      true
    ) : isSelectorInSelectorList(ngProjectAsAttrVal, slotValue)) {
      return i;
    }
  }
  return wildcardNgContentIndex;
}
function \u0275\u0275projectionDef(projectionSlots) {
  const componentNode = getLView()[DECLARATION_COMPONENT_VIEW][T_HOST];
  if (!componentNode.projection) {
    const numProjectionSlots = projectionSlots ? projectionSlots.length : 1;
    const projectionHeads = componentNode.projection = newArray(numProjectionSlots, null);
    const tails = projectionHeads.slice();
    let componentChild = componentNode.child;
    while (componentChild !== null) {
      const slotIndex = projectionSlots ? matchingProjectionSlotIndex(componentChild, projectionSlots) : 0;
      if (slotIndex !== null) {
        if (tails[slotIndex]) {
          tails[slotIndex].projectionNext = componentChild;
        } else {
          projectionHeads[slotIndex] = componentChild;
        }
        tails[slotIndex] = componentChild;
      }
      componentChild = componentChild.next;
    }
  }
}
function \u0275\u0275projection(nodeIndex, selectorIndex = 0, attrs) {
  const lView = getLView();
  const tView = getTView();
  const tProjectionNode = getOrCreateTNode(tView, HEADER_OFFSET + nodeIndex, 16, null, attrs || null);
  if (tProjectionNode.projection === null)
    tProjectionNode.projection = selectorIndex;
  setCurrentTNodeAsNotParent();
  const hydrationInfo = lView[HYDRATION];
  const isNodeCreationMode = !hydrationInfo || isInSkipHydrationBlock$1();
  if (isNodeCreationMode && (tProjectionNode.flags & 32) !== 32) {
    applyProjection(tView, lView, tProjectionNode);
  }
}
function \u0275\u0275propertyInterpolate(propName, v0, sanitizer) {
  \u0275\u0275propertyInterpolate1(propName, "", v0, "", sanitizer);
  return \u0275\u0275propertyInterpolate;
}
function \u0275\u0275propertyInterpolate1(propName, prefix, v0, suffix, sanitizer) {
  const lView = getLView();
  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 1, prefix, suffix);
  }
  return \u0275\u0275propertyInterpolate1;
}
function \u0275\u0275propertyInterpolate2(propName, prefix, v0, i0, v1, suffix, sanitizer) {
  const lView = getLView();
  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 2, prefix, i0, suffix);
  }
  return \u0275\u0275propertyInterpolate2;
}
function \u0275\u0275propertyInterpolate3(propName, prefix, v0, i0, v1, i1, v2, suffix, sanitizer) {
  const lView = getLView();
  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 3, prefix, i0, i1, suffix);
  }
  return \u0275\u0275propertyInterpolate3;
}
function \u0275\u0275propertyInterpolate4(propName, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, sanitizer) {
  const lView = getLView();
  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 4, prefix, i0, i1, i2, suffix);
  }
  return \u0275\u0275propertyInterpolate4;
}
function \u0275\u0275propertyInterpolate5(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, sanitizer) {
  const lView = getLView();
  const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 5, prefix, i0, i1, i2, i3, suffix);
  }
  return \u0275\u0275propertyInterpolate5;
}
function \u0275\u0275propertyInterpolate6(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, sanitizer) {
  const lView = getLView();
  const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 6, prefix, i0, i1, i2, i3, i4, suffix);
  }
  return \u0275\u0275propertyInterpolate6;
}
function \u0275\u0275propertyInterpolate7(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, sanitizer) {
  const lView = getLView();
  const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 7, prefix, i0, i1, i2, i3, i4, i5, suffix);
  }
  return \u0275\u0275propertyInterpolate7;
}
function \u0275\u0275propertyInterpolate8(propName, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, sanitizer) {
  const lView = getLView();
  const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
  if (interpolatedValue !== NO_CHANGE) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
    ngDevMode && storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - 8, prefix, i0, i1, i2, i3, i4, i5, i6, suffix);
  }
  return \u0275\u0275propertyInterpolate8;
}
function \u0275\u0275propertyInterpolateV(propName, values, sanitizer) {
  const lView = getLView();
  const interpolatedValue = interpolationV(lView, values);
  if (interpolatedValue !== NO_CHANGE) {
    const tView = getTView();
    const tNode = getSelectedTNode();
    elementPropertyInternal(tView, tNode, lView, propName, interpolatedValue, lView[RENDERER], sanitizer, false);
    if (ngDevMode) {
      const interpolationInBetween = [values[0]];
      for (let i = 2; i < values.length; i += 2) {
        interpolationInBetween.push(values[i]);
      }
      storePropertyBindingMetadata(tView.data, tNode, propName, getBindingIndex() - interpolationInBetween.length + 1, ...interpolationInBetween);
    }
  }
  return \u0275\u0275propertyInterpolateV;
}
function store(tView, lView, index, value) {
  if (index >= tView.data.length) {
    tView.data[index] = null;
    tView.blueprint[index] = null;
  }
  lView[index] = value;
}
function \u0275\u0275reference(index) {
  const contextLView = getContextLView();
  return load(contextLView, HEADER_OFFSET + index);
}
function \u0275\u0275styleMapInterpolate1(prefix, v0, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);
  \u0275\u0275styleMap(interpolatedValue);
}
function \u0275\u0275styleMapInterpolate2(prefix, v0, i0, v1, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);
  \u0275\u0275styleMap(interpolatedValue);
}
function \u0275\u0275styleMapInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
  \u0275\u0275styleMap(interpolatedValue);
}
function \u0275\u0275styleMapInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
  \u0275\u0275styleMap(interpolatedValue);
}
function \u0275\u0275styleMapInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
  \u0275\u0275styleMap(interpolatedValue);
}
function \u0275\u0275styleMapInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
  \u0275\u0275styleMap(interpolatedValue);
}
function \u0275\u0275styleMapInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
  \u0275\u0275styleMap(interpolatedValue);
}
function \u0275\u0275styleMapInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {
  const lView = getLView();
  const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
  \u0275\u0275styleMap(interpolatedValue);
}
function \u0275\u0275styleMapInterpolateV(values) {
  const lView = getLView();
  const interpolatedValue = interpolationV(lView, values);
  \u0275\u0275styleMap(interpolatedValue);
}
function \u0275\u0275stylePropInterpolate1(prop, prefix, v0, suffix, valueSuffix) {
  const lView = getLView();
  const interpolatedValue = interpolation1(lView, prefix, v0, suffix);
  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
  return \u0275\u0275stylePropInterpolate1;
}
function \u0275\u0275stylePropInterpolate2(prop, prefix, v0, i0, v1, suffix, valueSuffix) {
  const lView = getLView();
  const interpolatedValue = interpolation2(lView, prefix, v0, i0, v1, suffix);
  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
  return \u0275\u0275stylePropInterpolate2;
}
function \u0275\u0275stylePropInterpolate3(prop, prefix, v0, i0, v1, i1, v2, suffix, valueSuffix) {
  const lView = getLView();
  const interpolatedValue = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
  return \u0275\u0275stylePropInterpolate3;
}
function \u0275\u0275stylePropInterpolate4(prop, prefix, v0, i0, v1, i1, v2, i2, v3, suffix, valueSuffix) {
  const lView = getLView();
  const interpolatedValue = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
  return \u0275\u0275stylePropInterpolate4;
}
function \u0275\u0275stylePropInterpolate5(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix, valueSuffix) {
  const lView = getLView();
  const interpolatedValue = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
  return \u0275\u0275stylePropInterpolate5;
}
function \u0275\u0275stylePropInterpolate6(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix, valueSuffix) {
  const lView = getLView();
  const interpolatedValue = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
  return \u0275\u0275stylePropInterpolate6;
}
function \u0275\u0275stylePropInterpolate7(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix, valueSuffix) {
  const lView = getLView();
  const interpolatedValue = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
  return \u0275\u0275stylePropInterpolate7;
}
function \u0275\u0275stylePropInterpolate8(prop, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix, valueSuffix) {
  const lView = getLView();
  const interpolatedValue = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
  return \u0275\u0275stylePropInterpolate8;
}
function \u0275\u0275stylePropInterpolateV(prop, values, valueSuffix) {
  const lView = getLView();
  const interpolatedValue = interpolationV(lView, values);
  checkStylingProperty(prop, interpolatedValue, valueSuffix, false);
  return \u0275\u0275stylePropInterpolateV;
}
function \u0275\u0275text(index, value = "") {
  const lView = getLView();
  const tView = getTView();
  const adjustedIndex = index + HEADER_OFFSET;
  ngDevMode && assertEqual(getBindingIndex(), tView.bindingStartIndex, "text nodes should be created before any bindings");
  ngDevMode && assertIndexInRange(lView, adjustedIndex);
  const tNode = tView.firstCreatePass ? getOrCreateTNode(tView, adjustedIndex, 1, value, null) : tView.data[adjustedIndex];
  const textNative = _locateOrCreateTextNode(tView, lView, tNode, value, index);
  lView[adjustedIndex] = textNative;
  if (wasLastNodeCreated()) {
    appendChild(tView, lView, textNative, tNode);
  }
  setCurrentTNode(tNode, false);
}
var _locateOrCreateTextNode = (tView, lView, tNode, value, index) => {
  lastNodeWasCreated(true);
  return createTextNode(lView[RENDERER], value);
};
function \u0275\u0275textInterpolate(v0) {
  \u0275\u0275textInterpolate1("", v0, "");
  return \u0275\u0275textInterpolate;
}
function \u0275\u0275textInterpolate1(prefix, v0, suffix) {
  const lView = getLView();
  const interpolated = interpolation1(lView, prefix, v0, suffix);
  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }
  return \u0275\u0275textInterpolate1;
}
function \u0275\u0275textInterpolate2(prefix, v0, i0, v1, suffix) {
  const lView = getLView();
  const interpolated = interpolation2(lView, prefix, v0, i0, v1, suffix);
  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }
  return \u0275\u0275textInterpolate2;
}
function \u0275\u0275textInterpolate3(prefix, v0, i0, v1, i1, v2, suffix) {
  const lView = getLView();
  const interpolated = interpolation3(lView, prefix, v0, i0, v1, i1, v2, suffix);
  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }
  return \u0275\u0275textInterpolate3;
}
function \u0275\u0275textInterpolate4(prefix, v0, i0, v1, i1, v2, i2, v3, suffix) {
  const lView = getLView();
  const interpolated = interpolation4(lView, prefix, v0, i0, v1, i1, v2, i2, v3, suffix);
  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }
  return \u0275\u0275textInterpolate4;
}
function \u0275\u0275textInterpolate5(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix) {
  const lView = getLView();
  const interpolated = interpolation5(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, suffix);
  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }
  return \u0275\u0275textInterpolate5;
}
function \u0275\u0275textInterpolate6(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix) {
  const lView = getLView();
  const interpolated = interpolation6(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, suffix);
  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }
  return \u0275\u0275textInterpolate6;
}
function \u0275\u0275textInterpolate7(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix) {
  const lView = getLView();
  const interpolated = interpolation7(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, suffix);
  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }
  return \u0275\u0275textInterpolate7;
}
function \u0275\u0275textInterpolate8(prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix) {
  const lView = getLView();
  const interpolated = interpolation8(lView, prefix, v0, i0, v1, i1, v2, i2, v3, i3, v4, i4, v5, i5, v6, i6, v7, suffix);
  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }
  return \u0275\u0275textInterpolate8;
}
function \u0275\u0275textInterpolateV(values) {
  const lView = getLView();
  const interpolated = interpolationV(lView, values);
  if (interpolated !== NO_CHANGE) {
    textBindingInternal(lView, getSelectedIndex(), interpolated);
  }
  return \u0275\u0275textInterpolateV;
}
function providersResolver(def, providers, viewProviders) {
  const tView = getTView();
  if (tView.firstCreatePass) {
    const isComponent2 = isComponentDef(def);
    resolveProvider(viewProviders, tView.data, tView.blueprint, isComponent2, true);
    resolveProvider(providers, tView.data, tView.blueprint, isComponent2, false);
  }
}
function resolveProvider(provider, tInjectables, lInjectablesBlueprint, isComponent2, isViewProvider) {
  provider = resolveForwardRef(provider);
  if (Array.isArray(provider)) {
    for (let i = 0; i < provider.length; i++) {
      resolveProvider(provider[i], tInjectables, lInjectablesBlueprint, isComponent2, isViewProvider);
    }
  } else {
    const tView = getTView();
    const lView = getLView();
    const tNode = getCurrentTNode();
    let token = isTypeProvider(provider) ? provider : resolveForwardRef(provider.provide);
    const providerFactory = providerToFactory(provider);
    if (ngDevMode) {
      const injector = new NodeInjector(tNode, lView);
      runInInjectorProfilerContext(injector, token, () => {
        emitProviderConfiguredEvent(provider, isViewProvider);
      });
    }
    const beginIndex = tNode.providerIndexes & 1048575;
    const endIndex = tNode.directiveStart;
    const cptViewProvidersCount = tNode.providerIndexes >> 20;
    if (isTypeProvider(provider) || !provider.multi) {
      const factory = new NodeInjectorFactory(providerFactory, isViewProvider, \u0275\u0275directiveInject);
      const existingFactoryIndex = indexOf(token, tInjectables, isViewProvider ? beginIndex : beginIndex + cptViewProvidersCount, endIndex);
      if (existingFactoryIndex === -1) {
        diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);
        registerDestroyHooksIfSupported(tView, provider, tInjectables.length);
        tInjectables.push(token);
        tNode.directiveStart++;
        tNode.directiveEnd++;
        if (isViewProvider) {
          tNode.providerIndexes += 1048576;
        }
        lInjectablesBlueprint.push(factory);
        lView.push(factory);
      } else {
        lInjectablesBlueprint[existingFactoryIndex] = factory;
        lView[existingFactoryIndex] = factory;
      }
    } else {
      const existingProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex + cptViewProvidersCount, endIndex);
      const existingViewProvidersFactoryIndex = indexOf(token, tInjectables, beginIndex, beginIndex + cptViewProvidersCount);
      const doesProvidersFactoryExist = existingProvidersFactoryIndex >= 0 && lInjectablesBlueprint[existingProvidersFactoryIndex];
      const doesViewProvidersFactoryExist = existingViewProvidersFactoryIndex >= 0 && lInjectablesBlueprint[existingViewProvidersFactoryIndex];
      if (isViewProvider && !doesViewProvidersFactoryExist || !isViewProvider && !doesProvidersFactoryExist) {
        diPublicInInjector(getOrCreateNodeInjectorForNode(tNode, lView), tView, token);
        const factory = multiFactory(isViewProvider ? multiViewProvidersFactoryResolver : multiProvidersFactoryResolver, lInjectablesBlueprint.length, isViewProvider, isComponent2, providerFactory);
        if (!isViewProvider && doesViewProvidersFactoryExist) {
          lInjectablesBlueprint[existingViewProvidersFactoryIndex].providerFactory = factory;
        }
        registerDestroyHooksIfSupported(tView, provider, tInjectables.length, 0);
        tInjectables.push(token);
        tNode.directiveStart++;
        tNode.directiveEnd++;
        if (isViewProvider) {
          tNode.providerIndexes += 1048576;
        }
        lInjectablesBlueprint.push(factory);
        lView.push(factory);
      } else {
        const indexInFactory = multiFactoryAdd(lInjectablesBlueprint[isViewProvider ? existingViewProvidersFactoryIndex : existingProvidersFactoryIndex], providerFactory, !isViewProvider && isComponent2);
        registerDestroyHooksIfSupported(tView, provider, existingProvidersFactoryIndex > -1 ? existingProvidersFactoryIndex : existingViewProvidersFactoryIndex, indexInFactory);
      }
      if (!isViewProvider && isComponent2 && doesViewProvidersFactoryExist) {
        lInjectablesBlueprint[existingViewProvidersFactoryIndex].componentProviders++;
      }
    }
  }
}
function registerDestroyHooksIfSupported(tView, provider, contextIndex, indexInFactory) {
  const providerIsTypeProvider = isTypeProvider(provider);
  const providerIsClassProvider = isClassProvider(provider);
  if (providerIsTypeProvider || providerIsClassProvider) {
    const classToken = providerIsClassProvider ? resolveForwardRef(provider.useClass) : provider;
    const prototype = classToken.prototype;
    const ngOnDestroy = prototype.ngOnDestroy;
    if (ngOnDestroy) {
      const hooks = tView.destroyHooks || (tView.destroyHooks = []);
      if (!providerIsTypeProvider && provider.multi) {
        ngDevMode && assertDefined(indexInFactory, "indexInFactory when registering multi factory destroy hook");
        const existingCallbacksIndex = hooks.indexOf(contextIndex);
        if (existingCallbacksIndex === -1) {
          hooks.push(contextIndex, [indexInFactory, ngOnDestroy]);
        } else {
          hooks[existingCallbacksIndex + 1].push(indexInFactory, ngOnDestroy);
        }
      } else {
        hooks.push(contextIndex, ngOnDestroy);
      }
    }
  }
}
function multiFactoryAdd(multiFactory2, factory, isComponentProvider) {
  if (isComponentProvider) {
    multiFactory2.componentProviders++;
  }
  return multiFactory2.multi.push(factory) - 1;
}
function indexOf(item, arr, begin, end) {
  for (let i = begin; i < end; i++) {
    if (arr[i] === item)
      return i;
  }
  return -1;
}
function multiProvidersFactoryResolver(_, tData, lData, tNode) {
  return multiResolve(this.multi, []);
}
function multiViewProvidersFactoryResolver(_, tData, lView, tNode) {
  const factories = this.multi;
  let result;
  if (this.providerFactory) {
    const componentCount = this.providerFactory.componentProviders;
    const multiProviders = getNodeInjectable(lView, lView[TVIEW], this.providerFactory.index, tNode);
    result = multiProviders.slice(0, componentCount);
    multiResolve(factories, result);
    for (let i = componentCount; i < multiProviders.length; i++) {
      result.push(multiProviders[i]);
    }
  } else {
    result = [];
    multiResolve(factories, result);
  }
  return result;
}
function multiResolve(factories, result) {
  for (let i = 0; i < factories.length; i++) {
    const factory = factories[i];
    result.push(factory());
  }
  return result;
}
function multiFactory(factoryFn, index, isViewProvider, isComponent2, f) {
  const factory = new NodeInjectorFactory(factoryFn, isViewProvider, \u0275\u0275directiveInject);
  factory.multi = [];
  factory.index = index;
  factory.componentProviders = 0;
  multiFactoryAdd(factory, f, isComponent2 && !isViewProvider);
  return factory;
}
function \u0275\u0275ProvidersFeature(providers, viewProviders = []) {
  return (definition) => {
    definition.providersResolver = (def, processProvidersFn) => {
      return providersResolver(
        def,
        //
        processProvidersFn ? processProvidersFn(providers) : providers,
        //
        viewProviders
      );
    };
  };
}
var NgModuleRef$1 = class {
};
var NgModuleFactory$1 = class {
};
function createNgModule(ngModule, parentInjector) {
  return new NgModuleRef(ngModule, parentInjector ?? null, []);
}
var NgModuleRef = class extends NgModuleRef$1 {
  constructor(ngModuleType, _parent, additionalProviders) {
    super();
    this._parent = _parent;
    this._bootstrapComponents = [];
    this.destroyCbs = [];
    this.componentFactoryResolver = new ComponentFactoryResolver(this);
    const ngModuleDef = getNgModuleDef(ngModuleType);
    ngDevMode && assertDefined(ngModuleDef, `NgModule '${stringify(ngModuleType)}' is not a subtype of 'NgModuleType'.`);
    this._bootstrapComponents = maybeUnwrapFn(ngModuleDef.bootstrap);
    this._r3Injector = createInjectorWithoutInjectorInstances(ngModuleType, _parent, [
      { provide: NgModuleRef$1, useValue: this },
      {
        provide: ComponentFactoryResolver$1,
        useValue: this.componentFactoryResolver
      },
      ...additionalProviders
    ], stringify(ngModuleType), /* @__PURE__ */ new Set(["environment"]));
    this._r3Injector.resolveInjectorInitializers();
    this.instance = this._r3Injector.get(ngModuleType);
  }
  get injector() {
    return this._r3Injector;
  }
  destroy() {
    ngDevMode && assertDefined(this.destroyCbs, "NgModule already destroyed");
    const injector = this._r3Injector;
    !injector.destroyed && injector.destroy();
    this.destroyCbs.forEach((fn) => fn());
    this.destroyCbs = null;
  }
  onDestroy(callback) {
    ngDevMode && assertDefined(this.destroyCbs, "NgModule already destroyed");
    this.destroyCbs.push(callback);
  }
};
var NgModuleFactory = class extends NgModuleFactory$1 {
  constructor(moduleType) {
    super();
    this.moduleType = moduleType;
  }
  create(parentInjector) {
    return new NgModuleRef(this.moduleType, parentInjector, []);
  }
};
function createNgModuleRefWithProviders(moduleType, parentInjector, additionalProviders) {
  return new NgModuleRef(moduleType, parentInjector, additionalProviders);
}
var EnvironmentNgModuleRefAdapter = class extends NgModuleRef$1 {
  constructor(config2) {
    super();
    this.componentFactoryResolver = new ComponentFactoryResolver(this);
    this.instance = null;
    const injector = new R3Injector([
      ...config2.providers,
      { provide: NgModuleRef$1, useValue: this },
      { provide: ComponentFactoryResolver$1, useValue: this.componentFactoryResolver }
    ], config2.parent || getNullInjector(), config2.debugName, /* @__PURE__ */ new Set(["environment"]));
    this.injector = injector;
    if (config2.runEnvironmentInitializers) {
      injector.resolveInjectorInitializers();
    }
  }
  destroy() {
    this.injector.destroy();
  }
  onDestroy(callback) {
    this.injector.onDestroy(callback);
  }
};
function createEnvironmentInjector(providers, parent, debugName = null) {
  const adapter = new EnvironmentNgModuleRefAdapter({ providers, parent, debugName, runEnvironmentInitializers: true });
  return adapter.injector;
}
var _StandaloneService = class _StandaloneService {
  constructor(_injector) {
    this._injector = _injector;
    this.cachedInjectors = /* @__PURE__ */ new Map();
  }
  getOrCreateStandaloneInjector(componentDef) {
    if (!componentDef.standalone) {
      return null;
    }
    if (!this.cachedInjectors.has(componentDef)) {
      const providers = internalImportProvidersFrom(false, componentDef.type);
      const standaloneInjector = providers.length > 0 ? createEnvironmentInjector([providers], this._injector, `Standalone[${componentDef.type.name}]`) : null;
      this.cachedInjectors.set(componentDef, standaloneInjector);
    }
    return this.cachedInjectors.get(componentDef);
  }
  ngOnDestroy() {
    try {
      for (const injector of this.cachedInjectors.values()) {
        if (injector !== null) {
          injector.destroy();
        }
      }
    } finally {
      this.cachedInjectors.clear();
    }
  }
};
_StandaloneService.\u0275prov = \u0275\u0275defineInjectable({
  token: _StandaloneService,
  providedIn: "environment",
  factory: () => new _StandaloneService(\u0275\u0275inject(EnvironmentInjector))
});
var StandaloneService = _StandaloneService;
function \u0275\u0275StandaloneFeature(definition) {
  performanceMarkFeature("NgStandalone");
  definition.getStandaloneInjector = (parentInjector) => {
    return parentInjector.get(StandaloneService).getOrCreateStandaloneInjector(definition);
  };
}
function \u0275\u0275setComponentScope(type, directives, pipes) {
  const def = type.\u0275cmp;
  def.directiveDefs = extractDefListOrFactory(
    directives,
    /* pipeDef */
    false
  );
  def.pipeDefs = extractDefListOrFactory(
    pipes,
    /* pipeDef */
    true
  );
}
function \u0275\u0275setNgModuleScope(type, scope) {
  return noSideEffects(() => {
    const ngModuleDef = getNgModuleDef(type, true);
    ngModuleDef.declarations = convertToTypeArray(scope.declarations || EMPTY_ARRAY);
    ngModuleDef.imports = convertToTypeArray(scope.imports || EMPTY_ARRAY);
    ngModuleDef.exports = convertToTypeArray(scope.exports || EMPTY_ARRAY);
    if (scope.bootstrap) {
      ngModuleDef.bootstrap = convertToTypeArray(scope.bootstrap);
    }
    depsTracker.registerNgModule(type, scope);
  });
}
function convertToTypeArray(values) {
  if (typeof values === "function") {
    return values;
  }
  const flattenValues = flatten(values);
  if (flattenValues.some(isForwardRef)) {
    return () => flattenValues.map(resolveForwardRef).map(maybeUnwrapModuleWithProviders);
  } else {
    return flattenValues.map(maybeUnwrapModuleWithProviders);
  }
}
function maybeUnwrapModuleWithProviders(value) {
  return isModuleWithProviders(value) ? value.ngModule : value;
}
function getComponent(element) {
  ngDevMode && assertDomElement(element);
  const context2 = getLContext(element);
  if (context2 === null)
    return null;
  if (context2.component === void 0) {
    const lView = context2.lView;
    if (lView === null) {
      return null;
    }
    context2.component = getComponentAtNodeIndex(context2.nodeIndex, lView);
  }
  return context2.component;
}
function getContext(element) {
  assertDomElement(element);
  const context2 = getLContext(element);
  const lView = context2 ? context2.lView : null;
  return lView === null ? null : lView[CONTEXT];
}
function getOwningComponent(elementOrDir) {
  const context2 = getLContext(elementOrDir);
  let lView = context2 ? context2.lView : null;
  if (lView === null)
    return null;
  let parent;
  while (lView[TVIEW].type === 2 && (parent = getLViewParent(lView))) {
    lView = parent;
  }
  return lView[FLAGS] & 512 ? null : lView[CONTEXT];
}
function getRootComponents(elementOrDir) {
  const lView = readPatchedLView(elementOrDir);
  return lView !== null ? [getRootContext(lView)] : [];
}
function getInjector(elementOrDir) {
  const context2 = getLContext(elementOrDir);
  const lView = context2 ? context2.lView : null;
  if (lView === null)
    return Injector.NULL;
  const tNode = lView[TVIEW].data[context2.nodeIndex];
  return new NodeInjector(tNode, lView);
}
function getDirectives(node) {
  if (node instanceof Text) {
    return [];
  }
  const context2 = getLContext(node);
  const lView = context2 ? context2.lView : null;
  if (lView === null) {
    return [];
  }
  const tView = lView[TVIEW];
  const nodeIndex = context2.nodeIndex;
  if (!tView?.data[nodeIndex]) {
    return [];
  }
  if (context2.directives === void 0) {
    context2.directives = getDirectivesAtNodeIndex(nodeIndex, lView);
  }
  return context2.directives === null ? [] : [...context2.directives];
}
function getDirectiveMetadata$1(directiveOrComponentInstance) {
  const { constructor } = directiveOrComponentInstance;
  if (!constructor) {
    throw new Error("Unable to find the instance constructor");
  }
  const componentDef = getComponentDef(constructor);
  if (componentDef) {
    return {
      inputs: componentDef.inputs,
      outputs: componentDef.outputs,
      encapsulation: componentDef.encapsulation,
      changeDetection: componentDef.onPush ? ChangeDetectionStrategy.OnPush : ChangeDetectionStrategy.Default
    };
  }
  const directiveDef = getDirectiveDef(constructor);
  if (directiveDef) {
    return { inputs: directiveDef.inputs, outputs: directiveDef.outputs };
  }
  return null;
}
function getHostElement(componentOrDirective) {
  return getLContext(componentOrDirective).native;
}
function getListeners(element) {
  ngDevMode && assertDomElement(element);
  const lContext = getLContext(element);
  const lView = lContext === null ? null : lContext.lView;
  if (lView === null)
    return [];
  const tView = lView[TVIEW];
  const lCleanup = lView[CLEANUP];
  const tCleanup = tView.cleanup;
  const listeners = [];
  if (tCleanup && lCleanup) {
    for (let i = 0; i < tCleanup.length; ) {
      const firstParam = tCleanup[i++];
      const secondParam = tCleanup[i++];
      if (typeof firstParam === "string") {
        const name = firstParam;
        const listenerElement = unwrapRNode(lView[secondParam]);
        const callback = lCleanup[tCleanup[i++]];
        const useCaptureOrIndx = tCleanup[i++];
        const type = typeof useCaptureOrIndx === "boolean" || useCaptureOrIndx >= 0 ? "dom" : "output";
        const useCapture = typeof useCaptureOrIndx === "boolean" ? useCaptureOrIndx : false;
        if (element == listenerElement) {
          listeners.push({ element, name, callback, useCapture, type });
        }
      }
    }
  }
  listeners.sort(sortListeners);
  return listeners;
}
function sortListeners(a, b) {
  if (a.name == b.name)
    return 0;
  return a.name < b.name ? -1 : 1;
}
function assertDomElement(value) {
  if (typeof Element !== "undefined" && !(value instanceof Element)) {
    throw new Error("Expecting instance of DOM Element");
  }
}
function setClassMetadata(type, decorators, ctorParameters, propDecorators) {
  return noSideEffects(() => {
    const clazz = type;
    if (decorators !== null) {
      if (clazz.hasOwnProperty("decorators") && clazz.decorators !== void 0) {
        clazz.decorators.push(...decorators);
      } else {
        clazz.decorators = decorators;
      }
    }
    if (ctorParameters !== null) {
      clazz.ctorParameters = ctorParameters;
    }
    if (propDecorators !== null) {
      if (clazz.hasOwnProperty("propDecorators") && clazz.propDecorators !== void 0) {
        clazz.propDecorators = __spreadValues(__spreadValues({}, clazz.propDecorators), propDecorators);
      } else {
        clazz.propDecorators = propDecorators;
      }
    }
  });
}
function \u0275\u0275pureFunction0(slotOffset, pureFn, thisArg) {
  const bindingIndex = getBindingRoot() + slotOffset;
  const lView = getLView();
  return lView[bindingIndex] === NO_CHANGE ? updateBinding(lView, bindingIndex, thisArg ? pureFn.call(thisArg) : pureFn()) : getBinding(lView, bindingIndex);
}
function \u0275\u0275pureFunction1(slotOffset, pureFn, exp, thisArg) {
  return pureFunction1Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp, thisArg);
}
function \u0275\u0275pureFunction2(slotOffset, pureFn, exp1, exp2, thisArg) {
  return pureFunction2Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, thisArg);
}
function \u0275\u0275pureFunction3(slotOffset, pureFn, exp1, exp2, exp3, thisArg) {
  return pureFunction3Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, thisArg);
}
function \u0275\u0275pureFunction4(slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {
  return pureFunction4Internal(getLView(), getBindingRoot(), slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg);
}
function \u0275\u0275pureFunction5(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, thisArg) {
  const bindingIndex = getBindingRoot() + slotOffset;
  const lView = getLView();
  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
  return bindingUpdated(lView, bindingIndex + 4, exp5) || different ? updateBinding(lView, bindingIndex + 5, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5) : pureFn(exp1, exp2, exp3, exp4, exp5)) : getBinding(lView, bindingIndex + 5);
}
function \u0275\u0275pureFunction6(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, thisArg) {
  const bindingIndex = getBindingRoot() + slotOffset;
  const lView = getLView();
  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
  return bindingUpdated2(lView, bindingIndex + 4, exp5, exp6) || different ? updateBinding(lView, bindingIndex + 6, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6)) : getBinding(lView, bindingIndex + 6);
}
function \u0275\u0275pureFunction7(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, thisArg) {
  const bindingIndex = getBindingRoot() + slotOffset;
  const lView = getLView();
  let different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
  return bindingUpdated3(lView, bindingIndex + 4, exp5, exp6, exp7) || different ? updateBinding(lView, bindingIndex + 7, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7)) : getBinding(lView, bindingIndex + 7);
}
function \u0275\u0275pureFunction8(slotOffset, pureFn, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8, thisArg) {
  const bindingIndex = getBindingRoot() + slotOffset;
  const lView = getLView();
  const different = bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4);
  return bindingUpdated4(lView, bindingIndex + 4, exp5, exp6, exp7, exp8) || different ? updateBinding(lView, bindingIndex + 8, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8) : pureFn(exp1, exp2, exp3, exp4, exp5, exp6, exp7, exp8)) : getBinding(lView, bindingIndex + 8);
}
function \u0275\u0275pureFunctionV(slotOffset, pureFn, exps, thisArg) {
  return pureFunctionVInternal(getLView(), getBindingRoot(), slotOffset, pureFn, exps, thisArg);
}
function getPureFunctionReturnValue(lView, returnValueIndex) {
  ngDevMode && assertIndexInRange(lView, returnValueIndex);
  const lastReturnValue = lView[returnValueIndex];
  return lastReturnValue === NO_CHANGE ? void 0 : lastReturnValue;
}
function pureFunction1Internal(lView, bindingRoot, slotOffset, pureFn, exp, thisArg) {
  const bindingIndex = bindingRoot + slotOffset;
  return bindingUpdated(lView, bindingIndex, exp) ? updateBinding(lView, bindingIndex + 1, thisArg ? pureFn.call(thisArg, exp) : pureFn(exp)) : getPureFunctionReturnValue(lView, bindingIndex + 1);
}
function pureFunction2Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, thisArg) {
  const bindingIndex = bindingRoot + slotOffset;
  return bindingUpdated2(lView, bindingIndex, exp1, exp2) ? updateBinding(lView, bindingIndex + 2, thisArg ? pureFn.call(thisArg, exp1, exp2) : pureFn(exp1, exp2)) : getPureFunctionReturnValue(lView, bindingIndex + 2);
}
function pureFunction3Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, thisArg) {
  const bindingIndex = bindingRoot + slotOffset;
  return bindingUpdated3(lView, bindingIndex, exp1, exp2, exp3) ? updateBinding(lView, bindingIndex + 3, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3) : pureFn(exp1, exp2, exp3)) : getPureFunctionReturnValue(lView, bindingIndex + 3);
}
function pureFunction4Internal(lView, bindingRoot, slotOffset, pureFn, exp1, exp2, exp3, exp4, thisArg) {
  const bindingIndex = bindingRoot + slotOffset;
  return bindingUpdated4(lView, bindingIndex, exp1, exp2, exp3, exp4) ? updateBinding(lView, bindingIndex + 4, thisArg ? pureFn.call(thisArg, exp1, exp2, exp3, exp4) : pureFn(exp1, exp2, exp3, exp4)) : getPureFunctionReturnValue(lView, bindingIndex + 4);
}
function pureFunctionVInternal(lView, bindingRoot, slotOffset, pureFn, exps, thisArg) {
  let bindingIndex = bindingRoot + slotOffset;
  let different = false;
  for (let i = 0; i < exps.length; i++) {
    bindingUpdated(lView, bindingIndex++, exps[i]) && (different = true);
  }
  return different ? updateBinding(lView, bindingIndex, pureFn.apply(thisArg, exps)) : getPureFunctionReturnValue(lView, bindingIndex);
}
function \u0275\u0275pipe(index, pipeName) {
  const tView = getTView();
  let pipeDef;
  const adjustedIndex = index + HEADER_OFFSET;
  if (tView.firstCreatePass) {
    pipeDef = getPipeDef(pipeName, tView.pipeRegistry);
    tView.data[adjustedIndex] = pipeDef;
    if (pipeDef.onDestroy) {
      (tView.destroyHooks ??= []).push(adjustedIndex, pipeDef.onDestroy);
    }
  } else {
    pipeDef = tView.data[adjustedIndex];
  }
  const pipeFactory = pipeDef.factory || (pipeDef.factory = getFactoryDef(pipeDef.type, true));
  let previousInjectorProfilerContext;
  if (ngDevMode) {
    previousInjectorProfilerContext = setInjectorProfilerContext({
      injector: new NodeInjector(getCurrentTNode(), getLView()),
      token: pipeDef.type
    });
  }
  const previousInjectImplementation = setInjectImplementation(\u0275\u0275directiveInject);
  try {
    const previousIncludeViewProviders = setIncludeViewProviders(false);
    const pipeInstance = pipeFactory();
    setIncludeViewProviders(previousIncludeViewProviders);
    store(tView, getLView(), adjustedIndex, pipeInstance);
    return pipeInstance;
  } finally {
    setInjectImplementation(previousInjectImplementation);
    ngDevMode && setInjectorProfilerContext(previousInjectorProfilerContext);
  }
}
function getPipeDef(name, registry) {
  if (registry) {
    if (ngDevMode) {
      const pipes = registry.filter((pipe2) => pipe2.name === name);
      if (pipes.length > 1) {
        console.warn(formatRuntimeError(313, getMultipleMatchingPipesMessage(name)));
      }
    }
    for (let i = registry.length - 1; i >= 0; i--) {
      const pipeDef = registry[i];
      if (name === pipeDef.name) {
        return pipeDef;
      }
    }
  }
  if (ngDevMode) {
    throw new RuntimeError(-302, getPipeNotFoundErrorMessage(name));
  }
  return;
}
function getMultipleMatchingPipesMessage(name) {
  const lView = getLView();
  const declarationLView = lView[DECLARATION_COMPONENT_VIEW];
  const context2 = declarationLView[CONTEXT];
  const hostIsStandalone = isHostComponentStandalone(lView);
  const componentInfoMessage = context2 ? ` in the '${context2.constructor.name}' component` : "";
  const verifyMessage = `check ${hostIsStandalone ? "'@Component.imports' of this component" : "the imports of this module"}`;
  const errorMessage = `Multiple pipes match the name \`${name}\`${componentInfoMessage}. ${verifyMessage}`;
  return errorMessage;
}
function getPipeNotFoundErrorMessage(name) {
  const lView = getLView();
  const declarationLView = lView[DECLARATION_COMPONENT_VIEW];
  const context2 = declarationLView[CONTEXT];
  const hostIsStandalone = isHostComponentStandalone(lView);
  const componentInfoMessage = context2 ? ` in the '${context2.constructor.name}' component` : "";
  const verifyMessage = `Verify that it is ${hostIsStandalone ? "included in the '@Component.imports' of this component" : "declared or imported in this module"}`;
  const errorMessage = `The pipe '${name}' could not be found${componentInfoMessage}. ${verifyMessage}`;
  return errorMessage;
}
function \u0275\u0275pipeBind1(index, offset, v1) {
  const adjustedIndex = index + HEADER_OFFSET;
  const lView = getLView();
  const pipeInstance = load(lView, adjustedIndex);
  return isPure(lView, adjustedIndex) ? pureFunction1Internal(lView, getBindingRoot(), offset, pipeInstance.transform, v1, pipeInstance) : pipeInstance.transform(v1);
}
function \u0275\u0275pipeBind2(index, slotOffset, v1, v2) {
  const adjustedIndex = index + HEADER_OFFSET;
  const lView = getLView();
  const pipeInstance = load(lView, adjustedIndex);
  return isPure(lView, adjustedIndex) ? pureFunction2Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, pipeInstance) : pipeInstance.transform(v1, v2);
}
function \u0275\u0275pipeBind3(index, slotOffset, v1, v2, v3) {
  const adjustedIndex = index + HEADER_OFFSET;
  const lView = getLView();
  const pipeInstance = load(lView, adjustedIndex);
  return isPure(lView, adjustedIndex) ? pureFunction3Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, pipeInstance) : pipeInstance.transform(v1, v2, v3);
}
function \u0275\u0275pipeBind4(index, slotOffset, v1, v2, v3, v4) {
  const adjustedIndex = index + HEADER_OFFSET;
  const lView = getLView();
  const pipeInstance = load(lView, adjustedIndex);
  return isPure(lView, adjustedIndex) ? pureFunction4Internal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, v1, v2, v3, v4, pipeInstance) : pipeInstance.transform(v1, v2, v3, v4);
}
function \u0275\u0275pipeBindV(index, slotOffset, values) {
  const adjustedIndex = index + HEADER_OFFSET;
  const lView = getLView();
  const pipeInstance = load(lView, adjustedIndex);
  return isPure(lView, adjustedIndex) ? pureFunctionVInternal(lView, getBindingRoot(), slotOffset, pipeInstance.transform, values, pipeInstance) : pipeInstance.transform.apply(pipeInstance, values);
}
function isPure(lView, index) {
  return lView[TVIEW].data[index].pure;
}
function symbolIterator() {
  return this._results[Symbol.iterator]();
}
var _QueryList = class _QueryList {
  /**
   * Returns `Observable` of `QueryList` notifying the subscriber of changes.
   */
  get changes() {
    return this._changes ??= new EventEmitter();
  }
  /**
   * @param emitDistinctChangesOnly Whether `QueryList.changes` should fire only when actual change
   *     has occurred. Or if it should fire when query is recomputed. (recomputing could resolve in
   *     the same result)
   */
  constructor(_emitDistinctChangesOnly = false) {
    this._emitDistinctChangesOnly = _emitDistinctChangesOnly;
    this.dirty = true;
    this._results = [];
    this._changesDetected = false;
    this._changes = void 0;
    this.length = 0;
    this.first = void 0;
    this.last = void 0;
    const proto = _QueryList.prototype;
    if (!proto[Symbol.iterator])
      proto[Symbol.iterator] = symbolIterator;
  }
  /**
   * Returns the QueryList entry at `index`.
   */
  get(index) {
    return this._results[index];
  }
  /**
   * See
   * [Array.map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map)
   */
  map(fn) {
    return this._results.map(fn);
  }
  filter(fn) {
    return this._results.filter(fn);
  }
  /**
   * See
   * [Array.find](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find)
   */
  find(fn) {
    return this._results.find(fn);
  }
  /**
   * See
   * [Array.reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)
   */
  reduce(fn, init) {
    return this._results.reduce(fn, init);
  }
  /**
   * See
   * [Array.forEach](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach)
   */
  forEach(fn) {
    this._results.forEach(fn);
  }
  /**
   * See
   * [Array.some](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some)
   */
  some(fn) {
    return this._results.some(fn);
  }
  /**
   * Returns a copy of the internal results list as an Array.
   */
  toArray() {
    return this._results.slice();
  }
  toString() {
    return this._results.toString();
  }
  /**
   * Updates the stored data of the query list, and resets the `dirty` flag to `false`, so that
   * on change detection, it will not notify of changes to the queries, unless a new change
   * occurs.
   *
   * @param resultsTree The query results to store
   * @param identityAccessor Optional function for extracting stable object identity from a value
   *    in the array. This function is executed for each element of the query result list while
   *    comparing current query list with the new one (provided as a first argument of the `reset`
   *    function) to detect if the lists are different. If the function is not provided, elements
   *    are compared as is (without any pre-processing).
   */
  reset(resultsTree, identityAccessor) {
    this.dirty = false;
    const newResultFlat = flatten(resultsTree);
    if (this._changesDetected = !arrayEquals(this._results, newResultFlat, identityAccessor)) {
      this._results = newResultFlat;
      this.length = newResultFlat.length;
      this.last = newResultFlat[this.length - 1];
      this.first = newResultFlat[0];
    }
  }
  /**
   * Triggers a change event by emitting on the `changes` {@link EventEmitter}.
   */
  notifyOnChanges() {
    if (this._changes !== void 0 && (this._changesDetected || !this._emitDistinctChangesOnly))
      this._changes.emit(this);
  }
  /** internal */
  setDirty() {
    this.dirty = true;
  }
  /** internal */
  destroy() {
    if (this._changes !== void 0) {
      this._changes.complete();
      this._changes.unsubscribe();
    }
  }
};
Symbol.iterator;
var QueryList = _QueryList;
var _TemplateRef = class _TemplateRef {
};
_TemplateRef.__NG_ELEMENT_ID__ = injectTemplateRef;
var TemplateRef = _TemplateRef;
var ViewEngineTemplateRef = TemplateRef;
var R3TemplateRef = class TemplateRef2 extends ViewEngineTemplateRef {
  constructor(_declarationLView, _declarationTContainer, elementRef) {
    super();
    this._declarationLView = _declarationLView;
    this._declarationTContainer = _declarationTContainer;
    this.elementRef = elementRef;
  }
  /**
   * Returns an `ssrId` associated with a TView, which was used to
   * create this instance of the `TemplateRef`.
   *
   * @internal
   */
  get ssrId() {
    return this._declarationTContainer.tView?.ssrId || null;
  }
  createEmbeddedView(context2, injector) {
    return this.createEmbeddedViewImpl(context2, injector);
  }
  /**
   * @internal
   */
  createEmbeddedViewImpl(context2, injector, dehydratedView) {
    const embeddedLView = createAndRenderEmbeddedLView(this._declarationLView, this._declarationTContainer, context2, { injector, dehydratedView });
    return new ViewRef$1(embeddedLView);
  }
};
function injectTemplateRef() {
  return createTemplateRef(getCurrentTNode(), getLView());
}
function createTemplateRef(hostTNode, hostLView) {
  if (hostTNode.type & 4) {
    ngDevMode && assertDefined(hostTNode.tView, "TView must be allocated");
    return new R3TemplateRef(hostLView, hostTNode, createElementRef(hostTNode, hostLView));
  }
  return null;
}
var LQuery_ = class _LQuery_ {
  constructor(queryList) {
    this.queryList = queryList;
    this.matches = null;
  }
  clone() {
    return new _LQuery_(this.queryList);
  }
  setDirty() {
    this.queryList.setDirty();
  }
};
var LQueries_ = class _LQueries_ {
  constructor(queries = []) {
    this.queries = queries;
  }
  createEmbeddedView(tView) {
    const tQueries = tView.queries;
    if (tQueries !== null) {
      const noOfInheritedQueries = tView.contentQueries !== null ? tView.contentQueries[0] : tQueries.length;
      const viewLQueries = [];
      for (let i = 0; i < noOfInheritedQueries; i++) {
        const tQuery = tQueries.getByIndex(i);
        const parentLQuery = this.queries[tQuery.indexInDeclarationView];
        viewLQueries.push(parentLQuery.clone());
      }
      return new _LQueries_(viewLQueries);
    }
    return null;
  }
  insertView(tView) {
    this.dirtyQueriesWithMatches(tView);
  }
  detachView(tView) {
    this.dirtyQueriesWithMatches(tView);
  }
  dirtyQueriesWithMatches(tView) {
    for (let i = 0; i < this.queries.length; i++) {
      if (getTQuery(tView, i).matches !== null) {
        this.queries[i].setDirty();
      }
    }
  }
};
var TQueryMetadata_ = class {
  constructor(predicate, flags, read = null) {
    this.predicate = predicate;
    this.flags = flags;
    this.read = read;
  }
};
var TQueries_ = class _TQueries_ {
  constructor(queries = []) {
    this.queries = queries;
  }
  elementStart(tView, tNode) {
    ngDevMode && assertFirstCreatePass(tView, "Queries should collect results on the first template pass only");
    for (let i = 0; i < this.queries.length; i++) {
      this.queries[i].elementStart(tView, tNode);
    }
  }
  elementEnd(tNode) {
    for (let i = 0; i < this.queries.length; i++) {
      this.queries[i].elementEnd(tNode);
    }
  }
  embeddedTView(tNode) {
    let queriesForTemplateRef = null;
    for (let i = 0; i < this.length; i++) {
      const childQueryIndex = queriesForTemplateRef !== null ? queriesForTemplateRef.length : 0;
      const tqueryClone = this.getByIndex(i).embeddedTView(tNode, childQueryIndex);
      if (tqueryClone) {
        tqueryClone.indexInDeclarationView = i;
        if (queriesForTemplateRef !== null) {
          queriesForTemplateRef.push(tqueryClone);
        } else {
          queriesForTemplateRef = [tqueryClone];
        }
      }
    }
    return queriesForTemplateRef !== null ? new _TQueries_(queriesForTemplateRef) : null;
  }
  template(tView, tNode) {
    ngDevMode && assertFirstCreatePass(tView, "Queries should collect results on the first template pass only");
    for (let i = 0; i < this.queries.length; i++) {
      this.queries[i].template(tView, tNode);
    }
  }
  getByIndex(index) {
    ngDevMode && assertIndexInRange(this.queries, index);
    return this.queries[index];
  }
  get length() {
    return this.queries.length;
  }
  track(tquery) {
    this.queries.push(tquery);
  }
};
var TQuery_ = class _TQuery_ {
  constructor(metadata, nodeIndex = -1) {
    this.metadata = metadata;
    this.matches = null;
    this.indexInDeclarationView = -1;
    this.crossesNgTemplate = false;
    this._appliesToNextNode = true;
    this._declarationNodeIndex = nodeIndex;
  }
  elementStart(tView, tNode) {
    if (this.isApplyingToNode(tNode)) {
      this.matchTNode(tView, tNode);
    }
  }
  elementEnd(tNode) {
    if (this._declarationNodeIndex === tNode.index) {
      this._appliesToNextNode = false;
    }
  }
  template(tView, tNode) {
    this.elementStart(tView, tNode);
  }
  embeddedTView(tNode, childQueryIndex) {
    if (this.isApplyingToNode(tNode)) {
      this.crossesNgTemplate = true;
      this.addMatch(-tNode.index, childQueryIndex);
      return new _TQuery_(this.metadata);
    }
    return null;
  }
  isApplyingToNode(tNode) {
    if (this._appliesToNextNode && (this.metadata.flags & 1) !== 1) {
      const declarationNodeIdx = this._declarationNodeIndex;
      let parent = tNode.parent;
      while (parent !== null && parent.type & 8 && parent.index !== declarationNodeIdx) {
        parent = parent.parent;
      }
      return declarationNodeIdx === (parent !== null ? parent.index : -1);
    }
    return this._appliesToNextNode;
  }
  matchTNode(tView, tNode) {
    const predicate = this.metadata.predicate;
    if (Array.isArray(predicate)) {
      for (let i = 0; i < predicate.length; i++) {
        const name = predicate[i];
        this.matchTNodeWithReadOption(tView, tNode, getIdxOfMatchingSelector(tNode, name));
        this.matchTNodeWithReadOption(tView, tNode, locateDirectiveOrProvider(tNode, tView, name, false, false));
      }
    } else {
      if (predicate === TemplateRef) {
        if (tNode.type & 4) {
          this.matchTNodeWithReadOption(tView, tNode, -1);
        }
      } else {
        this.matchTNodeWithReadOption(tView, tNode, locateDirectiveOrProvider(tNode, tView, predicate, false, false));
      }
    }
  }
  matchTNodeWithReadOption(tView, tNode, nodeMatchIdx) {
    if (nodeMatchIdx !== null) {
      const read = this.metadata.read;
      if (read !== null) {
        if (read === ElementRef || read === ViewContainerRef || read === TemplateRef && tNode.type & 4) {
          this.addMatch(tNode.index, -2);
        } else {
          const directiveOrProviderIdx = locateDirectiveOrProvider(tNode, tView, read, false, false);
          if (directiveOrProviderIdx !== null) {
            this.addMatch(tNode.index, directiveOrProviderIdx);
          }
        }
      } else {
        this.addMatch(tNode.index, nodeMatchIdx);
      }
    }
  }
  addMatch(tNodeIdx, matchIdx) {
    if (this.matches === null) {
      this.matches = [tNodeIdx, matchIdx];
    } else {
      this.matches.push(tNodeIdx, matchIdx);
    }
  }
};
function getIdxOfMatchingSelector(tNode, selector) {
  const localNames = tNode.localNames;
  if (localNames !== null) {
    for (let i = 0; i < localNames.length; i += 2) {
      if (localNames[i] === selector) {
        return localNames[i + 1];
      }
    }
  }
  return null;
}
function createResultByTNodeType(tNode, currentView) {
  if (tNode.type & (3 | 8)) {
    return createElementRef(tNode, currentView);
  } else if (tNode.type & 4) {
    return createTemplateRef(tNode, currentView);
  }
  return null;
}
function createResultForNode(lView, tNode, matchingIdx, read) {
  if (matchingIdx === -1) {
    return createResultByTNodeType(tNode, lView);
  } else if (matchingIdx === -2) {
    return createSpecialToken(lView, tNode, read);
  } else {
    return getNodeInjectable(lView, lView[TVIEW], matchingIdx, tNode);
  }
}
function createSpecialToken(lView, tNode, read) {
  if (read === ElementRef) {
    return createElementRef(tNode, lView);
  } else if (read === TemplateRef) {
    return createTemplateRef(tNode, lView);
  } else if (read === ViewContainerRef) {
    ngDevMode && assertTNodeType(
      tNode,
      3 | 12
      /* TNodeType.AnyContainer */
    );
    return createContainerRef(tNode, lView);
  } else {
    ngDevMode && throwError2(`Special token to read should be one of ElementRef, TemplateRef or ViewContainerRef but got ${stringify(read)}.`);
  }
}
function materializeViewResults(tView, lView, tQuery, queryIndex) {
  const lQuery = lView[QUERIES].queries[queryIndex];
  if (lQuery.matches === null) {
    const tViewData = tView.data;
    const tQueryMatches = tQuery.matches;
    const result = [];
    for (let i = 0; i < tQueryMatches.length; i += 2) {
      const matchedNodeIdx = tQueryMatches[i];
      if (matchedNodeIdx < 0) {
        result.push(null);
      } else {
        ngDevMode && assertIndexInRange(tViewData, matchedNodeIdx);
        const tNode = tViewData[matchedNodeIdx];
        result.push(createResultForNode(lView, tNode, tQueryMatches[i + 1], tQuery.metadata.read));
      }
    }
    lQuery.matches = result;
  }
  return lQuery.matches;
}
function collectQueryResults(tView, lView, queryIndex, result) {
  const tQuery = tView.queries.getByIndex(queryIndex);
  const tQueryMatches = tQuery.matches;
  if (tQueryMatches !== null) {
    const lViewResults = materializeViewResults(tView, lView, tQuery, queryIndex);
    for (let i = 0; i < tQueryMatches.length; i += 2) {
      const tNodeIdx = tQueryMatches[i];
      if (tNodeIdx > 0) {
        result.push(lViewResults[i / 2]);
      } else {
        const childQueryIndex = tQueryMatches[i + 1];
        const declarationLContainer = lView[-tNodeIdx];
        ngDevMode && assertLContainer(declarationLContainer);
        for (let i2 = CONTAINER_HEADER_OFFSET; i2 < declarationLContainer.length; i2++) {
          const embeddedLView = declarationLContainer[i2];
          if (embeddedLView[DECLARATION_LCONTAINER] === embeddedLView[PARENT]) {
            collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);
          }
        }
        if (declarationLContainer[MOVED_VIEWS] !== null) {
          const embeddedLViews = declarationLContainer[MOVED_VIEWS];
          for (let i2 = 0; i2 < embeddedLViews.length; i2++) {
            const embeddedLView = embeddedLViews[i2];
            collectQueryResults(embeddedLView[TVIEW], embeddedLView, childQueryIndex, result);
          }
        }
      }
    }
  }
  return result;
}
function \u0275\u0275queryRefresh(queryList) {
  const lView = getLView();
  const tView = getTView();
  const queryIndex = getCurrentQueryIndex();
  setCurrentQueryIndex(queryIndex + 1);
  const tQuery = getTQuery(tView, queryIndex);
  if (queryList.dirty && isCreationMode(lView) === ((tQuery.metadata.flags & 2) === 2)) {
    if (tQuery.matches === null) {
      queryList.reset([]);
    } else {
      const result = tQuery.crossesNgTemplate ? collectQueryResults(tView, lView, queryIndex, []) : materializeViewResults(tView, lView, tQuery, queryIndex);
      queryList.reset(result, unwrapElementRef);
      queryList.notifyOnChanges();
    }
    return true;
  }
  return false;
}
function \u0275\u0275viewQuery(predicate, flags, read) {
  ngDevMode && assertNumber(flags, "Expecting flags");
  const tView = getTView();
  if (tView.firstCreatePass) {
    createTQuery(tView, new TQueryMetadata_(predicate, flags, read), -1);
    if ((flags & 2) === 2) {
      tView.staticViewQueries = true;
    }
  }
  createLQuery(tView, getLView(), flags);
}
function \u0275\u0275contentQuery(directiveIndex, predicate, flags, read) {
  ngDevMode && assertNumber(flags, "Expecting flags");
  const tView = getTView();
  if (tView.firstCreatePass) {
    const tNode = getCurrentTNode();
    createTQuery(tView, new TQueryMetadata_(predicate, flags, read), tNode.index);
    saveContentQueryAndDirectiveIndex(tView, directiveIndex);
    if ((flags & 2) === 2) {
      tView.staticContentQueries = true;
    }
  }
  createLQuery(tView, getLView(), flags);
}
function \u0275\u0275loadQuery() {
  return loadQueryInternal(getLView(), getCurrentQueryIndex());
}
function loadQueryInternal(lView, queryIndex) {
  ngDevMode && assertDefined(lView[QUERIES], "LQueries should be defined when trying to load a query");
  ngDevMode && assertIndexInRange(lView[QUERIES].queries, queryIndex);
  return lView[QUERIES].queries[queryIndex].queryList;
}
function createLQuery(tView, lView, flags) {
  const queryList = new QueryList(
    (flags & 4) === 4
    /* QueryFlags.emitDistinctChangesOnly */
  );
  storeCleanupWithContext(tView, lView, queryList, queryList.destroy);
  if (lView[QUERIES] === null)
    lView[QUERIES] = new LQueries_();
  lView[QUERIES].queries.push(new LQuery_(queryList));
}
function createTQuery(tView, metadata, nodeIndex) {
  if (tView.queries === null)
    tView.queries = new TQueries_();
  tView.queries.track(new TQuery_(metadata, nodeIndex));
}
function saveContentQueryAndDirectiveIndex(tView, directiveIndex) {
  const tViewContentQueries = tView.contentQueries || (tView.contentQueries = []);
  const lastSavedDirectiveIndex = tViewContentQueries.length ? tViewContentQueries[tViewContentQueries.length - 1] : -1;
  if (directiveIndex !== lastSavedDirectiveIndex) {
    tViewContentQueries.push(tView.queries.length - 1, directiveIndex);
  }
}
function getTQuery(tView, index) {
  ngDevMode && assertDefined(tView.queries, "TQueries must be defined to retrieve a TQuery");
  return tView.queries.getByIndex(index);
}
function \u0275\u0275templateRefExtractor(tNode, lView) {
  return createTemplateRef(tNode, lView);
}
function \u0275\u0275getComponentDepsFactory(type, rawImports) {
  return () => {
    try {
      return depsTracker.getComponentDependencies(type, rawImports).dependencies;
    } catch (e) {
      console.error(`Computing dependencies in local compilation mode for the component "${type.name}" failed with the exception:`, e);
      throw e;
    }
  };
}
function \u0275setClassDebugInfo(type, debugInfo) {
  const def = getComponentDef(type);
  if (def !== null) {
    def.debugInfo = debugInfo;
  }
}
var angularCoreEnv = (() => ({
  "\u0275\u0275attribute": \u0275\u0275attribute,
  "\u0275\u0275attributeInterpolate1": \u0275\u0275attributeInterpolate1,
  "\u0275\u0275attributeInterpolate2": \u0275\u0275attributeInterpolate2,
  "\u0275\u0275attributeInterpolate3": \u0275\u0275attributeInterpolate3,
  "\u0275\u0275attributeInterpolate4": \u0275\u0275attributeInterpolate4,
  "\u0275\u0275attributeInterpolate5": \u0275\u0275attributeInterpolate5,
  "\u0275\u0275attributeInterpolate6": \u0275\u0275attributeInterpolate6,
  "\u0275\u0275attributeInterpolate7": \u0275\u0275attributeInterpolate7,
  "\u0275\u0275attributeInterpolate8": \u0275\u0275attributeInterpolate8,
  "\u0275\u0275attributeInterpolateV": \u0275\u0275attributeInterpolateV,
  "\u0275\u0275defineComponent": \u0275\u0275defineComponent,
  "\u0275\u0275defineDirective": \u0275\u0275defineDirective,
  "\u0275\u0275defineInjectable": \u0275\u0275defineInjectable,
  "\u0275\u0275defineInjector": \u0275\u0275defineInjector,
  "\u0275\u0275defineNgModule": \u0275\u0275defineNgModule,
  "\u0275\u0275definePipe": \u0275\u0275definePipe,
  "\u0275\u0275directiveInject": \u0275\u0275directiveInject,
  "\u0275\u0275getInheritedFactory": \u0275\u0275getInheritedFactory,
  "\u0275\u0275inject": \u0275\u0275inject,
  "\u0275\u0275injectAttribute": \u0275\u0275injectAttribute,
  "\u0275\u0275invalidFactory": \u0275\u0275invalidFactory,
  "\u0275\u0275invalidFactoryDep": \u0275\u0275invalidFactoryDep,
  "\u0275\u0275templateRefExtractor": \u0275\u0275templateRefExtractor,
  "\u0275\u0275resetView": \u0275\u0275resetView,
  "\u0275\u0275HostDirectivesFeature": \u0275\u0275HostDirectivesFeature,
  "\u0275\u0275NgOnChangesFeature": \u0275\u0275NgOnChangesFeature,
  "\u0275\u0275ProvidersFeature": \u0275\u0275ProvidersFeature,
  "\u0275\u0275CopyDefinitionFeature": \u0275\u0275CopyDefinitionFeature,
  "\u0275\u0275InheritDefinitionFeature": \u0275\u0275InheritDefinitionFeature,
  "\u0275\u0275InputTransformsFeature": \u0275\u0275InputTransformsFeature,
  "\u0275\u0275StandaloneFeature": \u0275\u0275StandaloneFeature,
  "\u0275\u0275nextContext": \u0275\u0275nextContext,
  "\u0275\u0275namespaceHTML": \u0275\u0275namespaceHTML,
  "\u0275\u0275namespaceMathML": \u0275\u0275namespaceMathML,
  "\u0275\u0275namespaceSVG": \u0275\u0275namespaceSVG,
  "\u0275\u0275enableBindings": \u0275\u0275enableBindings,
  "\u0275\u0275disableBindings": \u0275\u0275disableBindings,
  "\u0275\u0275elementStart": \u0275\u0275elementStart,
  "\u0275\u0275elementEnd": \u0275\u0275elementEnd,
  "\u0275\u0275element": \u0275\u0275element,
  "\u0275\u0275elementContainerStart": \u0275\u0275elementContainerStart,
  "\u0275\u0275elementContainerEnd": \u0275\u0275elementContainerEnd,
  "\u0275\u0275elementContainer": \u0275\u0275elementContainer,
  "\u0275\u0275pureFunction0": \u0275\u0275pureFunction0,
  "\u0275\u0275pureFunction1": \u0275\u0275pureFunction1,
  "\u0275\u0275pureFunction2": \u0275\u0275pureFunction2,
  "\u0275\u0275pureFunction3": \u0275\u0275pureFunction3,
  "\u0275\u0275pureFunction4": \u0275\u0275pureFunction4,
  "\u0275\u0275pureFunction5": \u0275\u0275pureFunction5,
  "\u0275\u0275pureFunction6": \u0275\u0275pureFunction6,
  "\u0275\u0275pureFunction7": \u0275\u0275pureFunction7,
  "\u0275\u0275pureFunction8": \u0275\u0275pureFunction8,
  "\u0275\u0275pureFunctionV": \u0275\u0275pureFunctionV,
  "\u0275\u0275getCurrentView": \u0275\u0275getCurrentView,
  "\u0275\u0275restoreView": \u0275\u0275restoreView,
  "\u0275\u0275listener": \u0275\u0275listener,
  "\u0275\u0275projection": \u0275\u0275projection,
  "\u0275\u0275syntheticHostProperty": \u0275\u0275syntheticHostProperty,
  "\u0275\u0275syntheticHostListener": \u0275\u0275syntheticHostListener,
  "\u0275\u0275pipeBind1": \u0275\u0275pipeBind1,
  "\u0275\u0275pipeBind2": \u0275\u0275pipeBind2,
  "\u0275\u0275pipeBind3": \u0275\u0275pipeBind3,
  "\u0275\u0275pipeBind4": \u0275\u0275pipeBind4,
  "\u0275\u0275pipeBindV": \u0275\u0275pipeBindV,
  "\u0275\u0275projectionDef": \u0275\u0275projectionDef,
  "\u0275\u0275hostProperty": \u0275\u0275hostProperty,
  "\u0275\u0275property": \u0275\u0275property,
  "\u0275\u0275propertyInterpolate": \u0275\u0275propertyInterpolate,
  "\u0275\u0275propertyInterpolate1": \u0275\u0275propertyInterpolate1,
  "\u0275\u0275propertyInterpolate2": \u0275\u0275propertyInterpolate2,
  "\u0275\u0275propertyInterpolate3": \u0275\u0275propertyInterpolate3,
  "\u0275\u0275propertyInterpolate4": \u0275\u0275propertyInterpolate4,
  "\u0275\u0275propertyInterpolate5": \u0275\u0275propertyInterpolate5,
  "\u0275\u0275propertyInterpolate6": \u0275\u0275propertyInterpolate6,
  "\u0275\u0275propertyInterpolate7": \u0275\u0275propertyInterpolate7,
  "\u0275\u0275propertyInterpolate8": \u0275\u0275propertyInterpolate8,
  "\u0275\u0275propertyInterpolateV": \u0275\u0275propertyInterpolateV,
  "\u0275\u0275pipe": \u0275\u0275pipe,
  "\u0275\u0275queryRefresh": \u0275\u0275queryRefresh,
  "\u0275\u0275viewQuery": \u0275\u0275viewQuery,
  "\u0275\u0275loadQuery": \u0275\u0275loadQuery,
  "\u0275\u0275contentQuery": \u0275\u0275contentQuery,
  "\u0275\u0275reference": \u0275\u0275reference,
  "\u0275\u0275classMap": \u0275\u0275classMap,
  "\u0275\u0275classMapInterpolate1": \u0275\u0275classMapInterpolate1,
  "\u0275\u0275classMapInterpolate2": \u0275\u0275classMapInterpolate2,
  "\u0275\u0275classMapInterpolate3": \u0275\u0275classMapInterpolate3,
  "\u0275\u0275classMapInterpolate4": \u0275\u0275classMapInterpolate4,
  "\u0275\u0275classMapInterpolate5": \u0275\u0275classMapInterpolate5,
  "\u0275\u0275classMapInterpolate6": \u0275\u0275classMapInterpolate6,
  "\u0275\u0275classMapInterpolate7": \u0275\u0275classMapInterpolate7,
  "\u0275\u0275classMapInterpolate8": \u0275\u0275classMapInterpolate8,
  "\u0275\u0275classMapInterpolateV": \u0275\u0275classMapInterpolateV,
  "\u0275\u0275styleMap": \u0275\u0275styleMap,
  "\u0275\u0275styleMapInterpolate1": \u0275\u0275styleMapInterpolate1,
  "\u0275\u0275styleMapInterpolate2": \u0275\u0275styleMapInterpolate2,
  "\u0275\u0275styleMapInterpolate3": \u0275\u0275styleMapInterpolate3,
  "\u0275\u0275styleMapInterpolate4": \u0275\u0275styleMapInterpolate4,
  "\u0275\u0275styleMapInterpolate5": \u0275\u0275styleMapInterpolate5,
  "\u0275\u0275styleMapInterpolate6": \u0275\u0275styleMapInterpolate6,
  "\u0275\u0275styleMapInterpolate7": \u0275\u0275styleMapInterpolate7,
  "\u0275\u0275styleMapInterpolate8": \u0275\u0275styleMapInterpolate8,
  "\u0275\u0275styleMapInterpolateV": \u0275\u0275styleMapInterpolateV,
  "\u0275\u0275styleProp": \u0275\u0275styleProp,
  "\u0275\u0275stylePropInterpolate1": \u0275\u0275stylePropInterpolate1,
  "\u0275\u0275stylePropInterpolate2": \u0275\u0275stylePropInterpolate2,
  "\u0275\u0275stylePropInterpolate3": \u0275\u0275stylePropInterpolate3,
  "\u0275\u0275stylePropInterpolate4": \u0275\u0275stylePropInterpolate4,
  "\u0275\u0275stylePropInterpolate5": \u0275\u0275stylePropInterpolate5,
  "\u0275\u0275stylePropInterpolate6": \u0275\u0275stylePropInterpolate6,
  "\u0275\u0275stylePropInterpolate7": \u0275\u0275stylePropInterpolate7,
  "\u0275\u0275stylePropInterpolate8": \u0275\u0275stylePropInterpolate8,
  "\u0275\u0275stylePropInterpolateV": \u0275\u0275stylePropInterpolateV,
  "\u0275\u0275classProp": \u0275\u0275classProp,
  "\u0275\u0275advance": \u0275\u0275advance,
  "\u0275\u0275template": \u0275\u0275template,
  "\u0275\u0275conditional": \u0275\u0275conditional,
  "\u0275\u0275defer": \u0275\u0275defer,
  "\u0275\u0275deferWhen": \u0275\u0275deferWhen,
  "\u0275\u0275deferOnIdle": \u0275\u0275deferOnIdle,
  "\u0275\u0275deferOnImmediate": \u0275\u0275deferOnImmediate,
  "\u0275\u0275deferOnTimer": \u0275\u0275deferOnTimer,
  "\u0275\u0275deferOnHover": \u0275\u0275deferOnHover,
  "\u0275\u0275deferOnInteraction": \u0275\u0275deferOnInteraction,
  "\u0275\u0275deferOnViewport": \u0275\u0275deferOnViewport,
  "\u0275\u0275deferPrefetchWhen": \u0275\u0275deferPrefetchWhen,
  "\u0275\u0275deferPrefetchOnIdle": \u0275\u0275deferPrefetchOnIdle,
  "\u0275\u0275deferPrefetchOnImmediate": \u0275\u0275deferPrefetchOnImmediate,
  "\u0275\u0275deferPrefetchOnTimer": \u0275\u0275deferPrefetchOnTimer,
  "\u0275\u0275deferPrefetchOnHover": \u0275\u0275deferPrefetchOnHover,
  "\u0275\u0275deferPrefetchOnInteraction": \u0275\u0275deferPrefetchOnInteraction,
  "\u0275\u0275deferPrefetchOnViewport": \u0275\u0275deferPrefetchOnViewport,
  "\u0275\u0275deferEnableTimerScheduling": \u0275\u0275deferEnableTimerScheduling,
  "\u0275\u0275repeater": \u0275\u0275repeater,
  "\u0275\u0275repeaterCreate": \u0275\u0275repeaterCreate,
  "\u0275\u0275repeaterTrackByIndex": \u0275\u0275repeaterTrackByIndex,
  "\u0275\u0275repeaterTrackByIdentity": \u0275\u0275repeaterTrackByIdentity,
  "\u0275\u0275componentInstance": \u0275\u0275componentInstance,
  "\u0275\u0275text": \u0275\u0275text,
  "\u0275\u0275textInterpolate": \u0275\u0275textInterpolate,
  "\u0275\u0275textInterpolate1": \u0275\u0275textInterpolate1,
  "\u0275\u0275textInterpolate2": \u0275\u0275textInterpolate2,
  "\u0275\u0275textInterpolate3": \u0275\u0275textInterpolate3,
  "\u0275\u0275textInterpolate4": \u0275\u0275textInterpolate4,
  "\u0275\u0275textInterpolate5": \u0275\u0275textInterpolate5,
  "\u0275\u0275textInterpolate6": \u0275\u0275textInterpolate6,
  "\u0275\u0275textInterpolate7": \u0275\u0275textInterpolate7,
  "\u0275\u0275textInterpolate8": \u0275\u0275textInterpolate8,
  "\u0275\u0275textInterpolateV": \u0275\u0275textInterpolateV,
  "\u0275\u0275i18n": \u0275\u0275i18n,
  "\u0275\u0275i18nAttributes": \u0275\u0275i18nAttributes,
  "\u0275\u0275i18nExp": \u0275\u0275i18nExp,
  "\u0275\u0275i18nStart": \u0275\u0275i18nStart,
  "\u0275\u0275i18nEnd": \u0275\u0275i18nEnd,
  "\u0275\u0275i18nApply": \u0275\u0275i18nApply,
  "\u0275\u0275i18nPostprocess": \u0275\u0275i18nPostprocess,
  "\u0275\u0275resolveWindow": \u0275\u0275resolveWindow,
  "\u0275\u0275resolveDocument": \u0275\u0275resolveDocument,
  "\u0275\u0275resolveBody": \u0275\u0275resolveBody,
  "\u0275\u0275setComponentScope": \u0275\u0275setComponentScope,
  "\u0275\u0275setNgModuleScope": \u0275\u0275setNgModuleScope,
  "\u0275\u0275registerNgModuleType": registerNgModuleType,
  "\u0275\u0275getComponentDepsFactory": \u0275\u0275getComponentDepsFactory,
  "\u0275setClassDebugInfo": \u0275setClassDebugInfo,
  "\u0275\u0275sanitizeHtml": \u0275\u0275sanitizeHtml,
  "\u0275\u0275sanitizeStyle": \u0275\u0275sanitizeStyle,
  "\u0275\u0275sanitizeResourceUrl": \u0275\u0275sanitizeResourceUrl,
  "\u0275\u0275sanitizeScript": \u0275\u0275sanitizeScript,
  "\u0275\u0275sanitizeUrl": \u0275\u0275sanitizeUrl,
  "\u0275\u0275sanitizeUrlOrResourceUrl": \u0275\u0275sanitizeUrlOrResourceUrl,
  "\u0275\u0275trustConstantHtml": \u0275\u0275trustConstantHtml,
  "\u0275\u0275trustConstantResourceUrl": \u0275\u0275trustConstantResourceUrl,
  "\u0275\u0275validateIframeAttribute": \u0275\u0275validateIframeAttribute,
  "forwardRef": forwardRef,
  "resolveForwardRef": resolveForwardRef
}))();
var jitOptions = null;
function setJitOptions(options) {
  if (jitOptions !== null) {
    if (options.defaultEncapsulation !== jitOptions.defaultEncapsulation) {
      ngDevMode && console.error("Provided value for `defaultEncapsulation` can not be changed once it has been set.");
      return;
    }
    if (options.preserveWhitespaces !== jitOptions.preserveWhitespaces) {
      ngDevMode && console.error("Provided value for `preserveWhitespaces` can not be changed once it has been set.");
      return;
    }
  }
  jitOptions = options;
}
function getJitOptions() {
  return jitOptions;
}
function patchModuleCompilation() {
}
var moduleQueue = [];
function enqueueModuleForDelayedScoping(moduleType, ngModule) {
  moduleQueue.push({ moduleType, ngModule });
}
var flushingModuleQueue = false;
function flushModuleScopingQueueAsMuchAsPossible() {
  if (!flushingModuleQueue) {
    flushingModuleQueue = true;
    try {
      for (let i = moduleQueue.length - 1; i >= 0; i--) {
        const { moduleType, ngModule } = moduleQueue[i];
        if (ngModule.declarations && ngModule.declarations.every(isResolvedDeclaration)) {
          moduleQueue.splice(i, 1);
          setScopeOnDeclaredComponents(moduleType, ngModule);
        }
      }
    } finally {
      flushingModuleQueue = false;
    }
  }
}
function isResolvedDeclaration(declaration) {
  if (Array.isArray(declaration)) {
    return declaration.every(isResolvedDeclaration);
  }
  return !!resolveForwardRef(declaration);
}
function compileNgModule(moduleType, ngModule = {}) {
  patchModuleCompilation();
  compileNgModuleDefs(moduleType, ngModule);
  if (ngModule.id !== void 0) {
    registerNgModuleType(moduleType, ngModule.id);
  }
  enqueueModuleForDelayedScoping(moduleType, ngModule);
}
function compileNgModuleDefs(moduleType, ngModule, allowDuplicateDeclarationsInRoot = false) {
  ngDevMode && assertDefined(moduleType, "Required value moduleType");
  ngDevMode && assertDefined(ngModule, "Required value ngModule");
  const declarations = flatten(ngModule.declarations || EMPTY_ARRAY);
  let ngModuleDef = null;
  Object.defineProperty(moduleType, NG_MOD_DEF, {
    configurable: true,
    get: () => {
      if (ngModuleDef === null) {
        if (ngDevMode && ngModule.imports && ngModule.imports.indexOf(moduleType) > -1) {
          throw new Error(`'${stringifyForError(moduleType)}' module can't import itself`);
        }
        const compiler = getCompilerFacade({ usage: 0, kind: "NgModule", type: moduleType });
        ngModuleDef = compiler.compileNgModule(angularCoreEnv, `ng:///${moduleType.name}/\u0275mod.js`, {
          type: moduleType,
          bootstrap: flatten(ngModule.bootstrap || EMPTY_ARRAY).map(resolveForwardRef),
          declarations: declarations.map(resolveForwardRef),
          imports: flatten(ngModule.imports || EMPTY_ARRAY).map(resolveForwardRef).map(expandModuleWithProviders),
          exports: flatten(ngModule.exports || EMPTY_ARRAY).map(resolveForwardRef).map(expandModuleWithProviders),
          schemas: ngModule.schemas ? flatten(ngModule.schemas) : null,
          id: ngModule.id || null
        });
        if (!ngModuleDef.schemas) {
          ngModuleDef.schemas = [];
        }
      }
      return ngModuleDef;
    }
  });
  let ngFactoryDef = null;
  Object.defineProperty(moduleType, NG_FACTORY_DEF, {
    get: () => {
      if (ngFactoryDef === null) {
        const compiler = getCompilerFacade({ usage: 0, kind: "NgModule", type: moduleType });
        ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${moduleType.name}/\u0275fac.js`, {
          name: moduleType.name,
          type: moduleType,
          deps: reflectDependencies(moduleType),
          target: compiler.FactoryTarget.NgModule,
          typeArgumentCount: 0
        });
      }
      return ngFactoryDef;
    },
    // Make the property configurable in dev mode to allow overriding in tests
    configurable: !!ngDevMode
  });
  let ngInjectorDef = null;
  Object.defineProperty(moduleType, NG_INJ_DEF, {
    get: () => {
      if (ngInjectorDef === null) {
        ngDevMode && verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot);
        const meta = {
          name: moduleType.name,
          type: moduleType,
          providers: ngModule.providers || EMPTY_ARRAY,
          imports: [
            (ngModule.imports || EMPTY_ARRAY).map(resolveForwardRef),
            (ngModule.exports || EMPTY_ARRAY).map(resolveForwardRef)
          ]
        };
        const compiler = getCompilerFacade({ usage: 0, kind: "NgModule", type: moduleType });
        ngInjectorDef = compiler.compileInjector(angularCoreEnv, `ng:///${moduleType.name}/\u0275inj.js`, meta);
      }
      return ngInjectorDef;
    },
    // Make the property configurable in dev mode to allow overriding in tests
    configurable: !!ngDevMode
  });
}
function generateStandaloneInDeclarationsError(type, location2) {
  const prefix = `Unexpected "${stringifyForError(type)}" found in the "declarations" array of the`;
  const suffix = `"${stringifyForError(type)}" is marked as standalone and can't be declared in any NgModule - did you intend to import it instead (by adding it to the "imports" array)?`;
  return `${prefix} ${location2}, ${suffix}`;
}
function verifySemanticsOfNgModuleDef(moduleType, allowDuplicateDeclarationsInRoot, importingModule) {
  if (verifiedNgModule.get(moduleType))
    return;
  if (isStandalone(moduleType))
    return;
  verifiedNgModule.set(moduleType, true);
  moduleType = resolveForwardRef(moduleType);
  let ngModuleDef;
  if (importingModule) {
    ngModuleDef = getNgModuleDef(moduleType);
    if (!ngModuleDef) {
      throw new Error(`Unexpected value '${moduleType.name}' imported by the module '${importingModule.name}'. Please add an @NgModule annotation.`);
    }
  } else {
    ngModuleDef = getNgModuleDef(moduleType, true);
  }
  const errors = [];
  const declarations = maybeUnwrapFn(ngModuleDef.declarations);
  const imports = maybeUnwrapFn(ngModuleDef.imports);
  flatten(imports).map(unwrapModuleWithProvidersImports).forEach((modOrStandaloneCmpt) => {
    verifySemanticsOfNgModuleImport(modOrStandaloneCmpt, moduleType);
    verifySemanticsOfNgModuleDef(modOrStandaloneCmpt, false, moduleType);
  });
  const exports = maybeUnwrapFn(ngModuleDef.exports);
  declarations.forEach(verifyDeclarationsHaveDefinitions);
  declarations.forEach(verifyDirectivesHaveSelector);
  declarations.forEach((declarationType) => verifyNotStandalone(declarationType, moduleType));
  const combinedDeclarations = [
    ...declarations.map(resolveForwardRef),
    ...flatten(imports.map(computeCombinedExports)).map(resolveForwardRef)
  ];
  exports.forEach(verifyExportsAreDeclaredOrReExported);
  declarations.forEach((decl) => verifyDeclarationIsUnique(decl, allowDuplicateDeclarationsInRoot));
  const ngModule = getAnnotation(moduleType, "NgModule");
  if (ngModule) {
    ngModule.imports && flatten(ngModule.imports).map(unwrapModuleWithProvidersImports).forEach((mod) => {
      verifySemanticsOfNgModuleImport(mod, moduleType);
      verifySemanticsOfNgModuleDef(mod, false, moduleType);
    });
    ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyCorrectBootstrapType);
    ngModule.bootstrap && deepForEach(ngModule.bootstrap, verifyComponentIsPartOfNgModule);
  }
  if (errors.length) {
    throw new Error(errors.join("\n"));
  }
  function verifyDeclarationsHaveDefinitions(type) {
    type = resolveForwardRef(type);
    const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef$1(type);
    if (!def) {
      errors.push(`Unexpected value '${stringifyForError(type)}' declared by the module '${stringifyForError(moduleType)}'. Please add a @Pipe/@Directive/@Component annotation.`);
    }
  }
  function verifyDirectivesHaveSelector(type) {
    type = resolveForwardRef(type);
    const def = getDirectiveDef(type);
    if (!getComponentDef(type) && def && def.selectors.length == 0) {
      errors.push(`Directive ${stringifyForError(type)} has no selector, please add it!`);
    }
  }
  function verifyNotStandalone(type, moduleType2) {
    type = resolveForwardRef(type);
    const def = getComponentDef(type) || getDirectiveDef(type) || getPipeDef$1(type);
    if (def?.standalone) {
      const location2 = `"${stringifyForError(moduleType2)}" NgModule`;
      errors.push(generateStandaloneInDeclarationsError(type, location2));
    }
  }
  function verifyExportsAreDeclaredOrReExported(type) {
    type = resolveForwardRef(type);
    const kind = getComponentDef(type) && "component" || getDirectiveDef(type) && "directive" || getPipeDef$1(type) && "pipe";
    if (kind) {
      if (combinedDeclarations.lastIndexOf(type) === -1) {
        errors.push(`Can't export ${kind} ${stringifyForError(type)} from ${stringifyForError(moduleType)} as it was neither declared nor imported!`);
      }
    }
  }
  function verifyDeclarationIsUnique(type, suppressErrors) {
    type = resolveForwardRef(type);
    const existingModule = ownerNgModule.get(type);
    if (existingModule && existingModule !== moduleType) {
      if (!suppressErrors) {
        const modules2 = [existingModule, moduleType].map(stringifyForError).sort();
        errors.push(`Type ${stringifyForError(type)} is part of the declarations of 2 modules: ${modules2[0]} and ${modules2[1]}! Please consider moving ${stringifyForError(type)} to a higher module that imports ${modules2[0]} and ${modules2[1]}. You can also create a new NgModule that exports and includes ${stringifyForError(type)} then import that NgModule in ${modules2[0]} and ${modules2[1]}.`);
      }
    } else {
      ownerNgModule.set(type, moduleType);
    }
  }
  function verifyComponentIsPartOfNgModule(type) {
    type = resolveForwardRef(type);
    const existingModule = ownerNgModule.get(type);
    if (!existingModule && !isStandalone(type)) {
      errors.push(`Component ${stringifyForError(type)} is not part of any NgModule or the module has not been imported into your module.`);
    }
  }
  function verifyCorrectBootstrapType(type) {
    type = resolveForwardRef(type);
    if (!getComponentDef(type)) {
      errors.push(`${stringifyForError(type)} cannot be used as an entry component.`);
    }
    if (isStandalone(type)) {
      errors.push(`The \`${stringifyForError(type)}\` class is a standalone component, which can not be used in the \`@NgModule.bootstrap\` array. Use the \`bootstrapApplication\` function for bootstrap instead.`);
    }
  }
  function verifySemanticsOfNgModuleImport(type, importingModule2) {
    type = resolveForwardRef(type);
    const directiveDef = getComponentDef(type) || getDirectiveDef(type);
    if (directiveDef !== null && !directiveDef.standalone) {
      throw new Error(`Unexpected directive '${type.name}' imported by the module '${importingModule2.name}'. Please add an @NgModule annotation.`);
    }
    const pipeDef = getPipeDef$1(type);
    if (pipeDef !== null && !pipeDef.standalone) {
      throw new Error(`Unexpected pipe '${type.name}' imported by the module '${importingModule2.name}'. Please add an @NgModule annotation.`);
    }
  }
}
function unwrapModuleWithProvidersImports(typeOrWithProviders) {
  typeOrWithProviders = resolveForwardRef(typeOrWithProviders);
  return typeOrWithProviders.ngModule || typeOrWithProviders;
}
function getAnnotation(type, name) {
  let annotation = null;
  collect(type.__annotations__);
  collect(type.decorators);
  return annotation;
  function collect(annotations) {
    if (annotations) {
      annotations.forEach(readAnnotation);
    }
  }
  function readAnnotation(decorator) {
    if (!annotation) {
      const proto = Object.getPrototypeOf(decorator);
      if (proto.ngMetadataName == name) {
        annotation = decorator;
      } else if (decorator.type) {
        const proto2 = Object.getPrototypeOf(decorator.type);
        if (proto2.ngMetadataName == name) {
          annotation = decorator.args[0];
        }
      }
    }
  }
}
var ownerNgModule = /* @__PURE__ */ new WeakMap();
var verifiedNgModule = /* @__PURE__ */ new WeakMap();
function computeCombinedExports(type) {
  type = resolveForwardRef(type);
  const ngModuleDef = getNgModuleDef(type);
  if (ngModuleDef === null) {
    return [type];
  }
  return flatten(maybeUnwrapFn(ngModuleDef.exports).map((type2) => {
    const ngModuleDef2 = getNgModuleDef(type2);
    if (ngModuleDef2) {
      verifySemanticsOfNgModuleDef(type2, false);
      return computeCombinedExports(type2);
    } else {
      return type2;
    }
  }));
}
function setScopeOnDeclaredComponents(moduleType, ngModule) {
  const declarations = flatten(ngModule.declarations || EMPTY_ARRAY);
  const transitiveScopes = transitiveScopesFor(moduleType);
  declarations.forEach((declaration) => {
    declaration = resolveForwardRef(declaration);
    if (declaration.hasOwnProperty(NG_COMP_DEF)) {
      const component = declaration;
      const componentDef = getComponentDef(component);
      patchComponentDefWithScope(componentDef, transitiveScopes);
    } else if (!declaration.hasOwnProperty(NG_DIR_DEF) && !declaration.hasOwnProperty(NG_PIPE_DEF)) {
      declaration.ngSelectorScope = moduleType;
    }
  });
}
function patchComponentDefWithScope(componentDef, transitiveScopes) {
  componentDef.directiveDefs = () => Array.from(transitiveScopes.compilation.directives).map((dir) => dir.hasOwnProperty(NG_COMP_DEF) ? getComponentDef(dir) : getDirectiveDef(dir)).filter((def) => !!def);
  componentDef.pipeDefs = () => Array.from(transitiveScopes.compilation.pipes).map((pipe2) => getPipeDef$1(pipe2));
  componentDef.schemas = transitiveScopes.schemas;
  componentDef.tView = null;
}
function transitiveScopesFor(type) {
  if (isNgModule(type)) {
    if (USE_RUNTIME_DEPS_TRACKER_FOR_JIT) {
      const scope = depsTracker.getNgModuleScope(type);
      const def = getNgModuleDef(type, true);
      return __spreadValues({
        schemas: def.schemas || null
      }, scope);
    } else {
      return transitiveScopesForNgModule(type);
    }
  } else if (isStandalone(type)) {
    const directiveDef = getComponentDef(type) || getDirectiveDef(type);
    if (directiveDef !== null) {
      return {
        schemas: null,
        compilation: {
          directives: /* @__PURE__ */ new Set(),
          pipes: /* @__PURE__ */ new Set()
        },
        exported: {
          directives: /* @__PURE__ */ new Set([type]),
          pipes: /* @__PURE__ */ new Set()
        }
      };
    }
    const pipeDef = getPipeDef$1(type);
    if (pipeDef !== null) {
      return {
        schemas: null,
        compilation: {
          directives: /* @__PURE__ */ new Set(),
          pipes: /* @__PURE__ */ new Set()
        },
        exported: {
          directives: /* @__PURE__ */ new Set(),
          pipes: /* @__PURE__ */ new Set([type])
        }
      };
    }
  }
  throw new Error(`${type.name} does not have a module def (\u0275mod property)`);
}
function transitiveScopesForNgModule(moduleType) {
  const def = getNgModuleDef(moduleType, true);
  if (def.transitiveCompileScopes !== null) {
    return def.transitiveCompileScopes;
  }
  const scopes = {
    schemas: def.schemas || null,
    compilation: {
      directives: /* @__PURE__ */ new Set(),
      pipes: /* @__PURE__ */ new Set()
    },
    exported: {
      directives: /* @__PURE__ */ new Set(),
      pipes: /* @__PURE__ */ new Set()
    }
  };
  maybeUnwrapFn(def.imports).forEach((imported) => {
    const importedScope = transitiveScopesFor(imported);
    importedScope.exported.directives.forEach((entry) => scopes.compilation.directives.add(entry));
    importedScope.exported.pipes.forEach((entry) => scopes.compilation.pipes.add(entry));
  });
  maybeUnwrapFn(def.declarations).forEach((declared) => {
    const declaredWithDefs = declared;
    if (getPipeDef$1(declaredWithDefs)) {
      scopes.compilation.pipes.add(declared);
    } else {
      scopes.compilation.directives.add(declared);
    }
  });
  maybeUnwrapFn(def.exports).forEach((exported) => {
    const exportedType = exported;
    if (isNgModule(exportedType)) {
      const exportedScope = transitiveScopesFor(exportedType);
      exportedScope.exported.directives.forEach((entry) => {
        scopes.compilation.directives.add(entry);
        scopes.exported.directives.add(entry);
      });
      exportedScope.exported.pipes.forEach((entry) => {
        scopes.compilation.pipes.add(entry);
        scopes.exported.pipes.add(entry);
      });
    } else if (getPipeDef$1(exportedType)) {
      scopes.exported.pipes.add(exportedType);
    } else {
      scopes.exported.directives.add(exportedType);
    }
  });
  def.transitiveCompileScopes = scopes;
  return scopes;
}
function expandModuleWithProviders(value) {
  if (isModuleWithProviders(value)) {
    return value.ngModule;
  }
  return value;
}
var compilationDepth = 0;
function compileComponent(type, metadata) {
  (typeof ngDevMode === "undefined" || ngDevMode) && initNgDevMode();
  let ngComponentDef = null;
  maybeQueueResolutionOfComponentResources(type, metadata);
  addDirectiveFactoryDef(type, metadata);
  Object.defineProperty(type, NG_COMP_DEF, {
    get: () => {
      if (ngComponentDef === null) {
        const compiler = getCompilerFacade({ usage: 0, kind: "component", type });
        if (componentNeedsResolution(metadata)) {
          const error = [`Component '${type.name}' is not resolved:`];
          if (metadata.templateUrl) {
            error.push(` - templateUrl: ${metadata.templateUrl}`);
          }
          if (metadata.styleUrls && metadata.styleUrls.length) {
            error.push(` - styleUrls: ${JSON.stringify(metadata.styleUrls)}`);
          }
          if (metadata.styleUrl) {
            error.push(` - styleUrl: ${metadata.styleUrl}`);
          }
          error.push(`Did you run and wait for 'resolveComponentResources()'?`);
          throw new Error(error.join("\n"));
        }
        const options = getJitOptions();
        let preserveWhitespaces = metadata.preserveWhitespaces;
        if (preserveWhitespaces === void 0) {
          if (options !== null && options.preserveWhitespaces !== void 0) {
            preserveWhitespaces = options.preserveWhitespaces;
          } else {
            preserveWhitespaces = false;
          }
        }
        let encapsulation = metadata.encapsulation;
        if (encapsulation === void 0) {
          if (options !== null && options.defaultEncapsulation !== void 0) {
            encapsulation = options.defaultEncapsulation;
          } else {
            encapsulation = ViewEncapsulation$1.Emulated;
          }
        }
        const templateUrl = metadata.templateUrl || `ng:///${type.name}/template.html`;
        const meta = __spreadProps(__spreadValues({}, directiveMetadata(type, metadata)), {
          typeSourceSpan: compiler.createParseSourceSpan("Component", type.name, templateUrl),
          template: metadata.template || "",
          preserveWhitespaces,
          styles: typeof metadata.styles === "string" ? [metadata.styles] : metadata.styles || EMPTY_ARRAY,
          animations: metadata.animations,
          // JIT components are always compiled against an empty set of `declarations`. Instead, the
          // `directiveDefs` and `pipeDefs` are updated at a later point:
          //  * for NgModule-based components, they're set when the NgModule which declares the
          //    component resolves in the module scoping queue
          //  * for standalone components, they're set just below, after `compileComponent`.
          declarations: [],
          changeDetection: metadata.changeDetection,
          encapsulation,
          interpolation: metadata.interpolation,
          viewProviders: metadata.viewProviders || null
        });
        compilationDepth++;
        try {
          if (meta.usesInheritance) {
            addDirectiveDefToUndecoratedParents(type);
          }
          ngComponentDef = compiler.compileComponent(angularCoreEnv, templateUrl, meta);
          if (metadata.standalone) {
            const imports = flatten(metadata.imports || EMPTY_ARRAY);
            const { directiveDefs, pipeDefs } = getStandaloneDefFunctions(type, imports);
            ngComponentDef.directiveDefs = directiveDefs;
            ngComponentDef.pipeDefs = pipeDefs;
            ngComponentDef.dependencies = () => imports.map(resolveForwardRef);
          }
        } finally {
          compilationDepth--;
        }
        if (compilationDepth === 0) {
          flushModuleScopingQueueAsMuchAsPossible();
        }
        if (hasSelectorScope(type)) {
          const scopes = transitiveScopesFor(type.ngSelectorScope);
          patchComponentDefWithScope(ngComponentDef, scopes);
        }
        if (metadata.schemas) {
          if (metadata.standalone) {
            ngComponentDef.schemas = metadata.schemas;
          } else {
            throw new Error(`The 'schemas' was specified for the ${stringifyForError(type)} but is only valid on a component that is standalone.`);
          }
        } else if (metadata.standalone) {
          ngComponentDef.schemas = [];
        }
      }
      return ngComponentDef;
    },
    // Make the property configurable in dev mode to allow overriding in tests
    configurable: !!ngDevMode
  });
}
function getStandaloneDefFunctions(type, imports) {
  let cachedDirectiveDefs = null;
  let cachedPipeDefs = null;
  const directiveDefs = () => {
    if (!USE_RUNTIME_DEPS_TRACKER_FOR_JIT) {
      if (cachedDirectiveDefs === null) {
        cachedDirectiveDefs = [getComponentDef(type)];
        const seen = /* @__PURE__ */ new Set([type]);
        for (const rawDep of imports) {
          ngDevMode && verifyStandaloneImport(rawDep, type);
          const dep = resolveForwardRef(rawDep);
          if (seen.has(dep)) {
            continue;
          }
          seen.add(dep);
          if (!!getNgModuleDef(dep)) {
            const scope = transitiveScopesFor(dep);
            for (const dir of scope.exported.directives) {
              const def = getComponentDef(dir) || getDirectiveDef(dir);
              if (def && !seen.has(dir)) {
                seen.add(dir);
                cachedDirectiveDefs.push(def);
              }
            }
          } else {
            const def = getComponentDef(dep) || getDirectiveDef(dep);
            if (def) {
              cachedDirectiveDefs.push(def);
            }
          }
        }
      }
      return cachedDirectiveDefs;
    } else {
      if (ngDevMode) {
        for (const rawDep of imports) {
          verifyStandaloneImport(rawDep, type);
        }
      }
      if (!isComponent(type)) {
        return [];
      }
      const scope = depsTracker.getStandaloneComponentScope(type, imports);
      return [...scope.compilation.directives].map((p) => getComponentDef(p) || getDirectiveDef(p)).filter((d) => d !== null);
    }
  };
  const pipeDefs = () => {
    if (!USE_RUNTIME_DEPS_TRACKER_FOR_JIT) {
      if (cachedPipeDefs === null) {
        cachedPipeDefs = [];
        const seen = /* @__PURE__ */ new Set();
        for (const rawDep of imports) {
          const dep = resolveForwardRef(rawDep);
          if (seen.has(dep)) {
            continue;
          }
          seen.add(dep);
          if (!!getNgModuleDef(dep)) {
            const scope = transitiveScopesFor(dep);
            for (const pipe2 of scope.exported.pipes) {
              const def = getPipeDef$1(pipe2);
              if (def && !seen.has(pipe2)) {
                seen.add(pipe2);
                cachedPipeDefs.push(def);
              }
            }
          } else {
            const def = getPipeDef$1(dep);
            if (def) {
              cachedPipeDefs.push(def);
            }
          }
        }
      }
      return cachedPipeDefs;
    } else {
      if (ngDevMode) {
        for (const rawDep of imports) {
          verifyStandaloneImport(rawDep, type);
        }
      }
      if (!isComponent(type)) {
        return [];
      }
      const scope = depsTracker.getStandaloneComponentScope(type, imports);
      return [...scope.compilation.pipes].map((p) => getPipeDef$1(p)).filter((d) => d !== null);
    }
  };
  return {
    directiveDefs,
    pipeDefs
  };
}
function hasSelectorScope(component) {
  return component.ngSelectorScope !== void 0;
}
function compileDirective(type, directive) {
  let ngDirectiveDef = null;
  addDirectiveFactoryDef(type, directive || {});
  Object.defineProperty(type, NG_DIR_DEF, {
    get: () => {
      if (ngDirectiveDef === null) {
        const meta = getDirectiveMetadata(type, directive || {});
        const compiler = getCompilerFacade({ usage: 0, kind: "directive", type });
        ngDirectiveDef = compiler.compileDirective(angularCoreEnv, meta.sourceMapUrl, meta.metadata);
      }
      return ngDirectiveDef;
    },
    // Make the property configurable in dev mode to allow overriding in tests
    configurable: !!ngDevMode
  });
}
function getDirectiveMetadata(type, metadata) {
  const name = type && type.name;
  const sourceMapUrl = `ng:///${name}/\u0275dir.js`;
  const compiler = getCompilerFacade({ usage: 0, kind: "directive", type });
  const facade = directiveMetadata(type, metadata);
  facade.typeSourceSpan = compiler.createParseSourceSpan("Directive", name, sourceMapUrl);
  if (facade.usesInheritance) {
    addDirectiveDefToUndecoratedParents(type);
  }
  return { metadata: facade, sourceMapUrl };
}
function addDirectiveFactoryDef(type, metadata) {
  let ngFactoryDef = null;
  Object.defineProperty(type, NG_FACTORY_DEF, {
    get: () => {
      if (ngFactoryDef === null) {
        const meta = getDirectiveMetadata(type, metadata);
        const compiler = getCompilerFacade({ usage: 0, kind: "directive", type });
        ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${type.name}/\u0275fac.js`, {
          name: meta.metadata.name,
          type: meta.metadata.type,
          typeArgumentCount: 0,
          deps: reflectDependencies(type),
          target: compiler.FactoryTarget.Directive
        });
      }
      return ngFactoryDef;
    },
    // Make the property configurable in dev mode to allow overriding in tests
    configurable: !!ngDevMode
  });
}
function extendsDirectlyFromObject(type) {
  return Object.getPrototypeOf(type.prototype) === Object.prototype;
}
function directiveMetadata(type, metadata) {
  const reflect = getReflect();
  const propMetadata = reflect.ownPropMetadata(type);
  return {
    name: type.name,
    type,
    selector: metadata.selector !== void 0 ? metadata.selector : null,
    host: metadata.host || EMPTY_OBJ,
    propMetadata,
    inputs: metadata.inputs || EMPTY_ARRAY,
    outputs: metadata.outputs || EMPTY_ARRAY,
    queries: extractQueriesMetadata(type, propMetadata, isContentQuery),
    lifecycle: { usesOnChanges: reflect.hasLifecycleHook(type, "ngOnChanges") },
    typeSourceSpan: null,
    usesInheritance: !extendsDirectlyFromObject(type),
    exportAs: extractExportAs(metadata.exportAs),
    providers: metadata.providers || null,
    viewQueries: extractQueriesMetadata(type, propMetadata, isViewQuery),
    isStandalone: !!metadata.standalone,
    isSignal: !!metadata.signals,
    hostDirectives: metadata.hostDirectives?.map((directive) => typeof directive === "function" ? { directive } : directive) || null
  };
}
function addDirectiveDefToUndecoratedParents(type) {
  const objPrototype = Object.prototype;
  let parent = Object.getPrototypeOf(type.prototype).constructor;
  while (parent && parent !== objPrototype) {
    if (!getDirectiveDef(parent) && !getComponentDef(parent) && shouldAddAbstractDirective(parent)) {
      compileDirective(parent, null);
    }
    parent = Object.getPrototypeOf(parent);
  }
}
function convertToR3QueryPredicate(selector) {
  return typeof selector === "string" ? splitByComma(selector) : resolveForwardRef(selector);
}
function convertToR3QueryMetadata(propertyName, ann) {
  return {
    propertyName,
    predicate: convertToR3QueryPredicate(ann.selector),
    descendants: ann.descendants,
    first: ann.first,
    read: ann.read ? ann.read : null,
    static: !!ann.static,
    emitDistinctChangesOnly: !!ann.emitDistinctChangesOnly
  };
}
function extractQueriesMetadata(type, propMetadata, isQueryAnn) {
  const queriesMeta = [];
  for (const field in propMetadata) {
    if (propMetadata.hasOwnProperty(field)) {
      const annotations = propMetadata[field];
      annotations.forEach((ann) => {
        if (isQueryAnn(ann)) {
          if (!ann.selector) {
            throw new Error(`Can't construct a query for the property "${field}" of "${stringifyForError(type)}" since the query selector wasn't defined.`);
          }
          if (annotations.some(isInputAnnotation)) {
            throw new Error(`Cannot combine @Input decorators with query decorators`);
          }
          queriesMeta.push(convertToR3QueryMetadata(field, ann));
        }
      });
    }
  }
  return queriesMeta;
}
function extractExportAs(exportAs) {
  return exportAs === void 0 ? null : splitByComma(exportAs);
}
function isContentQuery(value) {
  const name = value.ngMetadataName;
  return name === "ContentChild" || name === "ContentChildren";
}
function isViewQuery(value) {
  const name = value.ngMetadataName;
  return name === "ViewChild" || name === "ViewChildren";
}
function isInputAnnotation(value) {
  return value.ngMetadataName === "Input";
}
function splitByComma(value) {
  return value.split(",").map((piece) => piece.trim());
}
var LIFECYCLE_HOOKS = [
  "ngOnChanges",
  "ngOnInit",
  "ngOnDestroy",
  "ngDoCheck",
  "ngAfterViewInit",
  "ngAfterViewChecked",
  "ngAfterContentInit",
  "ngAfterContentChecked"
];
function shouldAddAbstractDirective(type) {
  const reflect = getReflect();
  if (LIFECYCLE_HOOKS.some((hookName) => reflect.hasLifecycleHook(type, hookName))) {
    return true;
  }
  const propMetadata = reflect.propMetadata(type);
  for (const field in propMetadata) {
    const annotations = propMetadata[field];
    for (let i = 0; i < annotations.length; i++) {
      const current = annotations[i];
      const metadataName = current.ngMetadataName;
      if (isInputAnnotation(current) || isContentQuery(current) || isViewQuery(current) || metadataName === "Output" || metadataName === "HostBinding" || metadataName === "HostListener") {
        return true;
      }
    }
  }
  return false;
}
function compilePipe(type, meta) {
  let ngPipeDef = null;
  let ngFactoryDef = null;
  Object.defineProperty(type, NG_FACTORY_DEF, {
    get: () => {
      if (ngFactoryDef === null) {
        const metadata = getPipeMetadata(type, meta);
        const compiler = getCompilerFacade({ usage: 0, kind: "pipe", type: metadata.type });
        ngFactoryDef = compiler.compileFactory(angularCoreEnv, `ng:///${metadata.name}/\u0275fac.js`, {
          name: metadata.name,
          type: metadata.type,
          typeArgumentCount: 0,
          deps: reflectDependencies(type),
          target: compiler.FactoryTarget.Pipe
        });
      }
      return ngFactoryDef;
    },
    // Make the property configurable in dev mode to allow overriding in tests
    configurable: !!ngDevMode
  });
  Object.defineProperty(type, NG_PIPE_DEF, {
    get: () => {
      if (ngPipeDef === null) {
        const metadata = getPipeMetadata(type, meta);
        const compiler = getCompilerFacade({ usage: 0, kind: "pipe", type: metadata.type });
        ngPipeDef = compiler.compilePipe(angularCoreEnv, `ng:///${metadata.name}/\u0275pipe.js`, metadata);
      }
      return ngPipeDef;
    },
    // Make the property configurable in dev mode to allow overriding in tests
    configurable: !!ngDevMode
  });
}
function getPipeMetadata(type, meta) {
  return {
    type,
    name: type.name,
    pipeName: meta.name,
    pure: meta.pure !== void 0 ? meta.pure : true,
    isStandalone: !!meta.standalone
  };
}
var Directive = makeDecorator("Directive", (dir = {}) => dir, void 0, void 0, (type, meta) => compileDirective(type, meta));
var Component = makeDecorator("Component", (c = {}) => __spreadValues({ changeDetection: ChangeDetectionStrategy.Default }, c), Directive, void 0, (type, meta) => compileComponent(type, meta));
var Pipe = makeDecorator("Pipe", (p) => __spreadValues({ pure: true }, p), void 0, void 0, (type, meta) => compilePipe(type, meta));
var Input = makePropDecorator("Input", (arg) => {
  if (!arg) {
    return {};
  }
  return typeof arg === "string" ? { alias: arg } : arg;
});
var Output = makePropDecorator("Output", (alias) => ({ alias }));
var HostBinding = makePropDecorator("HostBinding", (hostPropertyName) => ({ hostPropertyName }));
var HostListener = makePropDecorator("HostListener", (eventName, args) => ({ eventName, args }));
var NgModule = makeDecorator(
  "NgModule",
  (ngModule) => ngModule,
  void 0,
  void 0,
  /**
   * Decorator that marks the following class as an NgModule, and supplies
   * configuration metadata for it.
   *
   * * The `declarations` option configures the compiler
   * with information about what belongs to the NgModule.
   * * The `providers` options configures the NgModule's injector to provide
   * dependencies the NgModule members.
   * * The `imports` and `exports` options bring in members from other modules, and make
   * this module's members available to others.
   */
  (type, meta) => compileNgModule(type, meta)
);
var _Console = class _Console {
  log(message) {
    console.log(message);
  }
  // Note: for reporting errors use `DOM.logError()` as it is platform specific
  warn(message) {
    console.warn(message);
  }
};
_Console.\u0275fac = function Console_Factory(t) {
  return new (t || _Console)();
};
_Console.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _Console, factory: _Console.\u0275fac, providedIn: "platform" });
var Console = _Console;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Console, [{
    type: Injectable,
    args: [{ providedIn: "platform" }]
  }], null, null);
})();
var _InitialRenderPendingTasks = class _InitialRenderPendingTasks {
  constructor() {
    this.taskId = 0;
    this.pendingTasks = /* @__PURE__ */ new Set();
    this.hasPendingTasks = new BehaviorSubject(false);
  }
  add() {
    this.hasPendingTasks.next(true);
    const taskId = this.taskId++;
    this.pendingTasks.add(taskId);
    return taskId;
  }
  remove(taskId) {
    this.pendingTasks.delete(taskId);
    if (this.pendingTasks.size === 0) {
      this.hasPendingTasks.next(false);
    }
  }
  ngOnDestroy() {
    this.pendingTasks.clear();
    this.hasPendingTasks.next(false);
  }
};
_InitialRenderPendingTasks.\u0275fac = function InitialRenderPendingTasks_Factory(t) {
  return new (t || _InitialRenderPendingTasks)();
};
_InitialRenderPendingTasks.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _InitialRenderPendingTasks, factory: _InitialRenderPendingTasks.\u0275fac, providedIn: "root" });
var InitialRenderPendingTasks = _InitialRenderPendingTasks;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(InitialRenderPendingTasks, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], null, null);
})();
var ModuleWithComponentFactories = class {
  constructor(ngModuleFactory, componentFactories) {
    this.ngModuleFactory = ngModuleFactory;
    this.componentFactories = componentFactories;
  }
};
var _Compiler = class _Compiler {
  /**
   * Compiles the given NgModule and all of its components. All templates of the components
   * have to be inlined.
   */
  compileModuleSync(moduleType) {
    return new NgModuleFactory(moduleType);
  }
  /**
   * Compiles the given NgModule and all of its components
   */
  compileModuleAsync(moduleType) {
    return Promise.resolve(this.compileModuleSync(moduleType));
  }
  /**
   * Same as {@link #compileModuleSync} but also creates ComponentFactories for all components.
   */
  compileModuleAndAllComponentsSync(moduleType) {
    const ngModuleFactory = this.compileModuleSync(moduleType);
    const moduleDef = getNgModuleDef(moduleType);
    const componentFactories = maybeUnwrapFn(moduleDef.declarations).reduce((factories, declaration) => {
      const componentDef = getComponentDef(declaration);
      componentDef && factories.push(new ComponentFactory(componentDef));
      return factories;
    }, []);
    return new ModuleWithComponentFactories(ngModuleFactory, componentFactories);
  }
  /**
   * Same as {@link #compileModuleAsync} but also creates ComponentFactories for all components.
   */
  compileModuleAndAllComponentsAsync(moduleType) {
    return Promise.resolve(this.compileModuleAndAllComponentsSync(moduleType));
  }
  /**
   * Clears all caches.
   */
  clearCache() {
  }
  /**
   * Clears the cache for the given component/ngModule.
   */
  clearCacheFor(type) {
  }
  /**
   * Returns the id for a given NgModule, if one is defined and known to the compiler.
   */
  getModuleId(moduleType) {
    return void 0;
  }
};
_Compiler.\u0275fac = function Compiler_Factory(t) {
  return new (t || _Compiler)();
};
_Compiler.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _Compiler, factory: _Compiler.\u0275fac, providedIn: "root" });
var Compiler = _Compiler;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Compiler, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], null, null);
})();
var COMPILER_OPTIONS = new InjectionToken("compilerOptions");
var DIDebugData = class {
  constructor() {
    this.resolverToTokenToDependencies = /* @__PURE__ */ new WeakMap();
    this.resolverToProviders = /* @__PURE__ */ new WeakMap();
    this.standaloneInjectorToComponent = /* @__PURE__ */ new WeakMap();
  }
  reset() {
    this.resolverToTokenToDependencies = /* @__PURE__ */ new WeakMap();
    this.resolverToProviders = /* @__PURE__ */ new WeakMap();
    this.standaloneInjectorToComponent = /* @__PURE__ */ new WeakMap();
  }
};
var frameworkDIDebugData = new DIDebugData();
function getFrameworkDIDebugData() {
  return frameworkDIDebugData;
}
function setupFrameworkInjectorProfiler() {
  frameworkDIDebugData.reset();
  setInjectorProfiler((injectorProfilerEvent) => handleInjectorProfilerEvent(injectorProfilerEvent));
}
function handleInjectorProfilerEvent(injectorProfilerEvent) {
  const { context: context2, type } = injectorProfilerEvent;
  if (type === 0) {
    handleInjectEvent(context2, injectorProfilerEvent.service);
  } else if (type === 1) {
    handleInstanceCreatedByInjectorEvent(context2, injectorProfilerEvent.instance);
  } else if (type === 2) {
    handleProviderConfiguredEvent(context2, injectorProfilerEvent.providerRecord);
  }
}
function handleInjectEvent(context2, data) {
  const diResolver = getDIResolver(context2.injector);
  if (diResolver === null) {
    throwError2("An Inject event must be run within an injection context.");
  }
  const diResolverToInstantiatedToken = frameworkDIDebugData.resolverToTokenToDependencies;
  if (!diResolverToInstantiatedToken.has(diResolver)) {
    diResolverToInstantiatedToken.set(diResolver, /* @__PURE__ */ new WeakMap());
  }
  if (!canBeHeldWeakly(context2.token)) {
    return;
  }
  const instantiatedTokenToDependencies = diResolverToInstantiatedToken.get(diResolver);
  if (!instantiatedTokenToDependencies.has(context2.token)) {
    instantiatedTokenToDependencies.set(context2.token, []);
  }
  const { token, value, flags } = data;
  assertDefined(context2.token, "Injector profiler context token is undefined.");
  const dependencies = instantiatedTokenToDependencies.get(context2.token);
  assertDefined(dependencies, "Could not resolve dependencies for token.");
  if (context2.injector instanceof NodeInjector) {
    dependencies.push({ token, value, flags, injectedIn: getNodeInjectorContext(context2.injector) });
  } else {
    dependencies.push({ token, value, flags });
  }
}
function getNodeInjectorContext(injector) {
  if (!(injector instanceof NodeInjector)) {
    throwError2("getNodeInjectorContext must be called with a NodeInjector");
  }
  const lView = getNodeInjectorLView(injector);
  const tNode = getNodeInjectorTNode(injector);
  if (tNode === null) {
    return;
  }
  assertTNodeForLView(tNode, lView);
  return { lView, tNode };
}
function handleInstanceCreatedByInjectorEvent(context2, data) {
  const { value } = data;
  if (getDIResolver(context2.injector) === null) {
    throwError2("An InjectorCreatedInstance event must be run within an injection context.");
  }
  let standaloneComponent = void 0;
  if (typeof value === "object") {
    standaloneComponent = value?.constructor;
  }
  if (standaloneComponent === void 0 || !isStandaloneComponent(standaloneComponent)) {
    return;
  }
  const environmentInjector = context2.injector.get(EnvironmentInjector, null, { optional: true });
  if (environmentInjector === null) {
    return;
  }
  const { standaloneInjectorToComponent } = frameworkDIDebugData;
  if (standaloneInjectorToComponent.has(environmentInjector)) {
    return;
  }
  standaloneInjectorToComponent.set(environmentInjector, standaloneComponent);
}
function isStandaloneComponent(value) {
  const def = getComponentDef(value);
  return !!def?.standalone;
}
function handleProviderConfiguredEvent(context2, data) {
  const { resolverToProviders } = frameworkDIDebugData;
  let diResolver;
  if (context2?.injector instanceof NodeInjector) {
    diResolver = getNodeInjectorTNode(context2.injector);
  } else {
    diResolver = context2.injector;
  }
  if (diResolver === null) {
    throwError2("A ProviderConfigured event must be run within an injection context.");
  }
  if (!resolverToProviders.has(diResolver)) {
    resolverToProviders.set(diResolver, []);
  }
  resolverToProviders.get(diResolver).push(data);
}
function getDIResolver(injector) {
  let diResolver = null;
  if (injector === void 0) {
    return diResolver;
  }
  if (injector instanceof NodeInjector) {
    diResolver = getNodeInjectorLView(injector);
  } else {
    diResolver = injector;
  }
  return diResolver;
}
function canBeHeldWeakly(value) {
  return value !== null && (typeof value === "object" || typeof value === "function" || typeof value === "symbol");
}
function applyChanges(component) {
  ngDevMode && assertDefined(component, "component");
  markViewDirty(getComponentViewByInstance(component));
  getRootComponents(component).forEach((rootComponent) => detectChanges(rootComponent));
}
function detectChanges(component) {
  const view = getComponentViewByInstance(component);
  view[FLAGS] |= 1024;
  detectChangesInternal(view);
}
function getDependenciesFromInjectable(injector, token) {
  const instance = injector.get(token, null, { self: true, optional: true });
  if (instance === null) {
    throw new Error(`Unable to determine instance of ${token} in given injector`);
  }
  const unformattedDependencies = getDependenciesForTokenInInjector(token, injector);
  const resolutionPath = getInjectorResolutionPath(injector);
  const dependencies = unformattedDependencies.map((dep) => {
    const formattedDependency = {
      value: dep.value
    };
    const flags = dep.flags;
    formattedDependency.flags = {
      optional: (8 & flags) === 8,
      host: (1 & flags) === 1,
      self: (2 & flags) === 2,
      skipSelf: (4 & flags) === 4
    };
    for (let i = 0; i < resolutionPath.length; i++) {
      const injectorToCheck = resolutionPath[i];
      if (i === 0 && formattedDependency.flags.skipSelf) {
        continue;
      }
      if (formattedDependency.flags.host && injectorToCheck instanceof EnvironmentInjector) {
        break;
      }
      const instance2 = injectorToCheck.get(dep.token, null, { self: true, optional: true });
      if (instance2 !== null) {
        if (formattedDependency.flags.host) {
          const firstInjector = resolutionPath[0];
          const lookupFromFirstInjector = firstInjector.get(dep.token, null, __spreadProps(__spreadValues({}, formattedDependency.flags), { optional: true }));
          if (lookupFromFirstInjector !== null) {
            formattedDependency.providedIn = injectorToCheck;
          }
          break;
        }
        formattedDependency.providedIn = injectorToCheck;
        break;
      }
      if (i === 0 && formattedDependency.flags.self) {
        break;
      }
    }
    if (dep.token)
      formattedDependency.token = dep.token;
    return formattedDependency;
  });
  return { instance, dependencies };
}
function getDependenciesForTokenInInjector(token, injector) {
  const { resolverToTokenToDependencies } = getFrameworkDIDebugData();
  if (!(injector instanceof NodeInjector)) {
    return resolverToTokenToDependencies.get(injector)?.get?.(token) ?? [];
  }
  const lView = getNodeInjectorLView(injector);
  const tokenDependencyMap = resolverToTokenToDependencies.get(lView);
  const dependencies = tokenDependencyMap?.get(token) ?? [];
  return dependencies.filter((dependency) => {
    const dependencyNode = dependency.injectedIn?.tNode;
    if (dependencyNode === void 0) {
      return false;
    }
    const instanceNode = getNodeInjectorTNode(injector);
    assertTNode(dependencyNode);
    assertTNode(instanceNode);
    return dependencyNode === instanceNode;
  });
}
function getProviderImportsContainer(injector) {
  const { standaloneInjectorToComponent } = getFrameworkDIDebugData();
  if (standaloneInjectorToComponent.has(injector)) {
    return standaloneInjectorToComponent.get(injector);
  }
  const defTypeRef = injector.get(NgModuleRef$1, null, { self: true, optional: true });
  if (defTypeRef === null) {
    return null;
  }
  if (defTypeRef.instance === null) {
    return null;
  }
  return defTypeRef.instance.constructor;
}
function getNodeInjectorProviders(injector) {
  const diResolver = getNodeInjectorTNode(injector);
  const { resolverToProviders } = getFrameworkDIDebugData();
  return resolverToProviders.get(diResolver) ?? [];
}
function getProviderImportPaths(providerImportsContainer) {
  const providerToPath = /* @__PURE__ */ new Map();
  const visitedContainers = /* @__PURE__ */ new Set();
  const visitor = walkProviderTreeToDiscoverImportPaths(providerToPath, visitedContainers);
  walkProviderTree(providerImportsContainer, visitor, [], /* @__PURE__ */ new Set());
  return providerToPath;
}
function walkProviderTreeToDiscoverImportPaths(providerToPath, visitedContainers) {
  return (provider, container) => {
    if (!providerToPath.has(provider)) {
      providerToPath.set(provider, [container]);
    }
    if (!visitedContainers.has(container)) {
      for (const prov of providerToPath.keys()) {
        const existingImportPath = providerToPath.get(prov);
        let containerDef = getInjectorDef(container);
        if (!containerDef) {
          const ngModule = container.ngModule;
          containerDef = getInjectorDef(ngModule);
        }
        if (!containerDef) {
          return;
        }
        const lastContainerAddedToPath = existingImportPath[0];
        let isNextStepInPath = false;
        deepForEach(containerDef.imports, (moduleImport) => {
          if (isNextStepInPath) {
            return;
          }
          isNextStepInPath = moduleImport.ngModule === lastContainerAddedToPath || moduleImport === lastContainerAddedToPath;
          if (isNextStepInPath) {
            providerToPath.get(prov)?.unshift(container);
          }
        });
      }
    }
    visitedContainers.add(container);
  };
}
function getEnvironmentInjectorProviders(injector) {
  const providerRecordsWithoutImportPaths = getFrameworkDIDebugData().resolverToProviders.get(injector) ?? [];
  if (isPlatformInjector(injector)) {
    return providerRecordsWithoutImportPaths;
  }
  const providerImportsContainer = getProviderImportsContainer(injector);
  if (providerImportsContainer === null) {
    return providerRecordsWithoutImportPaths;
  }
  const providerToPath = getProviderImportPaths(providerImportsContainer);
  const providerRecords = [];
  for (const providerRecord of providerRecordsWithoutImportPaths) {
    const provider = providerRecord.provider;
    const token = provider.provide;
    if (token === ENVIRONMENT_INITIALIZER || token === INJECTOR_DEF_TYPES) {
      continue;
    }
    let importPath = providerToPath.get(provider) ?? [];
    const def = getComponentDef(providerImportsContainer);
    const isStandaloneComponent2 = !!def?.standalone;
    if (isStandaloneComponent2) {
      importPath = [providerImportsContainer, ...importPath];
    }
    providerRecords.push(__spreadProps(__spreadValues({}, providerRecord), { importPath }));
  }
  return providerRecords;
}
function isPlatformInjector(injector) {
  return injector instanceof R3Injector && injector.scopes.has("platform");
}
function getInjectorProviders(injector) {
  if (injector instanceof NodeInjector) {
    return getNodeInjectorProviders(injector);
  } else if (injector instanceof EnvironmentInjector) {
    return getEnvironmentInjectorProviders(injector);
  }
  throwError2("getInjectorProviders only supports NodeInjector and EnvironmentInjector");
}
function getInjectorMetadata(injector) {
  if (injector instanceof NodeInjector) {
    const lView = getNodeInjectorLView(injector);
    const tNode = getNodeInjectorTNode(injector);
    assertTNodeForLView(tNode, lView);
    return { type: "element", source: getNativeByTNode(tNode, lView) };
  }
  if (injector instanceof R3Injector) {
    return { type: "environment", source: injector.source ?? null };
  }
  if (injector instanceof NullInjector) {
    return { type: "null", source: null };
  }
  return null;
}
function getInjectorResolutionPath(injector) {
  const resolutionPath = [injector];
  getInjectorResolutionPathHelper(injector, resolutionPath);
  return resolutionPath;
}
function getInjectorResolutionPathHelper(injector, resolutionPath) {
  const parent = getInjectorParent(injector);
  if (parent === null) {
    if (injector instanceof NodeInjector) {
      const firstInjector = resolutionPath[0];
      if (firstInjector instanceof NodeInjector) {
        const moduleInjector = getModuleInjectorOfNodeInjector(firstInjector);
        if (moduleInjector === null) {
          throwError2("NodeInjector must have some connection to the module injector tree");
        }
        resolutionPath.push(moduleInjector);
        getInjectorResolutionPathHelper(moduleInjector, resolutionPath);
      }
      return resolutionPath;
    }
  } else {
    resolutionPath.push(parent);
    getInjectorResolutionPathHelper(parent, resolutionPath);
  }
  return resolutionPath;
}
function getInjectorParent(injector) {
  if (injector instanceof R3Injector) {
    return injector.parent;
  }
  let tNode;
  let lView;
  if (injector instanceof NodeInjector) {
    tNode = getNodeInjectorTNode(injector);
    lView = getNodeInjectorLView(injector);
  } else if (injector instanceof NullInjector) {
    return null;
  } else {
    throwError2("getInjectorParent only support injectors of type R3Injector, NodeInjector, NullInjector");
  }
  const parentLocation = getParentInjectorLocation(tNode, lView);
  if (hasParentInjector(parentLocation)) {
    const parentInjectorIndex = getParentInjectorIndex(parentLocation);
    const parentLView = getParentInjectorView(parentLocation, lView);
    const parentTView = parentLView[TVIEW];
    const parentTNode = parentTView.data[
      parentInjectorIndex + 8
      /* NodeInjectorOffset.TNODE */
    ];
    return new NodeInjector(parentTNode, parentLView);
  } else {
    const chainedInjector = lView[INJECTOR$1];
    const injectorParent = chainedInjector.injector?.parent;
    if (injectorParent instanceof NodeInjector) {
      return injectorParent;
    }
  }
  return null;
}
function getModuleInjectorOfNodeInjector(injector) {
  let lView;
  if (injector instanceof NodeInjector) {
    lView = getNodeInjectorLView(injector);
  } else {
    throwError2("getModuleInjectorOfNodeInjector must be called with a NodeInjector");
  }
  const chainedInjector = lView[INJECTOR$1];
  const moduleInjector = chainedInjector.parentInjector;
  if (!moduleInjector) {
    throwError2("NodeInjector must have some connection to the module injector tree");
  }
  return moduleInjector;
}
var GLOBAL_PUBLISH_EXPANDO_KEY = "ng";
var _published = false;
function publishDefaultGlobalUtils$1() {
  if (!_published) {
    _published = true;
    setupFrameworkInjectorProfiler();
    publishGlobalUtil("\u0275getDependenciesFromInjectable", getDependenciesFromInjectable);
    publishGlobalUtil("\u0275getInjectorProviders", getInjectorProviders);
    publishGlobalUtil("\u0275getInjectorResolutionPath", getInjectorResolutionPath);
    publishGlobalUtil("\u0275getInjectorMetadata", getInjectorMetadata);
    publishGlobalUtil("\u0275setProfiler", setProfiler);
    publishGlobalUtil("getDirectiveMetadata", getDirectiveMetadata$1);
    publishGlobalUtil("getComponent", getComponent);
    publishGlobalUtil("getContext", getContext);
    publishGlobalUtil("getListeners", getListeners);
    publishGlobalUtil("getOwningComponent", getOwningComponent);
    publishGlobalUtil("getHostElement", getHostElement);
    publishGlobalUtil("getInjector", getInjector);
    publishGlobalUtil("getRootComponents", getRootComponents);
    publishGlobalUtil("getDirectives", getDirectives);
    publishGlobalUtil("applyChanges", applyChanges);
  }
}
function publishGlobalUtil(name, fn) {
  if (typeof COMPILED === "undefined" || !COMPILED) {
    const w = _global;
    ngDevMode && assertDefined(fn, "function not defined");
    if (w) {
      let container = w[GLOBAL_PUBLISH_EXPANDO_KEY];
      if (!container) {
        container = w[GLOBAL_PUBLISH_EXPANDO_KEY] = {};
      }
      container[name] = fn;
    }
  }
}
var TESTABILITY = new InjectionToken("");
var TESTABILITY_GETTER = new InjectionToken("");
var _Testability = class _Testability {
  constructor(_ngZone, registry, testabilityGetter) {
    this._ngZone = _ngZone;
    this.registry = registry;
    this._pendingCount = 0;
    this._isZoneStable = true;
    this._didWork = false;
    this._callbacks = [];
    this.taskTrackingZone = null;
    if (!_testabilityGetter) {
      setTestabilityGetter(testabilityGetter);
      testabilityGetter.addToWindow(registry);
    }
    this._watchAngularEvents();
    _ngZone.run(() => {
      this.taskTrackingZone = typeof Zone == "undefined" ? null : Zone.current.get("TaskTrackingZone");
    });
  }
  _watchAngularEvents() {
    this._ngZone.onUnstable.subscribe({
      next: () => {
        this._didWork = true;
        this._isZoneStable = false;
      }
    });
    this._ngZone.runOutsideAngular(() => {
      this._ngZone.onStable.subscribe({
        next: () => {
          NgZone.assertNotInAngularZone();
          queueMicrotask(() => {
            this._isZoneStable = true;
            this._runCallbacksIfReady();
          });
        }
      });
    });
  }
  /**
   * Increases the number of pending request
   * @deprecated pending requests are now tracked with zones.
   */
  increasePendingRequestCount() {
    this._pendingCount += 1;
    this._didWork = true;
    return this._pendingCount;
  }
  /**
   * Decreases the number of pending request
   * @deprecated pending requests are now tracked with zones
   */
  decreasePendingRequestCount() {
    this._pendingCount -= 1;
    if (this._pendingCount < 0) {
      throw new Error("pending async requests below zero");
    }
    this._runCallbacksIfReady();
    return this._pendingCount;
  }
  /**
   * Whether an associated application is stable
   */
  isStable() {
    return this._isZoneStable && this._pendingCount === 0 && !this._ngZone.hasPendingMacrotasks;
  }
  _runCallbacksIfReady() {
    if (this.isStable()) {
      queueMicrotask(() => {
        while (this._callbacks.length !== 0) {
          let cb = this._callbacks.pop();
          clearTimeout(cb.timeoutId);
          cb.doneCb(this._didWork);
        }
        this._didWork = false;
      });
    } else {
      let pending = this.getPendingTasks();
      this._callbacks = this._callbacks.filter((cb) => {
        if (cb.updateCb && cb.updateCb(pending)) {
          clearTimeout(cb.timeoutId);
          return false;
        }
        return true;
      });
      this._didWork = true;
    }
  }
  getPendingTasks() {
    if (!this.taskTrackingZone) {
      return [];
    }
    return this.taskTrackingZone.macroTasks.map((t) => {
      return {
        source: t.source,
        // From TaskTrackingZone:
        // https://github.com/angular/zone.js/blob/master/lib/zone-spec/task-tracking.ts#L40
        creationLocation: t.creationLocation,
        data: t.data
      };
    });
  }
  addCallback(cb, timeout, updateCb) {
    let timeoutId = -1;
    if (timeout && timeout > 0) {
      timeoutId = setTimeout(() => {
        this._callbacks = this._callbacks.filter((cb2) => cb2.timeoutId !== timeoutId);
        cb(this._didWork, this.getPendingTasks());
      }, timeout);
    }
    this._callbacks.push({ doneCb: cb, timeoutId, updateCb });
  }
  /**
   * Wait for the application to be stable with a timeout. If the timeout is reached before that
   * happens, the callback receives a list of the macro tasks that were pending, otherwise null.
   *
   * @param doneCb The callback to invoke when Angular is stable or the timeout expires
   *    whichever comes first.
   * @param timeout Optional. The maximum time to wait for Angular to become stable. If not
   *    specified, whenStable() will wait forever.
   * @param updateCb Optional. If specified, this callback will be invoked whenever the set of
   *    pending macrotasks changes. If this callback returns true doneCb will not be invoked
   *    and no further updates will be issued.
   */
  whenStable(doneCb, timeout, updateCb) {
    if (updateCb && !this.taskTrackingZone) {
      throw new Error('Task tracking zone is required when passing an update callback to whenStable(). Is "zone.js/plugins/task-tracking" loaded?');
    }
    this.addCallback(doneCb, timeout, updateCb);
    this._runCallbacksIfReady();
  }
  /**
   * Get the number of pending requests
   * @deprecated pending requests are now tracked with zones
   */
  getPendingRequestCount() {
    return this._pendingCount;
  }
  /**
   * Registers an application with a testability hook so that it can be tracked.
   * @param token token of application, root element
   *
   * @internal
   */
  registerApplication(token) {
    this.registry.registerApplication(token, this);
  }
  /**
   * Unregisters an application.
   * @param token token of application, root element
   *
   * @internal
   */
  unregisterApplication(token) {
    this.registry.unregisterApplication(token);
  }
  /**
   * Find providers by name
   * @param using The root element to search from
   * @param provider The name of binding variable
   * @param exactMatch Whether using exactMatch
   */
  findProviders(using, provider, exactMatch) {
    return [];
  }
};
_Testability.\u0275fac = function Testability_Factory(t) {
  return new (t || _Testability)(\u0275\u0275inject(NgZone), \u0275\u0275inject(TestabilityRegistry), \u0275\u0275inject(TESTABILITY_GETTER));
};
_Testability.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _Testability, factory: _Testability.\u0275fac });
var Testability = _Testability;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Testability, [{
    type: Injectable
  }], () => [{ type: NgZone }, { type: TestabilityRegistry }, { type: void 0, decorators: [{
    type: Inject,
    args: [TESTABILITY_GETTER]
  }] }], null);
})();
var _TestabilityRegistry = class _TestabilityRegistry {
  constructor() {
    this._applications = /* @__PURE__ */ new Map();
  }
  /**
   * Registers an application with a testability hook so that it can be tracked
   * @param token token of application, root element
   * @param testability Testability hook
   */
  registerApplication(token, testability) {
    this._applications.set(token, testability);
  }
  /**
   * Unregisters an application.
   * @param token token of application, root element
   */
  unregisterApplication(token) {
    this._applications.delete(token);
  }
  /**
   * Unregisters all applications
   */
  unregisterAllApplications() {
    this._applications.clear();
  }
  /**
   * Get a testability hook associated with the application
   * @param elem root element
   */
  getTestability(elem) {
    return this._applications.get(elem) || null;
  }
  /**
   * Get all registered testabilities
   */
  getAllTestabilities() {
    return Array.from(this._applications.values());
  }
  /**
   * Get all registered applications(root elements)
   */
  getAllRootElements() {
    return Array.from(this._applications.keys());
  }
  /**
   * Find testability of a node in the Tree
   * @param elem node
   * @param findInAncestors whether finding testability in ancestors if testability was not found in
   * current node
   */
  findTestabilityInTree(elem, findInAncestors = true) {
    return _testabilityGetter?.findTestabilityInTree(this, elem, findInAncestors) ?? null;
  }
};
_TestabilityRegistry.\u0275fac = function TestabilityRegistry_Factory(t) {
  return new (t || _TestabilityRegistry)();
};
_TestabilityRegistry.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _TestabilityRegistry, factory: _TestabilityRegistry.\u0275fac, providedIn: "platform" });
var TestabilityRegistry = _TestabilityRegistry;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TestabilityRegistry, [{
    type: Injectable,
    args: [{ providedIn: "platform" }]
  }], null, null);
})();
function setTestabilityGetter(getter) {
  _testabilityGetter = getter;
}
var _testabilityGetter;
var APP_INITIALIZER = new InjectionToken("Application Initializer");
var _ApplicationInitStatus = class _ApplicationInitStatus {
  constructor() {
    this.initialized = false;
    this.done = false;
    this.donePromise = new Promise((res, rej) => {
      this.resolve = res;
      this.reject = rej;
    });
    this.appInits = inject(APP_INITIALIZER, { optional: true }) ?? [];
    if ((typeof ngDevMode === "undefined" || ngDevMode) && !Array.isArray(this.appInits)) {
      throw new RuntimeError(-209, `Unexpected type of the \`APP_INITIALIZER\` token value (expected an array, but got ${typeof this.appInits}). Please check that the \`APP_INITIALIZER\` token is configured as a \`multi: true\` provider.`);
    }
  }
  /** @internal */
  runInitializers() {
    if (this.initialized) {
      return;
    }
    const asyncInitPromises = [];
    for (const appInits of this.appInits) {
      const initResult = appInits();
      if (isPromise2(initResult)) {
        asyncInitPromises.push(initResult);
      } else if (isSubscribable(initResult)) {
        const observableAsPromise = new Promise((resolve, reject) => {
          initResult.subscribe({ complete: resolve, error: reject });
        });
        asyncInitPromises.push(observableAsPromise);
      }
    }
    const complete = () => {
      this.done = true;
      this.resolve();
    };
    Promise.all(asyncInitPromises).then(() => {
      complete();
    }).catch((e) => {
      this.reject(e);
    });
    if (asyncInitPromises.length === 0) {
      complete();
    }
    this.initialized = true;
  }
};
_ApplicationInitStatus.\u0275fac = function ApplicationInitStatus_Factory(t) {
  return new (t || _ApplicationInitStatus)();
};
_ApplicationInitStatus.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _ApplicationInitStatus, factory: _ApplicationInitStatus.\u0275fac, providedIn: "root" });
var ApplicationInitStatus = _ApplicationInitStatus;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ApplicationInitStatus, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], () => [], null);
})();
var APP_BOOTSTRAP_LISTENER = new InjectionToken("appBootstrapListener");
function compileNgModuleFactory(injector, options, moduleType) {
  ngDevMode && assertNgModuleType(moduleType);
  const moduleFactory = new NgModuleFactory(moduleType);
  if (true) {
    return Promise.resolve(moduleFactory);
  }
  const compilerOptions = injector.get(COMPILER_OPTIONS, []).concat(options);
  setJitOptions({
    defaultEncapsulation: _lastDefined(compilerOptions.map((opts) => opts.defaultEncapsulation)),
    preserveWhitespaces: _lastDefined(compilerOptions.map((opts) => opts.preserveWhitespaces))
  });
  if (isComponentResourceResolutionQueueEmpty()) {
    return Promise.resolve(moduleFactory);
  }
  const compilerProviders = compilerOptions.flatMap((option) => option.providers ?? []);
  if (compilerProviders.length === 0) {
    return Promise.resolve(moduleFactory);
  }
  const compiler = getCompilerFacade({
    usage: 0,
    kind: "NgModule",
    type: moduleType
  });
  const compilerInjector = Injector.create({ providers: compilerProviders });
  const resourceLoader = compilerInjector.get(compiler.ResourceLoader);
  return resolveComponentResources((url) => Promise.resolve(resourceLoader.get(url))).then(() => moduleFactory);
}
function publishDefaultGlobalUtils() {
  ngDevMode && publishDefaultGlobalUtils$1();
}
function publishSignalConfiguration() {
  setThrowInvalidWriteToSignalError(() => {
    throw new RuntimeError(600, ngDevMode && "Writing to signals is not allowed in a `computed` or an `effect` by default. Use `allowSignalWrites` in the `CreateEffectOptions` to enable this inside effects.");
  });
}
function isBoundToModule(cf) {
  return cf.isBoundToModule;
}
function _callAndReportToErrorHandler(errorHandler2, ngZone, callback) {
  try {
    const result = callback();
    if (isPromise2(result)) {
      return result.catch((e) => {
        ngZone.runOutsideAngular(() => errorHandler2.handleError(e));
        throw e;
      });
    }
    return result;
  } catch (e) {
    ngZone.runOutsideAngular(() => errorHandler2.handleError(e));
    throw e;
  }
}
function optionsReducer(dst, objs) {
  if (Array.isArray(objs)) {
    return objs.reduce(optionsReducer, dst);
  }
  return __spreadValues(__spreadValues({}, dst), objs);
}
var _ApplicationRef = class _ApplicationRef {
  constructor() {
    this._bootstrapListeners = [];
    this._runningTick = false;
    this._destroyed = false;
    this._destroyListeners = [];
    this._views = [];
    this.internalErrorHandler = inject(INTERNAL_APPLICATION_ERROR_HANDLER);
    this.zoneIsStable = inject(ZONE_IS_STABLE_OBSERVABLE);
    this.componentTypes = [];
    this.components = [];
    this.isStable = inject(InitialRenderPendingTasks).hasPendingTasks.pipe(switchMap((hasPendingTasks) => hasPendingTasks ? of(false) : this.zoneIsStable), distinctUntilChanged());
    this._injector = inject(EnvironmentInjector);
  }
  /**
   * Indicates whether this instance was destroyed.
   */
  get destroyed() {
    return this._destroyed;
  }
  /**
   * The `EnvironmentInjector` used to create this application.
   */
  get injector() {
    return this._injector;
  }
  /**
   * Bootstrap a component onto the element identified by its selector or, optionally, to a
   * specified element.
   *
   * @usageNotes
   * ### Bootstrap process
   *
   * When bootstrapping a component, Angular mounts it onto a target DOM element
   * and kicks off automatic change detection. The target DOM element can be
   * provided using the `rootSelectorOrNode` argument.
   *
   * If the target DOM element is not provided, Angular tries to find one on a page
   * using the `selector` of the component that is being bootstrapped
   * (first matched element is used).
   *
   * ### Example
   *
   * Generally, we define the component to bootstrap in the `bootstrap` array of `NgModule`,
   * but it requires us to know the component while writing the application code.
   *
   * Imagine a situation where we have to wait for an API call to decide about the component to
   * bootstrap. We can use the `ngDoBootstrap` hook of the `NgModule` and call this method to
   * dynamically bootstrap a component.
   *
   * {@example core/ts/platform/platform.ts region='componentSelector'}
   *
   * Optionally, a component can be mounted onto a DOM element that does not match the
   * selector of the bootstrapped component.
   *
   * In the following example, we are providing a CSS selector to match the target element.
   *
   * {@example core/ts/platform/platform.ts region='cssSelector'}
   *
   * While in this example, we are providing reference to a DOM node.
   *
   * {@example core/ts/platform/platform.ts region='domNode'}
   */
  bootstrap(componentOrFactory, rootSelectorOrNode) {
    (typeof ngDevMode === "undefined" || ngDevMode) && this.warnIfDestroyed();
    const isComponentFactory = componentOrFactory instanceof ComponentFactory$1;
    const initStatus = this._injector.get(ApplicationInitStatus);
    if (!initStatus.done) {
      const standalone = !isComponentFactory && isStandalone(componentOrFactory);
      const errorMessage = "Cannot bootstrap as there are still asynchronous initializers running." + (standalone ? "" : " Bootstrap components in the `ngDoBootstrap` method of the root module.");
      throw new RuntimeError(405, (typeof ngDevMode === "undefined" || ngDevMode) && errorMessage);
    }
    let componentFactory;
    if (isComponentFactory) {
      componentFactory = componentOrFactory;
    } else {
      const resolver = this._injector.get(ComponentFactoryResolver$1);
      componentFactory = resolver.resolveComponentFactory(componentOrFactory);
    }
    this.componentTypes.push(componentFactory.componentType);
    const ngModule = isBoundToModule(componentFactory) ? void 0 : this._injector.get(NgModuleRef$1);
    const selectorOrNode = rootSelectorOrNode || componentFactory.selector;
    const compRef = componentFactory.create(Injector.NULL, [], selectorOrNode, ngModule);
    const nativeElement = compRef.location.nativeElement;
    const testability = compRef.injector.get(TESTABILITY, null);
    testability?.registerApplication(nativeElement);
    compRef.onDestroy(() => {
      this.detachView(compRef.hostView);
      remove(this.components, compRef);
      testability?.unregisterApplication(nativeElement);
    });
    this._loadComponent(compRef);
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      const _console = this._injector.get(Console);
      _console.log(`Angular is running in development mode.`);
    }
    return compRef;
  }
  /**
   * Invoke this method to explicitly process change detection and its side-effects.
   *
   * In development mode, `tick()` also performs a second change detection cycle to ensure that no
   * further changes are detected. If additional changes are picked up during this second cycle,
   * bindings in the app have side-effects that cannot be resolved in a single change detection
   * pass.
   * In this case, Angular throws an error, since an Angular application can only have one change
   * detection pass during which all change detection must complete.
   */
  tick() {
    (typeof ngDevMode === "undefined" || ngDevMode) && this.warnIfDestroyed();
    if (this._runningTick) {
      throw new RuntimeError(101, ngDevMode && "ApplicationRef.tick is called recursively");
    }
    try {
      this._runningTick = true;
      for (let view of this._views) {
        view.detectChanges();
      }
      if (typeof ngDevMode === "undefined" || ngDevMode) {
        for (let view of this._views) {
          view.checkNoChanges();
        }
      }
    } catch (e) {
      this.internalErrorHandler(e);
    } finally {
      this._runningTick = false;
    }
  }
  /**
   * Attaches a view so that it will be dirty checked.
   * The view will be automatically detached when it is destroyed.
   * This will throw if the view is already attached to a ViewContainer.
   */
  attachView(viewRef) {
    (typeof ngDevMode === "undefined" || ngDevMode) && this.warnIfDestroyed();
    const view = viewRef;
    this._views.push(view);
    view.attachToAppRef(this);
  }
  /**
   * Detaches a view from dirty checking again.
   */
  detachView(viewRef) {
    (typeof ngDevMode === "undefined" || ngDevMode) && this.warnIfDestroyed();
    const view = viewRef;
    remove(this._views, view);
    view.detachFromAppRef();
  }
  _loadComponent(componentRef) {
    this.attachView(componentRef.hostView);
    this.tick();
    this.components.push(componentRef);
    const listeners = this._injector.get(APP_BOOTSTRAP_LISTENER, []);
    if (ngDevMode && !Array.isArray(listeners)) {
      throw new RuntimeError(-209, `Unexpected type of the \`APP_BOOTSTRAP_LISTENER\` token value (expected an array, but got ${typeof listeners}). Please check that the \`APP_BOOTSTRAP_LISTENER\` token is configured as a \`multi: true\` provider.`);
    }
    [...this._bootstrapListeners, ...listeners].forEach((listener) => listener(componentRef));
  }
  /** @internal */
  ngOnDestroy() {
    if (this._destroyed)
      return;
    try {
      this._destroyListeners.forEach((listener) => listener());
      this._views.slice().forEach((view) => view.destroy());
    } finally {
      this._destroyed = true;
      this._views = [];
      this._bootstrapListeners = [];
      this._destroyListeners = [];
    }
  }
  /**
   * Registers a listener to be called when an instance is destroyed.
   *
   * @param callback A callback function to add as a listener.
   * @returns A function which unregisters a listener.
   */
  onDestroy(callback) {
    (typeof ngDevMode === "undefined" || ngDevMode) && this.warnIfDestroyed();
    this._destroyListeners.push(callback);
    return () => remove(this._destroyListeners, callback);
  }
  /**
   * Destroys an Angular application represented by this `ApplicationRef`. Calling this function
   * will destroy the associated environment injectors as well as all the bootstrapped components
   * with their views.
   */
  destroy() {
    if (this._destroyed) {
      throw new RuntimeError(406, ngDevMode && "This instance of the `ApplicationRef` has already been destroyed.");
    }
    const injector = this._injector;
    if (injector.destroy && !injector.destroyed) {
      injector.destroy();
    }
  }
  /**
   * Returns the number of attached views.
   */
  get viewCount() {
    return this._views.length;
  }
  warnIfDestroyed() {
    if ((typeof ngDevMode === "undefined" || ngDevMode) && this._destroyed) {
      console.warn(formatRuntimeError(406, "This instance of the `ApplicationRef` has already been destroyed."));
    }
  }
};
_ApplicationRef.\u0275fac = function ApplicationRef_Factory(t) {
  return new (t || _ApplicationRef)();
};
_ApplicationRef.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _ApplicationRef, factory: _ApplicationRef.\u0275fac, providedIn: "root" });
var ApplicationRef = _ApplicationRef;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ApplicationRef, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], null, null);
})();
function remove(list, el) {
  const index = list.indexOf(el);
  if (index > -1) {
    list.splice(index, 1);
  }
}
function _lastDefined(args) {
  for (let i = args.length - 1; i >= 0; i--) {
    if (args[i] !== void 0) {
      return args[i];
    }
  }
  return void 0;
}
var _NgZoneChangeDetectionScheduler = class _NgZoneChangeDetectionScheduler {
  constructor() {
    this.zone = inject(NgZone);
    this.applicationRef = inject(ApplicationRef);
  }
  initialize() {
    if (this._onMicrotaskEmptySubscription) {
      return;
    }
    this._onMicrotaskEmptySubscription = this.zone.onMicrotaskEmpty.subscribe({
      next: () => {
        this.zone.run(() => {
          this.applicationRef.tick();
        });
      }
    });
  }
  ngOnDestroy() {
    this._onMicrotaskEmptySubscription?.unsubscribe();
  }
};
_NgZoneChangeDetectionScheduler.\u0275fac = function NgZoneChangeDetectionScheduler_Factory(t) {
  return new (t || _NgZoneChangeDetectionScheduler)();
};
_NgZoneChangeDetectionScheduler.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _NgZoneChangeDetectionScheduler, factory: _NgZoneChangeDetectionScheduler.\u0275fac, providedIn: "root" });
var NgZoneChangeDetectionScheduler = _NgZoneChangeDetectionScheduler;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgZoneChangeDetectionScheduler, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], null, null);
})();
var PROVIDED_NG_ZONE = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "provideZoneChangeDetection token" : "");
function internalProvideZoneChangeDetection(ngZoneFactory) {
  return [
    { provide: NgZone, useFactory: ngZoneFactory },
    {
      provide: ENVIRONMENT_INITIALIZER,
      multi: true,
      useFactory: () => {
        const ngZoneChangeDetectionScheduler = inject(NgZoneChangeDetectionScheduler, { optional: true });
        if ((typeof ngDevMode === "undefined" || ngDevMode) && ngZoneChangeDetectionScheduler === null) {
          throw new RuntimeError(402, `A required Injectable was not found in the dependency injection tree. If you are bootstrapping an NgModule, make sure that the \`BrowserModule\` is imported.`);
        }
        return () => ngZoneChangeDetectionScheduler.initialize();
      }
    },
    { provide: INTERNAL_APPLICATION_ERROR_HANDLER, useFactory: ngZoneApplicationErrorHandlerFactory },
    { provide: ZONE_IS_STABLE_OBSERVABLE, useFactory: isStableFactory }
  ];
}
function ngZoneApplicationErrorHandlerFactory() {
  const zone = inject(NgZone);
  const userErrorHandler = inject(ErrorHandler);
  return (e) => zone.runOutsideAngular(() => userErrorHandler.handleError(e));
}
function getNgZoneOptions(options) {
  return {
    enableLongStackTrace: typeof ngDevMode === "undefined" ? false : !!ngDevMode,
    shouldCoalesceEventChangeDetection: options?.eventCoalescing ?? false,
    shouldCoalesceRunChangeDetection: options?.runCoalescing ?? false
  };
}
function getGlobalLocale() {
  if (false) {
    return goog.LOCALE;
  } else {
    return typeof $localize !== "undefined" && $localize.locale || DEFAULT_LOCALE_ID;
  }
}
var LOCALE_ID = new InjectionToken("LocaleId", {
  providedIn: "root",
  factory: () => inject(LOCALE_ID, InjectFlags.Optional | InjectFlags.SkipSelf) || getGlobalLocale()
});
var DEFAULT_CURRENCY_CODE = new InjectionToken("DefaultCurrencyCode", {
  providedIn: "root",
  factory: () => USD_CURRENCY_CODE
});
var TRANSLATIONS = new InjectionToken("Translations");
var TRANSLATIONS_FORMAT = new InjectionToken("TranslationsFormat");
var MissingTranslationStrategy;
(function(MissingTranslationStrategy2) {
  MissingTranslationStrategy2[MissingTranslationStrategy2["Error"] = 0] = "Error";
  MissingTranslationStrategy2[MissingTranslationStrategy2["Warning"] = 1] = "Warning";
  MissingTranslationStrategy2[MissingTranslationStrategy2["Ignore"] = 2] = "Ignore";
})(MissingTranslationStrategy || (MissingTranslationStrategy = {}));
var PLATFORM_DESTROY_LISTENERS = new InjectionToken("PlatformDestroyListeners");
var _PlatformRef = class _PlatformRef {
  /** @internal */
  constructor(_injector) {
    this._injector = _injector;
    this._modules = [];
    this._destroyListeners = [];
    this._destroyed = false;
  }
  /**
   * Creates an instance of an `@NgModule` for the given platform.
   *
   * @deprecated Passing NgModule factories as the `PlatformRef.bootstrapModuleFactory` function
   *     argument is deprecated. Use the `PlatformRef.bootstrapModule` API instead.
   */
  bootstrapModuleFactory(moduleFactory, options) {
    const ngZone = getNgZone(options?.ngZone, getNgZoneOptions({
      eventCoalescing: options?.ngZoneEventCoalescing,
      runCoalescing: options?.ngZoneRunCoalescing
    }));
    return ngZone.run(() => {
      const moduleRef = createNgModuleRefWithProviders(moduleFactory.moduleType, this.injector, internalProvideZoneChangeDetection(() => ngZone));
      if ((typeof ngDevMode === "undefined" || ngDevMode) && moduleRef.injector.get(PROVIDED_NG_ZONE, null) !== null) {
        throw new RuntimeError(207, "`bootstrapModule` does not support `provideZoneChangeDetection`. Use `BootstrapOptions` instead.");
      }
      const exceptionHandler = moduleRef.injector.get(ErrorHandler, null);
      if ((typeof ngDevMode === "undefined" || ngDevMode) && exceptionHandler === null) {
        throw new RuntimeError(402, "No ErrorHandler. Is platform module (BrowserModule) included?");
      }
      ngZone.runOutsideAngular(() => {
        const subscription = ngZone.onError.subscribe({
          next: (error) => {
            exceptionHandler.handleError(error);
          }
        });
        moduleRef.onDestroy(() => {
          remove(this._modules, moduleRef);
          subscription.unsubscribe();
        });
      });
      return _callAndReportToErrorHandler(exceptionHandler, ngZone, () => {
        const initStatus = moduleRef.injector.get(ApplicationInitStatus);
        initStatus.runInitializers();
        return initStatus.donePromise.then(() => {
          const localeId = moduleRef.injector.get(LOCALE_ID, DEFAULT_LOCALE_ID);
          setLocaleId(localeId || DEFAULT_LOCALE_ID);
          this._moduleDoBootstrap(moduleRef);
          return moduleRef;
        });
      });
    });
  }
  /**
   * Creates an instance of an `@NgModule` for a given platform.
   *
   * @usageNotes
   * ### Simple Example
   *
   * ```typescript
   * @NgModule({
   *   imports: [BrowserModule]
   * })
   * class MyModule {}
   *
   * let moduleRef = platformBrowser().bootstrapModule(MyModule);
   * ```
   *
   */
  bootstrapModule(moduleType, compilerOptions = []) {
    const options = optionsReducer({}, compilerOptions);
    return compileNgModuleFactory(this.injector, options, moduleType).then((moduleFactory) => this.bootstrapModuleFactory(moduleFactory, options));
  }
  _moduleDoBootstrap(moduleRef) {
    const appRef = moduleRef.injector.get(ApplicationRef);
    if (moduleRef._bootstrapComponents.length > 0) {
      moduleRef._bootstrapComponents.forEach((f) => appRef.bootstrap(f));
    } else if (moduleRef.instance.ngDoBootstrap) {
      moduleRef.instance.ngDoBootstrap(appRef);
    } else {
      throw new RuntimeError(-403, ngDevMode && `The module ${stringify(moduleRef.instance.constructor)} was bootstrapped, but it does not declare "@NgModule.bootstrap" components nor a "ngDoBootstrap" method. Please define one of these.`);
    }
    this._modules.push(moduleRef);
  }
  /**
   * Registers a listener to be called when the platform is destroyed.
   */
  onDestroy(callback) {
    this._destroyListeners.push(callback);
  }
  /**
   * Retrieves the platform {@link Injector}, which is the parent injector for
   * every Angular application on the page and provides singleton providers.
   */
  get injector() {
    return this._injector;
  }
  /**
   * Destroys the current Angular platform and all Angular applications on the page.
   * Destroys all modules and listeners registered with the platform.
   */
  destroy() {
    if (this._destroyed) {
      throw new RuntimeError(404, ngDevMode && "The platform has already been destroyed!");
    }
    this._modules.slice().forEach((module) => module.destroy());
    this._destroyListeners.forEach((listener) => listener());
    const destroyListeners = this._injector.get(PLATFORM_DESTROY_LISTENERS, null);
    if (destroyListeners) {
      destroyListeners.forEach((listener) => listener());
      destroyListeners.clear();
    }
    this._destroyed = true;
  }
  /**
   * Indicates whether this instance was destroyed.
   */
  get destroyed() {
    return this._destroyed;
  }
};
_PlatformRef.\u0275fac = function PlatformRef_Factory(t) {
  return new (t || _PlatformRef)(\u0275\u0275inject(Injector));
};
_PlatformRef.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _PlatformRef, factory: _PlatformRef.\u0275fac, providedIn: "platform" });
var PlatformRef = _PlatformRef;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PlatformRef, [{
    type: Injectable,
    args: [{ providedIn: "platform" }]
  }], () => [{ type: Injector }], null);
})();
var _platformInjector = null;
var ALLOW_MULTIPLE_PLATFORMS = new InjectionToken("AllowMultipleToken");
function createPlatform(injector) {
  if (_platformInjector && !_platformInjector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
    throw new RuntimeError(400, ngDevMode && "There can be only one platform. Destroy the previous one to create a new one.");
  }
  publishDefaultGlobalUtils();
  publishSignalConfiguration();
  _platformInjector = injector;
  const platform = injector.get(PlatformRef);
  runPlatformInitializers(injector);
  return platform;
}
function createPlatformFactory(parentPlatformFactory, name, providers = []) {
  const desc = `Platform: ${name}`;
  const marker = new InjectionToken(desc);
  return (extraProviders = []) => {
    let platform = getPlatform();
    if (!platform || platform.injector.get(ALLOW_MULTIPLE_PLATFORMS, false)) {
      const platformProviders = [...providers, ...extraProviders, { provide: marker, useValue: true }];
      if (parentPlatformFactory) {
        parentPlatformFactory(platformProviders);
      } else {
        createPlatform(createPlatformInjector(platformProviders, desc));
      }
    }
    return assertPlatform(marker);
  };
}
function createPlatformInjector(providers = [], name) {
  return Injector.create({
    name,
    providers: [
      { provide: INJECTOR_SCOPE, useValue: "platform" },
      { provide: PLATFORM_DESTROY_LISTENERS, useValue: /* @__PURE__ */ new Set([() => _platformInjector = null]) },
      ...providers
    ]
  });
}
function assertPlatform(requiredToken) {
  const platform = getPlatform();
  if (!platform) {
    throw new RuntimeError(401, ngDevMode && "No platform exists!");
  }
  if ((typeof ngDevMode === "undefined" || ngDevMode) && !platform.injector.get(requiredToken, null)) {
    throw new RuntimeError(400, "A platform with a different configuration has been created. Please destroy it first.");
  }
  return platform;
}
function getPlatform() {
  return _platformInjector?.get(PlatformRef) ?? null;
}
function runPlatformInitializers(injector) {
  const inits = injector.get(PLATFORM_INITIALIZER, null);
  inits?.forEach((init) => init());
}
var platformCore = createPlatformFactory(null, "core", []);
var _ApplicationModule = class _ApplicationModule {
  // Inject ApplicationRef to make it eager...
  constructor(appRef) {
  }
};
_ApplicationModule.\u0275fac = function ApplicationModule_Factory(t) {
  return new (t || _ApplicationModule)(\u0275\u0275inject(ApplicationRef));
};
_ApplicationModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({ type: _ApplicationModule });
_ApplicationModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({});
var ApplicationModule = _ApplicationModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ApplicationModule, [{
    type: NgModule
  }], () => [{ type: ApplicationRef }], null);
})();
var SCAN_DELAY = 200;
var OVERSIZED_IMAGE_TOLERANCE = 1200;
var _ImagePerformanceWarning = class _ImagePerformanceWarning {
  constructor() {
    this.window = null;
    this.observer = null;
    this.options = inject(IMAGE_CONFIG);
    this.ngZone = inject(NgZone);
  }
  start() {
    if (typeof PerformanceObserver === "undefined" || this.options?.disableImageSizeWarning && this.options?.disableImageLazyLoadWarning) {
      return;
    }
    this.observer = this.initPerformanceObserver();
    const doc = getDocument();
    const win = doc.defaultView;
    if (typeof win !== "undefined") {
      this.window = win;
      const waitToScan = () => {
        setTimeout(this.scanImages.bind(this), SCAN_DELAY);
      };
      this.ngZone.runOutsideAngular(() => {
        if (doc.readyState === "complete") {
          waitToScan();
        } else {
          this.window?.addEventListener("load", waitToScan, { once: true });
        }
      });
    }
  }
  ngOnDestroy() {
    this.observer?.disconnect();
  }
  initPerformanceObserver() {
    if (typeof PerformanceObserver === "undefined") {
      return null;
    }
    const observer = new PerformanceObserver((entryList) => {
      const entries = entryList.getEntries();
      if (entries.length === 0)
        return;
      const lcpElement = entries[entries.length - 1];
      const imgSrc = lcpElement.element?.src ?? "";
      if (imgSrc.startsWith("data:") || imgSrc.startsWith("blob:"))
        return;
      this.lcpImageUrl = imgSrc;
    });
    observer.observe({ type: "largest-contentful-paint", buffered: true });
    return observer;
  }
  scanImages() {
    const images = getDocument().querySelectorAll("img");
    let lcpElementFound, lcpElementLoadedCorrectly = false;
    images.forEach((image) => {
      if (!this.options?.disableImageSizeWarning) {
        for (const image2 of images) {
          if (!image2.getAttribute("ng-img") && this.isOversized(image2)) {
            logOversizedImageWarning(image2.src);
          }
        }
      }
      if (!this.options?.disableImageLazyLoadWarning && this.lcpImageUrl) {
        if (image.src === this.lcpImageUrl) {
          lcpElementFound = true;
          if (image.loading !== "lazy" || image.getAttribute("ng-img")) {
            lcpElementLoadedCorrectly = true;
          }
        }
      }
    });
    if (lcpElementFound && !lcpElementLoadedCorrectly && this.lcpImageUrl && !this.options?.disableImageLazyLoadWarning) {
      logLazyLCPWarning(this.lcpImageUrl);
    }
  }
  isOversized(image) {
    if (!this.window) {
      return false;
    }
    const computedStyle = this.window.getComputedStyle(image);
    let renderedWidth = parseFloat(computedStyle.getPropertyValue("width"));
    let renderedHeight = parseFloat(computedStyle.getPropertyValue("height"));
    const boxSizing = computedStyle.getPropertyValue("box-sizing");
    const objectFit = computedStyle.getPropertyValue("object-fit");
    if (objectFit === `cover`) {
      return false;
    }
    if (boxSizing === "border-box") {
      const paddingTop = computedStyle.getPropertyValue("padding-top");
      const paddingRight = computedStyle.getPropertyValue("padding-right");
      const paddingBottom = computedStyle.getPropertyValue("padding-bottom");
      const paddingLeft = computedStyle.getPropertyValue("padding-left");
      renderedWidth -= parseFloat(paddingRight) + parseFloat(paddingLeft);
      renderedHeight -= parseFloat(paddingTop) + parseFloat(paddingBottom);
    }
    const intrinsicWidth = image.naturalWidth;
    const intrinsicHeight = image.naturalHeight;
    const recommendedWidth = this.window.devicePixelRatio * renderedWidth;
    const recommendedHeight = this.window.devicePixelRatio * renderedHeight;
    const oversizedWidth = intrinsicWidth - recommendedWidth >= OVERSIZED_IMAGE_TOLERANCE;
    const oversizedHeight = intrinsicHeight - recommendedHeight >= OVERSIZED_IMAGE_TOLERANCE;
    return oversizedWidth || oversizedHeight;
  }
};
_ImagePerformanceWarning.\u0275fac = function ImagePerformanceWarning_Factory(t) {
  return new (t || _ImagePerformanceWarning)();
};
_ImagePerformanceWarning.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _ImagePerformanceWarning, factory: _ImagePerformanceWarning.\u0275fac, providedIn: "root" });
var ImagePerformanceWarning = _ImagePerformanceWarning;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ImagePerformanceWarning, [{
    type: Injectable,
    args: [{ providedIn: "root" }]
  }], null, null);
})();
function logLazyLCPWarning(src) {
  console.warn(formatRuntimeError(-913, `An image with src ${src} is the Largest Contentful Paint (LCP) element but was given a "loading" value of "lazy", which can negatively impact application loading performance. This warning can be addressed by changing the loading value of the LCP image to "eager", or by using the NgOptimizedImage directive's prioritization utilities. For more information about addressing or disabling this warning, see https://angular.io/errors/NG0913`));
}
function logOversizedImageWarning(src) {
  console.warn(formatRuntimeError(-913, `An image with src ${src} has intrinsic file dimensions much larger than its rendered size. This can negatively impact application loading performance. For more information about addressing or disabling this warning, see https://angular.io/errors/NG0913`));
}
function booleanAttribute(value) {
  return typeof value === "boolean" ? value : value != null && value !== "false";
}
function numberAttribute(value, fallbackValue = NaN) {
  const isNumberValue = !isNaN(parseFloat(value)) && !isNaN(Number(value));
  return isNumberValue ? Number(value) : fallbackValue;
}
function reflectComponentType(component) {
  const componentDef = getComponentDef(component);
  if (!componentDef)
    return null;
  const factory = new ComponentFactory(componentDef);
  return {
    get selector() {
      return factory.selector;
    },
    get type() {
      return factory.componentType;
    },
    get inputs() {
      return factory.inputs;
    },
    get outputs() {
      return factory.outputs;
    },
    get ngContentSelectors() {
      return factory.ngContentSelectors;
    },
    get isStandalone() {
      return componentDef.standalone;
    },
    get isSignal() {
      return componentDef.signals;
    }
  };
}
if (typeof ngDevMode !== "undefined" && ngDevMode) {
  _global.$localize ??= function() {
    throw new Error("It looks like your application or one of its dependencies is using i18n.\nAngular 9 introduced a global `$localize()` function that needs to be loaded.\nPlease run `ng add @angular/localize` from the Angular CLI.\n(For non-CLI projects, add `import '@angular/localize/init';` to your `polyfills.ts` file.\nFor server-side rendering applications add the import to your `main.server.ts` file.)");
  };
}

// node_modules/@angular/common/fesm2022/common.mjs
var _DOM = null;
function getDOM() {
  return _DOM;
}
function setRootDomAdapter(adapter) {
  if (!_DOM) {
    _DOM = adapter;
  }
}
var DomAdapter = class {
};
var DOCUMENT2 = new InjectionToken("DocumentToken");
var _PlatformLocation = class _PlatformLocation {
  historyGo(relativePosition) {
    throw new Error("Not implemented");
  }
};
_PlatformLocation.\u0275fac = function PlatformLocation_Factory(t) {
  return new (t || _PlatformLocation)();
};
_PlatformLocation.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _PlatformLocation,
  factory: () => (() => inject(BrowserPlatformLocation))(),
  providedIn: "platform"
});
var PlatformLocation = _PlatformLocation;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PlatformLocation, [{
    type: Injectable,
    args: [{
      providedIn: "platform",
      useFactory: () => inject(BrowserPlatformLocation)
    }]
  }], null, null);
})();
var LOCATION_INITIALIZED = new InjectionToken("Location Initialized");
var _BrowserPlatformLocation = class _BrowserPlatformLocation extends PlatformLocation {
  constructor() {
    super();
    this._doc = inject(DOCUMENT2);
    this._location = window.location;
    this._history = window.history;
  }
  getBaseHrefFromDOM() {
    return getDOM().getBaseHref(this._doc);
  }
  onPopState(fn) {
    const window2 = getDOM().getGlobalEventTarget(this._doc, "window");
    window2.addEventListener("popstate", fn, false);
    return () => window2.removeEventListener("popstate", fn);
  }
  onHashChange(fn) {
    const window2 = getDOM().getGlobalEventTarget(this._doc, "window");
    window2.addEventListener("hashchange", fn, false);
    return () => window2.removeEventListener("hashchange", fn);
  }
  get href() {
    return this._location.href;
  }
  get protocol() {
    return this._location.protocol;
  }
  get hostname() {
    return this._location.hostname;
  }
  get port() {
    return this._location.port;
  }
  get pathname() {
    return this._location.pathname;
  }
  get search() {
    return this._location.search;
  }
  get hash() {
    return this._location.hash;
  }
  set pathname(newPath) {
    this._location.pathname = newPath;
  }
  pushState(state2, title, url) {
    this._history.pushState(state2, title, url);
  }
  replaceState(state2, title, url) {
    this._history.replaceState(state2, title, url);
  }
  forward() {
    this._history.forward();
  }
  back() {
    this._history.back();
  }
  historyGo(relativePosition = 0) {
    this._history.go(relativePosition);
  }
  getState() {
    return this._history.state;
  }
};
_BrowserPlatformLocation.\u0275fac = function BrowserPlatformLocation_Factory(t) {
  return new (t || _BrowserPlatformLocation)();
};
_BrowserPlatformLocation.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _BrowserPlatformLocation,
  factory: () => (() => new _BrowserPlatformLocation())(),
  providedIn: "platform"
});
var BrowserPlatformLocation = _BrowserPlatformLocation;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(BrowserPlatformLocation, [{
    type: Injectable,
    args: [{
      providedIn: "platform",
      useFactory: () => new BrowserPlatformLocation()
    }]
  }], () => [], null);
})();
function joinWithSlash(start, end) {
  if (start.length == 0) {
    return end;
  }
  if (end.length == 0) {
    return start;
  }
  let slashes = 0;
  if (start.endsWith("/")) {
    slashes++;
  }
  if (end.startsWith("/")) {
    slashes++;
  }
  if (slashes == 2) {
    return start + end.substring(1);
  }
  if (slashes == 1) {
    return start + end;
  }
  return start + "/" + end;
}
function stripTrailingSlash(url) {
  const match2 = url.match(/#|\?|$/);
  const pathEndIdx = match2 && match2.index || url.length;
  const droppedSlashIdx = pathEndIdx - (url[pathEndIdx - 1] === "/" ? 1 : 0);
  return url.slice(0, droppedSlashIdx) + url.slice(pathEndIdx);
}
function normalizeQueryParams(params) {
  return params && params[0] !== "?" ? "?" + params : params;
}
var _LocationStrategy = class _LocationStrategy {
  historyGo(relativePosition) {
    throw new Error("Not implemented");
  }
};
_LocationStrategy.\u0275fac = function LocationStrategy_Factory(t) {
  return new (t || _LocationStrategy)();
};
_LocationStrategy.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _LocationStrategy,
  factory: () => (() => inject(PathLocationStrategy))(),
  providedIn: "root"
});
var LocationStrategy = _LocationStrategy;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(LocationStrategy, [{
    type: Injectable,
    args: [{
      providedIn: "root",
      useFactory: () => inject(PathLocationStrategy)
    }]
  }], null, null);
})();
var APP_BASE_HREF = new InjectionToken("appBaseHref");
var _PathLocationStrategy = class _PathLocationStrategy extends LocationStrategy {
  constructor(_platformLocation, href) {
    super();
    this._platformLocation = _platformLocation;
    this._removeListenerFns = [];
    this._baseHref = href ?? this._platformLocation.getBaseHrefFromDOM() ?? inject(DOCUMENT2).location?.origin ?? "";
  }
  /** @nodoc */
  ngOnDestroy() {
    while (this._removeListenerFns.length) {
      this._removeListenerFns.pop()();
    }
  }
  onPopState(fn) {
    this._removeListenerFns.push(this._platformLocation.onPopState(fn), this._platformLocation.onHashChange(fn));
  }
  getBaseHref() {
    return this._baseHref;
  }
  prepareExternalUrl(internal) {
    return joinWithSlash(this._baseHref, internal);
  }
  path(includeHash = false) {
    const pathname = this._platformLocation.pathname + normalizeQueryParams(this._platformLocation.search);
    const hash = this._platformLocation.hash;
    return hash && includeHash ? `${pathname}${hash}` : pathname;
  }
  pushState(state2, title, url, queryParams) {
    const externalUrl = this.prepareExternalUrl(url + normalizeQueryParams(queryParams));
    this._platformLocation.pushState(state2, title, externalUrl);
  }
  replaceState(state2, title, url, queryParams) {
    const externalUrl = this.prepareExternalUrl(url + normalizeQueryParams(queryParams));
    this._platformLocation.replaceState(state2, title, externalUrl);
  }
  forward() {
    this._platformLocation.forward();
  }
  back() {
    this._platformLocation.back();
  }
  getState() {
    return this._platformLocation.getState();
  }
  historyGo(relativePosition = 0) {
    this._platformLocation.historyGo?.(relativePosition);
  }
};
_PathLocationStrategy.\u0275fac = function PathLocationStrategy_Factory(t) {
  return new (t || _PathLocationStrategy)(\u0275\u0275inject(PlatformLocation), \u0275\u0275inject(APP_BASE_HREF, 8));
};
_PathLocationStrategy.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _PathLocationStrategy,
  factory: _PathLocationStrategy.\u0275fac,
  providedIn: "root"
});
var PathLocationStrategy = _PathLocationStrategy;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PathLocationStrategy, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: PlatformLocation
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [APP_BASE_HREF]
    }]
  }], null);
})();
var _HashLocationStrategy = class _HashLocationStrategy extends LocationStrategy {
  constructor(_platformLocation, _baseHref) {
    super();
    this._platformLocation = _platformLocation;
    this._baseHref = "";
    this._removeListenerFns = [];
    if (_baseHref != null) {
      this._baseHref = _baseHref;
    }
  }
  /** @nodoc */
  ngOnDestroy() {
    while (this._removeListenerFns.length) {
      this._removeListenerFns.pop()();
    }
  }
  onPopState(fn) {
    this._removeListenerFns.push(this._platformLocation.onPopState(fn), this._platformLocation.onHashChange(fn));
  }
  getBaseHref() {
    return this._baseHref;
  }
  path(includeHash = false) {
    let path = this._platformLocation.hash;
    if (path == null)
      path = "#";
    return path.length > 0 ? path.substring(1) : path;
  }
  prepareExternalUrl(internal) {
    const url = joinWithSlash(this._baseHref, internal);
    return url.length > 0 ? "#" + url : url;
  }
  pushState(state2, title, path, queryParams) {
    let url = this.prepareExternalUrl(path + normalizeQueryParams(queryParams));
    if (url.length == 0) {
      url = this._platformLocation.pathname;
    }
    this._platformLocation.pushState(state2, title, url);
  }
  replaceState(state2, title, path, queryParams) {
    let url = this.prepareExternalUrl(path + normalizeQueryParams(queryParams));
    if (url.length == 0) {
      url = this._platformLocation.pathname;
    }
    this._platformLocation.replaceState(state2, title, url);
  }
  forward() {
    this._platformLocation.forward();
  }
  back() {
    this._platformLocation.back();
  }
  getState() {
    return this._platformLocation.getState();
  }
  historyGo(relativePosition = 0) {
    this._platformLocation.historyGo?.(relativePosition);
  }
};
_HashLocationStrategy.\u0275fac = function HashLocationStrategy_Factory(t) {
  return new (t || _HashLocationStrategy)(\u0275\u0275inject(PlatformLocation), \u0275\u0275inject(APP_BASE_HREF, 8));
};
_HashLocationStrategy.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _HashLocationStrategy,
  factory: _HashLocationStrategy.\u0275fac
});
var HashLocationStrategy = _HashLocationStrategy;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HashLocationStrategy, [{
    type: Injectable
  }], () => [{
    type: PlatformLocation
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [APP_BASE_HREF]
    }]
  }], null);
})();
var _Location = class _Location {
  constructor(locationStrategy) {
    this._subject = new EventEmitter();
    this._urlChangeListeners = [];
    this._urlChangeSubscription = null;
    this._locationStrategy = locationStrategy;
    const baseHref = this._locationStrategy.getBaseHref();
    this._basePath = _stripOrigin(stripTrailingSlash(_stripIndexHtml(baseHref)));
    this._locationStrategy.onPopState((ev) => {
      this._subject.emit({
        "url": this.path(true),
        "pop": true,
        "state": ev.state,
        "type": ev.type
      });
    });
  }
  /** @nodoc */
  ngOnDestroy() {
    this._urlChangeSubscription?.unsubscribe();
    this._urlChangeListeners = [];
  }
  /**
   * Normalizes the URL path for this location.
   *
   * @param includeHash True to include an anchor fragment in the path.
   *
   * @returns The normalized URL path.
   */
  // TODO: vsavkin. Remove the boolean flag and always include hash once the deprecated router is
  // removed.
  path(includeHash = false) {
    return this.normalize(this._locationStrategy.path(includeHash));
  }
  /**
   * Reports the current state of the location history.
   * @returns The current value of the `history.state` object.
   */
  getState() {
    return this._locationStrategy.getState();
  }
  /**
   * Normalizes the given path and compares to the current normalized path.
   *
   * @param path The given URL path.
   * @param query Query parameters.
   *
   * @returns True if the given URL path is equal to the current normalized path, false
   * otherwise.
   */
  isCurrentPathEqualTo(path, query2 = "") {
    return this.path() == this.normalize(path + normalizeQueryParams(query2));
  }
  /**
   * Normalizes a URL path by stripping any trailing slashes.
   *
   * @param url String representing a URL.
   *
   * @returns The normalized URL string.
   */
  normalize(url) {
    return _Location.stripTrailingSlash(_stripBasePath(this._basePath, _stripIndexHtml(url)));
  }
  /**
   * Normalizes an external URL path.
   * If the given URL doesn't begin with a leading slash (`'/'`), adds one
   * before normalizing. Adds a hash if `HashLocationStrategy` is
   * in use, or the `APP_BASE_HREF` if the `PathLocationStrategy` is in use.
   *
   * @param url String representing a URL.
   *
   * @returns  A normalized platform-specific URL.
   */
  prepareExternalUrl(url) {
    if (url && url[0] !== "/") {
      url = "/" + url;
    }
    return this._locationStrategy.prepareExternalUrl(url);
  }
  // TODO: rename this method to pushState
  /**
   * Changes the browser's URL to a normalized version of a given URL, and pushes a
   * new item onto the platform's history.
   *
   * @param path  URL path to normalize.
   * @param query Query parameters.
   * @param state Location history state.
   *
   */
  go(path, query2 = "", state2 = null) {
    this._locationStrategy.pushState(state2, "", path, query2);
    this._notifyUrlChangeListeners(this.prepareExternalUrl(path + normalizeQueryParams(query2)), state2);
  }
  /**
   * Changes the browser's URL to a normalized version of the given URL, and replaces
   * the top item on the platform's history stack.
   *
   * @param path  URL path to normalize.
   * @param query Query parameters.
   * @param state Location history state.
   */
  replaceState(path, query2 = "", state2 = null) {
    this._locationStrategy.replaceState(state2, "", path, query2);
    this._notifyUrlChangeListeners(this.prepareExternalUrl(path + normalizeQueryParams(query2)), state2);
  }
  /**
   * Navigates forward in the platform's history.
   */
  forward() {
    this._locationStrategy.forward();
  }
  /**
   * Navigates back in the platform's history.
   */
  back() {
    this._locationStrategy.back();
  }
  /**
   * Navigate to a specific page from session history, identified by its relative position to the
   * current page.
   *
   * @param relativePosition  Position of the target page in the history relative to the current
   *     page.
   * A negative value moves backwards, a positive value moves forwards, e.g. `location.historyGo(2)`
   * moves forward two pages and `location.historyGo(-2)` moves back two pages. When we try to go
   * beyond what's stored in the history session, we stay in the current page. Same behaviour occurs
   * when `relativePosition` equals 0.
   * @see https://developer.mozilla.org/en-US/docs/Web/API/History_API#Moving_to_a_specific_point_in_history
   */
  historyGo(relativePosition = 0) {
    this._locationStrategy.historyGo?.(relativePosition);
  }
  /**
   * Registers a URL change listener. Use to catch updates performed by the Angular
   * framework that are not detectible through "popstate" or "hashchange" events.
   *
   * @param fn The change handler function, which take a URL and a location history state.
   * @returns A function that, when executed, unregisters a URL change listener.
   */
  onUrlChange(fn) {
    this._urlChangeListeners.push(fn);
    if (!this._urlChangeSubscription) {
      this._urlChangeSubscription = this.subscribe((v) => {
        this._notifyUrlChangeListeners(v.url, v.state);
      });
    }
    return () => {
      const fnIndex = this._urlChangeListeners.indexOf(fn);
      this._urlChangeListeners.splice(fnIndex, 1);
      if (this._urlChangeListeners.length === 0) {
        this._urlChangeSubscription?.unsubscribe();
        this._urlChangeSubscription = null;
      }
    };
  }
  /** @internal */
  _notifyUrlChangeListeners(url = "", state2) {
    this._urlChangeListeners.forEach((fn) => fn(url, state2));
  }
  /**
   * Subscribes to the platform's `popState` events.
   *
   * Note: `Location.go()` does not trigger the `popState` event in the browser. Use
   * `Location.onUrlChange()` to subscribe to URL changes instead.
   *
   * @param value Event that is triggered when the state history changes.
   * @param exception The exception to throw.
   *
   * @see [onpopstate](https://developer.mozilla.org/en-US/docs/Web/API/WindowEventHandlers/onpopstate)
   *
   * @returns Subscribed events.
   */
  subscribe(onNext, onThrow, onReturn) {
    return this._subject.subscribe({
      next: onNext,
      error: onThrow,
      complete: onReturn
    });
  }
};
_Location.normalizeQueryParams = normalizeQueryParams;
_Location.joinWithSlash = joinWithSlash;
_Location.stripTrailingSlash = stripTrailingSlash;
_Location.\u0275fac = function Location_Factory(t) {
  return new (t || _Location)(\u0275\u0275inject(LocationStrategy));
};
_Location.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _Location,
  factory: () => createLocation(),
  providedIn: "root"
});
var Location = _Location;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Location, [{
    type: Injectable,
    args: [{
      providedIn: "root",
      // See #23917
      useFactory: createLocation
    }]
  }], () => [{
    type: LocationStrategy
  }], null);
})();
function createLocation() {
  return new Location(\u0275\u0275inject(LocationStrategy));
}
function _stripBasePath(basePath, url) {
  if (!basePath || !url.startsWith(basePath)) {
    return url;
  }
  const strippedUrl = url.substring(basePath.length);
  if (strippedUrl === "" || ["/", ";", "?", "#"].includes(strippedUrl[0])) {
    return strippedUrl;
  }
  return url;
}
function _stripIndexHtml(url) {
  return url.replace(/\/index.html$/, "");
}
function _stripOrigin(baseHref) {
  const isAbsoluteUrl2 = new RegExp("^(https?:)?//").test(baseHref);
  if (isAbsoluteUrl2) {
    const [, pathname] = baseHref.split(/\/\/[^\/]+/);
    return pathname;
  }
  return baseHref;
}
var CURRENCIES_EN = {
  "ADP": [void 0, void 0, 0],
  "AFN": [void 0, "\u060B", 0],
  "ALL": [void 0, void 0, 0],
  "AMD": [void 0, "\u058F", 2],
  "AOA": [void 0, "Kz"],
  "ARS": [void 0, "$"],
  "AUD": ["A$", "$"],
  "AZN": [void 0, "\u20BC"],
  "BAM": [void 0, "KM"],
  "BBD": [void 0, "$"],
  "BDT": [void 0, "\u09F3"],
  "BHD": [void 0, void 0, 3],
  "BIF": [void 0, void 0, 0],
  "BMD": [void 0, "$"],
  "BND": [void 0, "$"],
  "BOB": [void 0, "Bs"],
  "BRL": ["R$"],
  "BSD": [void 0, "$"],
  "BWP": [void 0, "P"],
  "BYN": [void 0, void 0, 2],
  "BYR": [void 0, void 0, 0],
  "BZD": [void 0, "$"],
  "CAD": ["CA$", "$", 2],
  "CHF": [void 0, void 0, 2],
  "CLF": [void 0, void 0, 4],
  "CLP": [void 0, "$", 0],
  "CNY": ["CN\xA5", "\xA5"],
  "COP": [void 0, "$", 2],
  "CRC": [void 0, "\u20A1", 2],
  "CUC": [void 0, "$"],
  "CUP": [void 0, "$"],
  "CZK": [void 0, "K\u010D", 2],
  "DJF": [void 0, void 0, 0],
  "DKK": [void 0, "kr", 2],
  "DOP": [void 0, "$"],
  "EGP": [void 0, "E\xA3"],
  "ESP": [void 0, "\u20A7", 0],
  "EUR": ["\u20AC"],
  "FJD": [void 0, "$"],
  "FKP": [void 0, "\xA3"],
  "GBP": ["\xA3"],
  "GEL": [void 0, "\u20BE"],
  "GHS": [void 0, "GH\u20B5"],
  "GIP": [void 0, "\xA3"],
  "GNF": [void 0, "FG", 0],
  "GTQ": [void 0, "Q"],
  "GYD": [void 0, "$", 2],
  "HKD": ["HK$", "$"],
  "HNL": [void 0, "L"],
  "HRK": [void 0, "kn"],
  "HUF": [void 0, "Ft", 2],
  "IDR": [void 0, "Rp", 2],
  "ILS": ["\u20AA"],
  "INR": ["\u20B9"],
  "IQD": [void 0, void 0, 0],
  "IRR": [void 0, void 0, 0],
  "ISK": [void 0, "kr", 0],
  "ITL": [void 0, void 0, 0],
  "JMD": [void 0, "$"],
  "JOD": [void 0, void 0, 3],
  "JPY": ["\xA5", void 0, 0],
  "KHR": [void 0, "\u17DB"],
  "KMF": [void 0, "CF", 0],
  "KPW": [void 0, "\u20A9", 0],
  "KRW": ["\u20A9", void 0, 0],
  "KWD": [void 0, void 0, 3],
  "KYD": [void 0, "$"],
  "KZT": [void 0, "\u20B8"],
  "LAK": [void 0, "\u20AD", 0],
  "LBP": [void 0, "L\xA3", 0],
  "LKR": [void 0, "Rs"],
  "LRD": [void 0, "$"],
  "LTL": [void 0, "Lt"],
  "LUF": [void 0, void 0, 0],
  "LVL": [void 0, "Ls"],
  "LYD": [void 0, void 0, 3],
  "MGA": [void 0, "Ar", 0],
  "MGF": [void 0, void 0, 0],
  "MMK": [void 0, "K", 0],
  "MNT": [void 0, "\u20AE", 2],
  "MRO": [void 0, void 0, 0],
  "MUR": [void 0, "Rs", 2],
  "MXN": ["MX$", "$"],
  "MYR": [void 0, "RM"],
  "NAD": [void 0, "$"],
  "NGN": [void 0, "\u20A6"],
  "NIO": [void 0, "C$"],
  "NOK": [void 0, "kr", 2],
  "NPR": [void 0, "Rs"],
  "NZD": ["NZ$", "$"],
  "OMR": [void 0, void 0, 3],
  "PHP": ["\u20B1"],
  "PKR": [void 0, "Rs", 2],
  "PLN": [void 0, "z\u0142"],
  "PYG": [void 0, "\u20B2", 0],
  "RON": [void 0, "lei"],
  "RSD": [void 0, void 0, 0],
  "RUB": [void 0, "\u20BD"],
  "RWF": [void 0, "RF", 0],
  "SBD": [void 0, "$"],
  "SEK": [void 0, "kr", 2],
  "SGD": [void 0, "$"],
  "SHP": [void 0, "\xA3"],
  "SLE": [void 0, void 0, 2],
  "SLL": [void 0, void 0, 0],
  "SOS": [void 0, void 0, 0],
  "SRD": [void 0, "$"],
  "SSP": [void 0, "\xA3"],
  "STD": [void 0, void 0, 0],
  "STN": [void 0, "Db"],
  "SYP": [void 0, "\xA3", 0],
  "THB": [void 0, "\u0E3F"],
  "TMM": [void 0, void 0, 0],
  "TND": [void 0, void 0, 3],
  "TOP": [void 0, "T$"],
  "TRL": [void 0, void 0, 0],
  "TRY": [void 0, "\u20BA"],
  "TTD": [void 0, "$"],
  "TWD": ["NT$", "$", 2],
  "TZS": [void 0, void 0, 2],
  "UAH": [void 0, "\u20B4"],
  "UGX": [void 0, void 0, 0],
  "USD": ["$"],
  "UYI": [void 0, void 0, 0],
  "UYU": [void 0, "$"],
  "UYW": [void 0, void 0, 4],
  "UZS": [void 0, void 0, 2],
  "VEF": [void 0, "Bs", 2],
  "VND": ["\u20AB", void 0, 0],
  "VUV": [void 0, void 0, 0],
  "XAF": ["FCFA", void 0, 0],
  "XCD": ["EC$", "$"],
  "XOF": ["F\u202FCFA", void 0, 0],
  "XPF": ["CFPF", void 0, 0],
  "XXX": ["\xA4"],
  "YER": [void 0, void 0, 0],
  "ZAR": [void 0, "R"],
  "ZMK": [void 0, void 0, 0],
  "ZMW": [void 0, "ZK"],
  "ZWD": [void 0, void 0, 0]
};
var NumberFormatStyle;
(function(NumberFormatStyle2) {
  NumberFormatStyle2[NumberFormatStyle2["Decimal"] = 0] = "Decimal";
  NumberFormatStyle2[NumberFormatStyle2["Percent"] = 1] = "Percent";
  NumberFormatStyle2[NumberFormatStyle2["Currency"] = 2] = "Currency";
  NumberFormatStyle2[NumberFormatStyle2["Scientific"] = 3] = "Scientific";
})(NumberFormatStyle || (NumberFormatStyle = {}));
var Plural;
(function(Plural2) {
  Plural2[Plural2["Zero"] = 0] = "Zero";
  Plural2[Plural2["One"] = 1] = "One";
  Plural2[Plural2["Two"] = 2] = "Two";
  Plural2[Plural2["Few"] = 3] = "Few";
  Plural2[Plural2["Many"] = 4] = "Many";
  Plural2[Plural2["Other"] = 5] = "Other";
})(Plural || (Plural = {}));
var FormStyle;
(function(FormStyle2) {
  FormStyle2[FormStyle2["Format"] = 0] = "Format";
  FormStyle2[FormStyle2["Standalone"] = 1] = "Standalone";
})(FormStyle || (FormStyle = {}));
var TranslationWidth;
(function(TranslationWidth2) {
  TranslationWidth2[TranslationWidth2["Narrow"] = 0] = "Narrow";
  TranslationWidth2[TranslationWidth2["Abbreviated"] = 1] = "Abbreviated";
  TranslationWidth2[TranslationWidth2["Wide"] = 2] = "Wide";
  TranslationWidth2[TranslationWidth2["Short"] = 3] = "Short";
})(TranslationWidth || (TranslationWidth = {}));
var FormatWidth;
(function(FormatWidth2) {
  FormatWidth2[FormatWidth2["Short"] = 0] = "Short";
  FormatWidth2[FormatWidth2["Medium"] = 1] = "Medium";
  FormatWidth2[FormatWidth2["Long"] = 2] = "Long";
  FormatWidth2[FormatWidth2["Full"] = 3] = "Full";
})(FormatWidth || (FormatWidth = {}));
var NumberSymbol;
(function(NumberSymbol2) {
  NumberSymbol2[NumberSymbol2["Decimal"] = 0] = "Decimal";
  NumberSymbol2[NumberSymbol2["Group"] = 1] = "Group";
  NumberSymbol2[NumberSymbol2["List"] = 2] = "List";
  NumberSymbol2[NumberSymbol2["PercentSign"] = 3] = "PercentSign";
  NumberSymbol2[NumberSymbol2["PlusSign"] = 4] = "PlusSign";
  NumberSymbol2[NumberSymbol2["MinusSign"] = 5] = "MinusSign";
  NumberSymbol2[NumberSymbol2["Exponential"] = 6] = "Exponential";
  NumberSymbol2[NumberSymbol2["SuperscriptingExponent"] = 7] = "SuperscriptingExponent";
  NumberSymbol2[NumberSymbol2["PerMille"] = 8] = "PerMille";
  NumberSymbol2[NumberSymbol2["Infinity"] = 9] = "Infinity";
  NumberSymbol2[NumberSymbol2["NaN"] = 10] = "NaN";
  NumberSymbol2[NumberSymbol2["TimeSeparator"] = 11] = "TimeSeparator";
  NumberSymbol2[NumberSymbol2["CurrencyDecimal"] = 12] = "CurrencyDecimal";
  NumberSymbol2[NumberSymbol2["CurrencyGroup"] = 13] = "CurrencyGroup";
})(NumberSymbol || (NumberSymbol = {}));
var WeekDay;
(function(WeekDay2) {
  WeekDay2[WeekDay2["Sunday"] = 0] = "Sunday";
  WeekDay2[WeekDay2["Monday"] = 1] = "Monday";
  WeekDay2[WeekDay2["Tuesday"] = 2] = "Tuesday";
  WeekDay2[WeekDay2["Wednesday"] = 3] = "Wednesday";
  WeekDay2[WeekDay2["Thursday"] = 4] = "Thursday";
  WeekDay2[WeekDay2["Friday"] = 5] = "Friday";
  WeekDay2[WeekDay2["Saturday"] = 6] = "Saturday";
})(WeekDay || (WeekDay = {}));
function getLocaleId2(locale) {
  return findLocaleData(locale)[LocaleDataIndex.LocaleId];
}
function getLocaleDayPeriods(locale, formStyle, width) {
  const data = findLocaleData(locale);
  const amPmData = [data[LocaleDataIndex.DayPeriodsFormat], data[LocaleDataIndex.DayPeriodsStandalone]];
  const amPm = getLastDefinedValue(amPmData, formStyle);
  return getLastDefinedValue(amPm, width);
}
function getLocaleDayNames(locale, formStyle, width) {
  const data = findLocaleData(locale);
  const daysData = [data[LocaleDataIndex.DaysFormat], data[LocaleDataIndex.DaysStandalone]];
  const days = getLastDefinedValue(daysData, formStyle);
  return getLastDefinedValue(days, width);
}
function getLocaleMonthNames(locale, formStyle, width) {
  const data = findLocaleData(locale);
  const monthsData = [data[LocaleDataIndex.MonthsFormat], data[LocaleDataIndex.MonthsStandalone]];
  const months = getLastDefinedValue(monthsData, formStyle);
  return getLastDefinedValue(months, width);
}
function getLocaleEraNames(locale, width) {
  const data = findLocaleData(locale);
  const erasData = data[LocaleDataIndex.Eras];
  return getLastDefinedValue(erasData, width);
}
function getLocaleDateFormat(locale, width) {
  const data = findLocaleData(locale);
  return getLastDefinedValue(data[LocaleDataIndex.DateFormat], width);
}
function getLocaleTimeFormat(locale, width) {
  const data = findLocaleData(locale);
  return getLastDefinedValue(data[LocaleDataIndex.TimeFormat], width);
}
function getLocaleDateTimeFormat(locale, width) {
  const data = findLocaleData(locale);
  const dateTimeFormatData = data[LocaleDataIndex.DateTimeFormat];
  return getLastDefinedValue(dateTimeFormatData, width);
}
function getLocaleNumberSymbol(locale, symbol) {
  const data = findLocaleData(locale);
  const res = data[LocaleDataIndex.NumberSymbols][symbol];
  if (typeof res === "undefined") {
    if (symbol === NumberSymbol.CurrencyDecimal) {
      return data[LocaleDataIndex.NumberSymbols][NumberSymbol.Decimal];
    } else if (symbol === NumberSymbol.CurrencyGroup) {
      return data[LocaleDataIndex.NumberSymbols][NumberSymbol.Group];
    }
  }
  return res;
}
function getLocaleNumberFormat(locale, type) {
  const data = findLocaleData(locale);
  return data[LocaleDataIndex.NumberFormats][type];
}
function getLocaleCurrencies(locale) {
  const data = findLocaleData(locale);
  return data[LocaleDataIndex.Currencies];
}
var getLocalePluralCase2 = getLocalePluralCase;
function checkFullData(data) {
  if (!data[LocaleDataIndex.ExtraData]) {
    throw new Error(`Missing extra locale data for the locale "${data[LocaleDataIndex.LocaleId]}". Use "registerLocaleData" to load new data. See the "I18n guide" on angular.io to know more.`);
  }
}
function getLocaleExtraDayPeriodRules(locale) {
  const data = findLocaleData(locale);
  checkFullData(data);
  const rules = data[LocaleDataIndex.ExtraData][
    2
    /* ɵExtraLocaleDataIndex.ExtraDayPeriodsRules */
  ] || [];
  return rules.map((rule) => {
    if (typeof rule === "string") {
      return extractTime(rule);
    }
    return [extractTime(rule[0]), extractTime(rule[1])];
  });
}
function getLocaleExtraDayPeriods(locale, formStyle, width) {
  const data = findLocaleData(locale);
  checkFullData(data);
  const dayPeriodsData = [data[LocaleDataIndex.ExtraData][
    0
    /* ɵExtraLocaleDataIndex.ExtraDayPeriodFormats */
  ], data[LocaleDataIndex.ExtraData][
    1
    /* ɵExtraLocaleDataIndex.ExtraDayPeriodStandalone */
  ]];
  const dayPeriods = getLastDefinedValue(dayPeriodsData, formStyle) || [];
  return getLastDefinedValue(dayPeriods, width) || [];
}
function getLastDefinedValue(data, index) {
  for (let i = index; i > -1; i--) {
    if (typeof data[i] !== "undefined") {
      return data[i];
    }
  }
  throw new Error("Locale data API: locale data undefined");
}
function extractTime(time) {
  const [h, m] = time.split(":");
  return {
    hours: +h,
    minutes: +m
  };
}
function getCurrencySymbol(code, format, locale = "en") {
  const currency = getLocaleCurrencies(locale)[code] || CURRENCIES_EN[code] || [];
  const symbolNarrow = currency[
    1
    /* ɵCurrencyIndex.SymbolNarrow */
  ];
  if (format === "narrow" && typeof symbolNarrow === "string") {
    return symbolNarrow;
  }
  return currency[
    0
    /* ɵCurrencyIndex.Symbol */
  ] || code;
}
var DEFAULT_NB_OF_CURRENCY_DIGITS = 2;
function getNumberOfCurrencyDigits(code) {
  let digits;
  const currency = CURRENCIES_EN[code];
  if (currency) {
    digits = currency[
      2
      /* ɵCurrencyIndex.NbOfDigits */
    ];
  }
  return typeof digits === "number" ? digits : DEFAULT_NB_OF_CURRENCY_DIGITS;
}
var ISO8601_DATE_REGEX = /^(\d{4,})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
var NAMED_FORMATS = {};
var DATE_FORMATS_SPLIT = /((?:[^BEGHLMOSWYZabcdhmswyz']+)|(?:'(?:[^']|'')*')|(?:G{1,5}|y{1,4}|Y{1,4}|M{1,5}|L{1,5}|w{1,2}|W{1}|d{1,2}|E{1,6}|c{1,6}|a{1,5}|b{1,5}|B{1,5}|h{1,2}|H{1,2}|m{1,2}|s{1,2}|S{1,3}|z{1,4}|Z{1,5}|O{1,4}))([\s\S]*)/;
var ZoneWidth;
(function(ZoneWidth2) {
  ZoneWidth2[ZoneWidth2["Short"] = 0] = "Short";
  ZoneWidth2[ZoneWidth2["ShortGMT"] = 1] = "ShortGMT";
  ZoneWidth2[ZoneWidth2["Long"] = 2] = "Long";
  ZoneWidth2[ZoneWidth2["Extended"] = 3] = "Extended";
})(ZoneWidth || (ZoneWidth = {}));
var DateType;
(function(DateType2) {
  DateType2[DateType2["FullYear"] = 0] = "FullYear";
  DateType2[DateType2["Month"] = 1] = "Month";
  DateType2[DateType2["Date"] = 2] = "Date";
  DateType2[DateType2["Hours"] = 3] = "Hours";
  DateType2[DateType2["Minutes"] = 4] = "Minutes";
  DateType2[DateType2["Seconds"] = 5] = "Seconds";
  DateType2[DateType2["FractionalSeconds"] = 6] = "FractionalSeconds";
  DateType2[DateType2["Day"] = 7] = "Day";
})(DateType || (DateType = {}));
var TranslationType;
(function(TranslationType2) {
  TranslationType2[TranslationType2["DayPeriods"] = 0] = "DayPeriods";
  TranslationType2[TranslationType2["Days"] = 1] = "Days";
  TranslationType2[TranslationType2["Months"] = 2] = "Months";
  TranslationType2[TranslationType2["Eras"] = 3] = "Eras";
})(TranslationType || (TranslationType = {}));
function formatDate(value, format, locale, timezone) {
  let date = toDate(value);
  const namedFormat = getNamedFormat(locale, format);
  format = namedFormat || format;
  let parts = [];
  let match2;
  while (format) {
    match2 = DATE_FORMATS_SPLIT.exec(format);
    if (match2) {
      parts = parts.concat(match2.slice(1));
      const part = parts.pop();
      if (!part) {
        break;
      }
      format = part;
    } else {
      parts.push(format);
      break;
    }
  }
  let dateTimezoneOffset = date.getTimezoneOffset();
  if (timezone) {
    dateTimezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
    date = convertTimezoneToLocal(date, timezone, true);
  }
  let text = "";
  parts.forEach((value2) => {
    const dateFormatter = getDateFormatter(value2);
    text += dateFormatter ? dateFormatter(date, locale, dateTimezoneOffset) : value2 === "''" ? "'" : value2.replace(/(^'|'$)/g, "").replace(/''/g, "'");
  });
  return text;
}
function createDate(year, month, date) {
  const newDate = /* @__PURE__ */ new Date(0);
  newDate.setFullYear(year, month, date);
  newDate.setHours(0, 0, 0);
  return newDate;
}
function getNamedFormat(locale, format) {
  const localeId = getLocaleId2(locale);
  NAMED_FORMATS[localeId] = NAMED_FORMATS[localeId] || {};
  if (NAMED_FORMATS[localeId][format]) {
    return NAMED_FORMATS[localeId][format];
  }
  let formatValue2 = "";
  switch (format) {
    case "shortDate":
      formatValue2 = getLocaleDateFormat(locale, FormatWidth.Short);
      break;
    case "mediumDate":
      formatValue2 = getLocaleDateFormat(locale, FormatWidth.Medium);
      break;
    case "longDate":
      formatValue2 = getLocaleDateFormat(locale, FormatWidth.Long);
      break;
    case "fullDate":
      formatValue2 = getLocaleDateFormat(locale, FormatWidth.Full);
      break;
    case "shortTime":
      formatValue2 = getLocaleTimeFormat(locale, FormatWidth.Short);
      break;
    case "mediumTime":
      formatValue2 = getLocaleTimeFormat(locale, FormatWidth.Medium);
      break;
    case "longTime":
      formatValue2 = getLocaleTimeFormat(locale, FormatWidth.Long);
      break;
    case "fullTime":
      formatValue2 = getLocaleTimeFormat(locale, FormatWidth.Full);
      break;
    case "short":
      const shortTime = getNamedFormat(locale, "shortTime");
      const shortDate = getNamedFormat(locale, "shortDate");
      formatValue2 = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Short), [shortTime, shortDate]);
      break;
    case "medium":
      const mediumTime = getNamedFormat(locale, "mediumTime");
      const mediumDate = getNamedFormat(locale, "mediumDate");
      formatValue2 = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Medium), [mediumTime, mediumDate]);
      break;
    case "long":
      const longTime = getNamedFormat(locale, "longTime");
      const longDate = getNamedFormat(locale, "longDate");
      formatValue2 = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Long), [longTime, longDate]);
      break;
    case "full":
      const fullTime = getNamedFormat(locale, "fullTime");
      const fullDate = getNamedFormat(locale, "fullDate");
      formatValue2 = formatDateTime(getLocaleDateTimeFormat(locale, FormatWidth.Full), [fullTime, fullDate]);
      break;
  }
  if (formatValue2) {
    NAMED_FORMATS[localeId][format] = formatValue2;
  }
  return formatValue2;
}
function formatDateTime(str, opt_values) {
  if (opt_values) {
    str = str.replace(/\{([^}]+)}/g, function(match2, key) {
      return opt_values != null && key in opt_values ? opt_values[key] : match2;
    });
  }
  return str;
}
function padNumber(num, digits, minusSign = "-", trim, negWrap) {
  let neg = "";
  if (num < 0 || negWrap && num <= 0) {
    if (negWrap) {
      num = -num + 1;
    } else {
      num = -num;
      neg = minusSign;
    }
  }
  let strNum = String(num);
  while (strNum.length < digits) {
    strNum = "0" + strNum;
  }
  if (trim) {
    strNum = strNum.slice(strNum.length - digits);
  }
  return neg + strNum;
}
function formatFractionalSeconds(milliseconds, digits) {
  const strMs = padNumber(milliseconds, 3);
  return strMs.substring(0, digits);
}
function dateGetter(name, size, offset = 0, trim = false, negWrap = false) {
  return function(date, locale) {
    let part = getDatePart(name, date);
    if (offset > 0 || part > -offset) {
      part += offset;
    }
    if (name === DateType.Hours) {
      if (part === 0 && offset === -12) {
        part = 12;
      }
    } else if (name === DateType.FractionalSeconds) {
      return formatFractionalSeconds(part, size);
    }
    const localeMinus = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);
    return padNumber(part, size, localeMinus, trim, negWrap);
  };
}
function getDatePart(part, date) {
  switch (part) {
    case DateType.FullYear:
      return date.getFullYear();
    case DateType.Month:
      return date.getMonth();
    case DateType.Date:
      return date.getDate();
    case DateType.Hours:
      return date.getHours();
    case DateType.Minutes:
      return date.getMinutes();
    case DateType.Seconds:
      return date.getSeconds();
    case DateType.FractionalSeconds:
      return date.getMilliseconds();
    case DateType.Day:
      return date.getDay();
    default:
      throw new Error(`Unknown DateType value "${part}".`);
  }
}
function dateStrGetter(name, width, form = FormStyle.Format, extended = false) {
  return function(date, locale) {
    return getDateTranslation(date, locale, name, width, form, extended);
  };
}
function getDateTranslation(date, locale, name, width, form, extended) {
  switch (name) {
    case TranslationType.Months:
      return getLocaleMonthNames(locale, form, width)[date.getMonth()];
    case TranslationType.Days:
      return getLocaleDayNames(locale, form, width)[date.getDay()];
    case TranslationType.DayPeriods:
      const currentHours = date.getHours();
      const currentMinutes = date.getMinutes();
      if (extended) {
        const rules = getLocaleExtraDayPeriodRules(locale);
        const dayPeriods = getLocaleExtraDayPeriods(locale, form, width);
        const index = rules.findIndex((rule) => {
          if (Array.isArray(rule)) {
            const [from2, to] = rule;
            const afterFrom = currentHours >= from2.hours && currentMinutes >= from2.minutes;
            const beforeTo = currentHours < to.hours || currentHours === to.hours && currentMinutes < to.minutes;
            if (from2.hours < to.hours) {
              if (afterFrom && beforeTo) {
                return true;
              }
            } else if (afterFrom || beforeTo) {
              return true;
            }
          } else {
            if (rule.hours === currentHours && rule.minutes === currentMinutes) {
              return true;
            }
          }
          return false;
        });
        if (index !== -1) {
          return dayPeriods[index];
        }
      }
      return getLocaleDayPeriods(locale, form, width)[currentHours < 12 ? 0 : 1];
    case TranslationType.Eras:
      return getLocaleEraNames(locale, width)[date.getFullYear() <= 0 ? 0 : 1];
    default:
      const unexpected = name;
      throw new Error(`unexpected translation type ${unexpected}`);
  }
}
function timeZoneGetter(width) {
  return function(date, locale, offset) {
    const zone = -1 * offset;
    const minusSign = getLocaleNumberSymbol(locale, NumberSymbol.MinusSign);
    const hours = zone > 0 ? Math.floor(zone / 60) : Math.ceil(zone / 60);
    switch (width) {
      case ZoneWidth.Short:
        return (zone >= 0 ? "+" : "") + padNumber(hours, 2, minusSign) + padNumber(Math.abs(zone % 60), 2, minusSign);
      case ZoneWidth.ShortGMT:
        return "GMT" + (zone >= 0 ? "+" : "") + padNumber(hours, 1, minusSign);
      case ZoneWidth.Long:
        return "GMT" + (zone >= 0 ? "+" : "") + padNumber(hours, 2, minusSign) + ":" + padNumber(Math.abs(zone % 60), 2, minusSign);
      case ZoneWidth.Extended:
        if (offset === 0) {
          return "Z";
        } else {
          return (zone >= 0 ? "+" : "") + padNumber(hours, 2, minusSign) + ":" + padNumber(Math.abs(zone % 60), 2, minusSign);
        }
      default:
        throw new Error(`Unknown zone width "${width}"`);
    }
  };
}
var JANUARY = 0;
var THURSDAY = 4;
function getFirstThursdayOfYear(year) {
  const firstDayOfYear = createDate(year, JANUARY, 1).getDay();
  return createDate(year, 0, 1 + (firstDayOfYear <= THURSDAY ? THURSDAY : THURSDAY + 7) - firstDayOfYear);
}
function getThursdayThisWeek(datetime) {
  return createDate(datetime.getFullYear(), datetime.getMonth(), datetime.getDate() + (THURSDAY - datetime.getDay()));
}
function weekGetter(size, monthBased = false) {
  return function(date, locale) {
    let result;
    if (monthBased) {
      const nbDaysBefore1stDayOfMonth = new Date(date.getFullYear(), date.getMonth(), 1).getDay() - 1;
      const today = date.getDate();
      result = 1 + Math.floor((today + nbDaysBefore1stDayOfMonth) / 7);
    } else {
      const thisThurs = getThursdayThisWeek(date);
      const firstThurs = getFirstThursdayOfYear(thisThurs.getFullYear());
      const diff = thisThurs.getTime() - firstThurs.getTime();
      result = 1 + Math.round(diff / 6048e5);
    }
    return padNumber(result, size, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
  };
}
function weekNumberingYearGetter(size, trim = false) {
  return function(date, locale) {
    const thisThurs = getThursdayThisWeek(date);
    const weekNumberingYear = thisThurs.getFullYear();
    return padNumber(weekNumberingYear, size, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign), trim);
  };
}
var DATE_FORMATS = {};
function getDateFormatter(format) {
  if (DATE_FORMATS[format]) {
    return DATE_FORMATS[format];
  }
  let formatter;
  switch (format) {
    case "G":
    case "GG":
    case "GGG":
      formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Abbreviated);
      break;
    case "GGGG":
      formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Wide);
      break;
    case "GGGGG":
      formatter = dateStrGetter(TranslationType.Eras, TranslationWidth.Narrow);
      break;
    case "y":
      formatter = dateGetter(DateType.FullYear, 1, 0, false, true);
      break;
    case "yy":
      formatter = dateGetter(DateType.FullYear, 2, 0, true, true);
      break;
    case "yyy":
      formatter = dateGetter(DateType.FullYear, 3, 0, false, true);
      break;
    case "yyyy":
      formatter = dateGetter(DateType.FullYear, 4, 0, false, true);
      break;
    case "Y":
      formatter = weekNumberingYearGetter(1);
      break;
    case "YY":
      formatter = weekNumberingYearGetter(2, true);
      break;
    case "YYY":
      formatter = weekNumberingYearGetter(3);
      break;
    case "YYYY":
      formatter = weekNumberingYearGetter(4);
      break;
    case "M":
    case "L":
      formatter = dateGetter(DateType.Month, 1, 1);
      break;
    case "MM":
    case "LL":
      formatter = dateGetter(DateType.Month, 2, 1);
      break;
    case "MMM":
      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Abbreviated);
      break;
    case "MMMM":
      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Wide);
      break;
    case "MMMMM":
      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Narrow);
      break;
    case "LLL":
      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Abbreviated, FormStyle.Standalone);
      break;
    case "LLLL":
      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Wide, FormStyle.Standalone);
      break;
    case "LLLLL":
      formatter = dateStrGetter(TranslationType.Months, TranslationWidth.Narrow, FormStyle.Standalone);
      break;
    case "w":
      formatter = weekGetter(1);
      break;
    case "ww":
      formatter = weekGetter(2);
      break;
    case "W":
      formatter = weekGetter(1, true);
      break;
    case "d":
      formatter = dateGetter(DateType.Date, 1);
      break;
    case "dd":
      formatter = dateGetter(DateType.Date, 2);
      break;
    case "c":
    case "cc":
      formatter = dateGetter(DateType.Day, 1);
      break;
    case "ccc":
      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Abbreviated, FormStyle.Standalone);
      break;
    case "cccc":
      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Wide, FormStyle.Standalone);
      break;
    case "ccccc":
      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Narrow, FormStyle.Standalone);
      break;
    case "cccccc":
      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Short, FormStyle.Standalone);
      break;
    case "E":
    case "EE":
    case "EEE":
      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Abbreviated);
      break;
    case "EEEE":
      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Wide);
      break;
    case "EEEEE":
      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Narrow);
      break;
    case "EEEEEE":
      formatter = dateStrGetter(TranslationType.Days, TranslationWidth.Short);
      break;
    case "a":
    case "aa":
    case "aaa":
      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated);
      break;
    case "aaaa":
      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide);
      break;
    case "aaaaa":
      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow);
      break;
    case "b":
    case "bb":
    case "bbb":
      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated, FormStyle.Standalone, true);
      break;
    case "bbbb":
      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide, FormStyle.Standalone, true);
      break;
    case "bbbbb":
      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow, FormStyle.Standalone, true);
      break;
    case "B":
    case "BB":
    case "BBB":
      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Abbreviated, FormStyle.Format, true);
      break;
    case "BBBB":
      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Wide, FormStyle.Format, true);
      break;
    case "BBBBB":
      formatter = dateStrGetter(TranslationType.DayPeriods, TranslationWidth.Narrow, FormStyle.Format, true);
      break;
    case "h":
      formatter = dateGetter(DateType.Hours, 1, -12);
      break;
    case "hh":
      formatter = dateGetter(DateType.Hours, 2, -12);
      break;
    case "H":
      formatter = dateGetter(DateType.Hours, 1);
      break;
    case "HH":
      formatter = dateGetter(DateType.Hours, 2);
      break;
    case "m":
      formatter = dateGetter(DateType.Minutes, 1);
      break;
    case "mm":
      formatter = dateGetter(DateType.Minutes, 2);
      break;
    case "s":
      formatter = dateGetter(DateType.Seconds, 1);
      break;
    case "ss":
      formatter = dateGetter(DateType.Seconds, 2);
      break;
    case "S":
      formatter = dateGetter(DateType.FractionalSeconds, 1);
      break;
    case "SS":
      formatter = dateGetter(DateType.FractionalSeconds, 2);
      break;
    case "SSS":
      formatter = dateGetter(DateType.FractionalSeconds, 3);
      break;
    case "Z":
    case "ZZ":
    case "ZZZ":
      formatter = timeZoneGetter(ZoneWidth.Short);
      break;
    case "ZZZZZ":
      formatter = timeZoneGetter(ZoneWidth.Extended);
      break;
    case "O":
    case "OO":
    case "OOO":
    case "z":
    case "zz":
    case "zzz":
      formatter = timeZoneGetter(ZoneWidth.ShortGMT);
      break;
    case "OOOO":
    case "ZZZZ":
    case "zzzz":
      formatter = timeZoneGetter(ZoneWidth.Long);
      break;
    default:
      return null;
  }
  DATE_FORMATS[format] = formatter;
  return formatter;
}
function timezoneToOffset(timezone, fallback) {
  timezone = timezone.replace(/:/g, "");
  const requestedTimezoneOffset = Date.parse("Jan 01, 1970 00:00:00 " + timezone) / 6e4;
  return isNaN(requestedTimezoneOffset) ? fallback : requestedTimezoneOffset;
}
function addDateMinutes(date, minutes) {
  date = new Date(date.getTime());
  date.setMinutes(date.getMinutes() + minutes);
  return date;
}
function convertTimezoneToLocal(date, timezone, reverse) {
  const reverseValue = reverse ? -1 : 1;
  const dateTimezoneOffset = date.getTimezoneOffset();
  const timezoneOffset = timezoneToOffset(timezone, dateTimezoneOffset);
  return addDateMinutes(date, reverseValue * (timezoneOffset - dateTimezoneOffset));
}
function toDate(value) {
  if (isDate(value)) {
    return value;
  }
  if (typeof value === "number" && !isNaN(value)) {
    return new Date(value);
  }
  if (typeof value === "string") {
    value = value.trim();
    if (/^(\d{4}(-\d{1,2}(-\d{1,2})?)?)$/.test(value)) {
      const [y, m = 1, d = 1] = value.split("-").map((val) => +val);
      return createDate(y, m - 1, d);
    }
    const parsedNb = parseFloat(value);
    if (!isNaN(value - parsedNb)) {
      return new Date(parsedNb);
    }
    let match2;
    if (match2 = value.match(ISO8601_DATE_REGEX)) {
      return isoStringToDate(match2);
    }
  }
  const date = new Date(value);
  if (!isDate(date)) {
    throw new Error(`Unable to convert "${value}" into a date`);
  }
  return date;
}
function isoStringToDate(match2) {
  const date = /* @__PURE__ */ new Date(0);
  let tzHour = 0;
  let tzMin = 0;
  const dateSetter = match2[8] ? date.setUTCFullYear : date.setFullYear;
  const timeSetter = match2[8] ? date.setUTCHours : date.setHours;
  if (match2[9]) {
    tzHour = Number(match2[9] + match2[10]);
    tzMin = Number(match2[9] + match2[11]);
  }
  dateSetter.call(date, Number(match2[1]), Number(match2[2]) - 1, Number(match2[3]));
  const h = Number(match2[4] || 0) - tzHour;
  const m = Number(match2[5] || 0) - tzMin;
  const s = Number(match2[6] || 0);
  const ms = Math.floor(parseFloat("0." + (match2[7] || 0)) * 1e3);
  timeSetter.call(date, h, m, s, ms);
  return date;
}
function isDate(value) {
  return value instanceof Date && !isNaN(value.valueOf());
}
var NUMBER_FORMAT_REGEXP = /^(\d+)?\.((\d+)(-(\d+))?)?$/;
var MAX_DIGITS = 22;
var DECIMAL_SEP = ".";
var ZERO_CHAR = "0";
var PATTERN_SEP = ";";
var GROUP_SEP = ",";
var DIGIT_CHAR = "#";
var CURRENCY_CHAR = "\xA4";
var PERCENT_CHAR = "%";
function formatNumberToLocaleString(value, pattern, locale, groupSymbol, decimalSymbol, digitsInfo, isPercent = false) {
  let formattedText = "";
  let isZero = false;
  if (!isFinite(value)) {
    formattedText = getLocaleNumberSymbol(locale, NumberSymbol.Infinity);
  } else {
    let parsedNumber = parseNumber(value);
    if (isPercent) {
      parsedNumber = toPercent(parsedNumber);
    }
    let minInt = pattern.minInt;
    let minFraction = pattern.minFrac;
    let maxFraction = pattern.maxFrac;
    if (digitsInfo) {
      const parts = digitsInfo.match(NUMBER_FORMAT_REGEXP);
      if (parts === null) {
        throw new Error(`${digitsInfo} is not a valid digit info`);
      }
      const minIntPart = parts[1];
      const minFractionPart = parts[3];
      const maxFractionPart = parts[5];
      if (minIntPart != null) {
        minInt = parseIntAutoRadix(minIntPart);
      }
      if (minFractionPart != null) {
        minFraction = parseIntAutoRadix(minFractionPart);
      }
      if (maxFractionPart != null) {
        maxFraction = parseIntAutoRadix(maxFractionPart);
      } else if (minFractionPart != null && minFraction > maxFraction) {
        maxFraction = minFraction;
      }
    }
    roundNumber(parsedNumber, minFraction, maxFraction);
    let digits = parsedNumber.digits;
    let integerLen = parsedNumber.integerLen;
    const exponent = parsedNumber.exponent;
    let decimals = [];
    isZero = digits.every((d) => !d);
    for (; integerLen < minInt; integerLen++) {
      digits.unshift(0);
    }
    for (; integerLen < 0; integerLen++) {
      digits.unshift(0);
    }
    if (integerLen > 0) {
      decimals = digits.splice(integerLen, digits.length);
    } else {
      decimals = digits;
      digits = [0];
    }
    const groups = [];
    if (digits.length >= pattern.lgSize) {
      groups.unshift(digits.splice(-pattern.lgSize, digits.length).join(""));
    }
    while (digits.length > pattern.gSize) {
      groups.unshift(digits.splice(-pattern.gSize, digits.length).join(""));
    }
    if (digits.length) {
      groups.unshift(digits.join(""));
    }
    formattedText = groups.join(getLocaleNumberSymbol(locale, groupSymbol));
    if (decimals.length) {
      formattedText += getLocaleNumberSymbol(locale, decimalSymbol) + decimals.join("");
    }
    if (exponent) {
      formattedText += getLocaleNumberSymbol(locale, NumberSymbol.Exponential) + "+" + exponent;
    }
  }
  if (value < 0 && !isZero) {
    formattedText = pattern.negPre + formattedText + pattern.negSuf;
  } else {
    formattedText = pattern.posPre + formattedText + pattern.posSuf;
  }
  return formattedText;
}
function formatCurrency(value, locale, currency, currencyCode, digitsInfo) {
  const format = getLocaleNumberFormat(locale, NumberFormatStyle.Currency);
  const pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
  pattern.minFrac = getNumberOfCurrencyDigits(currencyCode);
  pattern.maxFrac = pattern.minFrac;
  const res = formatNumberToLocaleString(value, pattern, locale, NumberSymbol.CurrencyGroup, NumberSymbol.CurrencyDecimal, digitsInfo);
  return res.replace(CURRENCY_CHAR, currency).replace(CURRENCY_CHAR, "").trim();
}
function formatPercent(value, locale, digitsInfo) {
  const format = getLocaleNumberFormat(locale, NumberFormatStyle.Percent);
  const pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
  const res = formatNumberToLocaleString(value, pattern, locale, NumberSymbol.Group, NumberSymbol.Decimal, digitsInfo, true);
  return res.replace(new RegExp(PERCENT_CHAR, "g"), getLocaleNumberSymbol(locale, NumberSymbol.PercentSign));
}
function formatNumber(value, locale, digitsInfo) {
  const format = getLocaleNumberFormat(locale, NumberFormatStyle.Decimal);
  const pattern = parseNumberFormat(format, getLocaleNumberSymbol(locale, NumberSymbol.MinusSign));
  return formatNumberToLocaleString(value, pattern, locale, NumberSymbol.Group, NumberSymbol.Decimal, digitsInfo);
}
function parseNumberFormat(format, minusSign = "-") {
  const p = {
    minInt: 1,
    minFrac: 0,
    maxFrac: 0,
    posPre: "",
    posSuf: "",
    negPre: "",
    negSuf: "",
    gSize: 0,
    lgSize: 0
  };
  const patternParts = format.split(PATTERN_SEP);
  const positive = patternParts[0];
  const negative = patternParts[1];
  const positiveParts = positive.indexOf(DECIMAL_SEP) !== -1 ? positive.split(DECIMAL_SEP) : [positive.substring(0, positive.lastIndexOf(ZERO_CHAR) + 1), positive.substring(positive.lastIndexOf(ZERO_CHAR) + 1)], integer = positiveParts[0], fraction = positiveParts[1] || "";
  p.posPre = integer.substring(0, integer.indexOf(DIGIT_CHAR));
  for (let i = 0; i < fraction.length; i++) {
    const ch = fraction.charAt(i);
    if (ch === ZERO_CHAR) {
      p.minFrac = p.maxFrac = i + 1;
    } else if (ch === DIGIT_CHAR) {
      p.maxFrac = i + 1;
    } else {
      p.posSuf += ch;
    }
  }
  const groups = integer.split(GROUP_SEP);
  p.gSize = groups[1] ? groups[1].length : 0;
  p.lgSize = groups[2] || groups[1] ? (groups[2] || groups[1]).length : 0;
  if (negative) {
    const trunkLen = positive.length - p.posPre.length - p.posSuf.length, pos = negative.indexOf(DIGIT_CHAR);
    p.negPre = negative.substring(0, pos).replace(/'/g, "");
    p.negSuf = negative.slice(pos + trunkLen).replace(/'/g, "");
  } else {
    p.negPre = minusSign + p.posPre;
    p.negSuf = p.posSuf;
  }
  return p;
}
function toPercent(parsedNumber) {
  if (parsedNumber.digits[0] === 0) {
    return parsedNumber;
  }
  const fractionLen = parsedNumber.digits.length - parsedNumber.integerLen;
  if (parsedNumber.exponent) {
    parsedNumber.exponent += 2;
  } else {
    if (fractionLen === 0) {
      parsedNumber.digits.push(0, 0);
    } else if (fractionLen === 1) {
      parsedNumber.digits.push(0);
    }
    parsedNumber.integerLen += 2;
  }
  return parsedNumber;
}
function parseNumber(num) {
  let numStr = Math.abs(num) + "";
  let exponent = 0, digits, integerLen;
  let i, j, zeros;
  if ((integerLen = numStr.indexOf(DECIMAL_SEP)) > -1) {
    numStr = numStr.replace(DECIMAL_SEP, "");
  }
  if ((i = numStr.search(/e/i)) > 0) {
    if (integerLen < 0)
      integerLen = i;
    integerLen += +numStr.slice(i + 1);
    numStr = numStr.substring(0, i);
  } else if (integerLen < 0) {
    integerLen = numStr.length;
  }
  for (i = 0; numStr.charAt(i) === ZERO_CHAR; i++) {
  }
  if (i === (zeros = numStr.length)) {
    digits = [0];
    integerLen = 1;
  } else {
    zeros--;
    while (numStr.charAt(zeros) === ZERO_CHAR)
      zeros--;
    integerLen -= i;
    digits = [];
    for (j = 0; i <= zeros; i++, j++) {
      digits[j] = Number(numStr.charAt(i));
    }
  }
  if (integerLen > MAX_DIGITS) {
    digits = digits.splice(0, MAX_DIGITS - 1);
    exponent = integerLen - 1;
    integerLen = 1;
  }
  return {
    digits,
    exponent,
    integerLen
  };
}
function roundNumber(parsedNumber, minFrac, maxFrac) {
  if (minFrac > maxFrac) {
    throw new Error(`The minimum number of digits after fraction (${minFrac}) is higher than the maximum (${maxFrac}).`);
  }
  let digits = parsedNumber.digits;
  let fractionLen = digits.length - parsedNumber.integerLen;
  const fractionSize = Math.min(Math.max(minFrac, fractionLen), maxFrac);
  let roundAt = fractionSize + parsedNumber.integerLen;
  let digit = digits[roundAt];
  if (roundAt > 0) {
    digits.splice(Math.max(parsedNumber.integerLen, roundAt));
    for (let j = roundAt; j < digits.length; j++) {
      digits[j] = 0;
    }
  } else {
    fractionLen = Math.max(0, fractionLen);
    parsedNumber.integerLen = 1;
    digits.length = Math.max(1, roundAt = fractionSize + 1);
    digits[0] = 0;
    for (let i = 1; i < roundAt; i++)
      digits[i] = 0;
  }
  if (digit >= 5) {
    if (roundAt - 1 < 0) {
      for (let k = 0; k > roundAt; k--) {
        digits.unshift(0);
        parsedNumber.integerLen++;
      }
      digits.unshift(1);
      parsedNumber.integerLen++;
    } else {
      digits[roundAt - 1]++;
    }
  }
  for (; fractionLen < Math.max(0, fractionSize); fractionLen++)
    digits.push(0);
  let dropTrailingZeros = fractionSize !== 0;
  const minLen = minFrac + parsedNumber.integerLen;
  const carry = digits.reduceRight(function(carry2, d, i, digits2) {
    d = d + carry2;
    digits2[i] = d < 10 ? d : d - 10;
    if (dropTrailingZeros) {
      if (digits2[i] === 0 && i >= minLen) {
        digits2.pop();
      } else {
        dropTrailingZeros = false;
      }
    }
    return d >= 10 ? 1 : 0;
  }, 0);
  if (carry) {
    digits.unshift(carry);
    parsedNumber.integerLen++;
  }
}
function parseIntAutoRadix(text) {
  const result = parseInt(text);
  if (isNaN(result)) {
    throw new Error("Invalid integer literal when parsing " + text);
  }
  return result;
}
var _NgLocalization = class _NgLocalization {
};
_NgLocalization.\u0275fac = function NgLocalization_Factory(t) {
  return new (t || _NgLocalization)();
};
_NgLocalization.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _NgLocalization,
  factory: function NgLocalization_Factory(t) {
    let r = null;
    if (t) {
      r = new t();
    } else {
      r = ((locale) => new NgLocaleLocalization(locale))(\u0275\u0275inject(LOCALE_ID));
    }
    return r;
  },
  providedIn: "root"
});
var NgLocalization = _NgLocalization;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgLocalization, [{
    type: Injectable,
    args: [{
      providedIn: "root",
      useFactory: (locale) => new NgLocaleLocalization(locale),
      deps: [LOCALE_ID]
    }]
  }], null, null);
})();
function getPluralCategory(value, cases, ngLocalization, locale) {
  let key = `=${value}`;
  if (cases.indexOf(key) > -1) {
    return key;
  }
  key = ngLocalization.getPluralCategory(value, locale);
  if (cases.indexOf(key) > -1) {
    return key;
  }
  if (cases.indexOf("other") > -1) {
    return "other";
  }
  throw new Error(`No plural message found for value "${value}"`);
}
var _NgLocaleLocalization = class _NgLocaleLocalization extends NgLocalization {
  constructor(locale) {
    super();
    this.locale = locale;
  }
  getPluralCategory(value, locale) {
    const plural2 = getLocalePluralCase2(locale || this.locale)(value);
    switch (plural2) {
      case Plural.Zero:
        return "zero";
      case Plural.One:
        return "one";
      case Plural.Two:
        return "two";
      case Plural.Few:
        return "few";
      case Plural.Many:
        return "many";
      default:
        return "other";
    }
  }
};
_NgLocaleLocalization.\u0275fac = function NgLocaleLocalization_Factory(t) {
  return new (t || _NgLocaleLocalization)(\u0275\u0275inject(LOCALE_ID));
};
_NgLocaleLocalization.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _NgLocaleLocalization,
  factory: _NgLocaleLocalization.\u0275fac
});
var NgLocaleLocalization = _NgLocaleLocalization;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgLocaleLocalization, [{
    type: Injectable
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [LOCALE_ID]
    }]
  }], null);
})();
function parseCookieValue(cookieStr, name) {
  name = encodeURIComponent(name);
  for (const cookie of cookieStr.split(";")) {
    const eqIndex = cookie.indexOf("=");
    const [cookieName, cookieValue] = eqIndex == -1 ? [cookie, ""] : [cookie.slice(0, eqIndex), cookie.slice(eqIndex + 1)];
    if (cookieName.trim() === name) {
      return decodeURIComponent(cookieValue);
    }
  }
  return null;
}
var WS_REGEXP = /\s+/;
var EMPTY_ARRAY2 = [];
var _NgClass = class _NgClass {
  constructor(_iterableDiffers, _keyValueDiffers, _ngEl, _renderer) {
    this._iterableDiffers = _iterableDiffers;
    this._keyValueDiffers = _keyValueDiffers;
    this._ngEl = _ngEl;
    this._renderer = _renderer;
    this.initialClasses = EMPTY_ARRAY2;
    this.stateMap = /* @__PURE__ */ new Map();
  }
  set klass(value) {
    this.initialClasses = value != null ? value.trim().split(WS_REGEXP) : EMPTY_ARRAY2;
  }
  set ngClass(value) {
    this.rawClass = typeof value === "string" ? value.trim().split(WS_REGEXP) : value;
  }
  /*
  The NgClass directive uses the custom change detection algorithm for its inputs. The custom
  algorithm is necessary since inputs are represented as complex object or arrays that need to be
  deeply-compared.
     This algorithm is perf-sensitive since NgClass is used very frequently and its poor performance
  might negatively impact runtime performance of the entire change detection cycle. The design of
  this algorithm is making sure that:
  - there is no unnecessary DOM manipulation (CSS classes are added / removed from the DOM only when
  needed), even if references to bound objects change;
  - there is no memory allocation if nothing changes (even relatively modest memory allocation
  during the change detection cycle can result in GC pauses for some of the CD cycles).
     The algorithm works by iterating over the set of bound classes, staring with [class] binding and
  then going over [ngClass] binding. For each CSS class name:
  - check if it was seen before (this information is tracked in the state map) and if its value
  changed;
  - mark it as "touched" - names that are not marked are not present in the latest set of binding
  and we can remove such class name from the internal data structures;
     After iteration over all the CSS class names we've got data structure with all the information
  necessary to synchronize changes to the DOM - it is enough to iterate over the state map, flush
  changes to the DOM and reset internal data structures so those are ready for the next change
  detection cycle.
   */
  ngDoCheck() {
    for (const klass of this.initialClasses) {
      this._updateState(klass, true);
    }
    const rawClass = this.rawClass;
    if (Array.isArray(rawClass) || rawClass instanceof Set) {
      for (const klass of rawClass) {
        this._updateState(klass, true);
      }
    } else if (rawClass != null) {
      for (const klass of Object.keys(rawClass)) {
        this._updateState(klass, Boolean(rawClass[klass]));
      }
    }
    this._applyStateDiff();
  }
  _updateState(klass, nextEnabled) {
    const state2 = this.stateMap.get(klass);
    if (state2 !== void 0) {
      if (state2.enabled !== nextEnabled) {
        state2.changed = true;
        state2.enabled = nextEnabled;
      }
      state2.touched = true;
    } else {
      this.stateMap.set(klass, {
        enabled: nextEnabled,
        changed: true,
        touched: true
      });
    }
  }
  _applyStateDiff() {
    for (const stateEntry of this.stateMap) {
      const klass = stateEntry[0];
      const state2 = stateEntry[1];
      if (state2.changed) {
        this._toggleClass(klass, state2.enabled);
        state2.changed = false;
      } else if (!state2.touched) {
        if (state2.enabled) {
          this._toggleClass(klass, false);
        }
        this.stateMap.delete(klass);
      }
      state2.touched = false;
    }
  }
  _toggleClass(klass, enabled) {
    if (ngDevMode) {
      if (typeof klass !== "string") {
        throw new Error(`NgClass can only toggle CSS classes expressed as strings, got ${stringify(klass)}`);
      }
    }
    klass = klass.trim();
    if (klass.length > 0) {
      klass.split(WS_REGEXP).forEach((klass2) => {
        if (enabled) {
          this._renderer.addClass(this._ngEl.nativeElement, klass2);
        } else {
          this._renderer.removeClass(this._ngEl.nativeElement, klass2);
        }
      });
    }
  }
};
_NgClass.\u0275fac = function NgClass_Factory(t) {
  return new (t || _NgClass)(\u0275\u0275directiveInject(IterableDiffers), \u0275\u0275directiveInject(KeyValueDiffers), \u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(Renderer2));
};
_NgClass.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _NgClass,
  selectors: [["", "ngClass", ""]],
  inputs: {
    klass: ["class", "klass"],
    ngClass: "ngClass"
  },
  standalone: true
});
var NgClass = _NgClass;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgClass, [{
    type: Directive,
    args: [{
      selector: "[ngClass]",
      standalone: true
    }]
  }], () => [{
    type: IterableDiffers
  }, {
    type: KeyValueDiffers
  }, {
    type: ElementRef
  }, {
    type: Renderer2
  }], {
    klass: [{
      type: Input,
      args: ["class"]
    }],
    ngClass: [{
      type: Input,
      args: ["ngClass"]
    }]
  });
})();
var _NgComponentOutlet = class _NgComponentOutlet {
  constructor(_viewContainerRef) {
    this._viewContainerRef = _viewContainerRef;
    this.ngComponentOutlet = null;
    this._inputsUsed = /* @__PURE__ */ new Map();
  }
  _needToReCreateNgModuleInstance(changes) {
    return changes["ngComponentOutletNgModule"] !== void 0 || changes["ngComponentOutletNgModuleFactory"] !== void 0;
  }
  _needToReCreateComponentInstance(changes) {
    return changes["ngComponentOutlet"] !== void 0 || changes["ngComponentOutletContent"] !== void 0 || changes["ngComponentOutletInjector"] !== void 0 || this._needToReCreateNgModuleInstance(changes);
  }
  /** @nodoc */
  ngOnChanges(changes) {
    if (this._needToReCreateComponentInstance(changes)) {
      this._viewContainerRef.clear();
      this._inputsUsed.clear();
      this._componentRef = void 0;
      if (this.ngComponentOutlet) {
        const injector = this.ngComponentOutletInjector || this._viewContainerRef.parentInjector;
        if (this._needToReCreateNgModuleInstance(changes)) {
          this._moduleRef?.destroy();
          if (this.ngComponentOutletNgModule) {
            this._moduleRef = createNgModule(this.ngComponentOutletNgModule, getParentInjector(injector));
          } else if (this.ngComponentOutletNgModuleFactory) {
            this._moduleRef = this.ngComponentOutletNgModuleFactory.create(getParentInjector(injector));
          } else {
            this._moduleRef = void 0;
          }
        }
        this._componentRef = this._viewContainerRef.createComponent(this.ngComponentOutlet, {
          injector,
          ngModuleRef: this._moduleRef,
          projectableNodes: this.ngComponentOutletContent
        });
      }
    }
  }
  /** @nodoc */
  ngDoCheck() {
    if (this._componentRef) {
      if (this.ngComponentOutletInputs) {
        for (const inputName of Object.keys(this.ngComponentOutletInputs)) {
          this._inputsUsed.set(inputName, true);
        }
      }
      this._applyInputStateDiff(this._componentRef);
    }
  }
  /** @nodoc */
  ngOnDestroy() {
    this._moduleRef?.destroy();
  }
  _applyInputStateDiff(componentRef) {
    for (const [inputName, touched] of this._inputsUsed) {
      if (!touched) {
        componentRef.setInput(inputName, void 0);
        this._inputsUsed.delete(inputName);
      } else {
        componentRef.setInput(inputName, this.ngComponentOutletInputs[inputName]);
        this._inputsUsed.set(inputName, false);
      }
    }
  }
};
_NgComponentOutlet.\u0275fac = function NgComponentOutlet_Factory(t) {
  return new (t || _NgComponentOutlet)(\u0275\u0275directiveInject(ViewContainerRef));
};
_NgComponentOutlet.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _NgComponentOutlet,
  selectors: [["", "ngComponentOutlet", ""]],
  inputs: {
    ngComponentOutlet: "ngComponentOutlet",
    ngComponentOutletInputs: "ngComponentOutletInputs",
    ngComponentOutletInjector: "ngComponentOutletInjector",
    ngComponentOutletContent: "ngComponentOutletContent",
    ngComponentOutletNgModule: "ngComponentOutletNgModule",
    ngComponentOutletNgModuleFactory: "ngComponentOutletNgModuleFactory"
  },
  standalone: true,
  features: [\u0275\u0275NgOnChangesFeature]
});
var NgComponentOutlet = _NgComponentOutlet;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgComponentOutlet, [{
    type: Directive,
    args: [{
      selector: "[ngComponentOutlet]",
      standalone: true
    }]
  }], () => [{
    type: ViewContainerRef
  }], {
    ngComponentOutlet: [{
      type: Input
    }],
    ngComponentOutletInputs: [{
      type: Input
    }],
    ngComponentOutletInjector: [{
      type: Input
    }],
    ngComponentOutletContent: [{
      type: Input
    }],
    ngComponentOutletNgModule: [{
      type: Input
    }],
    ngComponentOutletNgModuleFactory: [{
      type: Input
    }]
  });
})();
function getParentInjector(injector) {
  const parentNgModule = injector.get(NgModuleRef$1);
  return parentNgModule.injector;
}
var NgForOfContext = class {
  constructor($implicit, ngForOf, index, count) {
    this.$implicit = $implicit;
    this.ngForOf = ngForOf;
    this.index = index;
    this.count = count;
  }
  get first() {
    return this.index === 0;
  }
  get last() {
    return this.index === this.count - 1;
  }
  get even() {
    return this.index % 2 === 0;
  }
  get odd() {
    return !this.even;
  }
};
var _NgForOf = class _NgForOf {
  /**
   * The value of the iterable expression, which can be used as a
   * [template input variable](guide/structural-directives#shorthand).
   */
  set ngForOf(ngForOf) {
    this._ngForOf = ngForOf;
    this._ngForOfDirty = true;
  }
  /**
   * Specifies a custom `TrackByFunction` to compute the identity of items in an iterable.
   *
   * If a custom `TrackByFunction` is not provided, `NgForOf` will use the item's [object
   * identity](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is)
   * as the key.
   *
   * `NgForOf` uses the computed key to associate items in an iterable with DOM elements
   * it produces for these items.
   *
   * A custom `TrackByFunction` is useful to provide good user experience in cases when items in an
   * iterable rendered using `NgForOf` have a natural identifier (for example, custom ID or a
   * primary key), and this iterable could be updated with new object instances that still
   * represent the same underlying entity (for example, when data is re-fetched from the server,
   * and the iterable is recreated and re-rendered, but most of the data is still the same).
   *
   * @see {@link TrackByFunction}
   */
  set ngForTrackBy(fn) {
    if ((typeof ngDevMode === "undefined" || ngDevMode) && fn != null && typeof fn !== "function") {
      console.warn(`trackBy must be a function, but received ${JSON.stringify(fn)}. See https://angular.io/api/common/NgForOf#change-propagation for more information.`);
    }
    this._trackByFn = fn;
  }
  get ngForTrackBy() {
    return this._trackByFn;
  }
  constructor(_viewContainer, _template, _differs) {
    this._viewContainer = _viewContainer;
    this._template = _template;
    this._differs = _differs;
    this._ngForOf = null;
    this._ngForOfDirty = true;
    this._differ = null;
  }
  /**
   * A reference to the template that is stamped out for each item in the iterable.
   * @see [template reference variable](guide/template-reference-variables)
   */
  set ngForTemplate(value) {
    if (value) {
      this._template = value;
    }
  }
  /**
   * Applies the changes when needed.
   * @nodoc
   */
  ngDoCheck() {
    if (this._ngForOfDirty) {
      this._ngForOfDirty = false;
      const value = this._ngForOf;
      if (!this._differ && value) {
        if (typeof ngDevMode === "undefined" || ngDevMode) {
          try {
            this._differ = this._differs.find(value).create(this.ngForTrackBy);
          } catch {
            let errorMessage = `Cannot find a differ supporting object '${value}' of type '${getTypeName(value)}'. NgFor only supports binding to Iterables, such as Arrays.`;
            if (typeof value === "object") {
              errorMessage += " Did you mean to use the keyvalue pipe?";
            }
            throw new RuntimeError(-2200, errorMessage);
          }
        } else {
          this._differ = this._differs.find(value).create(this.ngForTrackBy);
        }
      }
    }
    if (this._differ) {
      const changes = this._differ.diff(this._ngForOf);
      if (changes)
        this._applyChanges(changes);
    }
  }
  _applyChanges(changes) {
    const viewContainer = this._viewContainer;
    changes.forEachOperation((item, adjustedPreviousIndex, currentIndex) => {
      if (item.previousIndex == null) {
        viewContainer.createEmbeddedView(this._template, new NgForOfContext(item.item, this._ngForOf, -1, -1), currentIndex === null ? void 0 : currentIndex);
      } else if (currentIndex == null) {
        viewContainer.remove(adjustedPreviousIndex === null ? void 0 : adjustedPreviousIndex);
      } else if (adjustedPreviousIndex !== null) {
        const view = viewContainer.get(adjustedPreviousIndex);
        viewContainer.move(view, currentIndex);
        applyViewChange(view, item);
      }
    });
    for (let i = 0, ilen = viewContainer.length; i < ilen; i++) {
      const viewRef = viewContainer.get(i);
      const context2 = viewRef.context;
      context2.index = i;
      context2.count = ilen;
      context2.ngForOf = this._ngForOf;
    }
    changes.forEachIdentityChange((record) => {
      const viewRef = viewContainer.get(record.currentIndex);
      applyViewChange(viewRef, record);
    });
  }
  /**
   * Asserts the correct type of the context for the template that `NgForOf` will render.
   *
   * The presence of this method is a signal to the Ivy template type-check compiler that the
   * `NgForOf` structural directive renders its template with a specific context type.
   */
  static ngTemplateContextGuard(dir, ctx) {
    return true;
  }
};
_NgForOf.\u0275fac = function NgForOf_Factory(t) {
  return new (t || _NgForOf)(\u0275\u0275directiveInject(ViewContainerRef), \u0275\u0275directiveInject(TemplateRef), \u0275\u0275directiveInject(IterableDiffers));
};
_NgForOf.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _NgForOf,
  selectors: [["", "ngFor", "", "ngForOf", ""]],
  inputs: {
    ngForOf: "ngForOf",
    ngForTrackBy: "ngForTrackBy",
    ngForTemplate: "ngForTemplate"
  },
  standalone: true
});
var NgForOf = _NgForOf;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgForOf, [{
    type: Directive,
    args: [{
      selector: "[ngFor][ngForOf]",
      standalone: true
    }]
  }], () => [{
    type: ViewContainerRef
  }, {
    type: TemplateRef
  }, {
    type: IterableDiffers
  }], {
    ngForOf: [{
      type: Input
    }],
    ngForTrackBy: [{
      type: Input
    }],
    ngForTemplate: [{
      type: Input
    }]
  });
})();
function applyViewChange(view, record) {
  view.context.$implicit = record.item;
}
function getTypeName(type) {
  return type["name"] || typeof type;
}
var _NgIf = class _NgIf {
  constructor(_viewContainer, templateRef) {
    this._viewContainer = _viewContainer;
    this._context = new NgIfContext();
    this._thenTemplateRef = null;
    this._elseTemplateRef = null;
    this._thenViewRef = null;
    this._elseViewRef = null;
    this._thenTemplateRef = templateRef;
  }
  /**
   * The Boolean expression to evaluate as the condition for showing a template.
   */
  set ngIf(condition) {
    this._context.$implicit = this._context.ngIf = condition;
    this._updateView();
  }
  /**
   * A template to show if the condition expression evaluates to true.
   */
  set ngIfThen(templateRef) {
    assertTemplate("ngIfThen", templateRef);
    this._thenTemplateRef = templateRef;
    this._thenViewRef = null;
    this._updateView();
  }
  /**
   * A template to show if the condition expression evaluates to false.
   */
  set ngIfElse(templateRef) {
    assertTemplate("ngIfElse", templateRef);
    this._elseTemplateRef = templateRef;
    this._elseViewRef = null;
    this._updateView();
  }
  _updateView() {
    if (this._context.$implicit) {
      if (!this._thenViewRef) {
        this._viewContainer.clear();
        this._elseViewRef = null;
        if (this._thenTemplateRef) {
          this._thenViewRef = this._viewContainer.createEmbeddedView(this._thenTemplateRef, this._context);
        }
      }
    } else {
      if (!this._elseViewRef) {
        this._viewContainer.clear();
        this._thenViewRef = null;
        if (this._elseTemplateRef) {
          this._elseViewRef = this._viewContainer.createEmbeddedView(this._elseTemplateRef, this._context);
        }
      }
    }
  }
  /**
   * Asserts the correct type of the context for the template that `NgIf` will render.
   *
   * The presence of this method is a signal to the Ivy template type-check compiler that the
   * `NgIf` structural directive renders its template with a specific context type.
   */
  static ngTemplateContextGuard(dir, ctx) {
    return true;
  }
};
_NgIf.\u0275fac = function NgIf_Factory(t) {
  return new (t || _NgIf)(\u0275\u0275directiveInject(ViewContainerRef), \u0275\u0275directiveInject(TemplateRef));
};
_NgIf.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _NgIf,
  selectors: [["", "ngIf", ""]],
  inputs: {
    ngIf: "ngIf",
    ngIfThen: "ngIfThen",
    ngIfElse: "ngIfElse"
  },
  standalone: true
});
var NgIf = _NgIf;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgIf, [{
    type: Directive,
    args: [{
      selector: "[ngIf]",
      standalone: true
    }]
  }], () => [{
    type: ViewContainerRef
  }, {
    type: TemplateRef
  }], {
    ngIf: [{
      type: Input
    }],
    ngIfThen: [{
      type: Input
    }],
    ngIfElse: [{
      type: Input
    }]
  });
})();
var NgIfContext = class {
  constructor() {
    this.$implicit = null;
    this.ngIf = null;
  }
};
function assertTemplate(property, templateRef) {
  const isTemplateRefOrNull = !!(!templateRef || templateRef.createEmbeddedView);
  if (!isTemplateRefOrNull) {
    throw new Error(`${property} must be a TemplateRef, but received '${stringify(templateRef)}'.`);
  }
}
var NG_SWITCH_USE_STRICT_EQUALS = true;
var SwitchView = class {
  constructor(_viewContainerRef, _templateRef) {
    this._viewContainerRef = _viewContainerRef;
    this._templateRef = _templateRef;
    this._created = false;
  }
  create() {
    this._created = true;
    this._viewContainerRef.createEmbeddedView(this._templateRef);
  }
  destroy() {
    this._created = false;
    this._viewContainerRef.clear();
  }
  enforceState(created) {
    if (created && !this._created) {
      this.create();
    } else if (!created && this._created) {
      this.destroy();
    }
  }
};
var _NgSwitch = class _NgSwitch {
  constructor() {
    this._defaultViews = [];
    this._defaultUsed = false;
    this._caseCount = 0;
    this._lastCaseCheckIndex = 0;
    this._lastCasesMatched = false;
  }
  set ngSwitch(newValue) {
    this._ngSwitch = newValue;
    if (this._caseCount === 0) {
      this._updateDefaultCases(true);
    }
  }
  /** @internal */
  _addCase() {
    return this._caseCount++;
  }
  /** @internal */
  _addDefault(view) {
    this._defaultViews.push(view);
  }
  /** @internal */
  _matchCase(value) {
    const matched = NG_SWITCH_USE_STRICT_EQUALS ? value === this._ngSwitch : value == this._ngSwitch;
    if ((typeof ngDevMode === "undefined" || ngDevMode) && matched !== (value == this._ngSwitch)) {
      console.warn(formatRuntimeError(2001, `As of Angular v17 the NgSwitch directive uses strict equality comparison === instead of == to match different cases. Previously the case value "${stringifyValue(value)}" matched switch expression value "${stringifyValue(this._ngSwitch)}", but this is no longer the case with the stricter equality check. Your comparison results return different results using === vs. == and you should adjust your ngSwitch expression and / or values to conform with the strict equality requirements.`));
    }
    this._lastCasesMatched = this._lastCasesMatched || matched;
    this._lastCaseCheckIndex++;
    if (this._lastCaseCheckIndex === this._caseCount) {
      this._updateDefaultCases(!this._lastCasesMatched);
      this._lastCaseCheckIndex = 0;
      this._lastCasesMatched = false;
    }
    return matched;
  }
  _updateDefaultCases(useDefault) {
    if (this._defaultViews.length > 0 && useDefault !== this._defaultUsed) {
      this._defaultUsed = useDefault;
      for (const defaultView of this._defaultViews) {
        defaultView.enforceState(useDefault);
      }
    }
  }
};
_NgSwitch.\u0275fac = function NgSwitch_Factory(t) {
  return new (t || _NgSwitch)();
};
_NgSwitch.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _NgSwitch,
  selectors: [["", "ngSwitch", ""]],
  inputs: {
    ngSwitch: "ngSwitch"
  },
  standalone: true
});
var NgSwitch = _NgSwitch;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgSwitch, [{
    type: Directive,
    args: [{
      selector: "[ngSwitch]",
      standalone: true
    }]
  }], null, {
    ngSwitch: [{
      type: Input
    }]
  });
})();
var _NgSwitchCase = class _NgSwitchCase {
  constructor(viewContainer, templateRef, ngSwitch) {
    this.ngSwitch = ngSwitch;
    if ((typeof ngDevMode === "undefined" || ngDevMode) && !ngSwitch) {
      throwNgSwitchProviderNotFoundError("ngSwitchCase", "NgSwitchCase");
    }
    ngSwitch._addCase();
    this._view = new SwitchView(viewContainer, templateRef);
  }
  /**
   * Performs case matching. For internal use only.
   * @nodoc
   */
  ngDoCheck() {
    this._view.enforceState(this.ngSwitch._matchCase(this.ngSwitchCase));
  }
};
_NgSwitchCase.\u0275fac = function NgSwitchCase_Factory(t) {
  return new (t || _NgSwitchCase)(\u0275\u0275directiveInject(ViewContainerRef), \u0275\u0275directiveInject(TemplateRef), \u0275\u0275directiveInject(NgSwitch, 9));
};
_NgSwitchCase.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _NgSwitchCase,
  selectors: [["", "ngSwitchCase", ""]],
  inputs: {
    ngSwitchCase: "ngSwitchCase"
  },
  standalone: true
});
var NgSwitchCase = _NgSwitchCase;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgSwitchCase, [{
    type: Directive,
    args: [{
      selector: "[ngSwitchCase]",
      standalone: true
    }]
  }], () => [{
    type: ViewContainerRef
  }, {
    type: TemplateRef
  }, {
    type: NgSwitch,
    decorators: [{
      type: Optional
    }, {
      type: Host
    }]
  }], {
    ngSwitchCase: [{
      type: Input
    }]
  });
})();
var _NgSwitchDefault = class _NgSwitchDefault {
  constructor(viewContainer, templateRef, ngSwitch) {
    if ((typeof ngDevMode === "undefined" || ngDevMode) && !ngSwitch) {
      throwNgSwitchProviderNotFoundError("ngSwitchDefault", "NgSwitchDefault");
    }
    ngSwitch._addDefault(new SwitchView(viewContainer, templateRef));
  }
};
_NgSwitchDefault.\u0275fac = function NgSwitchDefault_Factory(t) {
  return new (t || _NgSwitchDefault)(\u0275\u0275directiveInject(ViewContainerRef), \u0275\u0275directiveInject(TemplateRef), \u0275\u0275directiveInject(NgSwitch, 9));
};
_NgSwitchDefault.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _NgSwitchDefault,
  selectors: [["", "ngSwitchDefault", ""]],
  standalone: true
});
var NgSwitchDefault = _NgSwitchDefault;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgSwitchDefault, [{
    type: Directive,
    args: [{
      selector: "[ngSwitchDefault]",
      standalone: true
    }]
  }], () => [{
    type: ViewContainerRef
  }, {
    type: TemplateRef
  }, {
    type: NgSwitch,
    decorators: [{
      type: Optional
    }, {
      type: Host
    }]
  }], null);
})();
function throwNgSwitchProviderNotFoundError(attrName, directiveName) {
  throw new RuntimeError(2e3, `An element with the "${attrName}" attribute (matching the "${directiveName}" directive) must be located inside an element with the "ngSwitch" attribute (matching "NgSwitch" directive)`);
}
function stringifyValue(value) {
  return typeof value === "string" ? `'${value}'` : String(value);
}
var _NgPlural = class _NgPlural {
  constructor(_localization) {
    this._localization = _localization;
    this._caseViews = {};
  }
  set ngPlural(value) {
    this._updateView(value);
  }
  addCase(value, switchView) {
    this._caseViews[value] = switchView;
  }
  _updateView(switchValue) {
    this._clearViews();
    const cases = Object.keys(this._caseViews);
    const key = getPluralCategory(switchValue, cases, this._localization);
    this._activateView(this._caseViews[key]);
  }
  _clearViews() {
    if (this._activeView)
      this._activeView.destroy();
  }
  _activateView(view) {
    if (view) {
      this._activeView = view;
      this._activeView.create();
    }
  }
};
_NgPlural.\u0275fac = function NgPlural_Factory(t) {
  return new (t || _NgPlural)(\u0275\u0275directiveInject(NgLocalization));
};
_NgPlural.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _NgPlural,
  selectors: [["", "ngPlural", ""]],
  inputs: {
    ngPlural: "ngPlural"
  },
  standalone: true
});
var NgPlural = _NgPlural;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgPlural, [{
    type: Directive,
    args: [{
      selector: "[ngPlural]",
      standalone: true
    }]
  }], () => [{
    type: NgLocalization
  }], {
    ngPlural: [{
      type: Input
    }]
  });
})();
var _NgPluralCase = class _NgPluralCase {
  constructor(value, template, viewContainer, ngPlural) {
    this.value = value;
    const isANumber = !isNaN(Number(value));
    ngPlural.addCase(isANumber ? `=${value}` : value, new SwitchView(viewContainer, template));
  }
};
_NgPluralCase.\u0275fac = function NgPluralCase_Factory(t) {
  return new (t || _NgPluralCase)(\u0275\u0275injectAttribute("ngPluralCase"), \u0275\u0275directiveInject(TemplateRef), \u0275\u0275directiveInject(ViewContainerRef), \u0275\u0275directiveInject(NgPlural, 1));
};
_NgPluralCase.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _NgPluralCase,
  selectors: [["", "ngPluralCase", ""]],
  standalone: true
});
var NgPluralCase = _NgPluralCase;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgPluralCase, [{
    type: Directive,
    args: [{
      selector: "[ngPluralCase]",
      standalone: true
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Attribute,
      args: ["ngPluralCase"]
    }]
  }, {
    type: TemplateRef
  }, {
    type: ViewContainerRef
  }, {
    type: NgPlural,
    decorators: [{
      type: Host
    }]
  }], null);
})();
var _NgStyle = class _NgStyle {
  constructor(_ngEl, _differs, _renderer) {
    this._ngEl = _ngEl;
    this._differs = _differs;
    this._renderer = _renderer;
    this._ngStyle = null;
    this._differ = null;
  }
  set ngStyle(values) {
    this._ngStyle = values;
    if (!this._differ && values) {
      this._differ = this._differs.find(values).create();
    }
  }
  ngDoCheck() {
    if (this._differ) {
      const changes = this._differ.diff(this._ngStyle);
      if (changes) {
        this._applyChanges(changes);
      }
    }
  }
  _setStyle(nameAndUnit, value) {
    const [name, unit] = nameAndUnit.split(".");
    const flags = name.indexOf("-") === -1 ? void 0 : RendererStyleFlags2.DashCase;
    if (value != null) {
      this._renderer.setStyle(this._ngEl.nativeElement, name, unit ? `${value}${unit}` : value, flags);
    } else {
      this._renderer.removeStyle(this._ngEl.nativeElement, name, flags);
    }
  }
  _applyChanges(changes) {
    changes.forEachRemovedItem((record) => this._setStyle(record.key, null));
    changes.forEachAddedItem((record) => this._setStyle(record.key, record.currentValue));
    changes.forEachChangedItem((record) => this._setStyle(record.key, record.currentValue));
  }
};
_NgStyle.\u0275fac = function NgStyle_Factory(t) {
  return new (t || _NgStyle)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(KeyValueDiffers), \u0275\u0275directiveInject(Renderer2));
};
_NgStyle.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _NgStyle,
  selectors: [["", "ngStyle", ""]],
  inputs: {
    ngStyle: "ngStyle"
  },
  standalone: true
});
var NgStyle = _NgStyle;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgStyle, [{
    type: Directive,
    args: [{
      selector: "[ngStyle]",
      standalone: true
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: KeyValueDiffers
  }, {
    type: Renderer2
  }], {
    ngStyle: [{
      type: Input,
      args: ["ngStyle"]
    }]
  });
})();
var _NgTemplateOutlet = class _NgTemplateOutlet {
  constructor(_viewContainerRef) {
    this._viewContainerRef = _viewContainerRef;
    this._viewRef = null;
    this.ngTemplateOutletContext = null;
    this.ngTemplateOutlet = null;
    this.ngTemplateOutletInjector = null;
  }
  ngOnChanges(changes) {
    if (this._shouldRecreateView(changes)) {
      const viewContainerRef = this._viewContainerRef;
      if (this._viewRef) {
        viewContainerRef.remove(viewContainerRef.indexOf(this._viewRef));
      }
      if (!this.ngTemplateOutlet) {
        this._viewRef = null;
        return;
      }
      const viewContext = this._createContextForwardProxy();
      this._viewRef = viewContainerRef.createEmbeddedView(this.ngTemplateOutlet, viewContext, {
        injector: this.ngTemplateOutletInjector ?? void 0
      });
    }
  }
  /**
   * We need to re-create existing embedded view if either is true:
   * - the outlet changed.
   * - the injector changed.
   */
  _shouldRecreateView(changes) {
    return !!changes["ngTemplateOutlet"] || !!changes["ngTemplateOutletInjector"];
  }
  /**
   * For a given outlet instance, we create a proxy object that delegates
   * to the user-specified context. This allows changing, or swapping out
   * the context object completely without having to destroy/re-create the view.
   */
  _createContextForwardProxy() {
    return new Proxy({}, {
      set: (_target, prop, newValue) => {
        if (!this.ngTemplateOutletContext) {
          return false;
        }
        return Reflect.set(this.ngTemplateOutletContext, prop, newValue);
      },
      get: (_target, prop, receiver) => {
        if (!this.ngTemplateOutletContext) {
          return void 0;
        }
        return Reflect.get(this.ngTemplateOutletContext, prop, receiver);
      }
    });
  }
};
_NgTemplateOutlet.\u0275fac = function NgTemplateOutlet_Factory(t) {
  return new (t || _NgTemplateOutlet)(\u0275\u0275directiveInject(ViewContainerRef));
};
_NgTemplateOutlet.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _NgTemplateOutlet,
  selectors: [["", "ngTemplateOutlet", ""]],
  inputs: {
    ngTemplateOutletContext: "ngTemplateOutletContext",
    ngTemplateOutlet: "ngTemplateOutlet",
    ngTemplateOutletInjector: "ngTemplateOutletInjector"
  },
  standalone: true,
  features: [\u0275\u0275NgOnChangesFeature]
});
var NgTemplateOutlet = _NgTemplateOutlet;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgTemplateOutlet, [{
    type: Directive,
    args: [{
      selector: "[ngTemplateOutlet]",
      standalone: true
    }]
  }], () => [{
    type: ViewContainerRef
  }], {
    ngTemplateOutletContext: [{
      type: Input
    }],
    ngTemplateOutlet: [{
      type: Input
    }],
    ngTemplateOutletInjector: [{
      type: Input
    }]
  });
})();
var COMMON_DIRECTIVES = [NgClass, NgComponentOutlet, NgForOf, NgIf, NgTemplateOutlet, NgStyle, NgSwitch, NgSwitchCase, NgSwitchDefault, NgPlural, NgPluralCase];
function invalidPipeArgumentError(type, value) {
  return new RuntimeError(2100, ngDevMode && `InvalidPipeArgument: '${value}' for pipe '${stringify(type)}'`);
}
var SubscribableStrategy = class {
  createSubscription(async2, updateLatestValue) {
    return untracked(() => async2.subscribe({
      next: updateLatestValue,
      error: (e) => {
        throw e;
      }
    }));
  }
  dispose(subscription) {
    untracked(() => subscription.unsubscribe());
  }
};
var PromiseStrategy = class {
  createSubscription(async2, updateLatestValue) {
    return async2.then(updateLatestValue, (e) => {
      throw e;
    });
  }
  dispose(subscription) {
  }
};
var _promiseStrategy = new PromiseStrategy();
var _subscribableStrategy = new SubscribableStrategy();
var _AsyncPipe = class _AsyncPipe {
  constructor(ref) {
    this._latestValue = null;
    this._subscription = null;
    this._obj = null;
    this._strategy = null;
    this._ref = ref;
  }
  ngOnDestroy() {
    if (this._subscription) {
      this._dispose();
    }
    this._ref = null;
  }
  transform(obj) {
    if (!this._obj) {
      if (obj) {
        this._subscribe(obj);
      }
      return this._latestValue;
    }
    if (obj !== this._obj) {
      this._dispose();
      return this.transform(obj);
    }
    return this._latestValue;
  }
  _subscribe(obj) {
    this._obj = obj;
    this._strategy = this._selectStrategy(obj);
    this._subscription = this._strategy.createSubscription(obj, (value) => this._updateLatestValue(obj, value));
  }
  _selectStrategy(obj) {
    if (isPromise2(obj)) {
      return _promiseStrategy;
    }
    if (isSubscribable(obj)) {
      return _subscribableStrategy;
    }
    throw invalidPipeArgumentError(_AsyncPipe, obj);
  }
  _dispose() {
    this._strategy.dispose(this._subscription);
    this._latestValue = null;
    this._subscription = null;
    this._obj = null;
  }
  _updateLatestValue(async2, value) {
    if (async2 === this._obj) {
      this._latestValue = value;
      this._ref.markForCheck();
    }
  }
};
_AsyncPipe.\u0275fac = function AsyncPipe_Factory(t) {
  return new (t || _AsyncPipe)(\u0275\u0275directiveInject(ChangeDetectorRef, 16));
};
_AsyncPipe.\u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({
  name: "async",
  type: _AsyncPipe,
  pure: false,
  standalone: true
});
var AsyncPipe = _AsyncPipe;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AsyncPipe, [{
    type: Pipe,
    args: [{
      name: "async",
      pure: false,
      standalone: true
    }]
  }], () => [{
    type: ChangeDetectorRef
  }], null);
})();
var _LowerCasePipe = class _LowerCasePipe {
  transform(value) {
    if (value == null)
      return null;
    if (typeof value !== "string") {
      throw invalidPipeArgumentError(_LowerCasePipe, value);
    }
    return value.toLowerCase();
  }
};
_LowerCasePipe.\u0275fac = function LowerCasePipe_Factory(t) {
  return new (t || _LowerCasePipe)();
};
_LowerCasePipe.\u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({
  name: "lowercase",
  type: _LowerCasePipe,
  pure: true,
  standalone: true
});
var LowerCasePipe = _LowerCasePipe;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(LowerCasePipe, [{
    type: Pipe,
    args: [{
      name: "lowercase",
      standalone: true
    }]
  }], null, null);
})();
var unicodeWordMatch = /(?:[0-9A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u0870-\u0887\u0889-\u088E\u08A0-\u08C9\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C5D\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u1711\u171F-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4C\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7CA\uA7D0\uA7D1\uA7D3\uA7D5-\uA7D9\uA7F2-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDD70-\uDD7A\uDD7C-\uDD8A\uDD8C-\uDD92\uDD94\uDD95\uDD97-\uDDA1\uDDA3-\uDDB1\uDDB3-\uDDB9\uDDBB\uDDBC\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67\uDF80-\uDF85\uDF87-\uDFB0\uDFB2-\uDFBA]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDF70-\uDF81\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC71\uDC72\uDC75\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A\uDF40-\uDF46]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEB0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|\uD80B[\uDF90-\uDFF0]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDE70-\uDEBE\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82B[\uDFF0-\uDFF3\uDFF5-\uDFFB\uDFFD\uDFFE]|\uD82C[\uDC00-\uDD22\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD837[\uDF00-\uDF1E]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDE90-\uDEAD\uDEC0-\uDEEB]|\uD839[\uDFE0-\uDFE6\uDFE8-\uDFEB\uDFED\uDFEE\uDFF0-\uDFFE]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDF\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF38\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A])\S*/g;
var _TitleCasePipe = class _TitleCasePipe {
  transform(value) {
    if (value == null)
      return null;
    if (typeof value !== "string") {
      throw invalidPipeArgumentError(_TitleCasePipe, value);
    }
    return value.replace(unicodeWordMatch, (txt) => txt[0].toUpperCase() + txt.slice(1).toLowerCase());
  }
};
_TitleCasePipe.\u0275fac = function TitleCasePipe_Factory(t) {
  return new (t || _TitleCasePipe)();
};
_TitleCasePipe.\u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({
  name: "titlecase",
  type: _TitleCasePipe,
  pure: true,
  standalone: true
});
var TitleCasePipe = _TitleCasePipe;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TitleCasePipe, [{
    type: Pipe,
    args: [{
      name: "titlecase",
      standalone: true
    }]
  }], null, null);
})();
var _UpperCasePipe = class _UpperCasePipe {
  transform(value) {
    if (value == null)
      return null;
    if (typeof value !== "string") {
      throw invalidPipeArgumentError(_UpperCasePipe, value);
    }
    return value.toUpperCase();
  }
};
_UpperCasePipe.\u0275fac = function UpperCasePipe_Factory(t) {
  return new (t || _UpperCasePipe)();
};
_UpperCasePipe.\u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({
  name: "uppercase",
  type: _UpperCasePipe,
  pure: true,
  standalone: true
});
var UpperCasePipe = _UpperCasePipe;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(UpperCasePipe, [{
    type: Pipe,
    args: [{
      name: "uppercase",
      standalone: true
    }]
  }], null, null);
})();
var DEFAULT_DATE_FORMAT = "mediumDate";
var DATE_PIPE_DEFAULT_TIMEZONE = new InjectionToken("DATE_PIPE_DEFAULT_TIMEZONE");
var DATE_PIPE_DEFAULT_OPTIONS = new InjectionToken("DATE_PIPE_DEFAULT_OPTIONS");
var _DatePipe = class _DatePipe {
  constructor(locale, defaultTimezone, defaultOptions) {
    this.locale = locale;
    this.defaultTimezone = defaultTimezone;
    this.defaultOptions = defaultOptions;
  }
  transform(value, format, timezone, locale) {
    if (value == null || value === "" || value !== value)
      return null;
    try {
      const _format = format ?? this.defaultOptions?.dateFormat ?? DEFAULT_DATE_FORMAT;
      const _timezone = timezone ?? this.defaultOptions?.timezone ?? this.defaultTimezone ?? void 0;
      return formatDate(value, _format, locale || this.locale, _timezone);
    } catch (error) {
      throw invalidPipeArgumentError(_DatePipe, error.message);
    }
  }
};
_DatePipe.\u0275fac = function DatePipe_Factory(t) {
  return new (t || _DatePipe)(\u0275\u0275directiveInject(LOCALE_ID, 16), \u0275\u0275directiveInject(DATE_PIPE_DEFAULT_TIMEZONE, 24), \u0275\u0275directiveInject(DATE_PIPE_DEFAULT_OPTIONS, 24));
};
_DatePipe.\u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({
  name: "date",
  type: _DatePipe,
  pure: true,
  standalone: true
});
var DatePipe = _DatePipe;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DatePipe, [{
    type: Pipe,
    args: [{
      name: "date",
      pure: true,
      standalone: true
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [LOCALE_ID]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DATE_PIPE_DEFAULT_TIMEZONE]
    }, {
      type: Optional
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DATE_PIPE_DEFAULT_OPTIONS]
    }, {
      type: Optional
    }]
  }], null);
})();
var _INTERPOLATION_REGEXP = /#/g;
var _I18nPluralPipe = class _I18nPluralPipe {
  constructor(_localization) {
    this._localization = _localization;
  }
  /**
   * @param value the number to be formatted
   * @param pluralMap an object that mimics the ICU format, see
   * https://unicode-org.github.io/icu/userguide/format_parse/messages/.
   * @param locale a `string` defining the locale to use (uses the current {@link LOCALE_ID} by
   * default).
   */
  transform(value, pluralMap, locale) {
    if (value == null)
      return "";
    if (typeof pluralMap !== "object" || pluralMap === null) {
      throw invalidPipeArgumentError(_I18nPluralPipe, pluralMap);
    }
    const key = getPluralCategory(value, Object.keys(pluralMap), this._localization, locale);
    return pluralMap[key].replace(_INTERPOLATION_REGEXP, value.toString());
  }
};
_I18nPluralPipe.\u0275fac = function I18nPluralPipe_Factory(t) {
  return new (t || _I18nPluralPipe)(\u0275\u0275directiveInject(NgLocalization, 16));
};
_I18nPluralPipe.\u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({
  name: "i18nPlural",
  type: _I18nPluralPipe,
  pure: true,
  standalone: true
});
var I18nPluralPipe = _I18nPluralPipe;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(I18nPluralPipe, [{
    type: Pipe,
    args: [{
      name: "i18nPlural",
      pure: true,
      standalone: true
    }]
  }], () => [{
    type: NgLocalization
  }], null);
})();
var _I18nSelectPipe = class _I18nSelectPipe {
  /**
   * @param value a string to be internationalized.
   * @param mapping an object that indicates the text that should be displayed
   * for different values of the provided `value`.
   */
  transform(value, mapping) {
    if (value == null)
      return "";
    if (typeof mapping !== "object" || typeof value !== "string") {
      throw invalidPipeArgumentError(_I18nSelectPipe, mapping);
    }
    if (mapping.hasOwnProperty(value)) {
      return mapping[value];
    }
    if (mapping.hasOwnProperty("other")) {
      return mapping["other"];
    }
    return "";
  }
};
_I18nSelectPipe.\u0275fac = function I18nSelectPipe_Factory(t) {
  return new (t || _I18nSelectPipe)();
};
_I18nSelectPipe.\u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({
  name: "i18nSelect",
  type: _I18nSelectPipe,
  pure: true,
  standalone: true
});
var I18nSelectPipe = _I18nSelectPipe;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(I18nSelectPipe, [{
    type: Pipe,
    args: [{
      name: "i18nSelect",
      pure: true,
      standalone: true
    }]
  }], null, null);
})();
var _JsonPipe = class _JsonPipe {
  /**
   * @param value A value of any type to convert into a JSON-format string.
   */
  transform(value) {
    return JSON.stringify(value, null, 2);
  }
};
_JsonPipe.\u0275fac = function JsonPipe_Factory(t) {
  return new (t || _JsonPipe)();
};
_JsonPipe.\u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({
  name: "json",
  type: _JsonPipe,
  pure: false,
  standalone: true
});
var JsonPipe = _JsonPipe;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(JsonPipe, [{
    type: Pipe,
    args: [{
      name: "json",
      pure: false,
      standalone: true
    }]
  }], null, null);
})();
function makeKeyValuePair(key, value) {
  return {
    key,
    value
  };
}
var _KeyValuePipe = class _KeyValuePipe {
  constructor(differs) {
    this.differs = differs;
    this.keyValues = [];
    this.compareFn = defaultComparator;
  }
  transform(input, compareFn = defaultComparator) {
    if (!input || !(input instanceof Map) && typeof input !== "object") {
      return null;
    }
    if (!this.differ) {
      this.differ = this.differs.find(input).create();
    }
    const differChanges = this.differ.diff(input);
    const compareFnChanged = compareFn !== this.compareFn;
    if (differChanges) {
      this.keyValues = [];
      differChanges.forEachItem((r) => {
        this.keyValues.push(makeKeyValuePair(r.key, r.currentValue));
      });
    }
    if (differChanges || compareFnChanged) {
      this.keyValues.sort(compareFn);
      this.compareFn = compareFn;
    }
    return this.keyValues;
  }
};
_KeyValuePipe.\u0275fac = function KeyValuePipe_Factory(t) {
  return new (t || _KeyValuePipe)(\u0275\u0275directiveInject(KeyValueDiffers, 16));
};
_KeyValuePipe.\u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({
  name: "keyvalue",
  type: _KeyValuePipe,
  pure: false,
  standalone: true
});
var KeyValuePipe = _KeyValuePipe;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(KeyValuePipe, [{
    type: Pipe,
    args: [{
      name: "keyvalue",
      pure: false,
      standalone: true
    }]
  }], () => [{
    type: KeyValueDiffers
  }], null);
})();
function defaultComparator(keyValueA, keyValueB) {
  const a = keyValueA.key;
  const b = keyValueB.key;
  if (a === b)
    return 0;
  if (a === void 0)
    return 1;
  if (b === void 0)
    return -1;
  if (a === null)
    return 1;
  if (b === null)
    return -1;
  if (typeof a == "string" && typeof b == "string") {
    return a < b ? -1 : 1;
  }
  if (typeof a == "number" && typeof b == "number") {
    return a - b;
  }
  if (typeof a == "boolean" && typeof b == "boolean") {
    return a < b ? -1 : 1;
  }
  const aString = String(a);
  const bString = String(b);
  return aString == bString ? 0 : aString < bString ? -1 : 1;
}
var _DecimalPipe = class _DecimalPipe {
  constructor(_locale) {
    this._locale = _locale;
  }
  /**
   * @param value The value to be formatted.
   * @param digitsInfo Sets digit and decimal representation.
   * [See more](#digitsinfo).
   * @param locale Specifies what locale format rules to use.
   * [See more](#locale).
   */
  transform(value, digitsInfo, locale) {
    if (!isValue(value))
      return null;
    locale = locale || this._locale;
    try {
      const num = strToNumber(value);
      return formatNumber(num, locale, digitsInfo);
    } catch (error) {
      throw invalidPipeArgumentError(_DecimalPipe, error.message);
    }
  }
};
_DecimalPipe.\u0275fac = function DecimalPipe_Factory(t) {
  return new (t || _DecimalPipe)(\u0275\u0275directiveInject(LOCALE_ID, 16));
};
_DecimalPipe.\u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({
  name: "number",
  type: _DecimalPipe,
  pure: true,
  standalone: true
});
var DecimalPipe = _DecimalPipe;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DecimalPipe, [{
    type: Pipe,
    args: [{
      name: "number",
      standalone: true
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [LOCALE_ID]
    }]
  }], null);
})();
var _PercentPipe = class _PercentPipe {
  constructor(_locale) {
    this._locale = _locale;
  }
  /**
   *
   * @param value The number to be formatted as a percentage.
   * @param digitsInfo Decimal representation options, specified by a string
   * in the following format:<br>
   * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.
   *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.
   * Default is `1`.
   *   - `minFractionDigits`: The minimum number of digits after the decimal point.
   * Default is `0`.
   *   - `maxFractionDigits`: The maximum number of digits after the decimal point.
   * Default is `0`.
   * @param locale A locale code for the locale format rules to use.
   * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.
   * See [Setting your app locale](guide/i18n-common-locale-id).
   */
  transform(value, digitsInfo, locale) {
    if (!isValue(value))
      return null;
    locale = locale || this._locale;
    try {
      const num = strToNumber(value);
      return formatPercent(num, locale, digitsInfo);
    } catch (error) {
      throw invalidPipeArgumentError(_PercentPipe, error.message);
    }
  }
};
_PercentPipe.\u0275fac = function PercentPipe_Factory(t) {
  return new (t || _PercentPipe)(\u0275\u0275directiveInject(LOCALE_ID, 16));
};
_PercentPipe.\u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({
  name: "percent",
  type: _PercentPipe,
  pure: true,
  standalone: true
});
var PercentPipe = _PercentPipe;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PercentPipe, [{
    type: Pipe,
    args: [{
      name: "percent",
      standalone: true
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [LOCALE_ID]
    }]
  }], null);
})();
var _CurrencyPipe = class _CurrencyPipe {
  constructor(_locale, _defaultCurrencyCode = "USD") {
    this._locale = _locale;
    this._defaultCurrencyCode = _defaultCurrencyCode;
  }
  /**
   *
   * @param value The number to be formatted as currency.
   * @param currencyCode The [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) currency code,
   * such as `USD` for the US dollar and `EUR` for the euro. The default currency code can be
   * configured using the `DEFAULT_CURRENCY_CODE` injection token.
   * @param display The format for the currency indicator. One of the following:
   *   - `code`: Show the code (such as `USD`).
   *   - `symbol`(default): Show the symbol (such as `$`).
   *   - `symbol-narrow`: Use the narrow symbol for locales that have two symbols for their
   * currency.
   * For example, the Canadian dollar CAD has the symbol `CA$` and the symbol-narrow `$`. If the
   * locale has no narrow symbol, uses the standard symbol for the locale.
   *   - String: Use the given string value instead of a code or a symbol.
   * For example, an empty string will suppress the currency & symbol.
   *   - Boolean (marked deprecated in v5): `true` for symbol and false for `code`.
   *
   * @param digitsInfo Decimal representation options, specified by a string
   * in the following format:<br>
   * <code>{minIntegerDigits}.{minFractionDigits}-{maxFractionDigits}</code>.
   *   - `minIntegerDigits`: The minimum number of integer digits before the decimal point.
   * Default is `1`.
   *   - `minFractionDigits`: The minimum number of digits after the decimal point.
   * Default is `2`.
   *   - `maxFractionDigits`: The maximum number of digits after the decimal point.
   * Default is `2`.
   * If not provided, the number will be formatted with the proper amount of digits,
   * depending on what the [ISO 4217](https://en.wikipedia.org/wiki/ISO_4217) specifies.
   * For example, the Canadian dollar has 2 digits, whereas the Chilean peso has none.
   * @param locale A locale code for the locale format rules to use.
   * When not supplied, uses the value of `LOCALE_ID`, which is `en-US` by default.
   * See [Setting your app locale](guide/i18n-common-locale-id).
   */
  transform(value, currencyCode = this._defaultCurrencyCode, display = "symbol", digitsInfo, locale) {
    if (!isValue(value))
      return null;
    locale = locale || this._locale;
    if (typeof display === "boolean") {
      if ((typeof ngDevMode === "undefined" || ngDevMode) && console && console.warn) {
        console.warn(`Warning: the currency pipe has been changed in Angular v5. The symbolDisplay option (third parameter) is now a string instead of a boolean. The accepted values are "code", "symbol" or "symbol-narrow".`);
      }
      display = display ? "symbol" : "code";
    }
    let currency = currencyCode || this._defaultCurrencyCode;
    if (display !== "code") {
      if (display === "symbol" || display === "symbol-narrow") {
        currency = getCurrencySymbol(currency, display === "symbol" ? "wide" : "narrow", locale);
      } else {
        currency = display;
      }
    }
    try {
      const num = strToNumber(value);
      return formatCurrency(num, locale, currency, currencyCode, digitsInfo);
    } catch (error) {
      throw invalidPipeArgumentError(_CurrencyPipe, error.message);
    }
  }
};
_CurrencyPipe.\u0275fac = function CurrencyPipe_Factory(t) {
  return new (t || _CurrencyPipe)(\u0275\u0275directiveInject(LOCALE_ID, 16), \u0275\u0275directiveInject(DEFAULT_CURRENCY_CODE, 16));
};
_CurrencyPipe.\u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({
  name: "currency",
  type: _CurrencyPipe,
  pure: true,
  standalone: true
});
var CurrencyPipe = _CurrencyPipe;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CurrencyPipe, [{
    type: Pipe,
    args: [{
      name: "currency",
      standalone: true
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [LOCALE_ID]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DEFAULT_CURRENCY_CODE]
    }]
  }], null);
})();
function isValue(value) {
  return !(value == null || value === "" || value !== value);
}
function strToNumber(value) {
  if (typeof value === "string" && !isNaN(Number(value) - parseFloat(value))) {
    return Number(value);
  }
  if (typeof value !== "number") {
    throw new Error(`${value} is not a number`);
  }
  return value;
}
var _SlicePipe = class _SlicePipe {
  transform(value, start, end) {
    if (value == null)
      return null;
    if (!this.supports(value)) {
      throw invalidPipeArgumentError(_SlicePipe, value);
    }
    return value.slice(start, end);
  }
  supports(obj) {
    return typeof obj === "string" || Array.isArray(obj);
  }
};
_SlicePipe.\u0275fac = function SlicePipe_Factory(t) {
  return new (t || _SlicePipe)();
};
_SlicePipe.\u0275pipe = /* @__PURE__ */ \u0275\u0275definePipe({
  name: "slice",
  type: _SlicePipe,
  pure: false,
  standalone: true
});
var SlicePipe = _SlicePipe;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(SlicePipe, [{
    type: Pipe,
    args: [{
      name: "slice",
      pure: false,
      standalone: true
    }]
  }], null, null);
})();
var COMMON_PIPES = [AsyncPipe, UpperCasePipe, LowerCasePipe, JsonPipe, SlicePipe, DecimalPipe, PercentPipe, TitleCasePipe, CurrencyPipe, DatePipe, I18nPluralPipe, I18nSelectPipe, KeyValuePipe];
var _CommonModule = class _CommonModule {
};
_CommonModule.\u0275fac = function CommonModule_Factory(t) {
  return new (t || _CommonModule)();
};
_CommonModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _CommonModule
});
_CommonModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({});
var CommonModule = _CommonModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CommonModule, [{
    type: NgModule,
    args: [{
      imports: [COMMON_DIRECTIVES, COMMON_PIPES],
      exports: [COMMON_DIRECTIVES, COMMON_PIPES]
    }]
  }], null, null);
})();
var PLATFORM_BROWSER_ID = "browser";
var PLATFORM_SERVER_ID = "server";
function isPlatformBrowser2(platformId) {
  return platformId === PLATFORM_BROWSER_ID;
}
function isPlatformServer(platformId) {
  return platformId === PLATFORM_SERVER_ID;
}
var VERSION2 = new Version("17.0.7");
var _ViewportScroller = class _ViewportScroller {
};
_ViewportScroller.\u0275prov = \u0275\u0275defineInjectable({
  token: _ViewportScroller,
  providedIn: "root",
  factory: () => new BrowserViewportScroller(\u0275\u0275inject(DOCUMENT2), window)
});
var ViewportScroller = _ViewportScroller;
var BrowserViewportScroller = class {
  constructor(document2, window2) {
    this.document = document2;
    this.window = window2;
    this.offset = () => [0, 0];
  }
  /**
   * Configures the top offset used when scrolling to an anchor.
   * @param offset A position in screen coordinates (a tuple with x and y values)
   * or a function that returns the top offset position.
   *
   */
  setOffset(offset) {
    if (Array.isArray(offset)) {
      this.offset = () => offset;
    } else {
      this.offset = offset;
    }
  }
  /**
   * Retrieves the current scroll position.
   * @returns The position in screen coordinates.
   */
  getScrollPosition() {
    if (this.supportsScrolling()) {
      return [this.window.pageXOffset, this.window.pageYOffset];
    } else {
      return [0, 0];
    }
  }
  /**
   * Sets the scroll position.
   * @param position The new position in screen coordinates.
   */
  scrollToPosition(position) {
    if (this.supportsScrolling()) {
      this.window.scrollTo(position[0], position[1]);
    }
  }
  /**
   * Scrolls to an element and attempts to focus the element.
   *
   * Note that the function name here is misleading in that the target string may be an ID for a
   * non-anchor element.
   *
   * @param target The ID of an element or name of the anchor.
   *
   * @see https://html.spec.whatwg.org/#the-indicated-part-of-the-document
   * @see https://html.spec.whatwg.org/#scroll-to-fragid
   */
  scrollToAnchor(target) {
    if (!this.supportsScrolling()) {
      return;
    }
    const elSelected = findAnchorFromDocument(this.document, target);
    if (elSelected) {
      this.scrollToElement(elSelected);
      elSelected.focus();
    }
  }
  /**
   * Disables automatic scroll restoration provided by the browser.
   */
  setHistoryScrollRestoration(scrollRestoration) {
    if (this.supportsScrolling()) {
      this.window.history.scrollRestoration = scrollRestoration;
    }
  }
  /**
   * Scrolls to an element using the native offset and the specified offset set on this scroller.
   *
   * The offset can be used when we know that there is a floating header and scrolling naively to an
   * element (ex: `scrollIntoView`) leaves the element hidden behind the floating header.
   */
  scrollToElement(el) {
    const rect = el.getBoundingClientRect();
    const left = rect.left + this.window.pageXOffset;
    const top = rect.top + this.window.pageYOffset;
    const offset = this.offset();
    this.window.scrollTo(left - offset[0], top - offset[1]);
  }
  supportsScrolling() {
    try {
      return !!this.window && !!this.window.scrollTo && "pageXOffset" in this.window;
    } catch {
      return false;
    }
  }
};
function findAnchorFromDocument(document2, target) {
  const documentResult = document2.getElementById(target) || document2.getElementsByName(target)[0];
  if (documentResult) {
    return documentResult;
  }
  if (typeof document2.createTreeWalker === "function" && document2.body && typeof document2.body.attachShadow === "function") {
    const treeWalker = document2.createTreeWalker(document2.body, NodeFilter.SHOW_ELEMENT);
    let currentNode = treeWalker.currentNode;
    while (currentNode) {
      const shadowRoot = currentNode.shadowRoot;
      if (shadowRoot) {
        const result = shadowRoot.getElementById(target) || shadowRoot.querySelector(`[name="${target}"]`);
        if (result) {
          return result;
        }
      }
      currentNode = treeWalker.nextNode();
    }
  }
  return null;
}
var XhrFactory = class {
};
function getUrl(src, win) {
  return isAbsoluteUrl(src) ? new URL(src) : new URL(src, win.location.href);
}
function isAbsoluteUrl(src) {
  return /^https?:\/\//.test(src);
}
function extractHostname(url) {
  return isAbsoluteUrl(url) ? new URL(url).hostname : url;
}
function isValidPath(path) {
  const isString = typeof path === "string";
  if (!isString || path.trim() === "") {
    return false;
  }
  try {
    const url = new URL(path);
    return true;
  } catch {
    return false;
  }
}
function normalizePath(path) {
  return path.endsWith("/") ? path.slice(0, -1) : path;
}
function normalizeSrc(src) {
  return src.startsWith("/") ? src.slice(1) : src;
}
var noopImageLoader = (config2) => config2.src;
var IMAGE_LOADER = new InjectionToken("ImageLoader", {
  providedIn: "root",
  factory: () => noopImageLoader
});
function createImageLoader(buildUrlFn, exampleUrls) {
  return function provideImageLoader(path) {
    if (!isValidPath(path)) {
      throwInvalidPathError(path, exampleUrls || []);
    }
    path = normalizePath(path);
    const loaderFn = (config2) => {
      if (isAbsoluteUrl(config2.src)) {
        throwUnexpectedAbsoluteUrlError(path, config2.src);
      }
      return buildUrlFn(path, __spreadProps(__spreadValues({}, config2), {
        src: normalizeSrc(config2.src)
      }));
    };
    const providers = [{
      provide: IMAGE_LOADER,
      useValue: loaderFn
    }];
    return providers;
  };
}
function throwInvalidPathError(path, exampleUrls) {
  throw new RuntimeError(2959, ngDevMode && `Image loader has detected an invalid path (\`${path}\`). To fix this, supply a path using one of the following formats: ${exampleUrls.join(" or ")}`);
}
function throwUnexpectedAbsoluteUrlError(path, url) {
  throw new RuntimeError(2959, ngDevMode && `Image loader has detected a \`<img>\` tag with an invalid \`ngSrc\` attribute: ${url}. This image loader expects \`ngSrc\` to be a relative URL - however the provided value is an absolute URL. To fix this, provide \`ngSrc\` as a path relative to the base URL configured for this loader (\`${path}\`).`);
}
var provideCloudflareLoader = createImageLoader(createCloudflareUrl, ngDevMode ? ["https://<ZONE>/cdn-cgi/image/<OPTIONS>/<SOURCE-IMAGE>"] : void 0);
function createCloudflareUrl(path, config2) {
  let params = `format=auto`;
  if (config2.width) {
    params += `,width=${config2.width}`;
  }
  return `${path}/cdn-cgi/image/${params}/${config2.src}`;
}
var cloudinaryLoaderInfo = {
  name: "Cloudinary",
  testUrl: isCloudinaryUrl
};
var CLOUDINARY_LOADER_REGEX = /https?\:\/\/[^\/]+\.cloudinary\.com\/.+/;
function isCloudinaryUrl(url) {
  return CLOUDINARY_LOADER_REGEX.test(url);
}
var provideCloudinaryLoader = createImageLoader(createCloudinaryUrl, ngDevMode ? ["https://res.cloudinary.com/mysite", "https://mysite.cloudinary.com", "https://subdomain.mysite.com"] : void 0);
function createCloudinaryUrl(path, config2) {
  let params = `f_auto,q_auto`;
  if (config2.width) {
    params += `,w_${config2.width}`;
  }
  return `${path}/image/upload/${params}/${config2.src}`;
}
var imageKitLoaderInfo = {
  name: "ImageKit",
  testUrl: isImageKitUrl
};
var IMAGE_KIT_LOADER_REGEX = /https?\:\/\/[^\/]+\.imagekit\.io\/.+/;
function isImageKitUrl(url) {
  return IMAGE_KIT_LOADER_REGEX.test(url);
}
var provideImageKitLoader = createImageLoader(createImagekitUrl, ngDevMode ? ["https://ik.imagekit.io/mysite", "https://subdomain.mysite.com"] : void 0);
function createImagekitUrl(path, config2) {
  const {
    src,
    width
  } = config2;
  let urlSegments;
  if (width) {
    const params = `tr:w-${width}`;
    urlSegments = [path, params, src];
  } else {
    urlSegments = [path, src];
  }
  return urlSegments.join("/");
}
var imgixLoaderInfo = {
  name: "Imgix",
  testUrl: isImgixUrl
};
var IMGIX_LOADER_REGEX = /https?\:\/\/[^\/]+\.imgix\.net\/.+/;
function isImgixUrl(url) {
  return IMGIX_LOADER_REGEX.test(url);
}
var provideImgixLoader = createImageLoader(createImgixUrl, ngDevMode ? ["https://somepath.imgix.net/"] : void 0);
function createImgixUrl(path, config2) {
  const url = new URL(`${path}/${config2.src}`);
  url.searchParams.set("auto", "format");
  if (config2.width) {
    url.searchParams.set("w", config2.width.toString());
  }
  return url.href;
}
function imgDirectiveDetails(ngSrc, includeNgSrc = true) {
  const ngSrcInfo = includeNgSrc ? `(activated on an <img> element with the \`ngSrc="${ngSrc}"\`) ` : "";
  return `The NgOptimizedImage directive ${ngSrcInfo}has detected that`;
}
function assertDevMode(checkName) {
  if (!ngDevMode) {
    throw new RuntimeError(2958, `Unexpected invocation of the ${checkName} in the prod mode. Please make sure that the prod mode is enabled for production builds.`);
  }
}
var _LCPImageObserver = class _LCPImageObserver {
  constructor() {
    this.images = /* @__PURE__ */ new Map();
    this.window = null;
    this.observer = null;
    assertDevMode("LCP checker");
    const win = inject(DOCUMENT2).defaultView;
    if (typeof win !== "undefined" && typeof PerformanceObserver !== "undefined") {
      this.window = win;
      this.observer = this.initPerformanceObserver();
    }
  }
  /**
   * Inits PerformanceObserver and subscribes to LCP events.
   * Based on https://web.dev/lcp/#measure-lcp-in-javascript
   */
  initPerformanceObserver() {
    const observer = new PerformanceObserver((entryList) => {
      const entries = entryList.getEntries();
      if (entries.length === 0)
        return;
      const lcpElement = entries[entries.length - 1];
      const imgSrc = lcpElement.element?.src ?? "";
      if (imgSrc.startsWith("data:") || imgSrc.startsWith("blob:"))
        return;
      const img = this.images.get(imgSrc);
      if (!img)
        return;
      if (!img.priority && !img.alreadyWarnedPriority) {
        img.alreadyWarnedPriority = true;
        logMissingPriorityError(imgSrc);
      }
      if (img.modified && !img.alreadyWarnedModified) {
        img.alreadyWarnedModified = true;
        logModifiedWarning(imgSrc);
      }
    });
    observer.observe({
      type: "largest-contentful-paint",
      buffered: true
    });
    return observer;
  }
  registerImage(rewrittenSrc, originalNgSrc, isPriority) {
    if (!this.observer)
      return;
    const newObservedImageState = {
      priority: isPriority,
      modified: false,
      alreadyWarnedModified: false,
      alreadyWarnedPriority: false
    };
    this.images.set(getUrl(rewrittenSrc, this.window).href, newObservedImageState);
  }
  unregisterImage(rewrittenSrc) {
    if (!this.observer)
      return;
    this.images.delete(getUrl(rewrittenSrc, this.window).href);
  }
  updateImage(originalSrc, newSrc) {
    const originalUrl = getUrl(originalSrc, this.window).href;
    const img = this.images.get(originalUrl);
    if (img) {
      img.modified = true;
      this.images.set(getUrl(newSrc, this.window).href, img);
      this.images.delete(originalUrl);
    }
  }
  ngOnDestroy() {
    if (!this.observer)
      return;
    this.observer.disconnect();
    this.images.clear();
  }
};
_LCPImageObserver.\u0275fac = function LCPImageObserver_Factory(t) {
  return new (t || _LCPImageObserver)();
};
_LCPImageObserver.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _LCPImageObserver,
  factory: _LCPImageObserver.\u0275fac,
  providedIn: "root"
});
var LCPImageObserver = _LCPImageObserver;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(LCPImageObserver, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [], null);
})();
function logMissingPriorityError(ngSrc) {
  const directiveDetails = imgDirectiveDetails(ngSrc);
  console.error(formatRuntimeError(2955, `${directiveDetails} this image is the Largest Contentful Paint (LCP) element but was not marked "priority". This image should be marked "priority" in order to prioritize its loading. To fix this, add the "priority" attribute.`));
}
function logModifiedWarning(ngSrc) {
  const directiveDetails = imgDirectiveDetails(ngSrc);
  console.warn(formatRuntimeError(2964, `${directiveDetails} this image is the Largest Contentful Paint (LCP) element and has had its "ngSrc" attribute modified. This can cause slower loading performance. It is recommended not to modify the "ngSrc" property on any image which could be the LCP element.`));
}
var INTERNAL_PRECONNECT_CHECK_BLOCKLIST = /* @__PURE__ */ new Set(["localhost", "127.0.0.1", "0.0.0.0"]);
var PRECONNECT_CHECK_BLOCKLIST = new InjectionToken("PRECONNECT_CHECK_BLOCKLIST");
var _PreconnectLinkChecker = class _PreconnectLinkChecker {
  constructor() {
    this.document = inject(DOCUMENT2);
    this.preconnectLinks = null;
    this.alreadySeen = /* @__PURE__ */ new Set();
    this.window = null;
    this.blocklist = new Set(INTERNAL_PRECONNECT_CHECK_BLOCKLIST);
    assertDevMode("preconnect link checker");
    const win = this.document.defaultView;
    if (typeof win !== "undefined") {
      this.window = win;
    }
    const blocklist = inject(PRECONNECT_CHECK_BLOCKLIST, {
      optional: true
    });
    if (blocklist) {
      this.populateBlocklist(blocklist);
    }
  }
  populateBlocklist(origins) {
    if (Array.isArray(origins)) {
      deepForEach2(origins, (origin) => {
        this.blocklist.add(extractHostname(origin));
      });
    } else {
      this.blocklist.add(extractHostname(origins));
    }
  }
  /**
   * Checks that a preconnect resource hint exists in the head for the
   * given src.
   *
   * @param rewrittenSrc src formatted with loader
   * @param originalNgSrc ngSrc value
   */
  assertPreconnect(rewrittenSrc, originalNgSrc) {
    if (!this.window)
      return;
    const imgUrl = getUrl(rewrittenSrc, this.window);
    if (this.blocklist.has(imgUrl.hostname) || this.alreadySeen.has(imgUrl.origin))
      return;
    this.alreadySeen.add(imgUrl.origin);
    if (!this.preconnectLinks) {
      this.preconnectLinks = this.queryPreconnectLinks();
    }
    if (!this.preconnectLinks.has(imgUrl.origin)) {
      console.warn(formatRuntimeError(2956, `${imgDirectiveDetails(originalNgSrc)} there is no preconnect tag present for this image. Preconnecting to the origin(s) that serve priority images ensures that these images are delivered as soon as possible. To fix this, please add the following element into the <head> of the document:
  <link rel="preconnect" href="${imgUrl.origin}">`));
    }
  }
  queryPreconnectLinks() {
    const preconnectUrls = /* @__PURE__ */ new Set();
    const selector = "link[rel=preconnect]";
    const links = Array.from(this.document.querySelectorAll(selector));
    for (let link of links) {
      const url = getUrl(link.href, this.window);
      preconnectUrls.add(url.origin);
    }
    return preconnectUrls;
  }
  ngOnDestroy() {
    this.preconnectLinks?.clear();
    this.alreadySeen.clear();
  }
};
_PreconnectLinkChecker.\u0275fac = function PreconnectLinkChecker_Factory(t) {
  return new (t || _PreconnectLinkChecker)();
};
_PreconnectLinkChecker.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _PreconnectLinkChecker,
  factory: _PreconnectLinkChecker.\u0275fac,
  providedIn: "root"
});
var PreconnectLinkChecker = _PreconnectLinkChecker;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PreconnectLinkChecker, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [], null);
})();
function deepForEach2(input, fn) {
  for (let value of input) {
    Array.isArray(value) ? deepForEach2(value, fn) : fn(value);
  }
}
var DEFAULT_PRELOADED_IMAGES_LIMIT = 5;
var PRELOADED_IMAGES = new InjectionToken("NG_OPTIMIZED_PRELOADED_IMAGES", {
  providedIn: "root",
  factory: () => /* @__PURE__ */ new Set()
});
var _PreloadLinkCreator = class _PreloadLinkCreator {
  constructor() {
    this.preloadedImages = inject(PRELOADED_IMAGES);
    this.document = inject(DOCUMENT2);
  }
  /**
   * @description Add a preload `<link>` to the `<head>` of the `index.html` that is served from the
   * server while using Angular Universal and SSR to kick off image loads for high priority images.
   *
   * The `sizes` (passed in from the user) and `srcset` (parsed and formatted from `ngSrcset`)
   * properties used to set the corresponding attributes, `imagesizes` and `imagesrcset`
   * respectively, on the preload `<link>` tag so that the correctly sized image is preloaded from
   * the CDN.
   *
   * {@link https://web.dev/preload-responsive-images/#imagesrcset-and-imagesizes}
   *
   * @param renderer The `Renderer2` passed in from the directive
   * @param src The original src of the image that is set on the `ngSrc` input.
   * @param srcset The parsed and formatted srcset created from the `ngSrcset` input
   * @param sizes The value of the `sizes` attribute passed in to the `<img>` tag
   */
  createPreloadLinkTag(renderer, src, srcset, sizes) {
    if (ngDevMode) {
      if (this.preloadedImages.size >= DEFAULT_PRELOADED_IMAGES_LIMIT) {
        throw new RuntimeError(2961, ngDevMode && `The \`NgOptimizedImage\` directive has detected that more than ${DEFAULT_PRELOADED_IMAGES_LIMIT} images were marked as priority. This might negatively affect an overall performance of the page. To fix this, remove the "priority" attribute from images with less priority.`);
      }
    }
    if (this.preloadedImages.has(src)) {
      return;
    }
    this.preloadedImages.add(src);
    const preload = renderer.createElement("link");
    renderer.setAttribute(preload, "as", "image");
    renderer.setAttribute(preload, "href", src);
    renderer.setAttribute(preload, "rel", "preload");
    renderer.setAttribute(preload, "fetchpriority", "high");
    if (sizes) {
      renderer.setAttribute(preload, "imageSizes", sizes);
    }
    if (srcset) {
      renderer.setAttribute(preload, "imageSrcset", srcset);
    }
    renderer.appendChild(this.document.head, preload);
  }
};
_PreloadLinkCreator.\u0275fac = function PreloadLinkCreator_Factory(t) {
  return new (t || _PreloadLinkCreator)();
};
_PreloadLinkCreator.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _PreloadLinkCreator,
  factory: _PreloadLinkCreator.\u0275fac,
  providedIn: "root"
});
var PreloadLinkCreator = _PreloadLinkCreator;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PreloadLinkCreator, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
var BASE64_IMG_MAX_LENGTH_IN_ERROR = 50;
var VALID_WIDTH_DESCRIPTOR_SRCSET = /^((\s*\d+w\s*(,|$)){1,})$/;
var VALID_DENSITY_DESCRIPTOR_SRCSET = /^((\s*\d+(\.\d+)?x\s*(,|$)){1,})$/;
var ABSOLUTE_SRCSET_DENSITY_CAP = 3;
var RECOMMENDED_SRCSET_DENSITY_CAP = 2;
var DENSITY_SRCSET_MULTIPLIERS = [1, 2];
var VIEWPORT_BREAKPOINT_CUTOFF = 640;
var ASPECT_RATIO_TOLERANCE = 0.1;
var OVERSIZED_IMAGE_TOLERANCE2 = 1e3;
var FIXED_SRCSET_WIDTH_LIMIT = 1920;
var FIXED_SRCSET_HEIGHT_LIMIT = 1080;
var BUILT_IN_LOADERS = [imgixLoaderInfo, imageKitLoaderInfo, cloudinaryLoaderInfo];
var _NgOptimizedImage = class _NgOptimizedImage {
  constructor() {
    this.imageLoader = inject(IMAGE_LOADER);
    this.config = processConfig(inject(IMAGE_CONFIG));
    this.renderer = inject(Renderer2);
    this.imgElement = inject(ElementRef).nativeElement;
    this.injector = inject(Injector);
    this.isServer = isPlatformServer(inject(PLATFORM_ID));
    this.preloadLinkCreator = inject(PreloadLinkCreator);
    this.lcpObserver = ngDevMode ? this.injector.get(LCPImageObserver) : null;
    this._renderedSrc = null;
    this.priority = false;
    this.disableOptimizedSrcset = false;
    this.fill = false;
  }
  /** @nodoc */
  ngOnInit() {
    performanceMarkFeature("NgOptimizedImage");
    if (ngDevMode) {
      const ngZone = this.injector.get(NgZone);
      assertNonEmptyInput(this, "ngSrc", this.ngSrc);
      assertValidNgSrcset(this, this.ngSrcset);
      assertNoConflictingSrc(this);
      if (this.ngSrcset) {
        assertNoConflictingSrcset(this);
      }
      assertNotBase64Image(this);
      assertNotBlobUrl(this);
      if (this.fill) {
        assertEmptyWidthAndHeight(this);
        ngZone.runOutsideAngular(() => assertNonZeroRenderedHeight(this, this.imgElement, this.renderer));
      } else {
        assertNonEmptyWidthAndHeight(this);
        if (this.height !== void 0) {
          assertGreaterThanZero(this, this.height, "height");
        }
        if (this.width !== void 0) {
          assertGreaterThanZero(this, this.width, "width");
        }
        ngZone.runOutsideAngular(() => assertNoImageDistortion(this, this.imgElement, this.renderer));
      }
      assertValidLoadingInput(this);
      if (!this.ngSrcset) {
        assertNoComplexSizes(this);
      }
      assertNotMissingBuiltInLoader(this.ngSrc, this.imageLoader);
      assertNoNgSrcsetWithoutLoader(this, this.imageLoader);
      assertNoLoaderParamsWithoutLoader(this, this.imageLoader);
      if (this.lcpObserver !== null) {
        const ngZone2 = this.injector.get(NgZone);
        ngZone2.runOutsideAngular(() => {
          this.lcpObserver.registerImage(this.getRewrittenSrc(), this.ngSrc, this.priority);
        });
      }
      if (this.priority) {
        const checker = this.injector.get(PreconnectLinkChecker);
        checker.assertPreconnect(this.getRewrittenSrc(), this.ngSrc);
      }
    }
    this.setHostAttributes();
  }
  setHostAttributes() {
    if (this.fill) {
      if (!this.sizes) {
        this.sizes = "100vw";
      }
    } else {
      this.setHostAttribute("width", this.width.toString());
      this.setHostAttribute("height", this.height.toString());
    }
    this.setHostAttribute("loading", this.getLoadingBehavior());
    this.setHostAttribute("fetchpriority", this.getFetchPriority());
    this.setHostAttribute("ng-img", "true");
    const rewrittenSrcset = this.updateSrcAndSrcset();
    if (this.sizes) {
      this.setHostAttribute("sizes", this.sizes);
    }
    if (this.isServer && this.priority) {
      this.preloadLinkCreator.createPreloadLinkTag(this.renderer, this.getRewrittenSrc(), rewrittenSrcset, this.sizes);
    }
  }
  /** @nodoc */
  ngOnChanges(changes) {
    if (ngDevMode) {
      assertNoPostInitInputChange(this, changes, ["ngSrcset", "width", "height", "priority", "fill", "loading", "sizes", "loaderParams", "disableOptimizedSrcset"]);
    }
    if (changes["ngSrc"] && !changes["ngSrc"].isFirstChange()) {
      const oldSrc = this._renderedSrc;
      this.updateSrcAndSrcset(true);
      const newSrc = this._renderedSrc;
      if (this.lcpObserver !== null && oldSrc && newSrc && oldSrc !== newSrc) {
        const ngZone = this.injector.get(NgZone);
        ngZone.runOutsideAngular(() => {
          this.lcpObserver?.updateImage(oldSrc, newSrc);
        });
      }
    }
  }
  callImageLoader(configWithoutCustomParams) {
    let augmentedConfig = configWithoutCustomParams;
    if (this.loaderParams) {
      augmentedConfig.loaderParams = this.loaderParams;
    }
    return this.imageLoader(augmentedConfig);
  }
  getLoadingBehavior() {
    if (!this.priority && this.loading !== void 0) {
      return this.loading;
    }
    return this.priority ? "eager" : "lazy";
  }
  getFetchPriority() {
    return this.priority ? "high" : "auto";
  }
  getRewrittenSrc() {
    if (!this._renderedSrc) {
      const imgConfig = {
        src: this.ngSrc
      };
      this._renderedSrc = this.callImageLoader(imgConfig);
    }
    return this._renderedSrc;
  }
  getRewrittenSrcset() {
    const widthSrcSet = VALID_WIDTH_DESCRIPTOR_SRCSET.test(this.ngSrcset);
    const finalSrcs = this.ngSrcset.split(",").filter((src) => src !== "").map((srcStr) => {
      srcStr = srcStr.trim();
      const width = widthSrcSet ? parseFloat(srcStr) : parseFloat(srcStr) * this.width;
      return `${this.callImageLoader({
        src: this.ngSrc,
        width
      })} ${srcStr}`;
    });
    return finalSrcs.join(", ");
  }
  getAutomaticSrcset() {
    if (this.sizes) {
      return this.getResponsiveSrcset();
    } else {
      return this.getFixedSrcset();
    }
  }
  getResponsiveSrcset() {
    const {
      breakpoints
    } = this.config;
    let filteredBreakpoints = breakpoints;
    if (this.sizes?.trim() === "100vw") {
      filteredBreakpoints = breakpoints.filter((bp) => bp >= VIEWPORT_BREAKPOINT_CUTOFF);
    }
    const finalSrcs = filteredBreakpoints.map((bp) => `${this.callImageLoader({
      src: this.ngSrc,
      width: bp
    })} ${bp}w`);
    return finalSrcs.join(", ");
  }
  updateSrcAndSrcset(forceSrcRecalc = false) {
    if (forceSrcRecalc) {
      this._renderedSrc = null;
    }
    const rewrittenSrc = this.getRewrittenSrc();
    this.setHostAttribute("src", rewrittenSrc);
    let rewrittenSrcset = void 0;
    if (this.ngSrcset) {
      rewrittenSrcset = this.getRewrittenSrcset();
    } else if (this.shouldGenerateAutomaticSrcset()) {
      rewrittenSrcset = this.getAutomaticSrcset();
    }
    if (rewrittenSrcset) {
      this.setHostAttribute("srcset", rewrittenSrcset);
    }
    return rewrittenSrcset;
  }
  getFixedSrcset() {
    const finalSrcs = DENSITY_SRCSET_MULTIPLIERS.map((multiplier) => `${this.callImageLoader({
      src: this.ngSrc,
      width: this.width * multiplier
    })} ${multiplier}x`);
    return finalSrcs.join(", ");
  }
  shouldGenerateAutomaticSrcset() {
    let oversizedImage = false;
    if (!this.sizes) {
      oversizedImage = this.width > FIXED_SRCSET_WIDTH_LIMIT || this.height > FIXED_SRCSET_HEIGHT_LIMIT;
    }
    return !this.disableOptimizedSrcset && !this.srcset && this.imageLoader !== noopImageLoader && !oversizedImage;
  }
  /** @nodoc */
  ngOnDestroy() {
    if (ngDevMode) {
      if (!this.priority && this._renderedSrc !== null && this.lcpObserver !== null) {
        this.lcpObserver.unregisterImage(this._renderedSrc);
      }
    }
  }
  setHostAttribute(name, value) {
    this.renderer.setAttribute(this.imgElement, name, value);
  }
};
_NgOptimizedImage.\u0275fac = function NgOptimizedImage_Factory(t) {
  return new (t || _NgOptimizedImage)();
};
_NgOptimizedImage.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _NgOptimizedImage,
  selectors: [["img", "ngSrc", ""]],
  hostVars: 8,
  hostBindings: function NgOptimizedImage_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275styleProp("position", ctx.fill ? "absolute" : null)("width", ctx.fill ? "100%" : null)("height", ctx.fill ? "100%" : null)("inset", ctx.fill ? "0px" : null);
    }
  },
  inputs: {
    ngSrc: ["ngSrc", "ngSrc", unwrapSafeUrl],
    ngSrcset: "ngSrcset",
    sizes: "sizes",
    width: ["width", "width", numberAttribute],
    height: ["height", "height", numberAttribute],
    loading: "loading",
    priority: ["priority", "priority", booleanAttribute],
    loaderParams: "loaderParams",
    disableOptimizedSrcset: ["disableOptimizedSrcset", "disableOptimizedSrcset", booleanAttribute],
    fill: ["fill", "fill", booleanAttribute],
    src: "src",
    srcset: "srcset"
  },
  standalone: true,
  features: [\u0275\u0275InputTransformsFeature, \u0275\u0275NgOnChangesFeature]
});
var NgOptimizedImage = _NgOptimizedImage;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NgOptimizedImage, [{
    type: Directive,
    args: [{
      standalone: true,
      selector: "img[ngSrc]",
      host: {
        "[style.position]": 'fill ? "absolute" : null',
        "[style.width]": 'fill ? "100%" : null',
        "[style.height]": 'fill ? "100%" : null',
        "[style.inset]": 'fill ? "0px" : null'
      }
    }]
  }], null, {
    ngSrc: [{
      type: Input,
      args: [{
        required: true,
        transform: unwrapSafeUrl
      }]
    }],
    ngSrcset: [{
      type: Input
    }],
    sizes: [{
      type: Input
    }],
    width: [{
      type: Input,
      args: [{
        transform: numberAttribute
      }]
    }],
    height: [{
      type: Input,
      args: [{
        transform: numberAttribute
      }]
    }],
    loading: [{
      type: Input
    }],
    priority: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    loaderParams: [{
      type: Input
    }],
    disableOptimizedSrcset: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    fill: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    src: [{
      type: Input
    }],
    srcset: [{
      type: Input
    }]
  });
})();
function processConfig(config2) {
  let sortedBreakpoints = {};
  if (config2.breakpoints) {
    sortedBreakpoints.breakpoints = config2.breakpoints.sort((a, b) => a - b);
  }
  return Object.assign({}, IMAGE_CONFIG_DEFAULTS, config2, sortedBreakpoints);
}
function assertNoConflictingSrc(dir) {
  if (dir.src) {
    throw new RuntimeError(2950, `${imgDirectiveDetails(dir.ngSrc)} both \`src\` and \`ngSrc\` have been set. Supplying both of these attributes breaks lazy loading. The NgOptimizedImage directive sets \`src\` itself based on the value of \`ngSrc\`. To fix this, please remove the \`src\` attribute.`);
  }
}
function assertNoConflictingSrcset(dir) {
  if (dir.srcset) {
    throw new RuntimeError(2951, `${imgDirectiveDetails(dir.ngSrc)} both \`srcset\` and \`ngSrcset\` have been set. Supplying both of these attributes breaks lazy loading. The NgOptimizedImage directive sets \`srcset\` itself based on the value of \`ngSrcset\`. To fix this, please remove the \`srcset\` attribute.`);
  }
}
function assertNotBase64Image(dir) {
  let ngSrc = dir.ngSrc.trim();
  if (ngSrc.startsWith("data:")) {
    if (ngSrc.length > BASE64_IMG_MAX_LENGTH_IN_ERROR) {
      ngSrc = ngSrc.substring(0, BASE64_IMG_MAX_LENGTH_IN_ERROR) + "...";
    }
    throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc, false)} \`ngSrc\` is a Base64-encoded string (${ngSrc}). NgOptimizedImage does not support Base64-encoded strings. To fix this, disable the NgOptimizedImage directive for this element by removing \`ngSrc\` and using a standard \`src\` attribute instead.`);
  }
}
function assertNoComplexSizes(dir) {
  let sizes = dir.sizes;
  if (sizes?.match(/((\)|,)\s|^)\d+px/)) {
    throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc, false)} \`sizes\` was set to a string including pixel values. For automatic \`srcset\` generation, \`sizes\` must only include responsive values, such as \`sizes="50vw"\` or \`sizes="(min-width: 768px) 50vw, 100vw"\`. To fix this, modify the \`sizes\` attribute, or provide your own \`ngSrcset\` value directly.`);
  }
}
function assertNotBlobUrl(dir) {
  const ngSrc = dir.ngSrc.trim();
  if (ngSrc.startsWith("blob:")) {
    throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} \`ngSrc\` was set to a blob URL (${ngSrc}). Blob URLs are not supported by the NgOptimizedImage directive. To fix this, disable the NgOptimizedImage directive for this element by removing \`ngSrc\` and using a regular \`src\` attribute instead.`);
  }
}
function assertNonEmptyInput(dir, name, value) {
  const isString = typeof value === "string";
  const isEmptyString = isString && value.trim() === "";
  if (!isString || isEmptyString) {
    throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} \`${name}\` has an invalid value (\`${value}\`). To fix this, change the value to a non-empty string.`);
  }
}
function assertValidNgSrcset(dir, value) {
  if (value == null)
    return;
  assertNonEmptyInput(dir, "ngSrcset", value);
  const stringVal = value;
  const isValidWidthDescriptor = VALID_WIDTH_DESCRIPTOR_SRCSET.test(stringVal);
  const isValidDensityDescriptor = VALID_DENSITY_DESCRIPTOR_SRCSET.test(stringVal);
  if (isValidDensityDescriptor) {
    assertUnderDensityCap(dir, stringVal);
  }
  const isValidSrcset = isValidWidthDescriptor || isValidDensityDescriptor;
  if (!isValidSrcset) {
    throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} \`ngSrcset\` has an invalid value (\`${value}\`). To fix this, supply \`ngSrcset\` using a comma-separated list of one or more width descriptors (e.g. "100w, 200w") or density descriptors (e.g. "1x, 2x").`);
  }
}
function assertUnderDensityCap(dir, value) {
  const underDensityCap = value.split(",").every((num) => num === "" || parseFloat(num) <= ABSOLUTE_SRCSET_DENSITY_CAP);
  if (!underDensityCap) {
    throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} the \`ngSrcset\` contains an unsupported image density:\`${value}\`. NgOptimizedImage generally recommends a max image density of ${RECOMMENDED_SRCSET_DENSITY_CAP}x but supports image densities up to ${ABSOLUTE_SRCSET_DENSITY_CAP}x. The human eye cannot distinguish between image densities greater than ${RECOMMENDED_SRCSET_DENSITY_CAP}x - which makes them unnecessary for most use cases. Images that will be pinch-zoomed are typically the primary use case for ${ABSOLUTE_SRCSET_DENSITY_CAP}x images. Please remove the high density descriptor and try again.`);
  }
}
function postInitInputChangeError(dir, inputName) {
  let reason;
  if (inputName === "width" || inputName === "height") {
    reason = `Changing \`${inputName}\` may result in different attribute value applied to the underlying image element and cause layout shifts on a page.`;
  } else {
    reason = `Changing the \`${inputName}\` would have no effect on the underlying image element, because the resource loading has already occurred.`;
  }
  return new RuntimeError(2953, `${imgDirectiveDetails(dir.ngSrc)} \`${inputName}\` was updated after initialization. The NgOptimizedImage directive will not react to this input change. ${reason} To fix this, either switch \`${inputName}\` to a static value or wrap the image element in an *ngIf that is gated on the necessary value.`);
}
function assertNoPostInitInputChange(dir, changes, inputs) {
  inputs.forEach((input) => {
    const isUpdated = changes.hasOwnProperty(input);
    if (isUpdated && !changes[input].isFirstChange()) {
      if (input === "ngSrc") {
        dir = {
          ngSrc: changes[input].previousValue
        };
      }
      throw postInitInputChangeError(dir, input);
    }
  });
}
function assertGreaterThanZero(dir, inputValue, inputName) {
  const validNumber = typeof inputValue === "number" && inputValue > 0;
  const validString = typeof inputValue === "string" && /^\d+$/.test(inputValue.trim()) && parseInt(inputValue) > 0;
  if (!validNumber && !validString) {
    throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} \`${inputName}\` has an invalid value. To fix this, provide \`${inputName}\` as a number greater than 0.`);
  }
}
function assertNoImageDistortion(dir, img, renderer) {
  const removeLoadListenerFn = renderer.listen(img, "load", () => {
    removeLoadListenerFn();
    removeErrorListenerFn();
    const computedStyle = window.getComputedStyle(img);
    let renderedWidth = parseFloat(computedStyle.getPropertyValue("width"));
    let renderedHeight = parseFloat(computedStyle.getPropertyValue("height"));
    const boxSizing = computedStyle.getPropertyValue("box-sizing");
    if (boxSizing === "border-box") {
      const paddingTop = computedStyle.getPropertyValue("padding-top");
      const paddingRight = computedStyle.getPropertyValue("padding-right");
      const paddingBottom = computedStyle.getPropertyValue("padding-bottom");
      const paddingLeft = computedStyle.getPropertyValue("padding-left");
      renderedWidth -= parseFloat(paddingRight) + parseFloat(paddingLeft);
      renderedHeight -= parseFloat(paddingTop) + parseFloat(paddingBottom);
    }
    const renderedAspectRatio = renderedWidth / renderedHeight;
    const nonZeroRenderedDimensions = renderedWidth !== 0 && renderedHeight !== 0;
    const intrinsicWidth = img.naturalWidth;
    const intrinsicHeight = img.naturalHeight;
    const intrinsicAspectRatio = intrinsicWidth / intrinsicHeight;
    const suppliedWidth = dir.width;
    const suppliedHeight = dir.height;
    const suppliedAspectRatio = suppliedWidth / suppliedHeight;
    const inaccurateDimensions = Math.abs(suppliedAspectRatio - intrinsicAspectRatio) > ASPECT_RATIO_TOLERANCE;
    const stylingDistortion = nonZeroRenderedDimensions && Math.abs(intrinsicAspectRatio - renderedAspectRatio) > ASPECT_RATIO_TOLERANCE;
    if (inaccurateDimensions) {
      console.warn(formatRuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} the aspect ratio of the image does not match the aspect ratio indicated by the width and height attributes. 
Intrinsic image size: ${intrinsicWidth}w x ${intrinsicHeight}h (aspect-ratio: ${round(intrinsicAspectRatio)}). 
Supplied width and height attributes: ${suppliedWidth}w x ${suppliedHeight}h (aspect-ratio: ${round(suppliedAspectRatio)}). 
To fix this, update the width and height attributes.`));
    } else if (stylingDistortion) {
      console.warn(formatRuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} the aspect ratio of the rendered image does not match the image's intrinsic aspect ratio. 
Intrinsic image size: ${intrinsicWidth}w x ${intrinsicHeight}h (aspect-ratio: ${round(intrinsicAspectRatio)}). 
Rendered image size: ${renderedWidth}w x ${renderedHeight}h (aspect-ratio: ${round(renderedAspectRatio)}). 
This issue can occur if "width" and "height" attributes are added to an image without updating the corresponding image styling. To fix this, adjust image styling. In most cases, adding "height: auto" or "width: auto" to the image styling will fix this issue.`));
    } else if (!dir.ngSrcset && nonZeroRenderedDimensions) {
      const recommendedWidth = RECOMMENDED_SRCSET_DENSITY_CAP * renderedWidth;
      const recommendedHeight = RECOMMENDED_SRCSET_DENSITY_CAP * renderedHeight;
      const oversizedWidth = intrinsicWidth - recommendedWidth >= OVERSIZED_IMAGE_TOLERANCE2;
      const oversizedHeight = intrinsicHeight - recommendedHeight >= OVERSIZED_IMAGE_TOLERANCE2;
      if (oversizedWidth || oversizedHeight) {
        console.warn(formatRuntimeError(2960, `${imgDirectiveDetails(dir.ngSrc)} the intrinsic image is significantly larger than necessary. 
Rendered image size: ${renderedWidth}w x ${renderedHeight}h. 
Intrinsic image size: ${intrinsicWidth}w x ${intrinsicHeight}h. 
Recommended intrinsic image size: ${recommendedWidth}w x ${recommendedHeight}h. 
Note: Recommended intrinsic image size is calculated assuming a maximum DPR of ${RECOMMENDED_SRCSET_DENSITY_CAP}. To improve loading time, resize the image or consider using the "ngSrcset" and "sizes" attributes.`));
      }
    }
  });
  const removeErrorListenerFn = renderer.listen(img, "error", () => {
    removeLoadListenerFn();
    removeErrorListenerFn();
  });
}
function assertNonEmptyWidthAndHeight(dir) {
  let missingAttributes = [];
  if (dir.width === void 0)
    missingAttributes.push("width");
  if (dir.height === void 0)
    missingAttributes.push("height");
  if (missingAttributes.length > 0) {
    throw new RuntimeError(2954, `${imgDirectiveDetails(dir.ngSrc)} these required attributes are missing: ${missingAttributes.map((attr) => `"${attr}"`).join(", ")}. Including "width" and "height" attributes will prevent image-related layout shifts. To fix this, include "width" and "height" attributes on the image tag or turn on "fill" mode with the \`fill\` attribute.`);
  }
}
function assertEmptyWidthAndHeight(dir) {
  if (dir.width || dir.height) {
    throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} the attributes \`height\` and/or \`width\` are present along with the \`fill\` attribute. Because \`fill\` mode causes an image to fill its containing element, the size attributes have no effect and should be removed.`);
  }
}
function assertNonZeroRenderedHeight(dir, img, renderer) {
  const removeLoadListenerFn = renderer.listen(img, "load", () => {
    removeLoadListenerFn();
    removeErrorListenerFn();
    const renderedHeight = img.clientHeight;
    if (dir.fill && renderedHeight === 0) {
      console.warn(formatRuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} the height of the fill-mode image is zero. This is likely because the containing element does not have the CSS 'position' property set to one of the following: "relative", "fixed", or "absolute". To fix this problem, make sure the container element has the CSS 'position' property defined and the height of the element is not zero.`));
    }
  });
  const removeErrorListenerFn = renderer.listen(img, "error", () => {
    removeLoadListenerFn();
    removeErrorListenerFn();
  });
}
function assertValidLoadingInput(dir) {
  if (dir.loading && dir.priority) {
    throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} the \`loading\` attribute was used on an image that was marked "priority". Setting \`loading\` on priority images is not allowed because these images will always be eagerly loaded. To fix this, remove the \u201Cloading\u201D attribute from the priority image.`);
  }
  const validInputs = ["auto", "eager", "lazy"];
  if (typeof dir.loading === "string" && !validInputs.includes(dir.loading)) {
    throw new RuntimeError(2952, `${imgDirectiveDetails(dir.ngSrc)} the \`loading\` attribute has an invalid value (\`${dir.loading}\`). To fix this, provide a valid value ("lazy", "eager", or "auto").`);
  }
}
function assertNotMissingBuiltInLoader(ngSrc, imageLoader) {
  if (imageLoader === noopImageLoader) {
    let builtInLoaderName = "";
    for (const loader of BUILT_IN_LOADERS) {
      if (loader.testUrl(ngSrc)) {
        builtInLoaderName = loader.name;
        break;
      }
    }
    if (builtInLoaderName) {
      console.warn(formatRuntimeError(2962, `NgOptimizedImage: It looks like your images may be hosted on the ${builtInLoaderName} CDN, but your app is not using Angular's built-in loader for that CDN. We recommend switching to use the built-in by calling \`provide${builtInLoaderName}Loader()\` in your \`providers\` and passing it your instance's base URL. If you don't want to use the built-in loader, define a custom loader function using IMAGE_LOADER to silence this warning.`));
    }
  }
}
function assertNoNgSrcsetWithoutLoader(dir, imageLoader) {
  if (dir.ngSrcset && imageLoader === noopImageLoader) {
    console.warn(formatRuntimeError(2963, `${imgDirectiveDetails(dir.ngSrc)} the \`ngSrcset\` attribute is present but no image loader is configured (i.e. the default one is being used), which would result in the same image being used for all configured sizes. To fix this, provide a loader or remove the \`ngSrcset\` attribute from the image.`));
  }
}
function assertNoLoaderParamsWithoutLoader(dir, imageLoader) {
  if (dir.loaderParams && imageLoader === noopImageLoader) {
    console.warn(formatRuntimeError(2963, `${imgDirectiveDetails(dir.ngSrc)} the \`loaderParams\` attribute is present but no image loader is configured (i.e. the default one is being used), which means that the loaderParams data will not be consumed and will not affect the URL. To fix this, provide a custom loader or remove the \`loaderParams\` attribute from the image.`));
  }
}
function round(input) {
  return Number.isInteger(input) ? input : input.toFixed(2);
}
function unwrapSafeUrl(value) {
  if (typeof value === "string") {
    return value;
  }
  return unwrapSafeValue(value);
}

// node_modules/@angular/common/fesm2022/http.mjs
var HttpHandler = class {
};
var HttpBackend = class {
};
var HttpHeaders = class _HttpHeaders {
  /**  Constructs a new HTTP header object with the given values.*/
  constructor(headers) {
    this.normalizedNames = /* @__PURE__ */ new Map();
    this.lazyUpdate = null;
    if (!headers) {
      this.headers = /* @__PURE__ */ new Map();
    } else if (typeof headers === "string") {
      this.lazyInit = () => {
        this.headers = /* @__PURE__ */ new Map();
        headers.split("\n").forEach((line) => {
          const index = line.indexOf(":");
          if (index > 0) {
            const name = line.slice(0, index);
            const key = name.toLowerCase();
            const value = line.slice(index + 1).trim();
            this.maybeSetNormalizedName(name, key);
            if (this.headers.has(key)) {
              this.headers.get(key).push(value);
            } else {
              this.headers.set(key, [value]);
            }
          }
        });
      };
    } else if (typeof Headers !== "undefined" && headers instanceof Headers) {
      this.headers = /* @__PURE__ */ new Map();
      headers.forEach((values, name) => {
        this.setHeaderEntries(name, values);
      });
    } else {
      this.lazyInit = () => {
        if (typeof ngDevMode === "undefined" || ngDevMode) {
          assertValidHeaders(headers);
        }
        this.headers = /* @__PURE__ */ new Map();
        Object.entries(headers).forEach(([name, values]) => {
          this.setHeaderEntries(name, values);
        });
      };
    }
  }
  /**
   * Checks for existence of a given header.
   *
   * @param name The header name to check for existence.
   *
   * @returns True if the header exists, false otherwise.
   */
  has(name) {
    this.init();
    return this.headers.has(name.toLowerCase());
  }
  /**
   * Retrieves the first value of a given header.
   *
   * @param name The header name.
   *
   * @returns The value string if the header exists, null otherwise
   */
  get(name) {
    this.init();
    const values = this.headers.get(name.toLowerCase());
    return values && values.length > 0 ? values[0] : null;
  }
  /**
   * Retrieves the names of the headers.
   *
   * @returns A list of header names.
   */
  keys() {
    this.init();
    return Array.from(this.normalizedNames.values());
  }
  /**
   * Retrieves a list of values for a given header.
   *
   * @param name The header name from which to retrieve values.
   *
   * @returns A string of values if the header exists, null otherwise.
   */
  getAll(name) {
    this.init();
    return this.headers.get(name.toLowerCase()) || null;
  }
  /**
   * Appends a new value to the existing set of values for a header
   * and returns them in a clone of the original instance.
   *
   * @param name The header name for which to append the values.
   * @param value The value to append.
   *
   * @returns A clone of the HTTP headers object with the value appended to the given header.
   */
  append(name, value) {
    return this.clone({
      name,
      value,
      op: "a"
    });
  }
  /**
   * Sets or modifies a value for a given header in a clone of the original instance.
   * If the header already exists, its value is replaced with the given value
   * in the returned object.
   *
   * @param name The header name.
   * @param value The value or values to set or override for the given header.
   *
   * @returns A clone of the HTTP headers object with the newly set header value.
   */
  set(name, value) {
    return this.clone({
      name,
      value,
      op: "s"
    });
  }
  /**
   * Deletes values for a given header in a clone of the original instance.
   *
   * @param name The header name.
   * @param value The value or values to delete for the given header.
   *
   * @returns A clone of the HTTP headers object with the given value deleted.
   */
  delete(name, value) {
    return this.clone({
      name,
      value,
      op: "d"
    });
  }
  maybeSetNormalizedName(name, lcName) {
    if (!this.normalizedNames.has(lcName)) {
      this.normalizedNames.set(lcName, name);
    }
  }
  init() {
    if (!!this.lazyInit) {
      if (this.lazyInit instanceof _HttpHeaders) {
        this.copyFrom(this.lazyInit);
      } else {
        this.lazyInit();
      }
      this.lazyInit = null;
      if (!!this.lazyUpdate) {
        this.lazyUpdate.forEach((update) => this.applyUpdate(update));
        this.lazyUpdate = null;
      }
    }
  }
  copyFrom(other) {
    other.init();
    Array.from(other.headers.keys()).forEach((key) => {
      this.headers.set(key, other.headers.get(key));
      this.normalizedNames.set(key, other.normalizedNames.get(key));
    });
  }
  clone(update) {
    const clone = new _HttpHeaders();
    clone.lazyInit = !!this.lazyInit && this.lazyInit instanceof _HttpHeaders ? this.lazyInit : this;
    clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);
    return clone;
  }
  applyUpdate(update) {
    const key = update.name.toLowerCase();
    switch (update.op) {
      case "a":
      case "s":
        let value = update.value;
        if (typeof value === "string") {
          value = [value];
        }
        if (value.length === 0) {
          return;
        }
        this.maybeSetNormalizedName(update.name, key);
        const base = (update.op === "a" ? this.headers.get(key) : void 0) || [];
        base.push(...value);
        this.headers.set(key, base);
        break;
      case "d":
        const toDelete = update.value;
        if (!toDelete) {
          this.headers.delete(key);
          this.normalizedNames.delete(key);
        } else {
          let existing = this.headers.get(key);
          if (!existing) {
            return;
          }
          existing = existing.filter((value2) => toDelete.indexOf(value2) === -1);
          if (existing.length === 0) {
            this.headers.delete(key);
            this.normalizedNames.delete(key);
          } else {
            this.headers.set(key, existing);
          }
        }
        break;
    }
  }
  setHeaderEntries(name, values) {
    const headerValues = (Array.isArray(values) ? values : [values]).map((value) => value.toString());
    const key = name.toLowerCase();
    this.headers.set(key, headerValues);
    this.maybeSetNormalizedName(name, key);
  }
  /**
   * @internal
   */
  forEach(fn) {
    this.init();
    Array.from(this.normalizedNames.keys()).forEach((key) => fn(this.normalizedNames.get(key), this.headers.get(key)));
  }
};
function assertValidHeaders(headers) {
  for (const [key, value] of Object.entries(headers)) {
    if (!(typeof value === "string" || typeof value === "number") && !Array.isArray(value)) {
      throw new Error(`Unexpected value of the \`${key}\` header provided. Expecting either a string, a number or an array, but got: \`${value}\`.`);
    }
  }
}
var HttpUrlEncodingCodec = class {
  /**
   * Encodes a key name for a URL parameter or query-string.
   * @param key The key name.
   * @returns The encoded key name.
   */
  encodeKey(key) {
    return standardEncoding(key);
  }
  /**
   * Encodes the value of a URL parameter or query-string.
   * @param value The value.
   * @returns The encoded value.
   */
  encodeValue(value) {
    return standardEncoding(value);
  }
  /**
   * Decodes an encoded URL parameter or query-string key.
   * @param key The encoded key name.
   * @returns The decoded key name.
   */
  decodeKey(key) {
    return decodeURIComponent(key);
  }
  /**
   * Decodes an encoded URL parameter or query-string value.
   * @param value The encoded value.
   * @returns The decoded value.
   */
  decodeValue(value) {
    return decodeURIComponent(value);
  }
};
function paramParser(rawParams, codec) {
  const map2 = /* @__PURE__ */ new Map();
  if (rawParams.length > 0) {
    const params = rawParams.replace(/^\?/, "").split("&");
    params.forEach((param) => {
      const eqIdx = param.indexOf("=");
      const [key, val] = eqIdx == -1 ? [codec.decodeKey(param), ""] : [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];
      const list = map2.get(key) || [];
      list.push(val);
      map2.set(key, list);
    });
  }
  return map2;
}
var STANDARD_ENCODING_REGEX = /%(\d[a-f0-9])/gi;
var STANDARD_ENCODING_REPLACEMENTS = {
  "40": "@",
  "3A": ":",
  "24": "$",
  "2C": ",",
  "3B": ";",
  "3D": "=",
  "3F": "?",
  "2F": "/"
};
function standardEncoding(v) {
  return encodeURIComponent(v).replace(STANDARD_ENCODING_REGEX, (s, t) => STANDARD_ENCODING_REPLACEMENTS[t] ?? s);
}
function valueToString(value) {
  return `${value}`;
}
var HttpParams = class _HttpParams {
  constructor(options = {}) {
    this.updates = null;
    this.cloneFrom = null;
    this.encoder = options.encoder || new HttpUrlEncodingCodec();
    if (!!options.fromString) {
      if (!!options.fromObject) {
        throw new Error(`Cannot specify both fromString and fromObject.`);
      }
      this.map = paramParser(options.fromString, this.encoder);
    } else if (!!options.fromObject) {
      this.map = /* @__PURE__ */ new Map();
      Object.keys(options.fromObject).forEach((key) => {
        const value = options.fromObject[key];
        const values = Array.isArray(value) ? value.map(valueToString) : [valueToString(value)];
        this.map.set(key, values);
      });
    } else {
      this.map = null;
    }
  }
  /**
   * Reports whether the body includes one or more values for a given parameter.
   * @param param The parameter name.
   * @returns True if the parameter has one or more values,
   * false if it has no value or is not present.
   */
  has(param) {
    this.init();
    return this.map.has(param);
  }
  /**
   * Retrieves the first value for a parameter.
   * @param param The parameter name.
   * @returns The first value of the given parameter,
   * or `null` if the parameter is not present.
   */
  get(param) {
    this.init();
    const res = this.map.get(param);
    return !!res ? res[0] : null;
  }
  /**
   * Retrieves all values for a  parameter.
   * @param param The parameter name.
   * @returns All values in a string array,
   * or `null` if the parameter not present.
   */
  getAll(param) {
    this.init();
    return this.map.get(param) || null;
  }
  /**
   * Retrieves all the parameters for this body.
   * @returns The parameter names in a string array.
   */
  keys() {
    this.init();
    return Array.from(this.map.keys());
  }
  /**
   * Appends a new value to existing values for a parameter.
   * @param param The parameter name.
   * @param value The new value to add.
   * @return A new body with the appended value.
   */
  append(param, value) {
    return this.clone({
      param,
      value,
      op: "a"
    });
  }
  /**
   * Constructs a new body with appended values for the given parameter name.
   * @param params parameters and values
   * @return A new body with the new value.
   */
  appendAll(params) {
    const updates = [];
    Object.keys(params).forEach((param) => {
      const value = params[param];
      if (Array.isArray(value)) {
        value.forEach((_value) => {
          updates.push({
            param,
            value: _value,
            op: "a"
          });
        });
      } else {
        updates.push({
          param,
          value,
          op: "a"
        });
      }
    });
    return this.clone(updates);
  }
  /**
   * Replaces the value for a parameter.
   * @param param The parameter name.
   * @param value The new value.
   * @return A new body with the new value.
   */
  set(param, value) {
    return this.clone({
      param,
      value,
      op: "s"
    });
  }
  /**
   * Removes a given value or all values from a parameter.
   * @param param The parameter name.
   * @param value The value to remove, if provided.
   * @return A new body with the given value removed, or with all values
   * removed if no value is specified.
   */
  delete(param, value) {
    return this.clone({
      param,
      value,
      op: "d"
    });
  }
  /**
   * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are
   * separated by `&`s.
   */
  toString() {
    this.init();
    return this.keys().map((key) => {
      const eKey = this.encoder.encodeKey(key);
      return this.map.get(key).map((value) => eKey + "=" + this.encoder.encodeValue(value)).join("&");
    }).filter((param) => param !== "").join("&");
  }
  clone(update) {
    const clone = new _HttpParams({
      encoder: this.encoder
    });
    clone.cloneFrom = this.cloneFrom || this;
    clone.updates = (this.updates || []).concat(update);
    return clone;
  }
  init() {
    if (this.map === null) {
      this.map = /* @__PURE__ */ new Map();
    }
    if (this.cloneFrom !== null) {
      this.cloneFrom.init();
      this.cloneFrom.keys().forEach((key) => this.map.set(key, this.cloneFrom.map.get(key)));
      this.updates.forEach((update) => {
        switch (update.op) {
          case "a":
          case "s":
            const base = (update.op === "a" ? this.map.get(update.param) : void 0) || [];
            base.push(valueToString(update.value));
            this.map.set(update.param, base);
            break;
          case "d":
            if (update.value !== void 0) {
              let base2 = this.map.get(update.param) || [];
              const idx = base2.indexOf(valueToString(update.value));
              if (idx !== -1) {
                base2.splice(idx, 1);
              }
              if (base2.length > 0) {
                this.map.set(update.param, base2);
              } else {
                this.map.delete(update.param);
              }
            } else {
              this.map.delete(update.param);
              break;
            }
        }
      });
      this.cloneFrom = this.updates = null;
    }
  }
};
var HttpContext = class {
  constructor() {
    this.map = /* @__PURE__ */ new Map();
  }
  /**
   * Store a value in the context. If a value is already present it will be overwritten.
   *
   * @param token The reference to an instance of `HttpContextToken`.
   * @param value The value to store.
   *
   * @returns A reference to itself for easy chaining.
   */
  set(token, value) {
    this.map.set(token, value);
    return this;
  }
  /**
   * Retrieve the value associated with the given token.
   *
   * @param token The reference to an instance of `HttpContextToken`.
   *
   * @returns The stored value or default if one is defined.
   */
  get(token) {
    if (!this.map.has(token)) {
      this.map.set(token, token.defaultValue());
    }
    return this.map.get(token);
  }
  /**
   * Delete the value associated with the given token.
   *
   * @param token The reference to an instance of `HttpContextToken`.
   *
   * @returns A reference to itself for easy chaining.
   */
  delete(token) {
    this.map.delete(token);
    return this;
  }
  /**
   * Checks for existence of a given token.
   *
   * @param token The reference to an instance of `HttpContextToken`.
   *
   * @returns True if the token exists, false otherwise.
   */
  has(token) {
    return this.map.has(token);
  }
  /**
   * @returns a list of tokens currently stored in the context.
   */
  keys() {
    return this.map.keys();
  }
};
function mightHaveBody(method) {
  switch (method) {
    case "DELETE":
    case "GET":
    case "HEAD":
    case "OPTIONS":
    case "JSONP":
      return false;
    default:
      return true;
  }
}
function isArrayBuffer(value) {
  return typeof ArrayBuffer !== "undefined" && value instanceof ArrayBuffer;
}
function isBlob(value) {
  return typeof Blob !== "undefined" && value instanceof Blob;
}
function isFormData(value) {
  return typeof FormData !== "undefined" && value instanceof FormData;
}
function isUrlSearchParams(value) {
  return typeof URLSearchParams !== "undefined" && value instanceof URLSearchParams;
}
var HttpRequest = class _HttpRequest {
  constructor(method, url, third, fourth) {
    this.url = url;
    this.body = null;
    this.reportProgress = false;
    this.withCredentials = false;
    this.responseType = "json";
    this.method = method.toUpperCase();
    let options;
    if (mightHaveBody(this.method) || !!fourth) {
      this.body = third !== void 0 ? third : null;
      options = fourth;
    } else {
      options = third;
    }
    if (options) {
      this.reportProgress = !!options.reportProgress;
      this.withCredentials = !!options.withCredentials;
      if (!!options.responseType) {
        this.responseType = options.responseType;
      }
      if (!!options.headers) {
        this.headers = options.headers;
      }
      if (!!options.context) {
        this.context = options.context;
      }
      if (!!options.params) {
        this.params = options.params;
      }
      this.transferCache = options.transferCache;
    }
    if (!this.headers) {
      this.headers = new HttpHeaders();
    }
    if (!this.context) {
      this.context = new HttpContext();
    }
    if (!this.params) {
      this.params = new HttpParams();
      this.urlWithParams = url;
    } else {
      const params = this.params.toString();
      if (params.length === 0) {
        this.urlWithParams = url;
      } else {
        const qIdx = url.indexOf("?");
        const sep = qIdx === -1 ? "?" : qIdx < url.length - 1 ? "&" : "";
        this.urlWithParams = url + sep + params;
      }
    }
  }
  /**
   * Transform the free-form body into a serialized format suitable for
   * transmission to the server.
   */
  serializeBody() {
    if (this.body === null) {
      return null;
    }
    if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) || isUrlSearchParams(this.body) || typeof this.body === "string") {
      return this.body;
    }
    if (this.body instanceof HttpParams) {
      return this.body.toString();
    }
    if (typeof this.body === "object" || typeof this.body === "boolean" || Array.isArray(this.body)) {
      return JSON.stringify(this.body);
    }
    return this.body.toString();
  }
  /**
   * Examine the body and attempt to infer an appropriate MIME type
   * for it.
   *
   * If no such type can be inferred, this method will return `null`.
   */
  detectContentTypeHeader() {
    if (this.body === null) {
      return null;
    }
    if (isFormData(this.body)) {
      return null;
    }
    if (isBlob(this.body)) {
      return this.body.type || null;
    }
    if (isArrayBuffer(this.body)) {
      return null;
    }
    if (typeof this.body === "string") {
      return "text/plain";
    }
    if (this.body instanceof HttpParams) {
      return "application/x-www-form-urlencoded;charset=UTF-8";
    }
    if (typeof this.body === "object" || typeof this.body === "number" || typeof this.body === "boolean") {
      return "application/json";
    }
    return null;
  }
  clone(update = {}) {
    const method = update.method || this.method;
    const url = update.url || this.url;
    const responseType = update.responseType || this.responseType;
    const body = update.body !== void 0 ? update.body : this.body;
    const withCredentials = update.withCredentials !== void 0 ? update.withCredentials : this.withCredentials;
    const reportProgress = update.reportProgress !== void 0 ? update.reportProgress : this.reportProgress;
    let headers = update.headers || this.headers;
    let params = update.params || this.params;
    const context2 = update.context ?? this.context;
    if (update.setHeaders !== void 0) {
      headers = Object.keys(update.setHeaders).reduce((headers2, name) => headers2.set(name, update.setHeaders[name]), headers);
    }
    if (update.setParams) {
      params = Object.keys(update.setParams).reduce((params2, param) => params2.set(param, update.setParams[param]), params);
    }
    return new _HttpRequest(method, url, body, {
      params,
      headers,
      context: context2,
      reportProgress,
      responseType,
      withCredentials
    });
  }
};
var HttpEventType;
(function(HttpEventType2) {
  HttpEventType2[HttpEventType2["Sent"] = 0] = "Sent";
  HttpEventType2[HttpEventType2["UploadProgress"] = 1] = "UploadProgress";
  HttpEventType2[HttpEventType2["ResponseHeader"] = 2] = "ResponseHeader";
  HttpEventType2[HttpEventType2["DownloadProgress"] = 3] = "DownloadProgress";
  HttpEventType2[HttpEventType2["Response"] = 4] = "Response";
  HttpEventType2[HttpEventType2["User"] = 5] = "User";
})(HttpEventType || (HttpEventType = {}));
var HttpResponseBase = class {
  /**
   * Super-constructor for all responses.
   *
   * The single parameter accepted is an initialization hash. Any properties
   * of the response passed there will override the default values.
   */
  constructor(init, defaultStatus = 200, defaultStatusText = "OK") {
    this.headers = init.headers || new HttpHeaders();
    this.status = init.status !== void 0 ? init.status : defaultStatus;
    this.statusText = init.statusText || defaultStatusText;
    this.url = init.url || null;
    this.ok = this.status >= 200 && this.status < 300;
  }
};
var HttpHeaderResponse = class _HttpHeaderResponse extends HttpResponseBase {
  /**
   * Create a new `HttpHeaderResponse` with the given parameters.
   */
  constructor(init = {}) {
    super(init);
    this.type = HttpEventType.ResponseHeader;
  }
  /**
   * Copy this `HttpHeaderResponse`, overriding its contents with the
   * given parameter hash.
   */
  clone(update = {}) {
    return new _HttpHeaderResponse({
      headers: update.headers || this.headers,
      status: update.status !== void 0 ? update.status : this.status,
      statusText: update.statusText || this.statusText,
      url: update.url || this.url || void 0
    });
  }
};
var HttpResponse = class _HttpResponse extends HttpResponseBase {
  /**
   * Construct a new `HttpResponse`.
   */
  constructor(init = {}) {
    super(init);
    this.type = HttpEventType.Response;
    this.body = init.body !== void 0 ? init.body : null;
  }
  clone(update = {}) {
    return new _HttpResponse({
      body: update.body !== void 0 ? update.body : this.body,
      headers: update.headers || this.headers,
      status: update.status !== void 0 ? update.status : this.status,
      statusText: update.statusText || this.statusText,
      url: update.url || this.url || void 0
    });
  }
};
var HttpErrorResponse = class extends HttpResponseBase {
  constructor(init) {
    super(init, 0, "Unknown Error");
    this.name = "HttpErrorResponse";
    this.ok = false;
    if (this.status >= 200 && this.status < 300) {
      this.message = `Http failure during parsing for ${init.url || "(unknown url)"}`;
    } else {
      this.message = `Http failure response for ${init.url || "(unknown url)"}: ${init.status} ${init.statusText}`;
    }
    this.error = init.error || null;
  }
};
function addBody(options, body) {
  return {
    body,
    headers: options.headers,
    context: options.context,
    observe: options.observe,
    params: options.params,
    reportProgress: options.reportProgress,
    responseType: options.responseType,
    withCredentials: options.withCredentials,
    transferCache: options.transferCache
  };
}
var _HttpClient = class _HttpClient {
  constructor(handler) {
    this.handler = handler;
  }
  /**
   * Constructs an observable for a generic HTTP request that, when subscribed,
   * fires the request through the chain of registered interceptors and on to the
   * server.
   *
   * You can pass an `HttpRequest` directly as the only parameter. In this case,
   * the call returns an observable of the raw `HttpEvent` stream.
   *
   * Alternatively you can pass an HTTP method as the first parameter,
   * a URL string as the second, and an options hash containing the request body as the third.
   * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the
   * type of returned observable.
   *   * The `responseType` value determines how a successful response body is parsed.
   *   * If `responseType` is the default `json`, you can pass a type interface for the resulting
   * object as a type parameter to the call.
   *
   * The `observe` value determines the return type, according to what you are interested in
   * observing.
   *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including
   * progress events by default.
   *   * An `observe` value of response returns an observable of `HttpResponse<T>`,
   * where the `T` parameter depends on the `responseType` and any optionally provided type
   * parameter.
   *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.
   *
   */
  request(first2, url, options = {}) {
    let req;
    if (first2 instanceof HttpRequest) {
      req = first2;
    } else {
      let headers = void 0;
      if (options.headers instanceof HttpHeaders) {
        headers = options.headers;
      } else {
        headers = new HttpHeaders(options.headers);
      }
      let params = void 0;
      if (!!options.params) {
        if (options.params instanceof HttpParams) {
          params = options.params;
        } else {
          params = new HttpParams({
            fromObject: options.params
          });
        }
      }
      req = new HttpRequest(first2, url, options.body !== void 0 ? options.body : null, {
        headers,
        context: options.context,
        params,
        reportProgress: options.reportProgress,
        // By default, JSON is assumed to be returned for all calls.
        responseType: options.responseType || "json",
        withCredentials: options.withCredentials,
        transferCache: options.transferCache
      });
    }
    const events$ = of(req).pipe(concatMap((req2) => this.handler.handle(req2)));
    if (first2 instanceof HttpRequest || options.observe === "events") {
      return events$;
    }
    const res$ = events$.pipe(filter((event) => event instanceof HttpResponse));
    switch (options.observe || "body") {
      case "body":
        switch (req.responseType) {
          case "arraybuffer":
            return res$.pipe(map((res) => {
              if (res.body !== null && !(res.body instanceof ArrayBuffer)) {
                throw new Error("Response is not an ArrayBuffer.");
              }
              return res.body;
            }));
          case "blob":
            return res$.pipe(map((res) => {
              if (res.body !== null && !(res.body instanceof Blob)) {
                throw new Error("Response is not a Blob.");
              }
              return res.body;
            }));
          case "text":
            return res$.pipe(map((res) => {
              if (res.body !== null && typeof res.body !== "string") {
                throw new Error("Response is not a string.");
              }
              return res.body;
            }));
          case "json":
          default:
            return res$.pipe(map((res) => res.body));
        }
      case "response":
        return res$;
      default:
        throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);
    }
  }
  /**
   * Constructs an observable that, when subscribed, causes the configured
   * `DELETE` request to execute on the server. See the individual overloads for
   * details on the return type.
   *
   * @param url     The endpoint URL.
   * @param options The HTTP options to send with the request.
   *
   */
  delete(url, options = {}) {
    return this.request("DELETE", url, options);
  }
  /**
   * Constructs an observable that, when subscribed, causes the configured
   * `GET` request to execute on the server. See the individual overloads for
   * details on the return type.
   */
  get(url, options = {}) {
    return this.request("GET", url, options);
  }
  /**
   * Constructs an observable that, when subscribed, causes the configured
   * `HEAD` request to execute on the server. The `HEAD` method returns
   * meta information about the resource without transferring the
   * resource itself. See the individual overloads for
   * details on the return type.
   */
  head(url, options = {}) {
    return this.request("HEAD", url, options);
  }
  /**
   * Constructs an `Observable` that, when subscribed, causes a request with the special method
   * `JSONP` to be dispatched via the interceptor pipeline.
   * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain
   * API endpoints that don't support newer,
   * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.
   * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the
   * requests even if the API endpoint is not located on the same domain (origin) as the client-side
   * application making the request.
   * The endpoint API must support JSONP callback for JSONP requests to work.
   * The resource API returns the JSON response wrapped in a callback function.
   * You can pass the callback function name as one of the query parameters.
   * Note that JSONP requests can only be used with `GET` requests.
   *
   * @param url The resource URL.
   * @param callbackParam The callback function name.
   *
   */
  jsonp(url, callbackParam) {
    return this.request("JSONP", url, {
      params: new HttpParams().append(callbackParam, "JSONP_CALLBACK"),
      observe: "body",
      responseType: "json"
    });
  }
  /**
   * Constructs an `Observable` that, when subscribed, causes the configured
   * `OPTIONS` request to execute on the server. This method allows the client
   * to determine the supported HTTP methods and other capabilities of an endpoint,
   * without implying a resource action. See the individual overloads for
   * details on the return type.
   */
  options(url, options = {}) {
    return this.request("OPTIONS", url, options);
  }
  /**
   * Constructs an observable that, when subscribed, causes the configured
   * `PATCH` request to execute on the server. See the individual overloads for
   * details on the return type.
   */
  patch(url, body, options = {}) {
    return this.request("PATCH", url, addBody(options, body));
  }
  /**
   * Constructs an observable that, when subscribed, causes the configured
   * `POST` request to execute on the server. The server responds with the location of
   * the replaced resource. See the individual overloads for
   * details on the return type.
   */
  post(url, body, options = {}) {
    return this.request("POST", url, addBody(options, body));
  }
  /**
   * Constructs an observable that, when subscribed, causes the configured
   * `PUT` request to execute on the server. The `PUT` method replaces an existing resource
   * with a new set of values.
   * See the individual overloads for details on the return type.
   */
  put(url, body, options = {}) {
    return this.request("PUT", url, addBody(options, body));
  }
};
_HttpClient.\u0275fac = function HttpClient_Factory(t) {
  return new (t || _HttpClient)(\u0275\u0275inject(HttpHandler));
};
_HttpClient.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _HttpClient,
  factory: _HttpClient.\u0275fac
});
var HttpClient = _HttpClient;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HttpClient, [{
    type: Injectable
  }], () => [{
    type: HttpHandler
  }], null);
})();
var XSSI_PREFIX$1 = /^\)\]\}',?\n/;
var REQUEST_URL_HEADER = `X-Request-URL`;
function getResponseUrl$1(response) {
  if (response.url) {
    return response.url;
  }
  const xRequestUrl = REQUEST_URL_HEADER.toLocaleLowerCase();
  return response.headers.get(xRequestUrl);
}
var _FetchBackend = class _FetchBackend {
  constructor() {
    this.fetchImpl = inject(FetchFactory, {
      optional: true
    })?.fetch ?? fetch.bind(globalThis);
    this.ngZone = inject(NgZone);
  }
  handle(request) {
    return new Observable((observer) => {
      const aborter = new AbortController();
      this.doRequest(request, aborter.signal, observer).then(noop3, (error) => observer.error(new HttpErrorResponse({
        error
      })));
      return () => aborter.abort();
    });
  }
  doRequest(request, signal, observer) {
    return __async(this, null, function* () {
      const init = this.createRequestInit(request);
      let response;
      try {
        const fetchPromise = this.fetchImpl(request.urlWithParams, __spreadValues({
          signal
        }, init));
        silenceSuperfluousUnhandledPromiseRejection(fetchPromise);
        observer.next({
          type: HttpEventType.Sent
        });
        response = yield fetchPromise;
      } catch (error) {
        observer.error(new HttpErrorResponse({
          error,
          status: error.status ?? 0,
          statusText: error.statusText,
          url: request.urlWithParams,
          headers: error.headers
        }));
        return;
      }
      const headers = new HttpHeaders(response.headers);
      const statusText = response.statusText;
      const url = getResponseUrl$1(response) ?? request.urlWithParams;
      let status = response.status;
      let body = null;
      if (request.reportProgress) {
        observer.next(new HttpHeaderResponse({
          headers,
          status,
          statusText,
          url
        }));
      }
      if (response.body) {
        const contentLength = response.headers.get("content-length");
        const chunks = [];
        const reader = response.body.getReader();
        let receivedLength = 0;
        let decoder;
        let partialText;
        const reqZone = typeof Zone !== "undefined" && Zone.current;
        yield this.ngZone.runOutsideAngular(() => __async(this, null, function* () {
          while (true) {
            const {
              done,
              value
            } = yield reader.read();
            if (done) {
              break;
            }
            chunks.push(value);
            receivedLength += value.length;
            if (request.reportProgress) {
              partialText = request.responseType === "text" ? (partialText ?? "") + (decoder ??= new TextDecoder()).decode(value, {
                stream: true
              }) : void 0;
              const reportProgress = () => observer.next({
                type: HttpEventType.DownloadProgress,
                total: contentLength ? +contentLength : void 0,
                loaded: receivedLength,
                partialText
              });
              reqZone ? reqZone.run(reportProgress) : reportProgress();
            }
          }
        }));
        const chunksAll = this.concatChunks(chunks, receivedLength);
        try {
          const contentType = response.headers.get("Content-Type") ?? "";
          body = this.parseBody(request, chunksAll, contentType);
        } catch (error) {
          observer.error(new HttpErrorResponse({
            error,
            headers: new HttpHeaders(response.headers),
            status: response.status,
            statusText: response.statusText,
            url: getResponseUrl$1(response) ?? request.urlWithParams
          }));
          return;
        }
      }
      if (status === 0) {
        status = body ? 200 : 0;
      }
      const ok = status >= 200 && status < 300;
      if (ok) {
        observer.next(new HttpResponse({
          body,
          headers,
          status,
          statusText,
          url
        }));
        observer.complete();
      } else {
        observer.error(new HttpErrorResponse({
          error: body,
          headers,
          status,
          statusText,
          url
        }));
      }
    });
  }
  parseBody(request, binContent, contentType) {
    switch (request.responseType) {
      case "json":
        const text = new TextDecoder().decode(binContent).replace(XSSI_PREFIX$1, "");
        return text === "" ? null : JSON.parse(text);
      case "text":
        return new TextDecoder().decode(binContent);
      case "blob":
        return new Blob([binContent], {
          type: contentType
        });
      case "arraybuffer":
        return binContent.buffer;
    }
  }
  createRequestInit(req) {
    const headers = {};
    const credentials = req.withCredentials ? "include" : void 0;
    req.headers.forEach((name, values) => headers[name] = values.join(","));
    headers["Accept"] ??= "application/json, text/plain, */*";
    if (!headers["Content-Type"]) {
      const detectedType = req.detectContentTypeHeader();
      if (detectedType !== null) {
        headers["Content-Type"] = detectedType;
      }
    }
    return {
      body: req.serializeBody(),
      method: req.method,
      headers,
      credentials
    };
  }
  concatChunks(chunks, totalLength) {
    const chunksAll = new Uint8Array(totalLength);
    let position = 0;
    for (const chunk of chunks) {
      chunksAll.set(chunk, position);
      position += chunk.length;
    }
    return chunksAll;
  }
};
_FetchBackend.\u0275fac = function FetchBackend_Factory(t) {
  return new (t || _FetchBackend)();
};
_FetchBackend.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _FetchBackend,
  factory: _FetchBackend.\u0275fac
});
var FetchBackend = _FetchBackend;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(FetchBackend, [{
    type: Injectable
  }], null, null);
})();
var FetchFactory = class {
};
function noop3() {
}
function silenceSuperfluousUnhandledPromiseRejection(promise) {
  promise.then(noop3, noop3);
}
function interceptorChainEndFn(req, finalHandlerFn) {
  return finalHandlerFn(req);
}
function adaptLegacyInterceptorToChain(chainTailFn, interceptor) {
  return (initialRequest, finalHandlerFn) => interceptor.intercept(initialRequest, {
    handle: (downstreamRequest) => chainTailFn(downstreamRequest, finalHandlerFn)
  });
}
function chainedInterceptorFn(chainTailFn, interceptorFn, injector) {
  return (initialRequest, finalHandlerFn) => runInInjectionContext(injector, () => interceptorFn(initialRequest, (downstreamRequest) => chainTailFn(downstreamRequest, finalHandlerFn)));
}
var HTTP_INTERCEPTORS = new InjectionToken(ngDevMode ? "HTTP_INTERCEPTORS" : "");
var HTTP_INTERCEPTOR_FNS = new InjectionToken(ngDevMode ? "HTTP_INTERCEPTOR_FNS" : "");
var HTTP_ROOT_INTERCEPTOR_FNS = new InjectionToken(ngDevMode ? "HTTP_ROOT_INTERCEPTOR_FNS" : "");
var PRIMARY_HTTP_BACKEND = new InjectionToken(ngDevMode ? "PRIMARY_HTTP_BACKEND" : "");
function legacyInterceptorFnFactory() {
  let chain = null;
  return (req, handler) => {
    if (chain === null) {
      const interceptors = inject(HTTP_INTERCEPTORS, {
        optional: true
      }) ?? [];
      chain = interceptors.reduceRight(adaptLegacyInterceptorToChain, interceptorChainEndFn);
    }
    const pendingTasks = inject(InitialRenderPendingTasks);
    const taskId = pendingTasks.add();
    return chain(req, handler).pipe(finalize(() => pendingTasks.remove(taskId)));
  };
}
var fetchBackendWarningDisplayed = false;
var _HttpInterceptorHandler = class _HttpInterceptorHandler extends HttpHandler {
  constructor(backend, injector) {
    super();
    this.backend = backend;
    this.injector = injector;
    this.chain = null;
    this.pendingTasks = inject(InitialRenderPendingTasks);
    const primaryHttpBackend = inject(PRIMARY_HTTP_BACKEND, {
      optional: true
    });
    this.backend = primaryHttpBackend ?? backend;
    if ((typeof ngDevMode === "undefined" || ngDevMode) && !fetchBackendWarningDisplayed) {
      const isServer = isPlatformServer(injector.get(PLATFORM_ID));
      if (isServer && !(this.backend instanceof FetchBackend)) {
        fetchBackendWarningDisplayed = true;
        injector.get(Console).warn(formatRuntimeError(2801, "Angular detected that `HttpClient` is not configured to use `fetch` APIs. It's strongly recommended to enable `fetch` for applications that use Server-Side Rendering for better performance and compatibility. To enable `fetch`, add the `withFetch()` to the `provideHttpClient()` call at the root of the application."));
      }
    }
  }
  handle(initialRequest) {
    if (this.chain === null) {
      const dedupedInterceptorFns = Array.from(/* @__PURE__ */ new Set([...this.injector.get(HTTP_INTERCEPTOR_FNS), ...this.injector.get(HTTP_ROOT_INTERCEPTOR_FNS, [])]));
      this.chain = dedupedInterceptorFns.reduceRight((nextSequencedFn, interceptorFn) => chainedInterceptorFn(nextSequencedFn, interceptorFn, this.injector), interceptorChainEndFn);
    }
    const taskId = this.pendingTasks.add();
    return this.chain(initialRequest, (downstreamRequest) => this.backend.handle(downstreamRequest)).pipe(finalize(() => this.pendingTasks.remove(taskId)));
  }
};
_HttpInterceptorHandler.\u0275fac = function HttpInterceptorHandler_Factory(t) {
  return new (t || _HttpInterceptorHandler)(\u0275\u0275inject(HttpBackend), \u0275\u0275inject(EnvironmentInjector));
};
_HttpInterceptorHandler.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _HttpInterceptorHandler,
  factory: _HttpInterceptorHandler.\u0275fac
});
var HttpInterceptorHandler = _HttpInterceptorHandler;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HttpInterceptorHandler, [{
    type: Injectable
  }], () => [{
    type: HttpBackend
  }, {
    type: EnvironmentInjector
  }], null);
})();
var nextRequestId = 0;
var foreignDocument;
var JSONP_ERR_NO_CALLBACK = "JSONP injected script did not invoke callback.";
var JSONP_ERR_WRONG_METHOD = "JSONP requests must use JSONP request method.";
var JSONP_ERR_WRONG_RESPONSE_TYPE = "JSONP requests must use Json response type.";
var JSONP_ERR_HEADERS_NOT_SUPPORTED = "JSONP requests do not support headers.";
var JsonpCallbackContext = class {
};
function jsonpCallbackContext() {
  if (typeof window === "object") {
    return window;
  }
  return {};
}
var _JsonpClientBackend = class _JsonpClientBackend {
  constructor(callbackMap, document2) {
    this.callbackMap = callbackMap;
    this.document = document2;
    this.resolvedPromise = Promise.resolve();
  }
  /**
   * Get the name of the next callback method, by incrementing the global `nextRequestId`.
   */
  nextCallback() {
    return `ng_jsonp_callback_${nextRequestId++}`;
  }
  /**
   * Processes a JSONP request and returns an event stream of the results.
   * @param req The request object.
   * @returns An observable of the response events.
   *
   */
  handle(req) {
    if (req.method !== "JSONP") {
      throw new Error(JSONP_ERR_WRONG_METHOD);
    } else if (req.responseType !== "json") {
      throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);
    }
    if (req.headers.keys().length > 0) {
      throw new Error(JSONP_ERR_HEADERS_NOT_SUPPORTED);
    }
    return new Observable((observer) => {
      const callback = this.nextCallback();
      const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);
      const node = this.document.createElement("script");
      node.src = url;
      let body = null;
      let finished = false;
      this.callbackMap[callback] = (data) => {
        delete this.callbackMap[callback];
        body = data;
        finished = true;
      };
      const cleanup = () => {
        if (node.parentNode) {
          node.parentNode.removeChild(node);
        }
        delete this.callbackMap[callback];
      };
      const onLoad = (event) => {
        this.resolvedPromise.then(() => {
          cleanup();
          if (!finished) {
            observer.error(new HttpErrorResponse({
              url,
              status: 0,
              statusText: "JSONP Error",
              error: new Error(JSONP_ERR_NO_CALLBACK)
            }));
            return;
          }
          observer.next(new HttpResponse({
            body,
            status: 200,
            statusText: "OK",
            url
          }));
          observer.complete();
        });
      };
      const onError = (error) => {
        cleanup();
        observer.error(new HttpErrorResponse({
          error,
          status: 0,
          statusText: "JSONP Error",
          url
        }));
      };
      node.addEventListener("load", onLoad);
      node.addEventListener("error", onError);
      this.document.body.appendChild(node);
      observer.next({
        type: HttpEventType.Sent
      });
      return () => {
        if (!finished) {
          this.removeListeners(node);
        }
        cleanup();
      };
    });
  }
  removeListeners(script) {
    if (!foreignDocument) {
      foreignDocument = this.document.implementation.createHTMLDocument();
    }
    foreignDocument.adoptNode(script);
  }
};
_JsonpClientBackend.\u0275fac = function JsonpClientBackend_Factory(t) {
  return new (t || _JsonpClientBackend)(\u0275\u0275inject(JsonpCallbackContext), \u0275\u0275inject(DOCUMENT2));
};
_JsonpClientBackend.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _JsonpClientBackend,
  factory: _JsonpClientBackend.\u0275fac
});
var JsonpClientBackend = _JsonpClientBackend;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(JsonpClientBackend, [{
    type: Injectable
  }], () => [{
    type: JsonpCallbackContext
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }], null);
})();
function jsonpInterceptorFn(req, next) {
  if (req.method === "JSONP") {
    return inject(JsonpClientBackend).handle(req);
  }
  return next(req);
}
var _JsonpInterceptor = class _JsonpInterceptor {
  constructor(injector) {
    this.injector = injector;
  }
  /**
   * Identifies and handles a given JSONP request.
   * @param initialRequest The outgoing request object to handle.
   * @param next The next interceptor in the chain, or the backend
   * if no interceptors remain in the chain.
   * @returns An observable of the event stream.
   */
  intercept(initialRequest, next) {
    return runInInjectionContext(this.injector, () => jsonpInterceptorFn(initialRequest, (downstreamRequest) => next.handle(downstreamRequest)));
  }
};
_JsonpInterceptor.\u0275fac = function JsonpInterceptor_Factory(t) {
  return new (t || _JsonpInterceptor)(\u0275\u0275inject(EnvironmentInjector));
};
_JsonpInterceptor.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _JsonpInterceptor,
  factory: _JsonpInterceptor.\u0275fac
});
var JsonpInterceptor = _JsonpInterceptor;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(JsonpInterceptor, [{
    type: Injectable
  }], () => [{
    type: EnvironmentInjector
  }], null);
})();
var XSSI_PREFIX = /^\)\]\}',?\n/;
function getResponseUrl(xhr) {
  if ("responseURL" in xhr && xhr.responseURL) {
    return xhr.responseURL;
  }
  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {
    return xhr.getResponseHeader("X-Request-URL");
  }
  return null;
}
var _HttpXhrBackend = class _HttpXhrBackend {
  constructor(xhrFactory) {
    this.xhrFactory = xhrFactory;
  }
  /**
   * Processes a request and returns a stream of response events.
   * @param req The request object.
   * @returns An observable of the response events.
   */
  handle(req) {
    if (req.method === "JSONP") {
      throw new RuntimeError(-2800, (typeof ngDevMode === "undefined" || ngDevMode) && `Cannot make a JSONP request without JSONP support. To fix the problem, either add the \`withJsonpSupport()\` call (if \`provideHttpClient()\` is used) or import the \`HttpClientJsonpModule\` in the root NgModule.`);
    }
    const xhrFactory = this.xhrFactory;
    const source = xhrFactory.\u0275loadImpl ? from(xhrFactory.\u0275loadImpl()) : of(null);
    return source.pipe(switchMap(() => {
      return new Observable((observer) => {
        const xhr = xhrFactory.build();
        xhr.open(req.method, req.urlWithParams);
        if (req.withCredentials) {
          xhr.withCredentials = true;
        }
        req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(",")));
        if (!req.headers.has("Accept")) {
          xhr.setRequestHeader("Accept", "application/json, text/plain, */*");
        }
        if (!req.headers.has("Content-Type")) {
          const detectedType = req.detectContentTypeHeader();
          if (detectedType !== null) {
            xhr.setRequestHeader("Content-Type", detectedType);
          }
        }
        if (req.responseType) {
          const responseType = req.responseType.toLowerCase();
          xhr.responseType = responseType !== "json" ? responseType : "text";
        }
        const reqBody = req.serializeBody();
        let headerResponse = null;
        const partialFromXhr = () => {
          if (headerResponse !== null) {
            return headerResponse;
          }
          const statusText = xhr.statusText || "OK";
          const headers = new HttpHeaders(xhr.getAllResponseHeaders());
          const url = getResponseUrl(xhr) || req.url;
          headerResponse = new HttpHeaderResponse({
            headers,
            status: xhr.status,
            statusText,
            url
          });
          return headerResponse;
        };
        const onLoad = () => {
          let {
            headers,
            status,
            statusText,
            url
          } = partialFromXhr();
          let body = null;
          if (status !== 204) {
            body = typeof xhr.response === "undefined" ? xhr.responseText : xhr.response;
          }
          if (status === 0) {
            status = !!body ? 200 : 0;
          }
          let ok = status >= 200 && status < 300;
          if (req.responseType === "json" && typeof body === "string") {
            const originalBody = body;
            body = body.replace(XSSI_PREFIX, "");
            try {
              body = body !== "" ? JSON.parse(body) : null;
            } catch (error) {
              body = originalBody;
              if (ok) {
                ok = false;
                body = {
                  error,
                  text: body
                };
              }
            }
          }
          if (ok) {
            observer.next(new HttpResponse({
              body,
              headers,
              status,
              statusText,
              url: url || void 0
            }));
            observer.complete();
          } else {
            observer.error(new HttpErrorResponse({
              // The error in this case is the response body (error from the server).
              error: body,
              headers,
              status,
              statusText,
              url: url || void 0
            }));
          }
        };
        const onError = (error) => {
          const {
            url
          } = partialFromXhr();
          const res = new HttpErrorResponse({
            error,
            status: xhr.status || 0,
            statusText: xhr.statusText || "Unknown Error",
            url: url || void 0
          });
          observer.error(res);
        };
        let sentHeaders = false;
        const onDownProgress = (event) => {
          if (!sentHeaders) {
            observer.next(partialFromXhr());
            sentHeaders = true;
          }
          let progressEvent = {
            type: HttpEventType.DownloadProgress,
            loaded: event.loaded
          };
          if (event.lengthComputable) {
            progressEvent.total = event.total;
          }
          if (req.responseType === "text" && !!xhr.responseText) {
            progressEvent.partialText = xhr.responseText;
          }
          observer.next(progressEvent);
        };
        const onUpProgress = (event) => {
          let progress = {
            type: HttpEventType.UploadProgress,
            loaded: event.loaded
          };
          if (event.lengthComputable) {
            progress.total = event.total;
          }
          observer.next(progress);
        };
        xhr.addEventListener("load", onLoad);
        xhr.addEventListener("error", onError);
        xhr.addEventListener("timeout", onError);
        xhr.addEventListener("abort", onError);
        if (req.reportProgress) {
          xhr.addEventListener("progress", onDownProgress);
          if (reqBody !== null && xhr.upload) {
            xhr.upload.addEventListener("progress", onUpProgress);
          }
        }
        xhr.send(reqBody);
        observer.next({
          type: HttpEventType.Sent
        });
        return () => {
          xhr.removeEventListener("error", onError);
          xhr.removeEventListener("abort", onError);
          xhr.removeEventListener("load", onLoad);
          xhr.removeEventListener("timeout", onError);
          if (req.reportProgress) {
            xhr.removeEventListener("progress", onDownProgress);
            if (reqBody !== null && xhr.upload) {
              xhr.upload.removeEventListener("progress", onUpProgress);
            }
          }
          if (xhr.readyState !== xhr.DONE) {
            xhr.abort();
          }
        };
      });
    }));
  }
};
_HttpXhrBackend.\u0275fac = function HttpXhrBackend_Factory(t) {
  return new (t || _HttpXhrBackend)(\u0275\u0275inject(XhrFactory));
};
_HttpXhrBackend.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _HttpXhrBackend,
  factory: _HttpXhrBackend.\u0275fac
});
var HttpXhrBackend = _HttpXhrBackend;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HttpXhrBackend, [{
    type: Injectable
  }], () => [{
    type: XhrFactory
  }], null);
})();
var XSRF_ENABLED = new InjectionToken("XSRF_ENABLED");
var XSRF_DEFAULT_COOKIE_NAME = "XSRF-TOKEN";
var XSRF_COOKIE_NAME = new InjectionToken("XSRF_COOKIE_NAME", {
  providedIn: "root",
  factory: () => XSRF_DEFAULT_COOKIE_NAME
});
var XSRF_DEFAULT_HEADER_NAME = "X-XSRF-TOKEN";
var XSRF_HEADER_NAME = new InjectionToken("XSRF_HEADER_NAME", {
  providedIn: "root",
  factory: () => XSRF_DEFAULT_HEADER_NAME
});
var HttpXsrfTokenExtractor = class {
};
var _HttpXsrfCookieExtractor = class _HttpXsrfCookieExtractor {
  constructor(doc, platform, cookieName) {
    this.doc = doc;
    this.platform = platform;
    this.cookieName = cookieName;
    this.lastCookieString = "";
    this.lastToken = null;
    this.parseCount = 0;
  }
  getToken() {
    if (this.platform === "server") {
      return null;
    }
    const cookieString = this.doc.cookie || "";
    if (cookieString !== this.lastCookieString) {
      this.parseCount++;
      this.lastToken = parseCookieValue(cookieString, this.cookieName);
      this.lastCookieString = cookieString;
    }
    return this.lastToken;
  }
};
_HttpXsrfCookieExtractor.\u0275fac = function HttpXsrfCookieExtractor_Factory(t) {
  return new (t || _HttpXsrfCookieExtractor)(\u0275\u0275inject(DOCUMENT2), \u0275\u0275inject(PLATFORM_ID), \u0275\u0275inject(XSRF_COOKIE_NAME));
};
_HttpXsrfCookieExtractor.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _HttpXsrfCookieExtractor,
  factory: _HttpXsrfCookieExtractor.\u0275fac
});
var HttpXsrfCookieExtractor = _HttpXsrfCookieExtractor;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HttpXsrfCookieExtractor, [{
    type: Injectable
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [PLATFORM_ID]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [XSRF_COOKIE_NAME]
    }]
  }], null);
})();
function xsrfInterceptorFn(req, next) {
  const lcUrl = req.url.toLowerCase();
  if (!inject(XSRF_ENABLED) || req.method === "GET" || req.method === "HEAD" || lcUrl.startsWith("http://") || lcUrl.startsWith("https://")) {
    return next(req);
  }
  const token = inject(HttpXsrfTokenExtractor).getToken();
  const headerName = inject(XSRF_HEADER_NAME);
  if (token != null && !req.headers.has(headerName)) {
    req = req.clone({
      headers: req.headers.set(headerName, token)
    });
  }
  return next(req);
}
var _HttpXsrfInterceptor = class _HttpXsrfInterceptor {
  constructor(injector) {
    this.injector = injector;
  }
  intercept(initialRequest, next) {
    return runInInjectionContext(this.injector, () => xsrfInterceptorFn(initialRequest, (downstreamRequest) => next.handle(downstreamRequest)));
  }
};
_HttpXsrfInterceptor.\u0275fac = function HttpXsrfInterceptor_Factory(t) {
  return new (t || _HttpXsrfInterceptor)(\u0275\u0275inject(EnvironmentInjector));
};
_HttpXsrfInterceptor.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _HttpXsrfInterceptor,
  factory: _HttpXsrfInterceptor.\u0275fac
});
var HttpXsrfInterceptor = _HttpXsrfInterceptor;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HttpXsrfInterceptor, [{
    type: Injectable
  }], () => [{
    type: EnvironmentInjector
  }], null);
})();
var HttpFeatureKind;
(function(HttpFeatureKind2) {
  HttpFeatureKind2[HttpFeatureKind2["Interceptors"] = 0] = "Interceptors";
  HttpFeatureKind2[HttpFeatureKind2["LegacyInterceptors"] = 1] = "LegacyInterceptors";
  HttpFeatureKind2[HttpFeatureKind2["CustomXsrfConfiguration"] = 2] = "CustomXsrfConfiguration";
  HttpFeatureKind2[HttpFeatureKind2["NoXsrfProtection"] = 3] = "NoXsrfProtection";
  HttpFeatureKind2[HttpFeatureKind2["JsonpSupport"] = 4] = "JsonpSupport";
  HttpFeatureKind2[HttpFeatureKind2["RequestsMadeViaParent"] = 5] = "RequestsMadeViaParent";
  HttpFeatureKind2[HttpFeatureKind2["Fetch"] = 6] = "Fetch";
})(HttpFeatureKind || (HttpFeatureKind = {}));
function makeHttpFeature(kind, providers) {
  return {
    \u0275kind: kind,
    \u0275providers: providers
  };
}
function provideHttpClient(...features) {
  if (ngDevMode) {
    const featureKinds = new Set(features.map((f) => f.\u0275kind));
    if (featureKinds.has(HttpFeatureKind.NoXsrfProtection) && featureKinds.has(HttpFeatureKind.CustomXsrfConfiguration)) {
      throw new Error(ngDevMode ? `Configuration error: found both withXsrfConfiguration() and withNoXsrfProtection() in the same call to provideHttpClient(), which is a contradiction.` : "");
    }
  }
  const providers = [HttpClient, HttpXhrBackend, HttpInterceptorHandler, {
    provide: HttpHandler,
    useExisting: HttpInterceptorHandler
  }, {
    provide: HttpBackend,
    useExisting: HttpXhrBackend
  }, {
    provide: HTTP_INTERCEPTOR_FNS,
    useValue: xsrfInterceptorFn,
    multi: true
  }, {
    provide: XSRF_ENABLED,
    useValue: true
  }, {
    provide: HttpXsrfTokenExtractor,
    useClass: HttpXsrfCookieExtractor
  }];
  for (const feature of features) {
    providers.push(...feature.\u0275providers);
  }
  return makeEnvironmentProviders(providers);
}
var LEGACY_INTERCEPTOR_FN = new InjectionToken("LEGACY_INTERCEPTOR_FN");
function withInterceptorsFromDi() {
  return makeHttpFeature(HttpFeatureKind.LegacyInterceptors, [{
    provide: LEGACY_INTERCEPTOR_FN,
    useFactory: legacyInterceptorFnFactory
  }, {
    provide: HTTP_INTERCEPTOR_FNS,
    useExisting: LEGACY_INTERCEPTOR_FN,
    multi: true
  }]);
}
function withXsrfConfiguration({
  cookieName,
  headerName
}) {
  const providers = [];
  if (cookieName !== void 0) {
    providers.push({
      provide: XSRF_COOKIE_NAME,
      useValue: cookieName
    });
  }
  if (headerName !== void 0) {
    providers.push({
      provide: XSRF_HEADER_NAME,
      useValue: headerName
    });
  }
  return makeHttpFeature(HttpFeatureKind.CustomXsrfConfiguration, providers);
}
function withNoXsrfProtection() {
  return makeHttpFeature(HttpFeatureKind.NoXsrfProtection, [{
    provide: XSRF_ENABLED,
    useValue: false
  }]);
}
function withJsonpSupport() {
  return makeHttpFeature(HttpFeatureKind.JsonpSupport, [JsonpClientBackend, {
    provide: JsonpCallbackContext,
    useFactory: jsonpCallbackContext
  }, {
    provide: HTTP_INTERCEPTOR_FNS,
    useValue: jsonpInterceptorFn,
    multi: true
  }]);
}
var _HttpClientXsrfModule = class _HttpClientXsrfModule {
  /**
   * Disable the default XSRF protection.
   */
  static disable() {
    return {
      ngModule: _HttpClientXsrfModule,
      providers: [withNoXsrfProtection().\u0275providers]
    };
  }
  /**
   * Configure XSRF protection.
   * @param options An object that can specify either or both
   * cookie name or header name.
   * - Cookie name default is `XSRF-TOKEN`.
   * - Header name default is `X-XSRF-TOKEN`.
   *
   */
  static withOptions(options = {}) {
    return {
      ngModule: _HttpClientXsrfModule,
      providers: withXsrfConfiguration(options).\u0275providers
    };
  }
};
_HttpClientXsrfModule.\u0275fac = function HttpClientXsrfModule_Factory(t) {
  return new (t || _HttpClientXsrfModule)();
};
_HttpClientXsrfModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _HttpClientXsrfModule
});
_HttpClientXsrfModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
  providers: [HttpXsrfInterceptor, {
    provide: HTTP_INTERCEPTORS,
    useExisting: HttpXsrfInterceptor,
    multi: true
  }, {
    provide: HttpXsrfTokenExtractor,
    useClass: HttpXsrfCookieExtractor
  }, withXsrfConfiguration({
    cookieName: XSRF_DEFAULT_COOKIE_NAME,
    headerName: XSRF_DEFAULT_HEADER_NAME
  }).\u0275providers, {
    provide: XSRF_ENABLED,
    useValue: true
  }]
});
var HttpClientXsrfModule = _HttpClientXsrfModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HttpClientXsrfModule, [{
    type: NgModule,
    args: [{
      providers: [HttpXsrfInterceptor, {
        provide: HTTP_INTERCEPTORS,
        useExisting: HttpXsrfInterceptor,
        multi: true
      }, {
        provide: HttpXsrfTokenExtractor,
        useClass: HttpXsrfCookieExtractor
      }, withXsrfConfiguration({
        cookieName: XSRF_DEFAULT_COOKIE_NAME,
        headerName: XSRF_DEFAULT_HEADER_NAME
      }).\u0275providers, {
        provide: XSRF_ENABLED,
        useValue: true
      }]
    }]
  }], null, null);
})();
var _HttpClientModule = class _HttpClientModule {
};
_HttpClientModule.\u0275fac = function HttpClientModule_Factory(t) {
  return new (t || _HttpClientModule)();
};
_HttpClientModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _HttpClientModule
});
_HttpClientModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
  providers: [provideHttpClient(withInterceptorsFromDi())]
});
var HttpClientModule = _HttpClientModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HttpClientModule, [{
    type: NgModule,
    args: [{
      /**
       * Configures the [dependency injector](guide/glossary#injector) where it is imported
       * with supporting services for HTTP communications.
       */
      providers: [provideHttpClient(withInterceptorsFromDi())]
    }]
  }], null, null);
})();
var _HttpClientJsonpModule = class _HttpClientJsonpModule {
};
_HttpClientJsonpModule.\u0275fac = function HttpClientJsonpModule_Factory(t) {
  return new (t || _HttpClientJsonpModule)();
};
_HttpClientJsonpModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _HttpClientJsonpModule
});
_HttpClientJsonpModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
  providers: [withJsonpSupport().\u0275providers]
});
var HttpClientJsonpModule = _HttpClientJsonpModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HttpClientJsonpModule, [{
    type: NgModule,
    args: [{
      providers: [withJsonpSupport().\u0275providers]
    }]
  }], null, null);
})();
var CACHE_OPTIONS = new InjectionToken(ngDevMode ? "HTTP_TRANSFER_STATE_CACHE_OPTIONS" : "");

// node_modules/@angular/platform-browser/fesm2022/platform-browser.mjs
var GenericBrowserDomAdapter = class extends DomAdapter {
  constructor() {
    super(...arguments);
    this.supportsDOMEvents = true;
  }
};
var BrowserDomAdapter = class _BrowserDomAdapter extends GenericBrowserDomAdapter {
  static makeCurrent() {
    setRootDomAdapter(new _BrowserDomAdapter());
  }
  onAndCancel(el, evt, listener) {
    el.addEventListener(evt, listener);
    return () => {
      el.removeEventListener(evt, listener);
    };
  }
  dispatchEvent(el, evt) {
    el.dispatchEvent(evt);
  }
  remove(node) {
    if (node.parentNode) {
      node.parentNode.removeChild(node);
    }
  }
  createElement(tagName, doc) {
    doc = doc || this.getDefaultDocument();
    return doc.createElement(tagName);
  }
  createHtmlDocument() {
    return document.implementation.createHTMLDocument("fakeTitle");
  }
  getDefaultDocument() {
    return document;
  }
  isElementNode(node) {
    return node.nodeType === Node.ELEMENT_NODE;
  }
  isShadowRoot(node) {
    return node instanceof DocumentFragment;
  }
  /** @deprecated No longer being used in Ivy code. To be removed in version 14. */
  getGlobalEventTarget(doc, target) {
    if (target === "window") {
      return window;
    }
    if (target === "document") {
      return doc;
    }
    if (target === "body") {
      return doc.body;
    }
    return null;
  }
  getBaseHref(doc) {
    const href = getBaseElementHref();
    return href == null ? null : relativePath(href);
  }
  resetBaseElement() {
    baseElement = null;
  }
  getUserAgent() {
    return window.navigator.userAgent;
  }
  getCookie(name) {
    return parseCookieValue(document.cookie, name);
  }
};
var baseElement = null;
function getBaseElementHref() {
  baseElement = baseElement || document.querySelector("base");
  return baseElement ? baseElement.getAttribute("href") : null;
}
function relativePath(url) {
  return new URL(url, document.baseURI).pathname;
}
var BrowserGetTestability = class {
  addToWindow(registry) {
    _global["getAngularTestability"] = (elem, findInAncestors = true) => {
      const testability = registry.findTestabilityInTree(elem, findInAncestors);
      if (testability == null) {
        throw new RuntimeError(5103, (typeof ngDevMode === "undefined" || ngDevMode) && "Could not find testability for element.");
      }
      return testability;
    };
    _global["getAllAngularTestabilities"] = () => registry.getAllTestabilities();
    _global["getAllAngularRootElements"] = () => registry.getAllRootElements();
    const whenAllStable = (callback) => {
      const testabilities = _global["getAllAngularTestabilities"]();
      let count = testabilities.length;
      let didWork = false;
      const decrement = function(didWork_) {
        didWork = didWork || didWork_;
        count--;
        if (count == 0) {
          callback(didWork);
        }
      };
      testabilities.forEach((testability) => {
        testability.whenStable(decrement);
      });
    };
    if (!_global["frameworkStabilizers"]) {
      _global["frameworkStabilizers"] = [];
    }
    _global["frameworkStabilizers"].push(whenAllStable);
  }
  findTestabilityInTree(registry, elem, findInAncestors) {
    if (elem == null) {
      return null;
    }
    const t = registry.getTestability(elem);
    if (t != null) {
      return t;
    } else if (!findInAncestors) {
      return null;
    }
    if (getDOM().isShadowRoot(elem)) {
      return this.findTestabilityInTree(registry, elem.host, true);
    }
    return this.findTestabilityInTree(registry, elem.parentElement, true);
  }
};
var _BrowserXhr = class _BrowserXhr {
  build() {
    return new XMLHttpRequest();
  }
};
_BrowserXhr.\u0275fac = function BrowserXhr_Factory(t) {
  return new (t || _BrowserXhr)();
};
_BrowserXhr.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _BrowserXhr,
  factory: _BrowserXhr.\u0275fac
});
var BrowserXhr = _BrowserXhr;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(BrowserXhr, [{
    type: Injectable
  }], null, null);
})();
var EVENT_MANAGER_PLUGINS = new InjectionToken("EventManagerPlugins");
var _EventManager = class _EventManager {
  /**
   * Initializes an instance of the event-manager service.
   */
  constructor(plugins, _zone) {
    this._zone = _zone;
    this._eventNameToPlugin = /* @__PURE__ */ new Map();
    plugins.forEach((plugin) => {
      plugin.manager = this;
    });
    this._plugins = plugins.slice().reverse();
  }
  /**
   * Registers a handler for a specific element and event.
   *
   * @param element The HTML element to receive event notifications.
   * @param eventName The name of the event to listen for.
   * @param handler A function to call when the notification occurs. Receives the
   * event object as an argument.
   * @returns  A callback function that can be used to remove the handler.
   */
  addEventListener(element, eventName, handler) {
    const plugin = this._findPluginFor(eventName);
    return plugin.addEventListener(element, eventName, handler);
  }
  /**
   * Retrieves the compilation zone in which event listeners are registered.
   */
  getZone() {
    return this._zone;
  }
  /** @internal */
  _findPluginFor(eventName) {
    let plugin = this._eventNameToPlugin.get(eventName);
    if (plugin) {
      return plugin;
    }
    const plugins = this._plugins;
    plugin = plugins.find((plugin2) => plugin2.supports(eventName));
    if (!plugin) {
      throw new RuntimeError(5101, (typeof ngDevMode === "undefined" || ngDevMode) && `No event manager plugin found for event ${eventName}`);
    }
    this._eventNameToPlugin.set(eventName, plugin);
    return plugin;
  }
};
_EventManager.\u0275fac = function EventManager_Factory(t) {
  return new (t || _EventManager)(\u0275\u0275inject(EVENT_MANAGER_PLUGINS), \u0275\u0275inject(NgZone));
};
_EventManager.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _EventManager,
  factory: _EventManager.\u0275fac
});
var EventManager = _EventManager;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(EventManager, [{
    type: Injectable
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [EVENT_MANAGER_PLUGINS]
    }]
  }, {
    type: NgZone
  }], null);
})();
var EventManagerPlugin = class {
  // TODO: remove (has some usage in G3)
  constructor(_doc) {
    this._doc = _doc;
  }
};
var APP_ID_ATTRIBUTE_NAME = "ng-app-id";
var _SharedStylesHost = class _SharedStylesHost {
  constructor(doc, appId, nonce, platformId = {}) {
    this.doc = doc;
    this.appId = appId;
    this.nonce = nonce;
    this.platformId = platformId;
    this.styleRef = /* @__PURE__ */ new Map();
    this.hostNodes = /* @__PURE__ */ new Set();
    this.styleNodesInDOM = this.collectServerRenderedStyles();
    this.platformIsServer = isPlatformServer(platformId);
    this.resetHostNodes();
  }
  addStyles(styles) {
    for (const style2 of styles) {
      const usageCount = this.changeUsageCount(style2, 1);
      if (usageCount === 1) {
        this.onStyleAdded(style2);
      }
    }
  }
  removeStyles(styles) {
    for (const style2 of styles) {
      const usageCount = this.changeUsageCount(style2, -1);
      if (usageCount <= 0) {
        this.onStyleRemoved(style2);
      }
    }
  }
  ngOnDestroy() {
    const styleNodesInDOM = this.styleNodesInDOM;
    if (styleNodesInDOM) {
      styleNodesInDOM.forEach((node) => node.remove());
      styleNodesInDOM.clear();
    }
    for (const style2 of this.getAllStyles()) {
      this.onStyleRemoved(style2);
    }
    this.resetHostNodes();
  }
  addHost(hostNode) {
    this.hostNodes.add(hostNode);
    for (const style2 of this.getAllStyles()) {
      this.addStyleToHost(hostNode, style2);
    }
  }
  removeHost(hostNode) {
    this.hostNodes.delete(hostNode);
  }
  getAllStyles() {
    return this.styleRef.keys();
  }
  onStyleAdded(style2) {
    for (const host of this.hostNodes) {
      this.addStyleToHost(host, style2);
    }
  }
  onStyleRemoved(style2) {
    const styleRef = this.styleRef;
    styleRef.get(style2)?.elements?.forEach((node) => node.remove());
    styleRef.delete(style2);
  }
  collectServerRenderedStyles() {
    const styles = this.doc.head?.querySelectorAll(`style[${APP_ID_ATTRIBUTE_NAME}="${this.appId}"]`);
    if (styles?.length) {
      const styleMap = /* @__PURE__ */ new Map();
      styles.forEach((style2) => {
        if (style2.textContent != null) {
          styleMap.set(style2.textContent, style2);
        }
      });
      return styleMap;
    }
    return null;
  }
  changeUsageCount(style2, delta) {
    const map2 = this.styleRef;
    if (map2.has(style2)) {
      const styleRefValue = map2.get(style2);
      styleRefValue.usage += delta;
      return styleRefValue.usage;
    }
    map2.set(style2, {
      usage: delta,
      elements: []
    });
    return delta;
  }
  getStyleElement(host, style2) {
    const styleNodesInDOM = this.styleNodesInDOM;
    const styleEl = styleNodesInDOM?.get(style2);
    if (styleEl?.parentNode === host) {
      styleNodesInDOM.delete(style2);
      styleEl.removeAttribute(APP_ID_ATTRIBUTE_NAME);
      if (typeof ngDevMode === "undefined" || ngDevMode) {
        styleEl.setAttribute("ng-style-reused", "");
      }
      return styleEl;
    } else {
      const styleEl2 = this.doc.createElement("style");
      if (this.nonce) {
        styleEl2.setAttribute("nonce", this.nonce);
      }
      styleEl2.textContent = style2;
      if (this.platformIsServer) {
        styleEl2.setAttribute(APP_ID_ATTRIBUTE_NAME, this.appId);
      }
      host.appendChild(styleEl2);
      return styleEl2;
    }
  }
  addStyleToHost(host, style2) {
    const styleEl = this.getStyleElement(host, style2);
    const styleRef = this.styleRef;
    const styleElRef = styleRef.get(style2)?.elements;
    if (styleElRef) {
      styleElRef.push(styleEl);
    } else {
      styleRef.set(style2, {
        elements: [styleEl],
        usage: 1
      });
    }
  }
  resetHostNodes() {
    const hostNodes = this.hostNodes;
    hostNodes.clear();
    hostNodes.add(this.doc.head);
  }
};
_SharedStylesHost.\u0275fac = function SharedStylesHost_Factory(t) {
  return new (t || _SharedStylesHost)(\u0275\u0275inject(DOCUMENT2), \u0275\u0275inject(APP_ID), \u0275\u0275inject(CSP_NONCE, 8), \u0275\u0275inject(PLATFORM_ID));
};
_SharedStylesHost.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _SharedStylesHost,
  factory: _SharedStylesHost.\u0275fac
});
var SharedStylesHost = _SharedStylesHost;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(SharedStylesHost, [{
    type: Injectable
  }], () => [{
    type: Document,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [APP_ID]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [CSP_NONCE]
    }, {
      type: Optional
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [PLATFORM_ID]
    }]
  }], null);
})();
var NAMESPACE_URIS = {
  "svg": "http://www.w3.org/2000/svg",
  "xhtml": "http://www.w3.org/1999/xhtml",
  "xlink": "http://www.w3.org/1999/xlink",
  "xml": "http://www.w3.org/XML/1998/namespace",
  "xmlns": "http://www.w3.org/2000/xmlns/",
  "math": "http://www.w3.org/1998/MathML/"
};
var COMPONENT_REGEX = /%COMP%/g;
var COMPONENT_VARIABLE = "%COMP%";
var HOST_ATTR = `_nghost-${COMPONENT_VARIABLE}`;
var CONTENT_ATTR = `_ngcontent-${COMPONENT_VARIABLE}`;
var REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT = true;
var REMOVE_STYLES_ON_COMPONENT_DESTROY = new InjectionToken("RemoveStylesOnCompDestroy", {
  providedIn: "root",
  factory: () => REMOVE_STYLES_ON_COMPONENT_DESTROY_DEFAULT
});
function shimContentAttribute(componentShortId) {
  return CONTENT_ATTR.replace(COMPONENT_REGEX, componentShortId);
}
function shimHostAttribute(componentShortId) {
  return HOST_ATTR.replace(COMPONENT_REGEX, componentShortId);
}
function shimStylesContent(compId, styles) {
  return styles.map((s) => s.replace(COMPONENT_REGEX, compId));
}
var _DomRendererFactory2 = class _DomRendererFactory2 {
  constructor(eventManager, sharedStylesHost, appId, removeStylesOnCompDestroy, doc, platformId, ngZone, nonce = null) {
    this.eventManager = eventManager;
    this.sharedStylesHost = sharedStylesHost;
    this.appId = appId;
    this.removeStylesOnCompDestroy = removeStylesOnCompDestroy;
    this.doc = doc;
    this.platformId = platformId;
    this.ngZone = ngZone;
    this.nonce = nonce;
    this.rendererByCompId = /* @__PURE__ */ new Map();
    this.platformIsServer = isPlatformServer(platformId);
    this.defaultRenderer = new DefaultDomRenderer2(eventManager, doc, ngZone, this.platformIsServer);
  }
  createRenderer(element, type) {
    if (!element || !type) {
      return this.defaultRenderer;
    }
    if (this.platformIsServer && type.encapsulation === ViewEncapsulation$1.ShadowDom) {
      type = __spreadProps(__spreadValues({}, type), {
        encapsulation: ViewEncapsulation$1.Emulated
      });
    }
    const renderer = this.getOrCreateRenderer(element, type);
    if (renderer instanceof EmulatedEncapsulationDomRenderer2) {
      renderer.applyToHost(element);
    } else if (renderer instanceof NoneEncapsulationDomRenderer) {
      renderer.applyStyles();
    }
    return renderer;
  }
  getOrCreateRenderer(element, type) {
    const rendererByCompId = this.rendererByCompId;
    let renderer = rendererByCompId.get(type.id);
    if (!renderer) {
      const doc = this.doc;
      const ngZone = this.ngZone;
      const eventManager = this.eventManager;
      const sharedStylesHost = this.sharedStylesHost;
      const removeStylesOnCompDestroy = this.removeStylesOnCompDestroy;
      const platformIsServer = this.platformIsServer;
      switch (type.encapsulation) {
        case ViewEncapsulation$1.Emulated:
          renderer = new EmulatedEncapsulationDomRenderer2(eventManager, sharedStylesHost, type, this.appId, removeStylesOnCompDestroy, doc, ngZone, platformIsServer);
          break;
        case ViewEncapsulation$1.ShadowDom:
          return new ShadowDomRenderer(eventManager, sharedStylesHost, element, type, doc, ngZone, this.nonce, platformIsServer);
        default:
          renderer = new NoneEncapsulationDomRenderer(eventManager, sharedStylesHost, type, removeStylesOnCompDestroy, doc, ngZone, platformIsServer);
          break;
      }
      rendererByCompId.set(type.id, renderer);
    }
    return renderer;
  }
  ngOnDestroy() {
    this.rendererByCompId.clear();
  }
};
_DomRendererFactory2.\u0275fac = function DomRendererFactory2_Factory(t) {
  return new (t || _DomRendererFactory2)(\u0275\u0275inject(EventManager), \u0275\u0275inject(SharedStylesHost), \u0275\u0275inject(APP_ID), \u0275\u0275inject(REMOVE_STYLES_ON_COMPONENT_DESTROY), \u0275\u0275inject(DOCUMENT2), \u0275\u0275inject(PLATFORM_ID), \u0275\u0275inject(NgZone), \u0275\u0275inject(CSP_NONCE));
};
_DomRendererFactory2.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _DomRendererFactory2,
  factory: _DomRendererFactory2.\u0275fac
});
var DomRendererFactory2 = _DomRendererFactory2;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DomRendererFactory2, [{
    type: Injectable
  }], () => [{
    type: EventManager
  }, {
    type: SharedStylesHost
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [APP_ID]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [REMOVE_STYLES_ON_COMPONENT_DESTROY]
    }]
  }, {
    type: Document,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }, {
    type: Object,
    decorators: [{
      type: Inject,
      args: [PLATFORM_ID]
    }]
  }, {
    type: NgZone
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [CSP_NONCE]
    }]
  }], null);
})();
var DefaultDomRenderer2 = class {
  constructor(eventManager, doc, ngZone, platformIsServer) {
    this.eventManager = eventManager;
    this.doc = doc;
    this.ngZone = ngZone;
    this.platformIsServer = platformIsServer;
    this.data = /* @__PURE__ */ Object.create(null);
    this.throwOnSyntheticProps = true;
    this.destroyNode = null;
  }
  destroy() {
  }
  createElement(name, namespace) {
    if (namespace) {
      return this.doc.createElementNS(NAMESPACE_URIS[namespace] || namespace, name);
    }
    return this.doc.createElement(name);
  }
  createComment(value) {
    return this.doc.createComment(value);
  }
  createText(value) {
    return this.doc.createTextNode(value);
  }
  appendChild(parent, newChild) {
    const targetParent = isTemplateNode(parent) ? parent.content : parent;
    targetParent.appendChild(newChild);
  }
  insertBefore(parent, newChild, refChild) {
    if (parent) {
      const targetParent = isTemplateNode(parent) ? parent.content : parent;
      targetParent.insertBefore(newChild, refChild);
    }
  }
  removeChild(parent, oldChild) {
    if (parent) {
      parent.removeChild(oldChild);
    }
  }
  selectRootElement(selectorOrNode, preserveContent) {
    let el = typeof selectorOrNode === "string" ? this.doc.querySelector(selectorOrNode) : selectorOrNode;
    if (!el) {
      throw new RuntimeError(-5104, (typeof ngDevMode === "undefined" || ngDevMode) && `The selector "${selectorOrNode}" did not match any elements`);
    }
    if (!preserveContent) {
      el.textContent = "";
    }
    return el;
  }
  parentNode(node) {
    return node.parentNode;
  }
  nextSibling(node) {
    return node.nextSibling;
  }
  setAttribute(el, name, value, namespace) {
    if (namespace) {
      name = namespace + ":" + name;
      const namespaceUri = NAMESPACE_URIS[namespace];
      if (namespaceUri) {
        el.setAttributeNS(namespaceUri, name, value);
      } else {
        el.setAttribute(name, value);
      }
    } else {
      el.setAttribute(name, value);
    }
  }
  removeAttribute(el, name, namespace) {
    if (namespace) {
      const namespaceUri = NAMESPACE_URIS[namespace];
      if (namespaceUri) {
        el.removeAttributeNS(namespaceUri, name);
      } else {
        el.removeAttribute(`${namespace}:${name}`);
      }
    } else {
      el.removeAttribute(name);
    }
  }
  addClass(el, name) {
    el.classList.add(name);
  }
  removeClass(el, name) {
    el.classList.remove(name);
  }
  setStyle(el, style2, value, flags) {
    if (flags & (RendererStyleFlags2.DashCase | RendererStyleFlags2.Important)) {
      el.style.setProperty(style2, value, flags & RendererStyleFlags2.Important ? "important" : "");
    } else {
      el.style[style2] = value;
    }
  }
  removeStyle(el, style2, flags) {
    if (flags & RendererStyleFlags2.DashCase) {
      el.style.removeProperty(style2);
    } else {
      el.style[style2] = "";
    }
  }
  setProperty(el, name, value) {
    if (el == null) {
      return;
    }
    (typeof ngDevMode === "undefined" || ngDevMode) && this.throwOnSyntheticProps && checkNoSyntheticProp(name, "property");
    el[name] = value;
  }
  setValue(node, value) {
    node.nodeValue = value;
  }
  listen(target, event, callback) {
    (typeof ngDevMode === "undefined" || ngDevMode) && this.throwOnSyntheticProps && checkNoSyntheticProp(event, "listener");
    if (typeof target === "string") {
      target = getDOM().getGlobalEventTarget(this.doc, target);
      if (!target) {
        throw new Error(`Unsupported event target ${target} for event ${event}`);
      }
    }
    return this.eventManager.addEventListener(target, event, this.decoratePreventDefault(callback));
  }
  decoratePreventDefault(eventHandler) {
    return (event) => {
      if (event === "__ngUnwrap__") {
        return eventHandler;
      }
      const allowDefaultBehavior = this.platformIsServer ? this.ngZone.runGuarded(() => eventHandler(event)) : eventHandler(event);
      if (allowDefaultBehavior === false) {
        event.preventDefault();
      }
      return void 0;
    };
  }
};
var AT_CHARCODE = (() => "@".charCodeAt(0))();
function checkNoSyntheticProp(name, nameKind) {
  if (name.charCodeAt(0) === AT_CHARCODE) {
    throw new RuntimeError(5105, `Unexpected synthetic ${nameKind} ${name} found. Please make sure that:
  - Either \`BrowserAnimationsModule\` or \`NoopAnimationsModule\` are imported in your application.
  - There is corresponding configuration for the animation named \`${name}\` defined in the \`animations\` field of the \`@Component\` decorator (see https://angular.io/api/core/Component#animations).`);
  }
}
function isTemplateNode(node) {
  return node.tagName === "TEMPLATE" && node.content !== void 0;
}
var ShadowDomRenderer = class extends DefaultDomRenderer2 {
  constructor(eventManager, sharedStylesHost, hostEl, component, doc, ngZone, nonce, platformIsServer) {
    super(eventManager, doc, ngZone, platformIsServer);
    this.sharedStylesHost = sharedStylesHost;
    this.hostEl = hostEl;
    this.shadowRoot = hostEl.attachShadow({
      mode: "open"
    });
    this.sharedStylesHost.addHost(this.shadowRoot);
    const styles = shimStylesContent(component.id, component.styles);
    for (const style2 of styles) {
      const styleEl = document.createElement("style");
      if (nonce) {
        styleEl.setAttribute("nonce", nonce);
      }
      styleEl.textContent = style2;
      this.shadowRoot.appendChild(styleEl);
    }
  }
  nodeOrShadowRoot(node) {
    return node === this.hostEl ? this.shadowRoot : node;
  }
  appendChild(parent, newChild) {
    return super.appendChild(this.nodeOrShadowRoot(parent), newChild);
  }
  insertBefore(parent, newChild, refChild) {
    return super.insertBefore(this.nodeOrShadowRoot(parent), newChild, refChild);
  }
  removeChild(parent, oldChild) {
    return super.removeChild(this.nodeOrShadowRoot(parent), oldChild);
  }
  parentNode(node) {
    return this.nodeOrShadowRoot(super.parentNode(this.nodeOrShadowRoot(node)));
  }
  destroy() {
    this.sharedStylesHost.removeHost(this.shadowRoot);
  }
};
var NoneEncapsulationDomRenderer = class extends DefaultDomRenderer2 {
  constructor(eventManager, sharedStylesHost, component, removeStylesOnCompDestroy, doc, ngZone, platformIsServer, compId) {
    super(eventManager, doc, ngZone, platformIsServer);
    this.sharedStylesHost = sharedStylesHost;
    this.removeStylesOnCompDestroy = removeStylesOnCompDestroy;
    this.styles = compId ? shimStylesContent(compId, component.styles) : component.styles;
  }
  applyStyles() {
    this.sharedStylesHost.addStyles(this.styles);
  }
  destroy() {
    if (!this.removeStylesOnCompDestroy) {
      return;
    }
    this.sharedStylesHost.removeStyles(this.styles);
  }
};
var EmulatedEncapsulationDomRenderer2 = class extends NoneEncapsulationDomRenderer {
  constructor(eventManager, sharedStylesHost, component, appId, removeStylesOnCompDestroy, doc, ngZone, platformIsServer) {
    const compId = appId + "-" + component.id;
    super(eventManager, sharedStylesHost, component, removeStylesOnCompDestroy, doc, ngZone, platformIsServer, compId);
    this.contentAttr = shimContentAttribute(compId);
    this.hostAttr = shimHostAttribute(compId);
  }
  applyToHost(element) {
    this.applyStyles();
    this.setAttribute(element, this.hostAttr, "");
  }
  createElement(parent, name) {
    const el = super.createElement(parent, name);
    super.setAttribute(el, this.contentAttr, "");
    return el;
  }
};
var _DomEventsPlugin = class _DomEventsPlugin extends EventManagerPlugin {
  constructor(doc) {
    super(doc);
  }
  // This plugin should come last in the list of plugins, because it accepts all
  // events.
  supports(eventName) {
    return true;
  }
  addEventListener(element, eventName, handler) {
    element.addEventListener(eventName, handler, false);
    return () => this.removeEventListener(element, eventName, handler);
  }
  removeEventListener(target, eventName, callback) {
    return target.removeEventListener(eventName, callback);
  }
};
_DomEventsPlugin.\u0275fac = function DomEventsPlugin_Factory(t) {
  return new (t || _DomEventsPlugin)(\u0275\u0275inject(DOCUMENT2));
};
_DomEventsPlugin.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _DomEventsPlugin,
  factory: _DomEventsPlugin.\u0275fac
});
var DomEventsPlugin = _DomEventsPlugin;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DomEventsPlugin, [{
    type: Injectable
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }], null);
})();
var MODIFIER_KEYS = ["alt", "control", "meta", "shift"];
var _keyMap = {
  "\b": "Backspace",
  "	": "Tab",
  "\x7F": "Delete",
  "\x1B": "Escape",
  "Del": "Delete",
  "Esc": "Escape",
  "Left": "ArrowLeft",
  "Right": "ArrowRight",
  "Up": "ArrowUp",
  "Down": "ArrowDown",
  "Menu": "ContextMenu",
  "Scroll": "ScrollLock",
  "Win": "OS"
};
var MODIFIER_KEY_GETTERS = {
  "alt": (event) => event.altKey,
  "control": (event) => event.ctrlKey,
  "meta": (event) => event.metaKey,
  "shift": (event) => event.shiftKey
};
var _KeyEventsPlugin = class _KeyEventsPlugin extends EventManagerPlugin {
  /**
   * Initializes an instance of the browser plug-in.
   * @param doc The document in which key events will be detected.
   */
  constructor(doc) {
    super(doc);
  }
  /**
   * Reports whether a named key event is supported.
   * @param eventName The event name to query.
   * @return True if the named key event is supported.
   */
  supports(eventName) {
    return _KeyEventsPlugin.parseEventName(eventName) != null;
  }
  /**
   * Registers a handler for a specific element and key event.
   * @param element The HTML element to receive event notifications.
   * @param eventName The name of the key event to listen for.
   * @param handler A function to call when the notification occurs. Receives the
   * event object as an argument.
   * @returns The key event that was registered.
   */
  addEventListener(element, eventName, handler) {
    const parsedEvent = _KeyEventsPlugin.parseEventName(eventName);
    const outsideHandler = _KeyEventsPlugin.eventCallback(parsedEvent["fullKey"], handler, this.manager.getZone());
    return this.manager.getZone().runOutsideAngular(() => {
      return getDOM().onAndCancel(element, parsedEvent["domEventName"], outsideHandler);
    });
  }
  /**
   * Parses the user provided full keyboard event definition and normalizes it for
   * later internal use. It ensures the string is all lowercase, converts special
   * characters to a standard spelling, and orders all the values consistently.
   *
   * @param eventName The name of the key event to listen for.
   * @returns an object with the full, normalized string, and the dom event name
   * or null in the case when the event doesn't match a keyboard event.
   */
  static parseEventName(eventName) {
    const parts = eventName.toLowerCase().split(".");
    const domEventName = parts.shift();
    if (parts.length === 0 || !(domEventName === "keydown" || domEventName === "keyup")) {
      return null;
    }
    const key = _KeyEventsPlugin._normalizeKey(parts.pop());
    let fullKey = "";
    let codeIX = parts.indexOf("code");
    if (codeIX > -1) {
      parts.splice(codeIX, 1);
      fullKey = "code.";
    }
    MODIFIER_KEYS.forEach((modifierName) => {
      const index = parts.indexOf(modifierName);
      if (index > -1) {
        parts.splice(index, 1);
        fullKey += modifierName + ".";
      }
    });
    fullKey += key;
    if (parts.length != 0 || key.length === 0) {
      return null;
    }
    const result = {};
    result["domEventName"] = domEventName;
    result["fullKey"] = fullKey;
    return result;
  }
  /**
   * Determines whether the actual keys pressed match the configured key code string.
   * The `fullKeyCode` event is normalized in the `parseEventName` method when the
   * event is attached to the DOM during the `addEventListener` call. This is unseen
   * by the end user and is normalized for internal consistency and parsing.
   *
   * @param event The keyboard event.
   * @param fullKeyCode The normalized user defined expected key event string
   * @returns boolean.
   */
  static matchEventFullKeyCode(event, fullKeyCode) {
    let keycode = _keyMap[event.key] || event.key;
    let key = "";
    if (fullKeyCode.indexOf("code.") > -1) {
      keycode = event.code;
      key = "code.";
    }
    if (keycode == null || !keycode)
      return false;
    keycode = keycode.toLowerCase();
    if (keycode === " ") {
      keycode = "space";
    } else if (keycode === ".") {
      keycode = "dot";
    }
    MODIFIER_KEYS.forEach((modifierName) => {
      if (modifierName !== keycode) {
        const modifierGetter = MODIFIER_KEY_GETTERS[modifierName];
        if (modifierGetter(event)) {
          key += modifierName + ".";
        }
      }
    });
    key += keycode;
    return key === fullKeyCode;
  }
  /**
   * Configures a handler callback for a key event.
   * @param fullKey The event name that combines all simultaneous keystrokes.
   * @param handler The function that responds to the key event.
   * @param zone The zone in which the event occurred.
   * @returns A callback function.
   */
  static eventCallback(fullKey, handler, zone) {
    return (event) => {
      if (_KeyEventsPlugin.matchEventFullKeyCode(event, fullKey)) {
        zone.runGuarded(() => handler(event));
      }
    };
  }
  /** @internal */
  static _normalizeKey(keyName) {
    return keyName === "esc" ? "escape" : keyName;
  }
};
_KeyEventsPlugin.\u0275fac = function KeyEventsPlugin_Factory(t) {
  return new (t || _KeyEventsPlugin)(\u0275\u0275inject(DOCUMENT2));
};
_KeyEventsPlugin.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _KeyEventsPlugin,
  factory: _KeyEventsPlugin.\u0275fac
});
var KeyEventsPlugin = _KeyEventsPlugin;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(KeyEventsPlugin, [{
    type: Injectable
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }], null);
})();
function initDomAdapter() {
  BrowserDomAdapter.makeCurrent();
}
function errorHandler() {
  return new ErrorHandler();
}
function _document() {
  setDocument(document);
  return document;
}
var INTERNAL_BROWSER_PLATFORM_PROVIDERS = [{
  provide: PLATFORM_ID,
  useValue: PLATFORM_BROWSER_ID
}, {
  provide: PLATFORM_INITIALIZER,
  useValue: initDomAdapter,
  multi: true
}, {
  provide: DOCUMENT2,
  useFactory: _document,
  deps: []
}];
var platformBrowser = createPlatformFactory(platformCore, "browser", INTERNAL_BROWSER_PLATFORM_PROVIDERS);
var BROWSER_MODULE_PROVIDERS_MARKER = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "BrowserModule Providers Marker" : "");
var TESTABILITY_PROVIDERS = [{
  provide: TESTABILITY_GETTER,
  useClass: BrowserGetTestability,
  deps: []
}, {
  provide: TESTABILITY,
  useClass: Testability,
  deps: [NgZone, TestabilityRegistry, TESTABILITY_GETTER]
}, {
  provide: Testability,
  useClass: Testability,
  deps: [NgZone, TestabilityRegistry, TESTABILITY_GETTER]
}];
var BROWSER_MODULE_PROVIDERS = [{
  provide: INJECTOR_SCOPE,
  useValue: "root"
}, {
  provide: ErrorHandler,
  useFactory: errorHandler,
  deps: []
}, {
  provide: EVENT_MANAGER_PLUGINS,
  useClass: DomEventsPlugin,
  multi: true,
  deps: [DOCUMENT2, NgZone, PLATFORM_ID]
}, {
  provide: EVENT_MANAGER_PLUGINS,
  useClass: KeyEventsPlugin,
  multi: true,
  deps: [DOCUMENT2]
}, DomRendererFactory2, SharedStylesHost, EventManager, {
  provide: RendererFactory2,
  useExisting: DomRendererFactory2
}, {
  provide: XhrFactory,
  useClass: BrowserXhr,
  deps: []
}, typeof ngDevMode === "undefined" || ngDevMode ? {
  provide: BROWSER_MODULE_PROVIDERS_MARKER,
  useValue: true
} : []];
var _BrowserModule = class _BrowserModule {
  constructor(providersAlreadyPresent) {
    if ((typeof ngDevMode === "undefined" || ngDevMode) && providersAlreadyPresent) {
      throw new RuntimeError(5100, `Providers from the \`BrowserModule\` have already been loaded. If you need access to common directives such as NgIf and NgFor, import the \`CommonModule\` instead.`);
    }
  }
  /**
   * Configures a browser-based app to transition from a server-rendered app, if
   * one is present on the page.
   *
   * @param params An object containing an identifier for the app to transition.
   * The ID must match between the client and server versions of the app.
   * @returns The reconfigured `BrowserModule` to import into the app's root `AppModule`.
   *
   * @deprecated Use {@link APP_ID} instead to set the application ID.
   */
  static withServerTransition(params) {
    return {
      ngModule: _BrowserModule,
      providers: [{
        provide: APP_ID,
        useValue: params.appId
      }]
    };
  }
};
_BrowserModule.\u0275fac = function BrowserModule_Factory(t) {
  return new (t || _BrowserModule)(\u0275\u0275inject(BROWSER_MODULE_PROVIDERS_MARKER, 12));
};
_BrowserModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _BrowserModule
});
_BrowserModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
  providers: [...BROWSER_MODULE_PROVIDERS, ...TESTABILITY_PROVIDERS],
  imports: [CommonModule, ApplicationModule]
});
var BrowserModule = _BrowserModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(BrowserModule, [{
    type: NgModule,
    args: [{
      providers: [...BROWSER_MODULE_PROVIDERS, ...TESTABILITY_PROVIDERS],
      exports: [CommonModule, ApplicationModule]
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: SkipSelf
    }, {
      type: Inject,
      args: [BROWSER_MODULE_PROVIDERS_MARKER]
    }]
  }], null);
})();
function createMeta() {
  return new Meta(\u0275\u0275inject(DOCUMENT2));
}
var _Meta = class _Meta {
  constructor(_doc) {
    this._doc = _doc;
    this._dom = getDOM();
  }
  /**
   * Retrieves or creates a specific `<meta>` tag element in the current HTML document.
   * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute
   * values in the provided tag definition, and verifies that all other attribute values are equal.
   * If an existing element is found, it is returned and is not modified in any way.
   * @param tag The definition of a `<meta>` element to match or create.
   * @param forceCreation True to create a new element without checking whether one already exists.
   * @returns The existing element with the same attributes and values if found,
   * the new element if no match is found, or `null` if the tag parameter is not defined.
   */
  addTag(tag, forceCreation = false) {
    if (!tag)
      return null;
    return this._getOrCreateElement(tag, forceCreation);
  }
  /**
   * Retrieves or creates a set of `<meta>` tag elements in the current HTML document.
   * In searching for an existing tag, Angular attempts to match the `name` or `property` attribute
   * values in the provided tag definition, and verifies that all other attribute values are equal.
   * @param tags An array of tag definitions to match or create.
   * @param forceCreation True to create new elements without checking whether they already exist.
   * @returns The matching elements if found, or the new elements.
   */
  addTags(tags, forceCreation = false) {
    if (!tags)
      return [];
    return tags.reduce((result, tag) => {
      if (tag) {
        result.push(this._getOrCreateElement(tag, forceCreation));
      }
      return result;
    }, []);
  }
  /**
   * Retrieves a `<meta>` tag element in the current HTML document.
   * @param attrSelector The tag attribute and value to match against, in the format
   * `"tag_attribute='value string'"`.
   * @returns The matching element, if any.
   */
  getTag(attrSelector) {
    if (!attrSelector)
      return null;
    return this._doc.querySelector(`meta[${attrSelector}]`) || null;
  }
  /**
   * Retrieves a set of `<meta>` tag elements in the current HTML document.
   * @param attrSelector The tag attribute and value to match against, in the format
   * `"tag_attribute='value string'"`.
   * @returns The matching elements, if any.
   */
  getTags(attrSelector) {
    if (!attrSelector)
      return [];
    const list = this._doc.querySelectorAll(`meta[${attrSelector}]`);
    return list ? [].slice.call(list) : [];
  }
  /**
   * Modifies an existing `<meta>` tag element in the current HTML document.
   * @param tag The tag description with which to replace the existing tag content.
   * @param selector A tag attribute and value to match against, to identify
   * an existing tag. A string in the format `"tag_attribute=`value string`"`.
   * If not supplied, matches a tag with the same `name` or `property` attribute value as the
   * replacement tag.
   * @return The modified element.
   */
  updateTag(tag, selector) {
    if (!tag)
      return null;
    selector = selector || this._parseSelector(tag);
    const meta = this.getTag(selector);
    if (meta) {
      return this._setMetaElementAttributes(tag, meta);
    }
    return this._getOrCreateElement(tag, true);
  }
  /**
   * Removes an existing `<meta>` tag element from the current HTML document.
   * @param attrSelector A tag attribute and value to match against, to identify
   * an existing tag. A string in the format `"tag_attribute=`value string`"`.
   */
  removeTag(attrSelector) {
    this.removeTagElement(this.getTag(attrSelector));
  }
  /**
   * Removes an existing `<meta>` tag element from the current HTML document.
   * @param meta The tag definition to match against to identify an existing tag.
   */
  removeTagElement(meta) {
    if (meta) {
      this._dom.remove(meta);
    }
  }
  _getOrCreateElement(meta, forceCreation = false) {
    if (!forceCreation) {
      const selector = this._parseSelector(meta);
      const elem = this.getTags(selector).filter((elem2) => this._containsAttributes(meta, elem2))[0];
      if (elem !== void 0)
        return elem;
    }
    const element = this._dom.createElement("meta");
    this._setMetaElementAttributes(meta, element);
    const head = this._doc.getElementsByTagName("head")[0];
    head.appendChild(element);
    return element;
  }
  _setMetaElementAttributes(tag, el) {
    Object.keys(tag).forEach((prop) => el.setAttribute(this._getMetaKeyMap(prop), tag[prop]));
    return el;
  }
  _parseSelector(tag) {
    const attr = tag.name ? "name" : "property";
    return `${attr}="${tag[attr]}"`;
  }
  _containsAttributes(tag, elem) {
    return Object.keys(tag).every((key) => elem.getAttribute(this._getMetaKeyMap(key)) === tag[key]);
  }
  _getMetaKeyMap(prop) {
    return META_KEYS_MAP[prop] || prop;
  }
};
_Meta.\u0275fac = function Meta_Factory(t) {
  return new (t || _Meta)(\u0275\u0275inject(DOCUMENT2));
};
_Meta.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _Meta,
  factory: function Meta_Factory(t) {
    let r = null;
    if (t) {
      r = new t();
    } else {
      r = createMeta();
    }
    return r;
  },
  providedIn: "root"
});
var Meta = _Meta;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Meta, [{
    type: Injectable,
    args: [{
      providedIn: "root",
      useFactory: createMeta,
      deps: []
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }], null);
})();
var META_KEYS_MAP = {
  httpEquiv: "http-equiv"
};
function createTitle() {
  return new Title(\u0275\u0275inject(DOCUMENT2));
}
var _Title = class _Title {
  constructor(_doc) {
    this._doc = _doc;
  }
  /**
   * Get the title of the current HTML document.
   */
  getTitle() {
    return this._doc.title;
  }
  /**
   * Set the title of the current HTML document.
   * @param newTitle
   */
  setTitle(newTitle) {
    this._doc.title = newTitle || "";
  }
};
_Title.\u0275fac = function Title_Factory(t) {
  return new (t || _Title)(\u0275\u0275inject(DOCUMENT2));
};
_Title.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _Title,
  factory: function Title_Factory(t) {
    let r = null;
    if (t) {
      r = new t();
    } else {
      r = createTitle();
    }
    return r;
  },
  providedIn: "root"
});
var Title = _Title;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Title, [{
    type: Injectable,
    args: [{
      providedIn: "root",
      useFactory: createTitle,
      deps: []
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }], null);
})();
var EVENT_NAMES = {
  // pan
  "pan": true,
  "panstart": true,
  "panmove": true,
  "panend": true,
  "pancancel": true,
  "panleft": true,
  "panright": true,
  "panup": true,
  "pandown": true,
  // pinch
  "pinch": true,
  "pinchstart": true,
  "pinchmove": true,
  "pinchend": true,
  "pinchcancel": true,
  "pinchin": true,
  "pinchout": true,
  // press
  "press": true,
  "pressup": true,
  // rotate
  "rotate": true,
  "rotatestart": true,
  "rotatemove": true,
  "rotateend": true,
  "rotatecancel": true,
  // swipe
  "swipe": true,
  "swipeleft": true,
  "swiperight": true,
  "swipeup": true,
  "swipedown": true,
  // tap
  "tap": true,
  "doubletap": true
};
var HAMMER_GESTURE_CONFIG = new InjectionToken("HammerGestureConfig");
var HAMMER_LOADER = new InjectionToken("HammerLoader");
var _HammerGestureConfig = class _HammerGestureConfig {
  constructor() {
    this.events = [];
    this.overrides = {};
  }
  /**
   * Creates a [HammerJS Manager](https://hammerjs.github.io/api/#hammermanager)
   * and attaches it to a given HTML element.
   * @param element The element that will recognize gestures.
   * @returns A HammerJS event-manager object.
   */
  buildHammer(element) {
    const mc = new Hammer(element, this.options);
    mc.get("pinch").set({
      enable: true
    });
    mc.get("rotate").set({
      enable: true
    });
    for (const eventName in this.overrides) {
      mc.get(eventName).set(this.overrides[eventName]);
    }
    return mc;
  }
};
_HammerGestureConfig.\u0275fac = function HammerGestureConfig_Factory(t) {
  return new (t || _HammerGestureConfig)();
};
_HammerGestureConfig.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _HammerGestureConfig,
  factory: _HammerGestureConfig.\u0275fac
});
var HammerGestureConfig = _HammerGestureConfig;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HammerGestureConfig, [{
    type: Injectable
  }], null, null);
})();
var _HammerGesturesPlugin = class _HammerGesturesPlugin extends EventManagerPlugin {
  constructor(doc, _config, console2, loader) {
    super(doc);
    this._config = _config;
    this.console = console2;
    this.loader = loader;
    this._loaderPromise = null;
  }
  supports(eventName) {
    if (!EVENT_NAMES.hasOwnProperty(eventName.toLowerCase()) && !this.isCustomEvent(eventName)) {
      return false;
    }
    if (!window.Hammer && !this.loader) {
      if (typeof ngDevMode === "undefined" || ngDevMode) {
        this.console.warn(`The "${eventName}" event cannot be bound because Hammer.JS is not loaded and no custom loader has been specified.`);
      }
      return false;
    }
    return true;
  }
  addEventListener(element, eventName, handler) {
    const zone = this.manager.getZone();
    eventName = eventName.toLowerCase();
    if (!window.Hammer && this.loader) {
      this._loaderPromise = this._loaderPromise || zone.runOutsideAngular(() => this.loader());
      let cancelRegistration = false;
      let deregister = () => {
        cancelRegistration = true;
      };
      zone.runOutsideAngular(() => this._loaderPromise.then(() => {
        if (!window.Hammer) {
          if (typeof ngDevMode === "undefined" || ngDevMode) {
            this.console.warn(`The custom HAMMER_LOADER completed, but Hammer.JS is not present.`);
          }
          deregister = () => {
          };
          return;
        }
        if (!cancelRegistration) {
          deregister = this.addEventListener(element, eventName, handler);
        }
      }).catch(() => {
        if (typeof ngDevMode === "undefined" || ngDevMode) {
          this.console.warn(`The "${eventName}" event cannot be bound because the custom Hammer.JS loader failed.`);
        }
        deregister = () => {
        };
      }));
      return () => {
        deregister();
      };
    }
    return zone.runOutsideAngular(() => {
      const mc = this._config.buildHammer(element);
      const callback = function(eventObj) {
        zone.runGuarded(function() {
          handler(eventObj);
        });
      };
      mc.on(eventName, callback);
      return () => {
        mc.off(eventName, callback);
        if (typeof mc.destroy === "function") {
          mc.destroy();
        }
      };
    });
  }
  isCustomEvent(eventName) {
    return this._config.events.indexOf(eventName) > -1;
  }
};
_HammerGesturesPlugin.\u0275fac = function HammerGesturesPlugin_Factory(t) {
  return new (t || _HammerGesturesPlugin)(\u0275\u0275inject(DOCUMENT2), \u0275\u0275inject(HAMMER_GESTURE_CONFIG), \u0275\u0275inject(Console), \u0275\u0275inject(HAMMER_LOADER, 8));
};
_HammerGesturesPlugin.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _HammerGesturesPlugin,
  factory: _HammerGesturesPlugin.\u0275fac
});
var HammerGesturesPlugin = _HammerGesturesPlugin;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HammerGesturesPlugin, [{
    type: Injectable
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }, {
    type: HammerGestureConfig,
    decorators: [{
      type: Inject,
      args: [HAMMER_GESTURE_CONFIG]
    }]
  }, {
    type: Console
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [HAMMER_LOADER]
    }]
  }], null);
})();
var _HammerModule = class _HammerModule {
};
_HammerModule.\u0275fac = function HammerModule_Factory(t) {
  return new (t || _HammerModule)();
};
_HammerModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _HammerModule
});
_HammerModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
  providers: [{
    provide: EVENT_MANAGER_PLUGINS,
    useClass: HammerGesturesPlugin,
    multi: true,
    deps: [DOCUMENT2, HAMMER_GESTURE_CONFIG, Console, [new Optional(), HAMMER_LOADER]]
  }, {
    provide: HAMMER_GESTURE_CONFIG,
    useClass: HammerGestureConfig,
    deps: []
  }]
});
var HammerModule = _HammerModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HammerModule, [{
    type: NgModule,
    args: [{
      providers: [{
        provide: EVENT_MANAGER_PLUGINS,
        useClass: HammerGesturesPlugin,
        multi: true,
        deps: [DOCUMENT2, HAMMER_GESTURE_CONFIG, Console, [new Optional(), HAMMER_LOADER]]
      }, {
        provide: HAMMER_GESTURE_CONFIG,
        useClass: HammerGestureConfig,
        deps: []
      }]
    }]
  }], null, null);
})();
var _DomSanitizer = class _DomSanitizer {
};
_DomSanitizer.\u0275fac = function DomSanitizer_Factory(t) {
  return new (t || _DomSanitizer)();
};
_DomSanitizer.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _DomSanitizer,
  factory: function DomSanitizer_Factory(t) {
    let r = null;
    if (t) {
      r = new (t || _DomSanitizer)();
    } else {
      r = \u0275\u0275inject(DomSanitizerImpl);
    }
    return r;
  },
  providedIn: "root"
});
var DomSanitizer = _DomSanitizer;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DomSanitizer, [{
    type: Injectable,
    args: [{
      providedIn: "root",
      useExisting: forwardRef(() => DomSanitizerImpl)
    }]
  }], null, null);
})();
function domSanitizerImplFactory(injector) {
  return new DomSanitizerImpl(injector.get(DOCUMENT2));
}
var _DomSanitizerImpl = class _DomSanitizerImpl extends DomSanitizer {
  constructor(_doc) {
    super();
    this._doc = _doc;
  }
  sanitize(ctx, value) {
    if (value == null)
      return null;
    switch (ctx) {
      case SecurityContext.NONE:
        return value;
      case SecurityContext.HTML:
        if (allowSanitizationBypassAndThrow(
          value,
          "HTML"
          /* BypassType.Html */
        )) {
          return unwrapSafeValue(value);
        }
        return _sanitizeHtml(this._doc, String(value)).toString();
      case SecurityContext.STYLE:
        if (allowSanitizationBypassAndThrow(
          value,
          "Style"
          /* BypassType.Style */
        )) {
          return unwrapSafeValue(value);
        }
        return value;
      case SecurityContext.SCRIPT:
        if (allowSanitizationBypassAndThrow(
          value,
          "Script"
          /* BypassType.Script */
        )) {
          return unwrapSafeValue(value);
        }
        throw new RuntimeError(5200, (typeof ngDevMode === "undefined" || ngDevMode) && "unsafe value used in a script context");
      case SecurityContext.URL:
        if (allowSanitizationBypassAndThrow(
          value,
          "URL"
          /* BypassType.Url */
        )) {
          return unwrapSafeValue(value);
        }
        return _sanitizeUrl(String(value));
      case SecurityContext.RESOURCE_URL:
        if (allowSanitizationBypassAndThrow(
          value,
          "ResourceURL"
          /* BypassType.ResourceUrl */
        )) {
          return unwrapSafeValue(value);
        }
        throw new RuntimeError(5201, (typeof ngDevMode === "undefined" || ngDevMode) && `unsafe value used in a resource URL context (see ${XSS_SECURITY_URL})`);
      default:
        throw new RuntimeError(5202, (typeof ngDevMode === "undefined" || ngDevMode) && `Unexpected SecurityContext ${ctx} (see ${XSS_SECURITY_URL})`);
    }
  }
  bypassSecurityTrustHtml(value) {
    return bypassSanitizationTrustHtml(value);
  }
  bypassSecurityTrustStyle(value) {
    return bypassSanitizationTrustStyle(value);
  }
  bypassSecurityTrustScript(value) {
    return bypassSanitizationTrustScript(value);
  }
  bypassSecurityTrustUrl(value) {
    return bypassSanitizationTrustUrl(value);
  }
  bypassSecurityTrustResourceUrl(value) {
    return bypassSanitizationTrustResourceUrl(value);
  }
};
_DomSanitizerImpl.\u0275fac = function DomSanitizerImpl_Factory(t) {
  return new (t || _DomSanitizerImpl)(\u0275\u0275inject(DOCUMENT2));
};
_DomSanitizerImpl.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _DomSanitizerImpl,
  factory: function DomSanitizerImpl_Factory(t) {
    let r = null;
    if (t) {
      r = new t();
    } else {
      r = domSanitizerImplFactory(\u0275\u0275inject(Injector));
    }
    return r;
  },
  providedIn: "root"
});
var DomSanitizerImpl = _DomSanitizerImpl;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DomSanitizerImpl, [{
    type: Injectable,
    args: [{
      providedIn: "root",
      useFactory: domSanitizerImplFactory,
      deps: [Injector]
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }], null);
})();
var VERSION3 = new Version("17.0.7");

// node_modules/@angular/animations/fesm2022/animations.mjs
var AUTO_STYLE = "*";
function trigger(name, definitions) {
  return {
    type: 7,
    name,
    definitions,
    options: {}
  };
}
function animate(timings, styles = null) {
  return {
    type: 4,
    styles,
    timings
  };
}
function group(steps, options = null) {
  return {
    type: 3,
    steps,
    options
  };
}
function sequence(steps, options = null) {
  return {
    type: 2,
    steps,
    options
  };
}
function style(tokens) {
  return {
    type: 6,
    styles: tokens,
    offset: null
  };
}
function state(name, styles, options) {
  return {
    type: 0,
    name,
    styles,
    options
  };
}
function transition(stateChangeExpr, steps, options = null) {
  return {
    type: 1,
    expr: stateChangeExpr,
    animation: steps,
    options
  };
}
function animateChild(options = null) {
  return {
    type: 9,
    options
  };
}
function query(selector, animation, options = null) {
  return {
    type: 11,
    selector,
    animation,
    options
  };
}
var _AnimationBuilder = class _AnimationBuilder {
};
_AnimationBuilder.\u0275fac = function AnimationBuilder_Factory(t) {
  return new (t || _AnimationBuilder)();
};
_AnimationBuilder.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _AnimationBuilder,
  factory: () => (() => inject(BrowserAnimationBuilder))(),
  providedIn: "root"
});
var AnimationBuilder = _AnimationBuilder;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AnimationBuilder, [{
    type: Injectable,
    args: [{
      providedIn: "root",
      useFactory: () => inject(BrowserAnimationBuilder)
    }]
  }], null, null);
})();
var AnimationFactory = class {
};
var _BrowserAnimationBuilder = class _BrowserAnimationBuilder extends AnimationBuilder {
  constructor(rootRenderer, doc) {
    super();
    this.animationModuleType = inject(ANIMATION_MODULE_TYPE, {
      optional: true
    });
    this._nextAnimationId = 0;
    const typeData = {
      id: "0",
      encapsulation: ViewEncapsulation$1.None,
      styles: [],
      data: {
        animation: []
      }
    };
    this._renderer = rootRenderer.createRenderer(doc.body, typeData);
    if (this.animationModuleType === null && !isAnimationRenderer(this._renderer)) {
      throw new RuntimeError(3600, (typeof ngDevMode === "undefined" || ngDevMode) && "Angular detected that the `AnimationBuilder` was injected, but animation support was not enabled. Please make sure that you enable animations in your application by calling `provideAnimations()` or `provideAnimationsAsync()` function.");
    }
  }
  build(animation) {
    const id = this._nextAnimationId;
    this._nextAnimationId++;
    const entry = Array.isArray(animation) ? sequence(animation) : animation;
    issueAnimationCommand(this._renderer, null, id, "register", [entry]);
    return new BrowserAnimationFactory(id, this._renderer);
  }
};
_BrowserAnimationBuilder.\u0275fac = function BrowserAnimationBuilder_Factory(t) {
  return new (t || _BrowserAnimationBuilder)(\u0275\u0275inject(RendererFactory2), \u0275\u0275inject(DOCUMENT2));
};
_BrowserAnimationBuilder.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _BrowserAnimationBuilder,
  factory: _BrowserAnimationBuilder.\u0275fac,
  providedIn: "root"
});
var BrowserAnimationBuilder = _BrowserAnimationBuilder;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(BrowserAnimationBuilder, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: RendererFactory2
  }, {
    type: Document,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }], null);
})();
var BrowserAnimationFactory = class extends AnimationFactory {
  constructor(_id, _renderer) {
    super();
    this._id = _id;
    this._renderer = _renderer;
  }
  create(element, options) {
    return new RendererAnimationPlayer(this._id, element, options || {}, this._renderer);
  }
};
var RendererAnimationPlayer = class {
  constructor(id, element, options, _renderer) {
    this.id = id;
    this.element = element;
    this._renderer = _renderer;
    this.parentPlayer = null;
    this._started = false;
    this.totalTime = 0;
    this._command("create", options);
  }
  _listen(eventName, callback) {
    return this._renderer.listen(this.element, `@@${this.id}:${eventName}`, callback);
  }
  _command(command, ...args) {
    issueAnimationCommand(this._renderer, this.element, this.id, command, args);
  }
  onDone(fn) {
    this._listen("done", fn);
  }
  onStart(fn) {
    this._listen("start", fn);
  }
  onDestroy(fn) {
    this._listen("destroy", fn);
  }
  init() {
    this._command("init");
  }
  hasStarted() {
    return this._started;
  }
  play() {
    this._command("play");
    this._started = true;
  }
  pause() {
    this._command("pause");
  }
  restart() {
    this._command("restart");
  }
  finish() {
    this._command("finish");
  }
  destroy() {
    this._command("destroy");
  }
  reset() {
    this._command("reset");
    this._started = false;
  }
  setPosition(p) {
    this._command("setPosition", p);
  }
  getPosition() {
    return unwrapAnimationRenderer(this._renderer)?.engine?.players[this.id]?.getPosition() ?? 0;
  }
};
function issueAnimationCommand(renderer, element, id, command, args) {
  renderer.setProperty(element, `@@${id}:${command}`, args);
}
function unwrapAnimationRenderer(renderer) {
  const type = renderer.\u0275type;
  if (type === 0) {
    return renderer;
  } else if (type === 1) {
    return renderer.animationRenderer;
  }
  return null;
}
function isAnimationRenderer(renderer) {
  const type = renderer.\u0275type;
  return type === 0 || type === 1;
}
var NoopAnimationPlayer = class {
  constructor(duration = 0, delay = 0) {
    this._onDoneFns = [];
    this._onStartFns = [];
    this._onDestroyFns = [];
    this._originalOnDoneFns = [];
    this._originalOnStartFns = [];
    this._started = false;
    this._destroyed = false;
    this._finished = false;
    this._position = 0;
    this.parentPlayer = null;
    this.totalTime = duration + delay;
  }
  _onFinish() {
    if (!this._finished) {
      this._finished = true;
      this._onDoneFns.forEach((fn) => fn());
      this._onDoneFns = [];
    }
  }
  onStart(fn) {
    this._originalOnStartFns.push(fn);
    this._onStartFns.push(fn);
  }
  onDone(fn) {
    this._originalOnDoneFns.push(fn);
    this._onDoneFns.push(fn);
  }
  onDestroy(fn) {
    this._onDestroyFns.push(fn);
  }
  hasStarted() {
    return this._started;
  }
  init() {
  }
  play() {
    if (!this.hasStarted()) {
      this._onStart();
      this.triggerMicrotask();
    }
    this._started = true;
  }
  /** @internal */
  triggerMicrotask() {
    queueMicrotask(() => this._onFinish());
  }
  _onStart() {
    this._onStartFns.forEach((fn) => fn());
    this._onStartFns = [];
  }
  pause() {
  }
  restart() {
  }
  finish() {
    this._onFinish();
  }
  destroy() {
    if (!this._destroyed) {
      this._destroyed = true;
      if (!this.hasStarted()) {
        this._onStart();
      }
      this.finish();
      this._onDestroyFns.forEach((fn) => fn());
      this._onDestroyFns = [];
    }
  }
  reset() {
    this._started = false;
    this._finished = false;
    this._onStartFns = this._originalOnStartFns;
    this._onDoneFns = this._originalOnDoneFns;
  }
  setPosition(position) {
    this._position = this.totalTime ? position * this.totalTime : 1;
  }
  getPosition() {
    return this.totalTime ? this._position / this.totalTime : 1;
  }
  /** @internal */
  triggerCallback(phaseName) {
    const methods = phaseName == "start" ? this._onStartFns : this._onDoneFns;
    methods.forEach((fn) => fn());
    methods.length = 0;
  }
};
var AnimationGroupPlayer = class {
  constructor(_players) {
    this._onDoneFns = [];
    this._onStartFns = [];
    this._finished = false;
    this._started = false;
    this._destroyed = false;
    this._onDestroyFns = [];
    this.parentPlayer = null;
    this.totalTime = 0;
    this.players = _players;
    let doneCount = 0;
    let destroyCount = 0;
    let startCount = 0;
    const total = this.players.length;
    if (total == 0) {
      queueMicrotask(() => this._onFinish());
    } else {
      this.players.forEach((player) => {
        player.onDone(() => {
          if (++doneCount == total) {
            this._onFinish();
          }
        });
        player.onDestroy(() => {
          if (++destroyCount == total) {
            this._onDestroy();
          }
        });
        player.onStart(() => {
          if (++startCount == total) {
            this._onStart();
          }
        });
      });
    }
    this.totalTime = this.players.reduce((time, player) => Math.max(time, player.totalTime), 0);
  }
  _onFinish() {
    if (!this._finished) {
      this._finished = true;
      this._onDoneFns.forEach((fn) => fn());
      this._onDoneFns = [];
    }
  }
  init() {
    this.players.forEach((player) => player.init());
  }
  onStart(fn) {
    this._onStartFns.push(fn);
  }
  _onStart() {
    if (!this.hasStarted()) {
      this._started = true;
      this._onStartFns.forEach((fn) => fn());
      this._onStartFns = [];
    }
  }
  onDone(fn) {
    this._onDoneFns.push(fn);
  }
  onDestroy(fn) {
    this._onDestroyFns.push(fn);
  }
  hasStarted() {
    return this._started;
  }
  play() {
    if (!this.parentPlayer) {
      this.init();
    }
    this._onStart();
    this.players.forEach((player) => player.play());
  }
  pause() {
    this.players.forEach((player) => player.pause());
  }
  restart() {
    this.players.forEach((player) => player.restart());
  }
  finish() {
    this._onFinish();
    this.players.forEach((player) => player.finish());
  }
  destroy() {
    this._onDestroy();
  }
  _onDestroy() {
    if (!this._destroyed) {
      this._destroyed = true;
      this._onFinish();
      this.players.forEach((player) => player.destroy());
      this._onDestroyFns.forEach((fn) => fn());
      this._onDestroyFns = [];
    }
  }
  reset() {
    this.players.forEach((player) => player.reset());
    this._destroyed = false;
    this._finished = false;
    this._started = false;
  }
  setPosition(p) {
    const timeAtPosition = p * this.totalTime;
    this.players.forEach((player) => {
      const position = player.totalTime ? Math.min(1, timeAtPosition / player.totalTime) : 1;
      player.setPosition(position);
    });
  }
  getPosition() {
    const longestPlayer = this.players.reduce((longestSoFar, player) => {
      const newPlayerIsLongest = longestSoFar === null || player.totalTime > longestSoFar.totalTime;
      return newPlayerIsLongest ? player : longestSoFar;
    }, null);
    return longestPlayer != null ? longestPlayer.getPosition() : 0;
  }
  beforeDestroy() {
    this.players.forEach((player) => {
      if (player.beforeDestroy) {
        player.beforeDestroy();
      }
    });
  }
  /** @internal */
  triggerCallback(phaseName) {
    const methods = phaseName == "start" ? this._onStartFns : this._onDoneFns;
    methods.forEach((fn) => fn());
    methods.length = 0;
  }
};
var \u0275PRE_STYLE = "!";

// node_modules/@angular/animations/fesm2022/browser.mjs
var LINE_START = "\n - ";
function invalidTimingValue(exp) {
  return new RuntimeError(3e3, ngDevMode && `The provided timing value "${exp}" is invalid.`);
}
function negativeStepValue() {
  return new RuntimeError(3100, ngDevMode && "Duration values below 0 are not allowed for this animation step.");
}
function negativeDelayValue() {
  return new RuntimeError(3101, ngDevMode && "Delay values below 0 are not allowed for this animation step.");
}
function invalidStyleParams(varName) {
  return new RuntimeError(3001, ngDevMode && `Unable to resolve the local animation param ${varName} in the given list of values`);
}
function invalidParamValue(varName) {
  return new RuntimeError(3003, ngDevMode && `Please provide a value for the animation param ${varName}`);
}
function invalidNodeType(nodeType) {
  return new RuntimeError(3004, ngDevMode && `Unable to resolve animation metadata node #${nodeType}`);
}
function invalidCssUnitValue(userProvidedProperty, value) {
  return new RuntimeError(3005, ngDevMode && `Please provide a CSS unit value for ${userProvidedProperty}:${value}`);
}
function invalidTrigger() {
  return new RuntimeError(3006, ngDevMode && "animation triggers cannot be prefixed with an `@` sign (e.g. trigger('@foo', [...]))");
}
function invalidDefinition() {
  return new RuntimeError(3007, ngDevMode && "only state() and transition() definitions can sit inside of a trigger()");
}
function invalidState(metadataName, missingSubs) {
  return new RuntimeError(3008, ngDevMode && `state("${metadataName}", ...) must define default values for all the following style substitutions: ${missingSubs.join(", ")}`);
}
function invalidStyleValue(value) {
  return new RuntimeError(3002, ngDevMode && `The provided style string value ${value} is not allowed.`);
}
function invalidParallelAnimation(prop, firstStart, firstEnd, secondStart, secondEnd) {
  return new RuntimeError(3010, ngDevMode && `The CSS property "${prop}" that exists between the times of "${firstStart}ms" and "${firstEnd}ms" is also being animated in a parallel animation between the times of "${secondStart}ms" and "${secondEnd}ms"`);
}
function invalidKeyframes() {
  return new RuntimeError(3011, ngDevMode && `keyframes() must be placed inside of a call to animate()`);
}
function invalidOffset() {
  return new RuntimeError(3012, ngDevMode && `Please ensure that all keyframe offsets are between 0 and 1`);
}
function keyframeOffsetsOutOfOrder() {
  return new RuntimeError(3200, ngDevMode && `Please ensure that all keyframe offsets are in order`);
}
function keyframesMissingOffsets() {
  return new RuntimeError(3202, ngDevMode && `Not all style() steps within the declared keyframes() contain offsets`);
}
function invalidStagger() {
  return new RuntimeError(3013, ngDevMode && `stagger() can only be used inside of query()`);
}
function invalidQuery(selector) {
  return new RuntimeError(3014, ngDevMode && `\`query("${selector}")\` returned zero elements. (Use \`query("${selector}", { optional: true })\` if you wish to allow this.)`);
}
function invalidExpression(expr) {
  return new RuntimeError(3015, ngDevMode && `The provided transition expression "${expr}" is not supported`);
}
function invalidTransitionAlias(alias) {
  return new RuntimeError(3016, ngDevMode && `The transition alias value "${alias}" is not supported`);
}
function triggerBuildFailed(name, errors) {
  return new RuntimeError(3404, ngDevMode && `The animation trigger "${name}" has failed to build due to the following errors:
 - ${errors.map((err) => err.message).join("\n - ")}`);
}
function animationFailed(errors) {
  return new RuntimeError(3502, ngDevMode && `Unable to animate due to the following errors:${LINE_START}${errors.map((err) => err.message).join(LINE_START)}`);
}
function registerFailed(errors) {
  return new RuntimeError(3503, ngDevMode && `Unable to build the animation due to the following errors: ${errors.map((err) => err.message).join("\n")}`);
}
function missingOrDestroyedAnimation() {
  return new RuntimeError(3300, ngDevMode && "The requested animation doesn't exist or has already been destroyed");
}
function createAnimationFailed(errors) {
  return new RuntimeError(3504, ngDevMode && `Unable to create the animation due to the following errors:${errors.map((err) => err.message).join("\n")}`);
}
function missingPlayer(id) {
  return new RuntimeError(3301, ngDevMode && `Unable to find the timeline player referenced by ${id}`);
}
function missingTrigger(phase, name) {
  return new RuntimeError(3302, ngDevMode && `Unable to listen on the animation trigger event "${phase}" because the animation trigger "${name}" doesn't exist!`);
}
function missingEvent(name) {
  return new RuntimeError(3303, ngDevMode && `Unable to listen on the animation trigger "${name}" because the provided event is undefined!`);
}
function unsupportedTriggerEvent(phase, name) {
  return new RuntimeError(3400, ngDevMode && `The provided animation trigger event "${phase}" for the animation trigger "${name}" is not supported!`);
}
function unregisteredTrigger(name) {
  return new RuntimeError(3401, ngDevMode && `The provided animation trigger "${name}" has not been registered!`);
}
function triggerTransitionsFailed(errors) {
  return new RuntimeError(3402, ngDevMode && `Unable to process animations due to the following failed trigger transitions
 ${errors.map((err) => err.message).join("\n")}`);
}
function transitionFailed(name, errors) {
  return new RuntimeError(3505, ngDevMode && `@${name} has failed due to:
 ${errors.map((err) => err.message).join("\n- ")}`);
}
var ANIMATABLE_PROP_SET = /* @__PURE__ */ new Set(["-moz-outline-radius", "-moz-outline-radius-bottomleft", "-moz-outline-radius-bottomright", "-moz-outline-radius-topleft", "-moz-outline-radius-topright", "-ms-grid-columns", "-ms-grid-rows", "-webkit-line-clamp", "-webkit-text-fill-color", "-webkit-text-stroke", "-webkit-text-stroke-color", "accent-color", "all", "backdrop-filter", "background", "background-color", "background-position", "background-size", "block-size", "border", "border-block-end", "border-block-end-color", "border-block-end-width", "border-block-start", "border-block-start-color", "border-block-start-width", "border-bottom", "border-bottom-color", "border-bottom-left-radius", "border-bottom-right-radius", "border-bottom-width", "border-color", "border-end-end-radius", "border-end-start-radius", "border-image-outset", "border-image-slice", "border-image-width", "border-inline-end", "border-inline-end-color", "border-inline-end-width", "border-inline-start", "border-inline-start-color", "border-inline-start-width", "border-left", "border-left-color", "border-left-width", "border-radius", "border-right", "border-right-color", "border-right-width", "border-start-end-radius", "border-start-start-radius", "border-top", "border-top-color", "border-top-left-radius", "border-top-right-radius", "border-top-width", "border-width", "bottom", "box-shadow", "caret-color", "clip", "clip-path", "color", "column-count", "column-gap", "column-rule", "column-rule-color", "column-rule-width", "column-width", "columns", "filter", "flex", "flex-basis", "flex-grow", "flex-shrink", "font", "font-size", "font-size-adjust", "font-stretch", "font-variation-settings", "font-weight", "gap", "grid-column-gap", "grid-gap", "grid-row-gap", "grid-template-columns", "grid-template-rows", "height", "inline-size", "input-security", "inset", "inset-block", "inset-block-end", "inset-block-start", "inset-inline", "inset-inline-end", "inset-inline-start", "left", "letter-spacing", "line-clamp", "line-height", "margin", "margin-block-end", "margin-block-start", "margin-bottom", "margin-inline-end", "margin-inline-start", "margin-left", "margin-right", "margin-top", "mask", "mask-border", "mask-position", "mask-size", "max-block-size", "max-height", "max-inline-size", "max-lines", "max-width", "min-block-size", "min-height", "min-inline-size", "min-width", "object-position", "offset", "offset-anchor", "offset-distance", "offset-path", "offset-position", "offset-rotate", "opacity", "order", "outline", "outline-color", "outline-offset", "outline-width", "padding", "padding-block-end", "padding-block-start", "padding-bottom", "padding-inline-end", "padding-inline-start", "padding-left", "padding-right", "padding-top", "perspective", "perspective-origin", "right", "rotate", "row-gap", "scale", "scroll-margin", "scroll-margin-block", "scroll-margin-block-end", "scroll-margin-block-start", "scroll-margin-bottom", "scroll-margin-inline", "scroll-margin-inline-end", "scroll-margin-inline-start", "scroll-margin-left", "scroll-margin-right", "scroll-margin-top", "scroll-padding", "scroll-padding-block", "scroll-padding-block-end", "scroll-padding-block-start", "scroll-padding-bottom", "scroll-padding-inline", "scroll-padding-inline-end", "scroll-padding-inline-start", "scroll-padding-left", "scroll-padding-right", "scroll-padding-top", "scroll-snap-coordinate", "scroll-snap-destination", "scrollbar-color", "shape-image-threshold", "shape-margin", "shape-outside", "tab-size", "text-decoration", "text-decoration-color", "text-decoration-thickness", "text-emphasis", "text-emphasis-color", "text-indent", "text-shadow", "text-underline-offset", "top", "transform", "transform-origin", "translate", "vertical-align", "visibility", "width", "word-spacing", "z-index", "zoom"]);
function optimizeGroupPlayer(players) {
  switch (players.length) {
    case 0:
      return new NoopAnimationPlayer();
    case 1:
      return players[0];
    default:
      return new AnimationGroupPlayer(players);
  }
}
function normalizeKeyframes$1(normalizer, keyframes, preStyles = /* @__PURE__ */ new Map(), postStyles = /* @__PURE__ */ new Map()) {
  const errors = [];
  const normalizedKeyframes = [];
  let previousOffset = -1;
  let previousKeyframe = null;
  keyframes.forEach((kf) => {
    const offset = kf.get("offset");
    const isSameOffset = offset == previousOffset;
    const normalizedKeyframe = isSameOffset && previousKeyframe || /* @__PURE__ */ new Map();
    kf.forEach((val, prop) => {
      let normalizedProp = prop;
      let normalizedValue = val;
      if (prop !== "offset") {
        normalizedProp = normalizer.normalizePropertyName(normalizedProp, errors);
        switch (normalizedValue) {
          case \u0275PRE_STYLE:
            normalizedValue = preStyles.get(prop);
            break;
          case AUTO_STYLE:
            normalizedValue = postStyles.get(prop);
            break;
          default:
            normalizedValue = normalizer.normalizeStyleValue(prop, normalizedProp, normalizedValue, errors);
            break;
        }
      }
      normalizedKeyframe.set(normalizedProp, normalizedValue);
    });
    if (!isSameOffset) {
      normalizedKeyframes.push(normalizedKeyframe);
    }
    previousKeyframe = normalizedKeyframe;
    previousOffset = offset;
  });
  if (errors.length) {
    throw animationFailed(errors);
  }
  return normalizedKeyframes;
}
function listenOnPlayer(player, eventName, event, callback) {
  switch (eventName) {
    case "start":
      player.onStart(() => callback(event && copyAnimationEvent(event, "start", player)));
      break;
    case "done":
      player.onDone(() => callback(event && copyAnimationEvent(event, "done", player)));
      break;
    case "destroy":
      player.onDestroy(() => callback(event && copyAnimationEvent(event, "destroy", player)));
      break;
  }
}
function copyAnimationEvent(e, phaseName, player) {
  const totalTime = player.totalTime;
  const disabled = player.disabled ? true : false;
  const event = makeAnimationEvent(e.element, e.triggerName, e.fromState, e.toState, phaseName || e.phaseName, totalTime == void 0 ? e.totalTime : totalTime, disabled);
  const data = e["_data"];
  if (data != null) {
    event["_data"] = data;
  }
  return event;
}
function makeAnimationEvent(element, triggerName, fromState, toState, phaseName = "", totalTime = 0, disabled) {
  return {
    element,
    triggerName,
    fromState,
    toState,
    phaseName,
    totalTime,
    disabled: !!disabled
  };
}
function getOrSetDefaultValue(map2, key, defaultValue) {
  let value = map2.get(key);
  if (!value) {
    map2.set(key, value = defaultValue);
  }
  return value;
}
function parseTimelineCommand(command) {
  const separatorPos = command.indexOf(":");
  const id = command.substring(1, separatorPos);
  const action = command.slice(separatorPos + 1);
  return [id, action];
}
var documentElement = /* @__PURE__ */ (() => typeof document === "undefined" ? null : document.documentElement)();
function getParentElement(element) {
  const parent = element.parentNode || element.host || null;
  if (parent === documentElement) {
    return null;
  }
  return parent;
}
function containsVendorPrefix(prop) {
  return prop.substring(1, 6) == "ebkit";
}
var _CACHED_BODY = null;
var _IS_WEBKIT = false;
function validateStyleProperty(prop) {
  if (!_CACHED_BODY) {
    _CACHED_BODY = getBodyNode() || {};
    _IS_WEBKIT = _CACHED_BODY.style ? "WebkitAppearance" in _CACHED_BODY.style : false;
  }
  let result = true;
  if (_CACHED_BODY.style && !containsVendorPrefix(prop)) {
    result = prop in _CACHED_BODY.style;
    if (!result && _IS_WEBKIT) {
      const camelProp = "Webkit" + prop.charAt(0).toUpperCase() + prop.slice(1);
      result = camelProp in _CACHED_BODY.style;
    }
  }
  return result;
}
function validateWebAnimatableStyleProperty(prop) {
  return ANIMATABLE_PROP_SET.has(prop);
}
function getBodyNode() {
  if (typeof document != "undefined") {
    return document.body;
  }
  return null;
}
function containsElement(elm1, elm2) {
  while (elm2) {
    if (elm2 === elm1) {
      return true;
    }
    elm2 = getParentElement(elm2);
  }
  return false;
}
function invokeQuery(element, selector, multi) {
  if (multi) {
    return Array.from(element.querySelectorAll(selector));
  }
  const elem = element.querySelector(selector);
  return elem ? [elem] : [];
}
var _NoopAnimationDriver = class _NoopAnimationDriver {
  /**
   * @returns Whether `prop` is a valid CSS property
   */
  validateStyleProperty(prop) {
    return validateStyleProperty(prop);
  }
  /**
   * @deprecated unused
   */
  matchesElement(_element, _selector) {
    return false;
  }
  /**
   *
   * @returns Whether elm1 contains elm2.
   */
  containsElement(elm1, elm2) {
    return containsElement(elm1, elm2);
  }
  /**
   * @returns Rhe parent of the given element or `null` if the element is the `document`
   */
  getParentElement(element) {
    return getParentElement(element);
  }
  /**
   * @returns The result of the query selector on the element. The array will contain up to 1 item
   *     if `multi` is  `false`.
   */
  query(element, selector, multi) {
    return invokeQuery(element, selector, multi);
  }
  /**
   * @returns The `defaultValue` or empty string
   */
  computeStyle(element, prop, defaultValue) {
    return defaultValue || "";
  }
  /**
   * @returns An `NoopAnimationPlayer`
   */
  animate(element, keyframes, duration, delay, easing, previousPlayers = [], scrubberAccessRequested) {
    return new NoopAnimationPlayer(duration, delay);
  }
};
_NoopAnimationDriver.\u0275fac = function NoopAnimationDriver_Factory(t) {
  return new (t || _NoopAnimationDriver)();
};
_NoopAnimationDriver.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _NoopAnimationDriver,
  factory: _NoopAnimationDriver.\u0275fac
});
var NoopAnimationDriver = _NoopAnimationDriver;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NoopAnimationDriver, [{
    type: Injectable
  }], null, null);
})();
var _AnimationDriver = class _AnimationDriver {
};
_AnimationDriver.NOOP = /* @__PURE__ */ new NoopAnimationDriver();
var AnimationDriver = _AnimationDriver;
var AnimationStyleNormalizer = class {
};
var ONE_SECOND = 1e3;
var SUBSTITUTION_EXPR_START = "{{";
var SUBSTITUTION_EXPR_END = "}}";
var ENTER_CLASSNAME = "ng-enter";
var LEAVE_CLASSNAME = "ng-leave";
var NG_TRIGGER_CLASSNAME = "ng-trigger";
var NG_TRIGGER_SELECTOR = ".ng-trigger";
var NG_ANIMATING_CLASSNAME = "ng-animating";
var NG_ANIMATING_SELECTOR = ".ng-animating";
function resolveTimingValue(value) {
  if (typeof value == "number")
    return value;
  const matches = value.match(/^(-?[\.\d]+)(m?s)/);
  if (!matches || matches.length < 2)
    return 0;
  return _convertTimeValueToMS(parseFloat(matches[1]), matches[2]);
}
function _convertTimeValueToMS(value, unit) {
  switch (unit) {
    case "s":
      return value * ONE_SECOND;
    default:
      return value;
  }
}
function resolveTiming(timings, errors, allowNegativeValues) {
  return timings.hasOwnProperty("duration") ? timings : parseTimeExpression(timings, errors, allowNegativeValues);
}
function parseTimeExpression(exp, errors, allowNegativeValues) {
  const regex = /^(-?[\.\d]+)(m?s)(?:\s+(-?[\.\d]+)(m?s))?(?:\s+([-a-z]+(?:\(.+?\))?))?$/i;
  let duration;
  let delay = 0;
  let easing = "";
  if (typeof exp === "string") {
    const matches = exp.match(regex);
    if (matches === null) {
      errors.push(invalidTimingValue(exp));
      return {
        duration: 0,
        delay: 0,
        easing: ""
      };
    }
    duration = _convertTimeValueToMS(parseFloat(matches[1]), matches[2]);
    const delayMatch = matches[3];
    if (delayMatch != null) {
      delay = _convertTimeValueToMS(parseFloat(delayMatch), matches[4]);
    }
    const easingVal = matches[5];
    if (easingVal) {
      easing = easingVal;
    }
  } else {
    duration = exp;
  }
  if (!allowNegativeValues) {
    let containsErrors = false;
    let startIndex = errors.length;
    if (duration < 0) {
      errors.push(negativeStepValue());
      containsErrors = true;
    }
    if (delay < 0) {
      errors.push(negativeDelayValue());
      containsErrors = true;
    }
    if (containsErrors) {
      errors.splice(startIndex, 0, invalidTimingValue(exp));
    }
  }
  return {
    duration,
    delay,
    easing
  };
}
function copyObj(obj, destination = {}) {
  Object.keys(obj).forEach((prop) => {
    destination[prop] = obj[prop];
  });
  return destination;
}
function convertToMap(obj) {
  const styleMap = /* @__PURE__ */ new Map();
  Object.keys(obj).forEach((prop) => {
    const val = obj[prop];
    styleMap.set(prop, val);
  });
  return styleMap;
}
function normalizeKeyframes(keyframes) {
  if (!keyframes.length) {
    return [];
  }
  if (keyframes[0] instanceof Map) {
    return keyframes;
  }
  return keyframes.map((kf) => convertToMap(kf));
}
function copyStyles(styles, destination = /* @__PURE__ */ new Map(), backfill) {
  if (backfill) {
    for (let [prop, val] of backfill) {
      destination.set(prop, val);
    }
  }
  for (let [prop, val] of styles) {
    destination.set(prop, val);
  }
  return destination;
}
function setStyles(element, styles, formerStyles) {
  styles.forEach((val, prop) => {
    const camelProp = dashCaseToCamelCase(prop);
    if (formerStyles && !formerStyles.has(prop)) {
      formerStyles.set(prop, element.style[camelProp]);
    }
    element.style[camelProp] = val;
  });
}
function eraseStyles(element, styles) {
  styles.forEach((_, prop) => {
    const camelProp = dashCaseToCamelCase(prop);
    element.style[camelProp] = "";
  });
}
function normalizeAnimationEntry(steps) {
  if (Array.isArray(steps)) {
    if (steps.length == 1)
      return steps[0];
    return sequence(steps);
  }
  return steps;
}
function validateStyleParams(value, options, errors) {
  const params = options.params || {};
  const matches = extractStyleParams(value);
  if (matches.length) {
    matches.forEach((varName) => {
      if (!params.hasOwnProperty(varName)) {
        errors.push(invalidStyleParams(varName));
      }
    });
  }
}
var PARAM_REGEX = new RegExp(`${SUBSTITUTION_EXPR_START}\\s*(.+?)\\s*${SUBSTITUTION_EXPR_END}`, "g");
function extractStyleParams(value) {
  let params = [];
  if (typeof value === "string") {
    let match2;
    while (match2 = PARAM_REGEX.exec(value)) {
      params.push(match2[1]);
    }
    PARAM_REGEX.lastIndex = 0;
  }
  return params;
}
function interpolateParams(value, params, errors) {
  const original = value.toString();
  const str = original.replace(PARAM_REGEX, (_, varName) => {
    let localVal = params[varName];
    if (localVal == null) {
      errors.push(invalidParamValue(varName));
      localVal = "";
    }
    return localVal.toString();
  });
  return str == original ? value : str;
}
function iteratorToArray(iterator2) {
  const arr = [];
  let item = iterator2.next();
  while (!item.done) {
    arr.push(item.value);
    item = iterator2.next();
  }
  return arr;
}
var DASH_CASE_REGEXP = /-+([a-z0-9])/g;
function dashCaseToCamelCase(input) {
  return input.replace(DASH_CASE_REGEXP, (...m) => m[1].toUpperCase());
}
function camelCaseToDashCase2(input) {
  return input.replace(/([a-z])([A-Z])/g, "$1-$2").toLowerCase();
}
function allowPreviousPlayerStylesMerge(duration, delay) {
  return duration === 0 || delay === 0;
}
function balancePreviousStylesIntoKeyframes(element, keyframes, previousStyles) {
  if (previousStyles.size && keyframes.length) {
    let startingKeyframe = keyframes[0];
    let missingStyleProps = [];
    previousStyles.forEach((val, prop) => {
      if (!startingKeyframe.has(prop)) {
        missingStyleProps.push(prop);
      }
      startingKeyframe.set(prop, val);
    });
    if (missingStyleProps.length) {
      for (let i = 1; i < keyframes.length; i++) {
        let kf = keyframes[i];
        missingStyleProps.forEach((prop) => kf.set(prop, computeStyle(element, prop)));
      }
    }
  }
  return keyframes;
}
function visitDslNode(visitor, node, context2) {
  switch (node.type) {
    case 7:
      return visitor.visitTrigger(node, context2);
    case 0:
      return visitor.visitState(node, context2);
    case 1:
      return visitor.visitTransition(node, context2);
    case 2:
      return visitor.visitSequence(node, context2);
    case 3:
      return visitor.visitGroup(node, context2);
    case 4:
      return visitor.visitAnimate(node, context2);
    case 5:
      return visitor.visitKeyframes(node, context2);
    case 6:
      return visitor.visitStyle(node, context2);
    case 8:
      return visitor.visitReference(node, context2);
    case 9:
      return visitor.visitAnimateChild(node, context2);
    case 10:
      return visitor.visitAnimateRef(node, context2);
    case 11:
      return visitor.visitQuery(node, context2);
    case 12:
      return visitor.visitStagger(node, context2);
    default:
      throw invalidNodeType(node.type);
  }
}
function computeStyle(element, prop) {
  return window.getComputedStyle(element)[prop];
}
var DIMENSIONAL_PROP_SET = /* @__PURE__ */ new Set(["width", "height", "minWidth", "minHeight", "maxWidth", "maxHeight", "left", "top", "bottom", "right", "fontSize", "outlineWidth", "outlineOffset", "paddingTop", "paddingLeft", "paddingBottom", "paddingRight", "marginTop", "marginLeft", "marginBottom", "marginRight", "borderRadius", "borderWidth", "borderTopWidth", "borderLeftWidth", "borderRightWidth", "borderBottomWidth", "textIndent", "perspective"]);
var WebAnimationsStyleNormalizer = class extends AnimationStyleNormalizer {
  normalizePropertyName(propertyName, errors) {
    return dashCaseToCamelCase(propertyName);
  }
  normalizeStyleValue(userProvidedProperty, normalizedProperty, value, errors) {
    let unit = "";
    const strVal = value.toString().trim();
    if (DIMENSIONAL_PROP_SET.has(normalizedProperty) && value !== 0 && value !== "0") {
      if (typeof value === "number") {
        unit = "px";
      } else {
        const valAndSuffixMatch = value.match(/^[+-]?[\d\.]+([a-z]*)$/);
        if (valAndSuffixMatch && valAndSuffixMatch[1].length == 0) {
          errors.push(invalidCssUnitValue(userProvidedProperty, value));
        }
      }
    }
    return strVal + unit;
  }
};
function createListOfWarnings(warnings) {
  const LINE_START2 = "\n - ";
  return `${LINE_START2}${warnings.filter(Boolean).map((warning) => warning).join(LINE_START2)}`;
}
function warnTriggerBuild(name, warnings) {
  (typeof ngDevMode === "undefined" || ngDevMode) && console.warn(`The animation trigger "${name}" has built with the following warnings:${createListOfWarnings(warnings)}`);
}
function warnRegister(warnings) {
  (typeof ngDevMode === "undefined" || ngDevMode) && console.warn(`Animation built with the following warnings:${createListOfWarnings(warnings)}`);
}
function pushUnrecognizedPropertiesWarning(warnings, props) {
  if (props.length) {
    warnings.push(`The following provided properties are not recognized: ${props.join(", ")}`);
  }
}
var ANY_STATE = "*";
function parseTransitionExpr(transitionValue, errors) {
  const expressions = [];
  if (typeof transitionValue == "string") {
    transitionValue.split(/\s*,\s*/).forEach((str) => parseInnerTransitionStr(str, expressions, errors));
  } else {
    expressions.push(transitionValue);
  }
  return expressions;
}
function parseInnerTransitionStr(eventStr, expressions, errors) {
  if (eventStr[0] == ":") {
    const result = parseAnimationAlias(eventStr, errors);
    if (typeof result == "function") {
      expressions.push(result);
      return;
    }
    eventStr = result;
  }
  const match2 = eventStr.match(/^(\*|[-\w]+)\s*(<?[=-]>)\s*(\*|[-\w]+)$/);
  if (match2 == null || match2.length < 4) {
    errors.push(invalidExpression(eventStr));
    return expressions;
  }
  const fromState = match2[1];
  const separator = match2[2];
  const toState = match2[3];
  expressions.push(makeLambdaFromStates(fromState, toState));
  const isFullAnyStateExpr = fromState == ANY_STATE && toState == ANY_STATE;
  if (separator[0] == "<" && !isFullAnyStateExpr) {
    expressions.push(makeLambdaFromStates(toState, fromState));
  }
  return;
}
function parseAnimationAlias(alias, errors) {
  switch (alias) {
    case ":enter":
      return "void => *";
    case ":leave":
      return "* => void";
    case ":increment":
      return (fromState, toState) => parseFloat(toState) > parseFloat(fromState);
    case ":decrement":
      return (fromState, toState) => parseFloat(toState) < parseFloat(fromState);
    default:
      errors.push(invalidTransitionAlias(alias));
      return "* => *";
  }
}
var TRUE_BOOLEAN_VALUES = /* @__PURE__ */ new Set(["true", "1"]);
var FALSE_BOOLEAN_VALUES = /* @__PURE__ */ new Set(["false", "0"]);
function makeLambdaFromStates(lhs, rhs) {
  const LHS_MATCH_BOOLEAN = TRUE_BOOLEAN_VALUES.has(lhs) || FALSE_BOOLEAN_VALUES.has(lhs);
  const RHS_MATCH_BOOLEAN = TRUE_BOOLEAN_VALUES.has(rhs) || FALSE_BOOLEAN_VALUES.has(rhs);
  return (fromState, toState) => {
    let lhsMatch = lhs == ANY_STATE || lhs == fromState;
    let rhsMatch = rhs == ANY_STATE || rhs == toState;
    if (!lhsMatch && LHS_MATCH_BOOLEAN && typeof fromState === "boolean") {
      lhsMatch = fromState ? TRUE_BOOLEAN_VALUES.has(lhs) : FALSE_BOOLEAN_VALUES.has(lhs);
    }
    if (!rhsMatch && RHS_MATCH_BOOLEAN && typeof toState === "boolean") {
      rhsMatch = toState ? TRUE_BOOLEAN_VALUES.has(rhs) : FALSE_BOOLEAN_VALUES.has(rhs);
    }
    return lhsMatch && rhsMatch;
  };
}
var SELF_TOKEN = ":self";
var SELF_TOKEN_REGEX = new RegExp(`s*${SELF_TOKEN}s*,?`, "g");
function buildAnimationAst(driver, metadata, errors, warnings) {
  return new AnimationAstBuilderVisitor(driver).build(metadata, errors, warnings);
}
var ROOT_SELECTOR = "";
var AnimationAstBuilderVisitor = class {
  constructor(_driver) {
    this._driver = _driver;
  }
  build(metadata, errors, warnings) {
    const context2 = new AnimationAstBuilderContext(errors);
    this._resetContextStyleTimingState(context2);
    const ast = visitDslNode(this, normalizeAnimationEntry(metadata), context2);
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      if (context2.unsupportedCSSPropertiesFound.size) {
        pushUnrecognizedPropertiesWarning(warnings, [...context2.unsupportedCSSPropertiesFound.keys()]);
      }
    }
    return ast;
  }
  _resetContextStyleTimingState(context2) {
    context2.currentQuerySelector = ROOT_SELECTOR;
    context2.collectedStyles = /* @__PURE__ */ new Map();
    context2.collectedStyles.set(ROOT_SELECTOR, /* @__PURE__ */ new Map());
    context2.currentTime = 0;
  }
  visitTrigger(metadata, context2) {
    let queryCount = context2.queryCount = 0;
    let depCount = context2.depCount = 0;
    const states = [];
    const transitions = [];
    if (metadata.name.charAt(0) == "@") {
      context2.errors.push(invalidTrigger());
    }
    metadata.definitions.forEach((def) => {
      this._resetContextStyleTimingState(context2);
      if (def.type == 0) {
        const stateDef = def;
        const name = stateDef.name;
        name.toString().split(/\s*,\s*/).forEach((n) => {
          stateDef.name = n;
          states.push(this.visitState(stateDef, context2));
        });
        stateDef.name = name;
      } else if (def.type == 1) {
        const transition2 = this.visitTransition(def, context2);
        queryCount += transition2.queryCount;
        depCount += transition2.depCount;
        transitions.push(transition2);
      } else {
        context2.errors.push(invalidDefinition());
      }
    });
    return {
      type: 7,
      name: metadata.name,
      states,
      transitions,
      queryCount,
      depCount,
      options: null
    };
  }
  visitState(metadata, context2) {
    const styleAst = this.visitStyle(metadata.styles, context2);
    const astParams = metadata.options && metadata.options.params || null;
    if (styleAst.containsDynamicStyles) {
      const missingSubs = /* @__PURE__ */ new Set();
      const params = astParams || {};
      styleAst.styles.forEach((style2) => {
        if (style2 instanceof Map) {
          style2.forEach((value) => {
            extractStyleParams(value).forEach((sub) => {
              if (!params.hasOwnProperty(sub)) {
                missingSubs.add(sub);
              }
            });
          });
        }
      });
      if (missingSubs.size) {
        const missingSubsArr = iteratorToArray(missingSubs.values());
        context2.errors.push(invalidState(metadata.name, missingSubsArr));
      }
    }
    return {
      type: 0,
      name: metadata.name,
      style: styleAst,
      options: astParams ? {
        params: astParams
      } : null
    };
  }
  visitTransition(metadata, context2) {
    context2.queryCount = 0;
    context2.depCount = 0;
    const animation = visitDslNode(this, normalizeAnimationEntry(metadata.animation), context2);
    const matchers = parseTransitionExpr(metadata.expr, context2.errors);
    return {
      type: 1,
      matchers,
      animation,
      queryCount: context2.queryCount,
      depCount: context2.depCount,
      options: normalizeAnimationOptions(metadata.options)
    };
  }
  visitSequence(metadata, context2) {
    return {
      type: 2,
      steps: metadata.steps.map((s) => visitDslNode(this, s, context2)),
      options: normalizeAnimationOptions(metadata.options)
    };
  }
  visitGroup(metadata, context2) {
    const currentTime = context2.currentTime;
    let furthestTime = 0;
    const steps = metadata.steps.map((step) => {
      context2.currentTime = currentTime;
      const innerAst = visitDslNode(this, step, context2);
      furthestTime = Math.max(furthestTime, context2.currentTime);
      return innerAst;
    });
    context2.currentTime = furthestTime;
    return {
      type: 3,
      steps,
      options: normalizeAnimationOptions(metadata.options)
    };
  }
  visitAnimate(metadata, context2) {
    const timingAst = constructTimingAst(metadata.timings, context2.errors);
    context2.currentAnimateTimings = timingAst;
    let styleAst;
    let styleMetadata = metadata.styles ? metadata.styles : style({});
    if (styleMetadata.type == 5) {
      styleAst = this.visitKeyframes(styleMetadata, context2);
    } else {
      let styleMetadata2 = metadata.styles;
      let isEmpty = false;
      if (!styleMetadata2) {
        isEmpty = true;
        const newStyleData = {};
        if (timingAst.easing) {
          newStyleData["easing"] = timingAst.easing;
        }
        styleMetadata2 = style(newStyleData);
      }
      context2.currentTime += timingAst.duration + timingAst.delay;
      const _styleAst = this.visitStyle(styleMetadata2, context2);
      _styleAst.isEmptyStep = isEmpty;
      styleAst = _styleAst;
    }
    context2.currentAnimateTimings = null;
    return {
      type: 4,
      timings: timingAst,
      style: styleAst,
      options: null
    };
  }
  visitStyle(metadata, context2) {
    const ast = this._makeStyleAst(metadata, context2);
    this._validateStyleAst(ast, context2);
    return ast;
  }
  _makeStyleAst(metadata, context2) {
    const styles = [];
    const metadataStyles = Array.isArray(metadata.styles) ? metadata.styles : [metadata.styles];
    for (let styleTuple of metadataStyles) {
      if (typeof styleTuple === "string") {
        if (styleTuple === AUTO_STYLE) {
          styles.push(styleTuple);
        } else {
          context2.errors.push(invalidStyleValue(styleTuple));
        }
      } else {
        styles.push(convertToMap(styleTuple));
      }
    }
    let containsDynamicStyles = false;
    let collectedEasing = null;
    styles.forEach((styleData) => {
      if (styleData instanceof Map) {
        if (styleData.has("easing")) {
          collectedEasing = styleData.get("easing");
          styleData.delete("easing");
        }
        if (!containsDynamicStyles) {
          for (let value of styleData.values()) {
            if (value.toString().indexOf(SUBSTITUTION_EXPR_START) >= 0) {
              containsDynamicStyles = true;
              break;
            }
          }
        }
      }
    });
    return {
      type: 6,
      styles,
      easing: collectedEasing,
      offset: metadata.offset,
      containsDynamicStyles,
      options: null
    };
  }
  _validateStyleAst(ast, context2) {
    const timings = context2.currentAnimateTimings;
    let endTime = context2.currentTime;
    let startTime = context2.currentTime;
    if (timings && startTime > 0) {
      startTime -= timings.duration + timings.delay;
    }
    ast.styles.forEach((tuple) => {
      if (typeof tuple === "string")
        return;
      tuple.forEach((value, prop) => {
        if (typeof ngDevMode === "undefined" || ngDevMode) {
          if (!this._driver.validateStyleProperty(prop)) {
            tuple.delete(prop);
            context2.unsupportedCSSPropertiesFound.add(prop);
            return;
          }
        }
        const collectedStyles = context2.collectedStyles.get(context2.currentQuerySelector);
        const collectedEntry = collectedStyles.get(prop);
        let updateCollectedStyle = true;
        if (collectedEntry) {
          if (startTime != endTime && startTime >= collectedEntry.startTime && endTime <= collectedEntry.endTime) {
            context2.errors.push(invalidParallelAnimation(prop, collectedEntry.startTime, collectedEntry.endTime, startTime, endTime));
            updateCollectedStyle = false;
          }
          startTime = collectedEntry.startTime;
        }
        if (updateCollectedStyle) {
          collectedStyles.set(prop, {
            startTime,
            endTime
          });
        }
        if (context2.options) {
          validateStyleParams(value, context2.options, context2.errors);
        }
      });
    });
  }
  visitKeyframes(metadata, context2) {
    const ast = {
      type: 5,
      styles: [],
      options: null
    };
    if (!context2.currentAnimateTimings) {
      context2.errors.push(invalidKeyframes());
      return ast;
    }
    const MAX_KEYFRAME_OFFSET = 1;
    let totalKeyframesWithOffsets = 0;
    const offsets = [];
    let offsetsOutOfOrder = false;
    let keyframesOutOfRange = false;
    let previousOffset = 0;
    const keyframes = metadata.steps.map((styles) => {
      const style2 = this._makeStyleAst(styles, context2);
      let offsetVal = style2.offset != null ? style2.offset : consumeOffset(style2.styles);
      let offset = 0;
      if (offsetVal != null) {
        totalKeyframesWithOffsets++;
        offset = style2.offset = offsetVal;
      }
      keyframesOutOfRange = keyframesOutOfRange || offset < 0 || offset > 1;
      offsetsOutOfOrder = offsetsOutOfOrder || offset < previousOffset;
      previousOffset = offset;
      offsets.push(offset);
      return style2;
    });
    if (keyframesOutOfRange) {
      context2.errors.push(invalidOffset());
    }
    if (offsetsOutOfOrder) {
      context2.errors.push(keyframeOffsetsOutOfOrder());
    }
    const length = metadata.steps.length;
    let generatedOffset = 0;
    if (totalKeyframesWithOffsets > 0 && totalKeyframesWithOffsets < length) {
      context2.errors.push(keyframesMissingOffsets());
    } else if (totalKeyframesWithOffsets == 0) {
      generatedOffset = MAX_KEYFRAME_OFFSET / (length - 1);
    }
    const limit = length - 1;
    const currentTime = context2.currentTime;
    const currentAnimateTimings = context2.currentAnimateTimings;
    const animateDuration = currentAnimateTimings.duration;
    keyframes.forEach((kf, i) => {
      const offset = generatedOffset > 0 ? i == limit ? 1 : generatedOffset * i : offsets[i];
      const durationUpToThisFrame = offset * animateDuration;
      context2.currentTime = currentTime + currentAnimateTimings.delay + durationUpToThisFrame;
      currentAnimateTimings.duration = durationUpToThisFrame;
      this._validateStyleAst(kf, context2);
      kf.offset = offset;
      ast.styles.push(kf);
    });
    return ast;
  }
  visitReference(metadata, context2) {
    return {
      type: 8,
      animation: visitDslNode(this, normalizeAnimationEntry(metadata.animation), context2),
      options: normalizeAnimationOptions(metadata.options)
    };
  }
  visitAnimateChild(metadata, context2) {
    context2.depCount++;
    return {
      type: 9,
      options: normalizeAnimationOptions(metadata.options)
    };
  }
  visitAnimateRef(metadata, context2) {
    return {
      type: 10,
      animation: this.visitReference(metadata.animation, context2),
      options: normalizeAnimationOptions(metadata.options)
    };
  }
  visitQuery(metadata, context2) {
    const parentSelector = context2.currentQuerySelector;
    const options = metadata.options || {};
    context2.queryCount++;
    context2.currentQuery = metadata;
    const [selector, includeSelf] = normalizeSelector(metadata.selector);
    context2.currentQuerySelector = parentSelector.length ? parentSelector + " " + selector : selector;
    getOrSetDefaultValue(context2.collectedStyles, context2.currentQuerySelector, /* @__PURE__ */ new Map());
    const animation = visitDslNode(this, normalizeAnimationEntry(metadata.animation), context2);
    context2.currentQuery = null;
    context2.currentQuerySelector = parentSelector;
    return {
      type: 11,
      selector,
      limit: options.limit || 0,
      optional: !!options.optional,
      includeSelf,
      animation,
      originalSelector: metadata.selector,
      options: normalizeAnimationOptions(metadata.options)
    };
  }
  visitStagger(metadata, context2) {
    if (!context2.currentQuery) {
      context2.errors.push(invalidStagger());
    }
    const timings = metadata.timings === "full" ? {
      duration: 0,
      delay: 0,
      easing: "full"
    } : resolveTiming(metadata.timings, context2.errors, true);
    return {
      type: 12,
      animation: visitDslNode(this, normalizeAnimationEntry(metadata.animation), context2),
      timings,
      options: null
    };
  }
};
function normalizeSelector(selector) {
  const hasAmpersand = selector.split(/\s*,\s*/).find((token) => token == SELF_TOKEN) ? true : false;
  if (hasAmpersand) {
    selector = selector.replace(SELF_TOKEN_REGEX, "");
  }
  selector = selector.replace(/@\*/g, NG_TRIGGER_SELECTOR).replace(/@\w+/g, (match2) => NG_TRIGGER_SELECTOR + "-" + match2.slice(1)).replace(/:animating/g, NG_ANIMATING_SELECTOR);
  return [selector, hasAmpersand];
}
function normalizeParams(obj) {
  return obj ? copyObj(obj) : null;
}
var AnimationAstBuilderContext = class {
  constructor(errors) {
    this.errors = errors;
    this.queryCount = 0;
    this.depCount = 0;
    this.currentTransition = null;
    this.currentQuery = null;
    this.currentQuerySelector = null;
    this.currentAnimateTimings = null;
    this.currentTime = 0;
    this.collectedStyles = /* @__PURE__ */ new Map();
    this.options = null;
    this.unsupportedCSSPropertiesFound = /* @__PURE__ */ new Set();
  }
};
function consumeOffset(styles) {
  if (typeof styles == "string")
    return null;
  let offset = null;
  if (Array.isArray(styles)) {
    styles.forEach((styleTuple) => {
      if (styleTuple instanceof Map && styleTuple.has("offset")) {
        const obj = styleTuple;
        offset = parseFloat(obj.get("offset"));
        obj.delete("offset");
      }
    });
  } else if (styles instanceof Map && styles.has("offset")) {
    const obj = styles;
    offset = parseFloat(obj.get("offset"));
    obj.delete("offset");
  }
  return offset;
}
function constructTimingAst(value, errors) {
  if (value.hasOwnProperty("duration")) {
    return value;
  }
  if (typeof value == "number") {
    const duration = resolveTiming(value, errors).duration;
    return makeTimingAst(duration, 0, "");
  }
  const strValue = value;
  const isDynamic = strValue.split(/\s+/).some((v) => v.charAt(0) == "{" && v.charAt(1) == "{");
  if (isDynamic) {
    const ast = makeTimingAst(0, 0, "");
    ast.dynamic = true;
    ast.strValue = strValue;
    return ast;
  }
  const timings = resolveTiming(strValue, errors);
  return makeTimingAst(timings.duration, timings.delay, timings.easing);
}
function normalizeAnimationOptions(options) {
  if (options) {
    options = copyObj(options);
    if (options["params"]) {
      options["params"] = normalizeParams(options["params"]);
    }
  } else {
    options = {};
  }
  return options;
}
function makeTimingAst(duration, delay, easing) {
  return {
    duration,
    delay,
    easing
  };
}
function createTimelineInstruction(element, keyframes, preStyleProps, postStyleProps, duration, delay, easing = null, subTimeline = false) {
  return {
    type: 1,
    element,
    keyframes,
    preStyleProps,
    postStyleProps,
    duration,
    delay,
    totalTime: duration + delay,
    easing,
    subTimeline
  };
}
var ElementInstructionMap = class {
  constructor() {
    this._map = /* @__PURE__ */ new Map();
  }
  get(element) {
    return this._map.get(element) || [];
  }
  append(element, instructions) {
    let existingInstructions = this._map.get(element);
    if (!existingInstructions) {
      this._map.set(element, existingInstructions = []);
    }
    existingInstructions.push(...instructions);
  }
  has(element) {
    return this._map.has(element);
  }
  clear() {
    this._map.clear();
  }
};
var ONE_FRAME_IN_MILLISECONDS = 1;
var ENTER_TOKEN = ":enter";
var ENTER_TOKEN_REGEX = new RegExp(ENTER_TOKEN, "g");
var LEAVE_TOKEN = ":leave";
var LEAVE_TOKEN_REGEX = new RegExp(LEAVE_TOKEN, "g");
function buildAnimationTimelines(driver, rootElement, ast, enterClassName, leaveClassName, startingStyles = /* @__PURE__ */ new Map(), finalStyles = /* @__PURE__ */ new Map(), options, subInstructions, errors = []) {
  return new AnimationTimelineBuilderVisitor().buildKeyframes(driver, rootElement, ast, enterClassName, leaveClassName, startingStyles, finalStyles, options, subInstructions, errors);
}
var AnimationTimelineBuilderVisitor = class {
  buildKeyframes(driver, rootElement, ast, enterClassName, leaveClassName, startingStyles, finalStyles, options, subInstructions, errors = []) {
    subInstructions = subInstructions || new ElementInstructionMap();
    const context2 = new AnimationTimelineContext(driver, rootElement, subInstructions, enterClassName, leaveClassName, errors, []);
    context2.options = options;
    const delay = options.delay ? resolveTimingValue(options.delay) : 0;
    context2.currentTimeline.delayNextStep(delay);
    context2.currentTimeline.setStyles([startingStyles], null, context2.errors, options);
    visitDslNode(this, ast, context2);
    const timelines = context2.timelines.filter((timeline) => timeline.containsAnimation());
    if (timelines.length && finalStyles.size) {
      let lastRootTimeline;
      for (let i = timelines.length - 1; i >= 0; i--) {
        const timeline = timelines[i];
        if (timeline.element === rootElement) {
          lastRootTimeline = timeline;
          break;
        }
      }
      if (lastRootTimeline && !lastRootTimeline.allowOnlyTimelineStyles()) {
        lastRootTimeline.setStyles([finalStyles], null, context2.errors, options);
      }
    }
    return timelines.length ? timelines.map((timeline) => timeline.buildKeyframes()) : [createTimelineInstruction(rootElement, [], [], [], 0, delay, "", false)];
  }
  visitTrigger(ast, context2) {
  }
  visitState(ast, context2) {
  }
  visitTransition(ast, context2) {
  }
  visitAnimateChild(ast, context2) {
    const elementInstructions = context2.subInstructions.get(context2.element);
    if (elementInstructions) {
      const innerContext = context2.createSubContext(ast.options);
      const startTime = context2.currentTimeline.currentTime;
      const endTime = this._visitSubInstructions(elementInstructions, innerContext, innerContext.options);
      if (startTime != endTime) {
        context2.transformIntoNewTimeline(endTime);
      }
    }
    context2.previousNode = ast;
  }
  visitAnimateRef(ast, context2) {
    const innerContext = context2.createSubContext(ast.options);
    innerContext.transformIntoNewTimeline();
    this._applyAnimationRefDelays([ast.options, ast.animation.options], context2, innerContext);
    this.visitReference(ast.animation, innerContext);
    context2.transformIntoNewTimeline(innerContext.currentTimeline.currentTime);
    context2.previousNode = ast;
  }
  _applyAnimationRefDelays(animationsRefsOptions, context2, innerContext) {
    for (const animationRefOptions of animationsRefsOptions) {
      const animationDelay = animationRefOptions?.delay;
      if (animationDelay) {
        const animationDelayValue = typeof animationDelay === "number" ? animationDelay : resolveTimingValue(interpolateParams(animationDelay, animationRefOptions?.params ?? {}, context2.errors));
        innerContext.delayNextStep(animationDelayValue);
      }
    }
  }
  _visitSubInstructions(instructions, context2, options) {
    const startTime = context2.currentTimeline.currentTime;
    let furthestTime = startTime;
    const duration = options.duration != null ? resolveTimingValue(options.duration) : null;
    const delay = options.delay != null ? resolveTimingValue(options.delay) : null;
    if (duration !== 0) {
      instructions.forEach((instruction) => {
        const instructionTimings = context2.appendInstructionToTimeline(instruction, duration, delay);
        furthestTime = Math.max(furthestTime, instructionTimings.duration + instructionTimings.delay);
      });
    }
    return furthestTime;
  }
  visitReference(ast, context2) {
    context2.updateOptions(ast.options, true);
    visitDslNode(this, ast.animation, context2);
    context2.previousNode = ast;
  }
  visitSequence(ast, context2) {
    const subContextCount = context2.subContextCount;
    let ctx = context2;
    const options = ast.options;
    if (options && (options.params || options.delay)) {
      ctx = context2.createSubContext(options);
      ctx.transformIntoNewTimeline();
      if (options.delay != null) {
        if (ctx.previousNode.type == 6) {
          ctx.currentTimeline.snapshotCurrentStyles();
          ctx.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;
        }
        const delay = resolveTimingValue(options.delay);
        ctx.delayNextStep(delay);
      }
    }
    if (ast.steps.length) {
      ast.steps.forEach((s) => visitDslNode(this, s, ctx));
      ctx.currentTimeline.applyStylesToKeyframe();
      if (ctx.subContextCount > subContextCount) {
        ctx.transformIntoNewTimeline();
      }
    }
    context2.previousNode = ast;
  }
  visitGroup(ast, context2) {
    const innerTimelines = [];
    let furthestTime = context2.currentTimeline.currentTime;
    const delay = ast.options && ast.options.delay ? resolveTimingValue(ast.options.delay) : 0;
    ast.steps.forEach((s) => {
      const innerContext = context2.createSubContext(ast.options);
      if (delay) {
        innerContext.delayNextStep(delay);
      }
      visitDslNode(this, s, innerContext);
      furthestTime = Math.max(furthestTime, innerContext.currentTimeline.currentTime);
      innerTimelines.push(innerContext.currentTimeline);
    });
    innerTimelines.forEach((timeline) => context2.currentTimeline.mergeTimelineCollectedStyles(timeline));
    context2.transformIntoNewTimeline(furthestTime);
    context2.previousNode = ast;
  }
  _visitTiming(ast, context2) {
    if (ast.dynamic) {
      const strValue = ast.strValue;
      const timingValue = context2.params ? interpolateParams(strValue, context2.params, context2.errors) : strValue;
      return resolveTiming(timingValue, context2.errors);
    } else {
      return {
        duration: ast.duration,
        delay: ast.delay,
        easing: ast.easing
      };
    }
  }
  visitAnimate(ast, context2) {
    const timings = context2.currentAnimateTimings = this._visitTiming(ast.timings, context2);
    const timeline = context2.currentTimeline;
    if (timings.delay) {
      context2.incrementTime(timings.delay);
      timeline.snapshotCurrentStyles();
    }
    const style2 = ast.style;
    if (style2.type == 5) {
      this.visitKeyframes(style2, context2);
    } else {
      context2.incrementTime(timings.duration);
      this.visitStyle(style2, context2);
      timeline.applyStylesToKeyframe();
    }
    context2.currentAnimateTimings = null;
    context2.previousNode = ast;
  }
  visitStyle(ast, context2) {
    const timeline = context2.currentTimeline;
    const timings = context2.currentAnimateTimings;
    if (!timings && timeline.hasCurrentStyleProperties()) {
      timeline.forwardFrame();
    }
    const easing = timings && timings.easing || ast.easing;
    if (ast.isEmptyStep) {
      timeline.applyEmptyStep(easing);
    } else {
      timeline.setStyles(ast.styles, easing, context2.errors, context2.options);
    }
    context2.previousNode = ast;
  }
  visitKeyframes(ast, context2) {
    const currentAnimateTimings = context2.currentAnimateTimings;
    const startTime = context2.currentTimeline.duration;
    const duration = currentAnimateTimings.duration;
    const innerContext = context2.createSubContext();
    const innerTimeline = innerContext.currentTimeline;
    innerTimeline.easing = currentAnimateTimings.easing;
    ast.styles.forEach((step) => {
      const offset = step.offset || 0;
      innerTimeline.forwardTime(offset * duration);
      innerTimeline.setStyles(step.styles, step.easing, context2.errors, context2.options);
      innerTimeline.applyStylesToKeyframe();
    });
    context2.currentTimeline.mergeTimelineCollectedStyles(innerTimeline);
    context2.transformIntoNewTimeline(startTime + duration);
    context2.previousNode = ast;
  }
  visitQuery(ast, context2) {
    const startTime = context2.currentTimeline.currentTime;
    const options = ast.options || {};
    const delay = options.delay ? resolveTimingValue(options.delay) : 0;
    if (delay && (context2.previousNode.type === 6 || startTime == 0 && context2.currentTimeline.hasCurrentStyleProperties())) {
      context2.currentTimeline.snapshotCurrentStyles();
      context2.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;
    }
    let furthestTime = startTime;
    const elms = context2.invokeQuery(ast.selector, ast.originalSelector, ast.limit, ast.includeSelf, options.optional ? true : false, context2.errors);
    context2.currentQueryTotal = elms.length;
    let sameElementTimeline = null;
    elms.forEach((element, i) => {
      context2.currentQueryIndex = i;
      const innerContext = context2.createSubContext(ast.options, element);
      if (delay) {
        innerContext.delayNextStep(delay);
      }
      if (element === context2.element) {
        sameElementTimeline = innerContext.currentTimeline;
      }
      visitDslNode(this, ast.animation, innerContext);
      innerContext.currentTimeline.applyStylesToKeyframe();
      const endTime = innerContext.currentTimeline.currentTime;
      furthestTime = Math.max(furthestTime, endTime);
    });
    context2.currentQueryIndex = 0;
    context2.currentQueryTotal = 0;
    context2.transformIntoNewTimeline(furthestTime);
    if (sameElementTimeline) {
      context2.currentTimeline.mergeTimelineCollectedStyles(sameElementTimeline);
      context2.currentTimeline.snapshotCurrentStyles();
    }
    context2.previousNode = ast;
  }
  visitStagger(ast, context2) {
    const parentContext = context2.parentContext;
    const tl = context2.currentTimeline;
    const timings = ast.timings;
    const duration = Math.abs(timings.duration);
    const maxTime = duration * (context2.currentQueryTotal - 1);
    let delay = duration * context2.currentQueryIndex;
    let staggerTransformer = timings.duration < 0 ? "reverse" : timings.easing;
    switch (staggerTransformer) {
      case "reverse":
        delay = maxTime - delay;
        break;
      case "full":
        delay = parentContext.currentStaggerTime;
        break;
    }
    const timeline = context2.currentTimeline;
    if (delay) {
      timeline.delayNextStep(delay);
    }
    const startingTime = timeline.currentTime;
    visitDslNode(this, ast.animation, context2);
    context2.previousNode = ast;
    parentContext.currentStaggerTime = tl.currentTime - startingTime + (tl.startTime - parentContext.currentTimeline.startTime);
  }
};
var DEFAULT_NOOP_PREVIOUS_NODE = {};
var AnimationTimelineContext = class _AnimationTimelineContext {
  constructor(_driver, element, subInstructions, _enterClassName, _leaveClassName, errors, timelines, initialTimeline) {
    this._driver = _driver;
    this.element = element;
    this.subInstructions = subInstructions;
    this._enterClassName = _enterClassName;
    this._leaveClassName = _leaveClassName;
    this.errors = errors;
    this.timelines = timelines;
    this.parentContext = null;
    this.currentAnimateTimings = null;
    this.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;
    this.subContextCount = 0;
    this.options = {};
    this.currentQueryIndex = 0;
    this.currentQueryTotal = 0;
    this.currentStaggerTime = 0;
    this.currentTimeline = initialTimeline || new TimelineBuilder(this._driver, element, 0);
    timelines.push(this.currentTimeline);
  }
  get params() {
    return this.options.params;
  }
  updateOptions(options, skipIfExists) {
    if (!options)
      return;
    const newOptions = options;
    let optionsToUpdate = this.options;
    if (newOptions.duration != null) {
      optionsToUpdate.duration = resolveTimingValue(newOptions.duration);
    }
    if (newOptions.delay != null) {
      optionsToUpdate.delay = resolveTimingValue(newOptions.delay);
    }
    const newParams = newOptions.params;
    if (newParams) {
      let paramsToUpdate = optionsToUpdate.params;
      if (!paramsToUpdate) {
        paramsToUpdate = this.options.params = {};
      }
      Object.keys(newParams).forEach((name) => {
        if (!skipIfExists || !paramsToUpdate.hasOwnProperty(name)) {
          paramsToUpdate[name] = interpolateParams(newParams[name], paramsToUpdate, this.errors);
        }
      });
    }
  }
  _copyOptions() {
    const options = {};
    if (this.options) {
      const oldParams = this.options.params;
      if (oldParams) {
        const params = options["params"] = {};
        Object.keys(oldParams).forEach((name) => {
          params[name] = oldParams[name];
        });
      }
    }
    return options;
  }
  createSubContext(options = null, element, newTime) {
    const target = element || this.element;
    const context2 = new _AnimationTimelineContext(this._driver, target, this.subInstructions, this._enterClassName, this._leaveClassName, this.errors, this.timelines, this.currentTimeline.fork(target, newTime || 0));
    context2.previousNode = this.previousNode;
    context2.currentAnimateTimings = this.currentAnimateTimings;
    context2.options = this._copyOptions();
    context2.updateOptions(options);
    context2.currentQueryIndex = this.currentQueryIndex;
    context2.currentQueryTotal = this.currentQueryTotal;
    context2.parentContext = this;
    this.subContextCount++;
    return context2;
  }
  transformIntoNewTimeline(newTime) {
    this.previousNode = DEFAULT_NOOP_PREVIOUS_NODE;
    this.currentTimeline = this.currentTimeline.fork(this.element, newTime);
    this.timelines.push(this.currentTimeline);
    return this.currentTimeline;
  }
  appendInstructionToTimeline(instruction, duration, delay) {
    const updatedTimings = {
      duration: duration != null ? duration : instruction.duration,
      delay: this.currentTimeline.currentTime + (delay != null ? delay : 0) + instruction.delay,
      easing: ""
    };
    const builder = new SubTimelineBuilder(this._driver, instruction.element, instruction.keyframes, instruction.preStyleProps, instruction.postStyleProps, updatedTimings, instruction.stretchStartingKeyframe);
    this.timelines.push(builder);
    return updatedTimings;
  }
  incrementTime(time) {
    this.currentTimeline.forwardTime(this.currentTimeline.duration + time);
  }
  delayNextStep(delay) {
    if (delay > 0) {
      this.currentTimeline.delayNextStep(delay);
    }
  }
  invokeQuery(selector, originalSelector, limit, includeSelf, optional, errors) {
    let results = [];
    if (includeSelf) {
      results.push(this.element);
    }
    if (selector.length > 0) {
      selector = selector.replace(ENTER_TOKEN_REGEX, "." + this._enterClassName);
      selector = selector.replace(LEAVE_TOKEN_REGEX, "." + this._leaveClassName);
      const multi = limit != 1;
      let elements = this._driver.query(this.element, selector, multi);
      if (limit !== 0) {
        elements = limit < 0 ? elements.slice(elements.length + limit, elements.length) : elements.slice(0, limit);
      }
      results.push(...elements);
    }
    if (!optional && results.length == 0) {
      errors.push(invalidQuery(originalSelector));
    }
    return results;
  }
};
var TimelineBuilder = class _TimelineBuilder {
  constructor(_driver, element, startTime, _elementTimelineStylesLookup) {
    this._driver = _driver;
    this.element = element;
    this.startTime = startTime;
    this._elementTimelineStylesLookup = _elementTimelineStylesLookup;
    this.duration = 0;
    this.easing = null;
    this._previousKeyframe = /* @__PURE__ */ new Map();
    this._currentKeyframe = /* @__PURE__ */ new Map();
    this._keyframes = /* @__PURE__ */ new Map();
    this._styleSummary = /* @__PURE__ */ new Map();
    this._localTimelineStyles = /* @__PURE__ */ new Map();
    this._pendingStyles = /* @__PURE__ */ new Map();
    this._backFill = /* @__PURE__ */ new Map();
    this._currentEmptyStepKeyframe = null;
    if (!this._elementTimelineStylesLookup) {
      this._elementTimelineStylesLookup = /* @__PURE__ */ new Map();
    }
    this._globalTimelineStyles = this._elementTimelineStylesLookup.get(element);
    if (!this._globalTimelineStyles) {
      this._globalTimelineStyles = this._localTimelineStyles;
      this._elementTimelineStylesLookup.set(element, this._localTimelineStyles);
    }
    this._loadKeyframe();
  }
  containsAnimation() {
    switch (this._keyframes.size) {
      case 0:
        return false;
      case 1:
        return this.hasCurrentStyleProperties();
      default:
        return true;
    }
  }
  hasCurrentStyleProperties() {
    return this._currentKeyframe.size > 0;
  }
  get currentTime() {
    return this.startTime + this.duration;
  }
  delayNextStep(delay) {
    const hasPreStyleStep = this._keyframes.size === 1 && this._pendingStyles.size;
    if (this.duration || hasPreStyleStep) {
      this.forwardTime(this.currentTime + delay);
      if (hasPreStyleStep) {
        this.snapshotCurrentStyles();
      }
    } else {
      this.startTime += delay;
    }
  }
  fork(element, currentTime) {
    this.applyStylesToKeyframe();
    return new _TimelineBuilder(this._driver, element, currentTime || this.currentTime, this._elementTimelineStylesLookup);
  }
  _loadKeyframe() {
    if (this._currentKeyframe) {
      this._previousKeyframe = this._currentKeyframe;
    }
    this._currentKeyframe = this._keyframes.get(this.duration);
    if (!this._currentKeyframe) {
      this._currentKeyframe = /* @__PURE__ */ new Map();
      this._keyframes.set(this.duration, this._currentKeyframe);
    }
  }
  forwardFrame() {
    this.duration += ONE_FRAME_IN_MILLISECONDS;
    this._loadKeyframe();
  }
  forwardTime(time) {
    this.applyStylesToKeyframe();
    this.duration = time;
    this._loadKeyframe();
  }
  _updateStyle(prop, value) {
    this._localTimelineStyles.set(prop, value);
    this._globalTimelineStyles.set(prop, value);
    this._styleSummary.set(prop, {
      time: this.currentTime,
      value
    });
  }
  allowOnlyTimelineStyles() {
    return this._currentEmptyStepKeyframe !== this._currentKeyframe;
  }
  applyEmptyStep(easing) {
    if (easing) {
      this._previousKeyframe.set("easing", easing);
    }
    for (let [prop, value] of this._globalTimelineStyles) {
      this._backFill.set(prop, value || AUTO_STYLE);
      this._currentKeyframe.set(prop, AUTO_STYLE);
    }
    this._currentEmptyStepKeyframe = this._currentKeyframe;
  }
  setStyles(input, easing, errors, options) {
    if (easing) {
      this._previousKeyframe.set("easing", easing);
    }
    const params = options && options.params || {};
    const styles = flattenStyles(input, this._globalTimelineStyles);
    for (let [prop, value] of styles) {
      const val = interpolateParams(value, params, errors);
      this._pendingStyles.set(prop, val);
      if (!this._localTimelineStyles.has(prop)) {
        this._backFill.set(prop, this._globalTimelineStyles.get(prop) ?? AUTO_STYLE);
      }
      this._updateStyle(prop, val);
    }
  }
  applyStylesToKeyframe() {
    if (this._pendingStyles.size == 0)
      return;
    this._pendingStyles.forEach((val, prop) => {
      this._currentKeyframe.set(prop, val);
    });
    this._pendingStyles.clear();
    this._localTimelineStyles.forEach((val, prop) => {
      if (!this._currentKeyframe.has(prop)) {
        this._currentKeyframe.set(prop, val);
      }
    });
  }
  snapshotCurrentStyles() {
    for (let [prop, val] of this._localTimelineStyles) {
      this._pendingStyles.set(prop, val);
      this._updateStyle(prop, val);
    }
  }
  getFinalKeyframe() {
    return this._keyframes.get(this.duration);
  }
  get properties() {
    const properties = [];
    for (let prop in this._currentKeyframe) {
      properties.push(prop);
    }
    return properties;
  }
  mergeTimelineCollectedStyles(timeline) {
    timeline._styleSummary.forEach((details1, prop) => {
      const details0 = this._styleSummary.get(prop);
      if (!details0 || details1.time > details0.time) {
        this._updateStyle(prop, details1.value);
      }
    });
  }
  buildKeyframes() {
    this.applyStylesToKeyframe();
    const preStyleProps = /* @__PURE__ */ new Set();
    const postStyleProps = /* @__PURE__ */ new Set();
    const isEmpty = this._keyframes.size === 1 && this.duration === 0;
    let finalKeyframes = [];
    this._keyframes.forEach((keyframe, time) => {
      const finalKeyframe = copyStyles(keyframe, /* @__PURE__ */ new Map(), this._backFill);
      finalKeyframe.forEach((value, prop) => {
        if (value === \u0275PRE_STYLE) {
          preStyleProps.add(prop);
        } else if (value === AUTO_STYLE) {
          postStyleProps.add(prop);
        }
      });
      if (!isEmpty) {
        finalKeyframe.set("offset", time / this.duration);
      }
      finalKeyframes.push(finalKeyframe);
    });
    const preProps = preStyleProps.size ? iteratorToArray(preStyleProps.values()) : [];
    const postProps = postStyleProps.size ? iteratorToArray(postStyleProps.values()) : [];
    if (isEmpty) {
      const kf0 = finalKeyframes[0];
      const kf1 = new Map(kf0);
      kf0.set("offset", 0);
      kf1.set("offset", 1);
      finalKeyframes = [kf0, kf1];
    }
    return createTimelineInstruction(this.element, finalKeyframes, preProps, postProps, this.duration, this.startTime, this.easing, false);
  }
};
var SubTimelineBuilder = class extends TimelineBuilder {
  constructor(driver, element, keyframes, preStyleProps, postStyleProps, timings, _stretchStartingKeyframe = false) {
    super(driver, element, timings.delay);
    this.keyframes = keyframes;
    this.preStyleProps = preStyleProps;
    this.postStyleProps = postStyleProps;
    this._stretchStartingKeyframe = _stretchStartingKeyframe;
    this.timings = {
      duration: timings.duration,
      delay: timings.delay,
      easing: timings.easing
    };
  }
  containsAnimation() {
    return this.keyframes.length > 1;
  }
  buildKeyframes() {
    let keyframes = this.keyframes;
    let {
      delay,
      duration,
      easing
    } = this.timings;
    if (this._stretchStartingKeyframe && delay) {
      const newKeyframes = [];
      const totalTime = duration + delay;
      const startingGap = delay / totalTime;
      const newFirstKeyframe = copyStyles(keyframes[0]);
      newFirstKeyframe.set("offset", 0);
      newKeyframes.push(newFirstKeyframe);
      const oldFirstKeyframe = copyStyles(keyframes[0]);
      oldFirstKeyframe.set("offset", roundOffset(startingGap));
      newKeyframes.push(oldFirstKeyframe);
      const limit = keyframes.length - 1;
      for (let i = 1; i <= limit; i++) {
        let kf = copyStyles(keyframes[i]);
        const oldOffset = kf.get("offset");
        const timeAtKeyframe = delay + oldOffset * duration;
        kf.set("offset", roundOffset(timeAtKeyframe / totalTime));
        newKeyframes.push(kf);
      }
      duration = totalTime;
      delay = 0;
      easing = "";
      keyframes = newKeyframes;
    }
    return createTimelineInstruction(this.element, keyframes, this.preStyleProps, this.postStyleProps, duration, delay, easing, true);
  }
};
function roundOffset(offset, decimalPoints = 3) {
  const mult = Math.pow(10, decimalPoints - 1);
  return Math.round(offset * mult) / mult;
}
function flattenStyles(input, allStyles) {
  const styles = /* @__PURE__ */ new Map();
  let allProperties;
  input.forEach((token) => {
    if (token === "*") {
      allProperties = allProperties || allStyles.keys();
      for (let prop of allProperties) {
        styles.set(prop, AUTO_STYLE);
      }
    } else {
      copyStyles(token, styles);
    }
  });
  return styles;
}
function createTransitionInstruction(element, triggerName, fromState, toState, isRemovalTransition, fromStyles, toStyles, timelines, queriedElements, preStyleProps, postStyleProps, totalTime, errors) {
  return {
    type: 0,
    element,
    triggerName,
    isRemovalTransition,
    fromState,
    fromStyles,
    toState,
    toStyles,
    timelines,
    queriedElements,
    preStyleProps,
    postStyleProps,
    totalTime,
    errors
  };
}
var EMPTY_OBJECT = {};
var AnimationTransitionFactory = class {
  constructor(_triggerName, ast, _stateStyles) {
    this._triggerName = _triggerName;
    this.ast = ast;
    this._stateStyles = _stateStyles;
  }
  match(currentState, nextState, element, params) {
    return oneOrMoreTransitionsMatch(this.ast.matchers, currentState, nextState, element, params);
  }
  buildStyles(stateName, params, errors) {
    let styler = this._stateStyles.get("*");
    if (stateName !== void 0) {
      styler = this._stateStyles.get(stateName?.toString()) || styler;
    }
    return styler ? styler.buildStyles(params, errors) : /* @__PURE__ */ new Map();
  }
  build(driver, element, currentState, nextState, enterClassName, leaveClassName, currentOptions, nextOptions, subInstructions, skipAstBuild) {
    const errors = [];
    const transitionAnimationParams = this.ast.options && this.ast.options.params || EMPTY_OBJECT;
    const currentAnimationParams = currentOptions && currentOptions.params || EMPTY_OBJECT;
    const currentStateStyles = this.buildStyles(currentState, currentAnimationParams, errors);
    const nextAnimationParams = nextOptions && nextOptions.params || EMPTY_OBJECT;
    const nextStateStyles = this.buildStyles(nextState, nextAnimationParams, errors);
    const queriedElements = /* @__PURE__ */ new Set();
    const preStyleMap = /* @__PURE__ */ new Map();
    const postStyleMap = /* @__PURE__ */ new Map();
    const isRemoval = nextState === "void";
    const animationOptions = {
      params: applyParamDefaults(nextAnimationParams, transitionAnimationParams),
      delay: this.ast.options?.delay
    };
    const timelines = skipAstBuild ? [] : buildAnimationTimelines(driver, element, this.ast.animation, enterClassName, leaveClassName, currentStateStyles, nextStateStyles, animationOptions, subInstructions, errors);
    let totalTime = 0;
    timelines.forEach((tl) => {
      totalTime = Math.max(tl.duration + tl.delay, totalTime);
    });
    if (errors.length) {
      return createTransitionInstruction(element, this._triggerName, currentState, nextState, isRemoval, currentStateStyles, nextStateStyles, [], [], preStyleMap, postStyleMap, totalTime, errors);
    }
    timelines.forEach((tl) => {
      const elm = tl.element;
      const preProps = getOrSetDefaultValue(preStyleMap, elm, /* @__PURE__ */ new Set());
      tl.preStyleProps.forEach((prop) => preProps.add(prop));
      const postProps = getOrSetDefaultValue(postStyleMap, elm, /* @__PURE__ */ new Set());
      tl.postStyleProps.forEach((prop) => postProps.add(prop));
      if (elm !== element) {
        queriedElements.add(elm);
      }
    });
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      checkNonAnimatableInTimelines(timelines, this._triggerName, driver);
    }
    const queriedElementsList = iteratorToArray(queriedElements.values());
    return createTransitionInstruction(element, this._triggerName, currentState, nextState, isRemoval, currentStateStyles, nextStateStyles, timelines, queriedElementsList, preStyleMap, postStyleMap, totalTime);
  }
};
function checkNonAnimatableInTimelines(timelines, triggerName, driver) {
  if (!driver.validateAnimatableStyleProperty) {
    return;
  }
  const allowedNonAnimatableProps = /* @__PURE__ */ new Set([
    // 'easing' is a utility/synthetic prop we use to represent
    // easing functions, it represents a property of the animation
    // which is not animatable but different values can be used
    // in different steps
    "easing"
  ]);
  const invalidNonAnimatableProps = /* @__PURE__ */ new Set();
  timelines.forEach(({
    keyframes
  }) => {
    const nonAnimatablePropsInitialValues = /* @__PURE__ */ new Map();
    keyframes.forEach((keyframe) => {
      const entriesToCheck = Array.from(keyframe.entries()).filter(([prop]) => !allowedNonAnimatableProps.has(prop));
      for (const [prop, value] of entriesToCheck) {
        if (!driver.validateAnimatableStyleProperty(prop)) {
          if (nonAnimatablePropsInitialValues.has(prop) && !invalidNonAnimatableProps.has(prop)) {
            const propInitialValue = nonAnimatablePropsInitialValues.get(prop);
            if (propInitialValue !== value) {
              invalidNonAnimatableProps.add(prop);
            }
          } else {
            nonAnimatablePropsInitialValues.set(prop, value);
          }
        }
      }
    });
  });
  if (invalidNonAnimatableProps.size > 0) {
    console.warn(`Warning: The animation trigger "${triggerName}" is attempting to animate the following not animatable properties: ` + Array.from(invalidNonAnimatableProps).join(", ") + "\n(to check the list of all animatable properties visit https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_animated_properties)");
  }
}
function oneOrMoreTransitionsMatch(matchFns, currentState, nextState, element, params) {
  return matchFns.some((fn) => fn(currentState, nextState, element, params));
}
function applyParamDefaults(userParams, defaults) {
  const result = copyObj(defaults);
  for (const key in userParams) {
    if (userParams.hasOwnProperty(key) && userParams[key] != null) {
      result[key] = userParams[key];
    }
  }
  return result;
}
var AnimationStateStyles = class {
  constructor(styles, defaultParams, normalizer) {
    this.styles = styles;
    this.defaultParams = defaultParams;
    this.normalizer = normalizer;
  }
  buildStyles(params, errors) {
    const finalStyles = /* @__PURE__ */ new Map();
    const combinedParams = copyObj(this.defaultParams);
    Object.keys(params).forEach((key) => {
      const value = params[key];
      if (value !== null) {
        combinedParams[key] = value;
      }
    });
    this.styles.styles.forEach((value) => {
      if (typeof value !== "string") {
        value.forEach((val, prop) => {
          if (val) {
            val = interpolateParams(val, combinedParams, errors);
          }
          const normalizedProp = this.normalizer.normalizePropertyName(prop, errors);
          val = this.normalizer.normalizeStyleValue(prop, normalizedProp, val, errors);
          finalStyles.set(prop, val);
        });
      }
    });
    return finalStyles;
  }
};
function buildTrigger(name, ast, normalizer) {
  return new AnimationTrigger(name, ast, normalizer);
}
var AnimationTrigger = class {
  constructor(name, ast, _normalizer) {
    this.name = name;
    this.ast = ast;
    this._normalizer = _normalizer;
    this.transitionFactories = [];
    this.states = /* @__PURE__ */ new Map();
    ast.states.forEach((ast2) => {
      const defaultParams = ast2.options && ast2.options.params || {};
      this.states.set(ast2.name, new AnimationStateStyles(ast2.style, defaultParams, _normalizer));
    });
    balanceProperties(this.states, "true", "1");
    balanceProperties(this.states, "false", "0");
    ast.transitions.forEach((ast2) => {
      this.transitionFactories.push(new AnimationTransitionFactory(name, ast2, this.states));
    });
    this.fallbackTransition = createFallbackTransition(name, this.states, this._normalizer);
  }
  get containsQueries() {
    return this.ast.queryCount > 0;
  }
  matchTransition(currentState, nextState, element, params) {
    const entry = this.transitionFactories.find((f) => f.match(currentState, nextState, element, params));
    return entry || null;
  }
  matchStyles(currentState, params, errors) {
    return this.fallbackTransition.buildStyles(currentState, params, errors);
  }
};
function createFallbackTransition(triggerName, states, normalizer) {
  const matchers = [(fromState, toState) => true];
  const animation = {
    type: 2,
    steps: [],
    options: null
  };
  const transition2 = {
    type: 1,
    animation,
    matchers,
    options: null,
    queryCount: 0,
    depCount: 0
  };
  return new AnimationTransitionFactory(triggerName, transition2, states);
}
function balanceProperties(stateMap, key1, key2) {
  if (stateMap.has(key1)) {
    if (!stateMap.has(key2)) {
      stateMap.set(key2, stateMap.get(key1));
    }
  } else if (stateMap.has(key2)) {
    stateMap.set(key1, stateMap.get(key2));
  }
}
var EMPTY_INSTRUCTION_MAP = new ElementInstructionMap();
var TimelineAnimationEngine = class {
  constructor(bodyNode, _driver, _normalizer) {
    this.bodyNode = bodyNode;
    this._driver = _driver;
    this._normalizer = _normalizer;
    this._animations = /* @__PURE__ */ new Map();
    this._playersById = /* @__PURE__ */ new Map();
    this.players = [];
  }
  register(id, metadata) {
    const errors = [];
    const warnings = [];
    const ast = buildAnimationAst(this._driver, metadata, errors, warnings);
    if (errors.length) {
      throw registerFailed(errors);
    } else {
      if (warnings.length) {
        warnRegister(warnings);
      }
      this._animations.set(id, ast);
    }
  }
  _buildPlayer(i, preStyles, postStyles) {
    const element = i.element;
    const keyframes = normalizeKeyframes$1(this._normalizer, i.keyframes, preStyles, postStyles);
    return this._driver.animate(element, keyframes, i.duration, i.delay, i.easing, [], true);
  }
  create(id, element, options = {}) {
    const errors = [];
    const ast = this._animations.get(id);
    let instructions;
    const autoStylesMap = /* @__PURE__ */ new Map();
    if (ast) {
      instructions = buildAnimationTimelines(this._driver, element, ast, ENTER_CLASSNAME, LEAVE_CLASSNAME, /* @__PURE__ */ new Map(), /* @__PURE__ */ new Map(), options, EMPTY_INSTRUCTION_MAP, errors);
      instructions.forEach((inst) => {
        const styles = getOrSetDefaultValue(autoStylesMap, inst.element, /* @__PURE__ */ new Map());
        inst.postStyleProps.forEach((prop) => styles.set(prop, null));
      });
    } else {
      errors.push(missingOrDestroyedAnimation());
      instructions = [];
    }
    if (errors.length) {
      throw createAnimationFailed(errors);
    }
    autoStylesMap.forEach((styles, element2) => {
      styles.forEach((_, prop) => {
        styles.set(prop, this._driver.computeStyle(element2, prop, AUTO_STYLE));
      });
    });
    const players = instructions.map((i) => {
      const styles = autoStylesMap.get(i.element);
      return this._buildPlayer(i, /* @__PURE__ */ new Map(), styles);
    });
    const player = optimizeGroupPlayer(players);
    this._playersById.set(id, player);
    player.onDestroy(() => this.destroy(id));
    this.players.push(player);
    return player;
  }
  destroy(id) {
    const player = this._getPlayer(id);
    player.destroy();
    this._playersById.delete(id);
    const index = this.players.indexOf(player);
    if (index >= 0) {
      this.players.splice(index, 1);
    }
  }
  _getPlayer(id) {
    const player = this._playersById.get(id);
    if (!player) {
      throw missingPlayer(id);
    }
    return player;
  }
  listen(id, element, eventName, callback) {
    const baseEvent = makeAnimationEvent(element, "", "", "");
    listenOnPlayer(this._getPlayer(id), eventName, baseEvent, callback);
    return () => {
    };
  }
  command(id, element, command, args) {
    if (command == "register") {
      this.register(id, args[0]);
      return;
    }
    if (command == "create") {
      const options = args[0] || {};
      this.create(id, element, options);
      return;
    }
    const player = this._getPlayer(id);
    switch (command) {
      case "play":
        player.play();
        break;
      case "pause":
        player.pause();
        break;
      case "reset":
        player.reset();
        break;
      case "restart":
        player.restart();
        break;
      case "finish":
        player.finish();
        break;
      case "init":
        player.init();
        break;
      case "setPosition":
        player.setPosition(parseFloat(args[0]));
        break;
      case "destroy":
        this.destroy(id);
        break;
    }
  }
};
var QUEUED_CLASSNAME = "ng-animate-queued";
var QUEUED_SELECTOR = ".ng-animate-queued";
var DISABLED_CLASSNAME = "ng-animate-disabled";
var DISABLED_SELECTOR = ".ng-animate-disabled";
var STAR_CLASSNAME = "ng-star-inserted";
var STAR_SELECTOR = ".ng-star-inserted";
var EMPTY_PLAYER_ARRAY = [];
var NULL_REMOVAL_STATE = {
  namespaceId: "",
  setForRemoval: false,
  setForMove: false,
  hasAnimation: false,
  removedBeforeQueried: false
};
var NULL_REMOVED_QUERIED_STATE = {
  namespaceId: "",
  setForMove: false,
  setForRemoval: false,
  hasAnimation: false,
  removedBeforeQueried: true
};
var REMOVAL_FLAG = "__ng_removed";
var StateValue = class {
  get params() {
    return this.options.params;
  }
  constructor(input, namespaceId = "") {
    this.namespaceId = namespaceId;
    const isObj = input && input.hasOwnProperty("value");
    const value = isObj ? input["value"] : input;
    this.value = normalizeTriggerValue(value);
    if (isObj) {
      const options = copyObj(input);
      delete options["value"];
      this.options = options;
    } else {
      this.options = {};
    }
    if (!this.options.params) {
      this.options.params = {};
    }
  }
  absorbOptions(options) {
    const newParams = options.params;
    if (newParams) {
      const oldParams = this.options.params;
      Object.keys(newParams).forEach((prop) => {
        if (oldParams[prop] == null) {
          oldParams[prop] = newParams[prop];
        }
      });
    }
  }
};
var VOID_VALUE = "void";
var DEFAULT_STATE_VALUE = new StateValue(VOID_VALUE);
var AnimationTransitionNamespace = class {
  constructor(id, hostElement, _engine) {
    this.id = id;
    this.hostElement = hostElement;
    this._engine = _engine;
    this.players = [];
    this._triggers = /* @__PURE__ */ new Map();
    this._queue = [];
    this._elementListeners = /* @__PURE__ */ new Map();
    this._hostClassName = "ng-tns-" + id;
    addClass(hostElement, this._hostClassName);
  }
  listen(element, name, phase, callback) {
    if (!this._triggers.has(name)) {
      throw missingTrigger(phase, name);
    }
    if (phase == null || phase.length == 0) {
      throw missingEvent(name);
    }
    if (!isTriggerEventValid(phase)) {
      throw unsupportedTriggerEvent(phase, name);
    }
    const listeners = getOrSetDefaultValue(this._elementListeners, element, []);
    const data = {
      name,
      phase,
      callback
    };
    listeners.push(data);
    const triggersWithStates = getOrSetDefaultValue(this._engine.statesByElement, element, /* @__PURE__ */ new Map());
    if (!triggersWithStates.has(name)) {
      addClass(element, NG_TRIGGER_CLASSNAME);
      addClass(element, NG_TRIGGER_CLASSNAME + "-" + name);
      triggersWithStates.set(name, DEFAULT_STATE_VALUE);
    }
    return () => {
      this._engine.afterFlush(() => {
        const index = listeners.indexOf(data);
        if (index >= 0) {
          listeners.splice(index, 1);
        }
        if (!this._triggers.has(name)) {
          triggersWithStates.delete(name);
        }
      });
    };
  }
  register(name, ast) {
    if (this._triggers.has(name)) {
      return false;
    } else {
      this._triggers.set(name, ast);
      return true;
    }
  }
  _getTrigger(name) {
    const trigger2 = this._triggers.get(name);
    if (!trigger2) {
      throw unregisteredTrigger(name);
    }
    return trigger2;
  }
  trigger(element, triggerName, value, defaultToFallback = true) {
    const trigger2 = this._getTrigger(triggerName);
    const player = new TransitionAnimationPlayer(this.id, triggerName, element);
    let triggersWithStates = this._engine.statesByElement.get(element);
    if (!triggersWithStates) {
      addClass(element, NG_TRIGGER_CLASSNAME);
      addClass(element, NG_TRIGGER_CLASSNAME + "-" + triggerName);
      this._engine.statesByElement.set(element, triggersWithStates = /* @__PURE__ */ new Map());
    }
    let fromState = triggersWithStates.get(triggerName);
    const toState = new StateValue(value, this.id);
    const isObj = value && value.hasOwnProperty("value");
    if (!isObj && fromState) {
      toState.absorbOptions(fromState.options);
    }
    triggersWithStates.set(triggerName, toState);
    if (!fromState) {
      fromState = DEFAULT_STATE_VALUE;
    }
    const isRemoval = toState.value === VOID_VALUE;
    if (!isRemoval && fromState.value === toState.value) {
      if (!objEquals(fromState.params, toState.params)) {
        const errors = [];
        const fromStyles = trigger2.matchStyles(fromState.value, fromState.params, errors);
        const toStyles = trigger2.matchStyles(toState.value, toState.params, errors);
        if (errors.length) {
          this._engine.reportError(errors);
        } else {
          this._engine.afterFlush(() => {
            eraseStyles(element, fromStyles);
            setStyles(element, toStyles);
          });
        }
      }
      return;
    }
    const playersOnElement = getOrSetDefaultValue(this._engine.playersByElement, element, []);
    playersOnElement.forEach((player2) => {
      if (player2.namespaceId == this.id && player2.triggerName == triggerName && player2.queued) {
        player2.destroy();
      }
    });
    let transition2 = trigger2.matchTransition(fromState.value, toState.value, element, toState.params);
    let isFallbackTransition = false;
    if (!transition2) {
      if (!defaultToFallback)
        return;
      transition2 = trigger2.fallbackTransition;
      isFallbackTransition = true;
    }
    this._engine.totalQueuedPlayers++;
    this._queue.push({
      element,
      triggerName,
      transition: transition2,
      fromState,
      toState,
      player,
      isFallbackTransition
    });
    if (!isFallbackTransition) {
      addClass(element, QUEUED_CLASSNAME);
      player.onStart(() => {
        removeClass(element, QUEUED_CLASSNAME);
      });
    }
    player.onDone(() => {
      let index = this.players.indexOf(player);
      if (index >= 0) {
        this.players.splice(index, 1);
      }
      const players = this._engine.playersByElement.get(element);
      if (players) {
        let index2 = players.indexOf(player);
        if (index2 >= 0) {
          players.splice(index2, 1);
        }
      }
    });
    this.players.push(player);
    playersOnElement.push(player);
    return player;
  }
  deregister(name) {
    this._triggers.delete(name);
    this._engine.statesByElement.forEach((stateMap) => stateMap.delete(name));
    this._elementListeners.forEach((listeners, element) => {
      this._elementListeners.set(element, listeners.filter((entry) => {
        return entry.name != name;
      }));
    });
  }
  clearElementCache(element) {
    this._engine.statesByElement.delete(element);
    this._elementListeners.delete(element);
    const elementPlayers = this._engine.playersByElement.get(element);
    if (elementPlayers) {
      elementPlayers.forEach((player) => player.destroy());
      this._engine.playersByElement.delete(element);
    }
  }
  _signalRemovalForInnerTriggers(rootElement, context2) {
    const elements = this._engine.driver.query(rootElement, NG_TRIGGER_SELECTOR, true);
    elements.forEach((elm) => {
      if (elm[REMOVAL_FLAG])
        return;
      const namespaces = this._engine.fetchNamespacesByElement(elm);
      if (namespaces.size) {
        namespaces.forEach((ns) => ns.triggerLeaveAnimation(elm, context2, false, true));
      } else {
        this.clearElementCache(elm);
      }
    });
    this._engine.afterFlushAnimationsDone(() => elements.forEach((elm) => this.clearElementCache(elm)));
  }
  triggerLeaveAnimation(element, context2, destroyAfterComplete, defaultToFallback) {
    const triggerStates = this._engine.statesByElement.get(element);
    const previousTriggersValues = /* @__PURE__ */ new Map();
    if (triggerStates) {
      const players = [];
      triggerStates.forEach((state2, triggerName) => {
        previousTriggersValues.set(triggerName, state2.value);
        if (this._triggers.has(triggerName)) {
          const player = this.trigger(element, triggerName, VOID_VALUE, defaultToFallback);
          if (player) {
            players.push(player);
          }
        }
      });
      if (players.length) {
        this._engine.markElementAsRemoved(this.id, element, true, context2, previousTriggersValues);
        if (destroyAfterComplete) {
          optimizeGroupPlayer(players).onDone(() => this._engine.processLeaveNode(element));
        }
        return true;
      }
    }
    return false;
  }
  prepareLeaveAnimationListeners(element) {
    const listeners = this._elementListeners.get(element);
    const elementStates = this._engine.statesByElement.get(element);
    if (listeners && elementStates) {
      const visitedTriggers = /* @__PURE__ */ new Set();
      listeners.forEach((listener) => {
        const triggerName = listener.name;
        if (visitedTriggers.has(triggerName))
          return;
        visitedTriggers.add(triggerName);
        const trigger2 = this._triggers.get(triggerName);
        const transition2 = trigger2.fallbackTransition;
        const fromState = elementStates.get(triggerName) || DEFAULT_STATE_VALUE;
        const toState = new StateValue(VOID_VALUE);
        const player = new TransitionAnimationPlayer(this.id, triggerName, element);
        this._engine.totalQueuedPlayers++;
        this._queue.push({
          element,
          triggerName,
          transition: transition2,
          fromState,
          toState,
          player,
          isFallbackTransition: true
        });
      });
    }
  }
  removeNode(element, context2) {
    const engine = this._engine;
    if (element.childElementCount) {
      this._signalRemovalForInnerTriggers(element, context2);
    }
    if (this.triggerLeaveAnimation(element, context2, true))
      return;
    let containsPotentialParentTransition = false;
    if (engine.totalAnimations) {
      const currentPlayers = engine.players.length ? engine.playersByQueriedElement.get(element) : [];
      if (currentPlayers && currentPlayers.length) {
        containsPotentialParentTransition = true;
      } else {
        let parent = element;
        while (parent = parent.parentNode) {
          const triggers = engine.statesByElement.get(parent);
          if (triggers) {
            containsPotentialParentTransition = true;
            break;
          }
        }
      }
    }
    this.prepareLeaveAnimationListeners(element);
    if (containsPotentialParentTransition) {
      engine.markElementAsRemoved(this.id, element, false, context2);
    } else {
      const removalFlag = element[REMOVAL_FLAG];
      if (!removalFlag || removalFlag === NULL_REMOVAL_STATE) {
        engine.afterFlush(() => this.clearElementCache(element));
        engine.destroyInnerAnimations(element);
        engine._onRemovalComplete(element, context2);
      }
    }
  }
  insertNode(element, parent) {
    addClass(element, this._hostClassName);
  }
  drainQueuedTransitions(microtaskId) {
    const instructions = [];
    this._queue.forEach((entry) => {
      const player = entry.player;
      if (player.destroyed)
        return;
      const element = entry.element;
      const listeners = this._elementListeners.get(element);
      if (listeners) {
        listeners.forEach((listener) => {
          if (listener.name == entry.triggerName) {
            const baseEvent = makeAnimationEvent(element, entry.triggerName, entry.fromState.value, entry.toState.value);
            baseEvent["_data"] = microtaskId;
            listenOnPlayer(entry.player, listener.phase, baseEvent, listener.callback);
          }
        });
      }
      if (player.markedForDestroy) {
        this._engine.afterFlush(() => {
          player.destroy();
        });
      } else {
        instructions.push(entry);
      }
    });
    this._queue = [];
    return instructions.sort((a, b) => {
      const d0 = a.transition.ast.depCount;
      const d1 = b.transition.ast.depCount;
      if (d0 == 0 || d1 == 0) {
        return d0 - d1;
      }
      return this._engine.driver.containsElement(a.element, b.element) ? 1 : -1;
    });
  }
  destroy(context2) {
    this.players.forEach((p) => p.destroy());
    this._signalRemovalForInnerTriggers(this.hostElement, context2);
  }
};
var TransitionAnimationEngine = class {
  /** @internal */
  _onRemovalComplete(element, context2) {
    this.onRemovalComplete(element, context2);
  }
  constructor(bodyNode, driver, _normalizer) {
    this.bodyNode = bodyNode;
    this.driver = driver;
    this._normalizer = _normalizer;
    this.players = [];
    this.newHostElements = /* @__PURE__ */ new Map();
    this.playersByElement = /* @__PURE__ */ new Map();
    this.playersByQueriedElement = /* @__PURE__ */ new Map();
    this.statesByElement = /* @__PURE__ */ new Map();
    this.disabledNodes = /* @__PURE__ */ new Set();
    this.totalAnimations = 0;
    this.totalQueuedPlayers = 0;
    this._namespaceLookup = {};
    this._namespaceList = [];
    this._flushFns = [];
    this._whenQuietFns = [];
    this.namespacesByHostElement = /* @__PURE__ */ new Map();
    this.collectedEnterElements = [];
    this.collectedLeaveElements = [];
    this.onRemovalComplete = (element, context2) => {
    };
  }
  get queuedPlayers() {
    const players = [];
    this._namespaceList.forEach((ns) => {
      ns.players.forEach((player) => {
        if (player.queued) {
          players.push(player);
        }
      });
    });
    return players;
  }
  createNamespace(namespaceId, hostElement) {
    const ns = new AnimationTransitionNamespace(namespaceId, hostElement, this);
    if (this.bodyNode && this.driver.containsElement(this.bodyNode, hostElement)) {
      this._balanceNamespaceList(ns, hostElement);
    } else {
      this.newHostElements.set(hostElement, ns);
      this.collectEnterElement(hostElement);
    }
    return this._namespaceLookup[namespaceId] = ns;
  }
  _balanceNamespaceList(ns, hostElement) {
    const namespaceList = this._namespaceList;
    const namespacesByHostElement = this.namespacesByHostElement;
    const limit = namespaceList.length - 1;
    if (limit >= 0) {
      let found = false;
      let ancestor = this.driver.getParentElement(hostElement);
      while (ancestor) {
        const ancestorNs = namespacesByHostElement.get(ancestor);
        if (ancestorNs) {
          const index = namespaceList.indexOf(ancestorNs);
          namespaceList.splice(index + 1, 0, ns);
          found = true;
          break;
        }
        ancestor = this.driver.getParentElement(ancestor);
      }
      if (!found) {
        namespaceList.unshift(ns);
      }
    } else {
      namespaceList.push(ns);
    }
    namespacesByHostElement.set(hostElement, ns);
    return ns;
  }
  register(namespaceId, hostElement) {
    let ns = this._namespaceLookup[namespaceId];
    if (!ns) {
      ns = this.createNamespace(namespaceId, hostElement);
    }
    return ns;
  }
  registerTrigger(namespaceId, name, trigger2) {
    let ns = this._namespaceLookup[namespaceId];
    if (ns && ns.register(name, trigger2)) {
      this.totalAnimations++;
    }
  }
  destroy(namespaceId, context2) {
    if (!namespaceId)
      return;
    this.afterFlush(() => {
    });
    this.afterFlushAnimationsDone(() => {
      const ns = this._fetchNamespace(namespaceId);
      this.namespacesByHostElement.delete(ns.hostElement);
      const index = this._namespaceList.indexOf(ns);
      if (index >= 0) {
        this._namespaceList.splice(index, 1);
      }
      ns.destroy(context2);
      delete this._namespaceLookup[namespaceId];
    });
  }
  _fetchNamespace(id) {
    return this._namespaceLookup[id];
  }
  fetchNamespacesByElement(element) {
    const namespaces = /* @__PURE__ */ new Set();
    const elementStates = this.statesByElement.get(element);
    if (elementStates) {
      for (let stateValue of elementStates.values()) {
        if (stateValue.namespaceId) {
          const ns = this._fetchNamespace(stateValue.namespaceId);
          if (ns) {
            namespaces.add(ns);
          }
        }
      }
    }
    return namespaces;
  }
  trigger(namespaceId, element, name, value) {
    if (isElementNode(element)) {
      const ns = this._fetchNamespace(namespaceId);
      if (ns) {
        ns.trigger(element, name, value);
        return true;
      }
    }
    return false;
  }
  insertNode(namespaceId, element, parent, insertBefore) {
    if (!isElementNode(element))
      return;
    const details = element[REMOVAL_FLAG];
    if (details && details.setForRemoval) {
      details.setForRemoval = false;
      details.setForMove = true;
      const index = this.collectedLeaveElements.indexOf(element);
      if (index >= 0) {
        this.collectedLeaveElements.splice(index, 1);
      }
    }
    if (namespaceId) {
      const ns = this._fetchNamespace(namespaceId);
      if (ns) {
        ns.insertNode(element, parent);
      }
    }
    if (insertBefore) {
      this.collectEnterElement(element);
    }
  }
  collectEnterElement(element) {
    this.collectedEnterElements.push(element);
  }
  markElementAsDisabled(element, value) {
    if (value) {
      if (!this.disabledNodes.has(element)) {
        this.disabledNodes.add(element);
        addClass(element, DISABLED_CLASSNAME);
      }
    } else if (this.disabledNodes.has(element)) {
      this.disabledNodes.delete(element);
      removeClass(element, DISABLED_CLASSNAME);
    }
  }
  removeNode(namespaceId, element, context2) {
    if (isElementNode(element)) {
      const ns = namespaceId ? this._fetchNamespace(namespaceId) : null;
      if (ns) {
        ns.removeNode(element, context2);
      } else {
        this.markElementAsRemoved(namespaceId, element, false, context2);
      }
      const hostNS = this.namespacesByHostElement.get(element);
      if (hostNS && hostNS.id !== namespaceId) {
        hostNS.removeNode(element, context2);
      }
    } else {
      this._onRemovalComplete(element, context2);
    }
  }
  markElementAsRemoved(namespaceId, element, hasAnimation, context2, previousTriggersValues) {
    this.collectedLeaveElements.push(element);
    element[REMOVAL_FLAG] = {
      namespaceId,
      setForRemoval: context2,
      hasAnimation,
      removedBeforeQueried: false,
      previousTriggersValues
    };
  }
  listen(namespaceId, element, name, phase, callback) {
    if (isElementNode(element)) {
      return this._fetchNamespace(namespaceId).listen(element, name, phase, callback);
    }
    return () => {
    };
  }
  _buildInstruction(entry, subTimelines, enterClassName, leaveClassName, skipBuildAst) {
    return entry.transition.build(this.driver, entry.element, entry.fromState.value, entry.toState.value, enterClassName, leaveClassName, entry.fromState.options, entry.toState.options, subTimelines, skipBuildAst);
  }
  destroyInnerAnimations(containerElement) {
    let elements = this.driver.query(containerElement, NG_TRIGGER_SELECTOR, true);
    elements.forEach((element) => this.destroyActiveAnimationsForElement(element));
    if (this.playersByQueriedElement.size == 0)
      return;
    elements = this.driver.query(containerElement, NG_ANIMATING_SELECTOR, true);
    elements.forEach((element) => this.finishActiveQueriedAnimationOnElement(element));
  }
  destroyActiveAnimationsForElement(element) {
    const players = this.playersByElement.get(element);
    if (players) {
      players.forEach((player) => {
        if (player.queued) {
          player.markedForDestroy = true;
        } else {
          player.destroy();
        }
      });
    }
  }
  finishActiveQueriedAnimationOnElement(element) {
    const players = this.playersByQueriedElement.get(element);
    if (players) {
      players.forEach((player) => player.finish());
    }
  }
  whenRenderingDone() {
    return new Promise((resolve) => {
      if (this.players.length) {
        return optimizeGroupPlayer(this.players).onDone(() => resolve());
      } else {
        resolve();
      }
    });
  }
  processLeaveNode(element) {
    const details = element[REMOVAL_FLAG];
    if (details && details.setForRemoval) {
      element[REMOVAL_FLAG] = NULL_REMOVAL_STATE;
      if (details.namespaceId) {
        this.destroyInnerAnimations(element);
        const ns = this._fetchNamespace(details.namespaceId);
        if (ns) {
          ns.clearElementCache(element);
        }
      }
      this._onRemovalComplete(element, details.setForRemoval);
    }
    if (element.classList?.contains(DISABLED_CLASSNAME)) {
      this.markElementAsDisabled(element, false);
    }
    this.driver.query(element, DISABLED_SELECTOR, true).forEach((node) => {
      this.markElementAsDisabled(node, false);
    });
  }
  flush(microtaskId = -1) {
    let players = [];
    if (this.newHostElements.size) {
      this.newHostElements.forEach((ns, element) => this._balanceNamespaceList(ns, element));
      this.newHostElements.clear();
    }
    if (this.totalAnimations && this.collectedEnterElements.length) {
      for (let i = 0; i < this.collectedEnterElements.length; i++) {
        const elm = this.collectedEnterElements[i];
        addClass(elm, STAR_CLASSNAME);
      }
    }
    if (this._namespaceList.length && (this.totalQueuedPlayers || this.collectedLeaveElements.length)) {
      const cleanupFns = [];
      try {
        players = this._flushAnimations(cleanupFns, microtaskId);
      } finally {
        for (let i = 0; i < cleanupFns.length; i++) {
          cleanupFns[i]();
        }
      }
    } else {
      for (let i = 0; i < this.collectedLeaveElements.length; i++) {
        const element = this.collectedLeaveElements[i];
        this.processLeaveNode(element);
      }
    }
    this.totalQueuedPlayers = 0;
    this.collectedEnterElements.length = 0;
    this.collectedLeaveElements.length = 0;
    this._flushFns.forEach((fn) => fn());
    this._flushFns = [];
    if (this._whenQuietFns.length) {
      const quietFns = this._whenQuietFns;
      this._whenQuietFns = [];
      if (players.length) {
        optimizeGroupPlayer(players).onDone(() => {
          quietFns.forEach((fn) => fn());
        });
      } else {
        quietFns.forEach((fn) => fn());
      }
    }
  }
  reportError(errors) {
    throw triggerTransitionsFailed(errors);
  }
  _flushAnimations(cleanupFns, microtaskId) {
    const subTimelines = new ElementInstructionMap();
    const skippedPlayers = [];
    const skippedPlayersMap = /* @__PURE__ */ new Map();
    const queuedInstructions = [];
    const queriedElements = /* @__PURE__ */ new Map();
    const allPreStyleElements = /* @__PURE__ */ new Map();
    const allPostStyleElements = /* @__PURE__ */ new Map();
    const disabledElementsSet = /* @__PURE__ */ new Set();
    this.disabledNodes.forEach((node) => {
      disabledElementsSet.add(node);
      const nodesThatAreDisabled = this.driver.query(node, QUEUED_SELECTOR, true);
      for (let i2 = 0; i2 < nodesThatAreDisabled.length; i2++) {
        disabledElementsSet.add(nodesThatAreDisabled[i2]);
      }
    });
    const bodyNode = this.bodyNode;
    const allTriggerElements = Array.from(this.statesByElement.keys());
    const enterNodeMap = buildRootMap(allTriggerElements, this.collectedEnterElements);
    const enterNodeMapIds = /* @__PURE__ */ new Map();
    let i = 0;
    enterNodeMap.forEach((nodes, root) => {
      const className = ENTER_CLASSNAME + i++;
      enterNodeMapIds.set(root, className);
      nodes.forEach((node) => addClass(node, className));
    });
    const allLeaveNodes = [];
    const mergedLeaveNodes = /* @__PURE__ */ new Set();
    const leaveNodesWithoutAnimations = /* @__PURE__ */ new Set();
    for (let i2 = 0; i2 < this.collectedLeaveElements.length; i2++) {
      const element = this.collectedLeaveElements[i2];
      const details = element[REMOVAL_FLAG];
      if (details && details.setForRemoval) {
        allLeaveNodes.push(element);
        mergedLeaveNodes.add(element);
        if (details.hasAnimation) {
          this.driver.query(element, STAR_SELECTOR, true).forEach((elm) => mergedLeaveNodes.add(elm));
        } else {
          leaveNodesWithoutAnimations.add(element);
        }
      }
    }
    const leaveNodeMapIds = /* @__PURE__ */ new Map();
    const leaveNodeMap = buildRootMap(allTriggerElements, Array.from(mergedLeaveNodes));
    leaveNodeMap.forEach((nodes, root) => {
      const className = LEAVE_CLASSNAME + i++;
      leaveNodeMapIds.set(root, className);
      nodes.forEach((node) => addClass(node, className));
    });
    cleanupFns.push(() => {
      enterNodeMap.forEach((nodes, root) => {
        const className = enterNodeMapIds.get(root);
        nodes.forEach((node) => removeClass(node, className));
      });
      leaveNodeMap.forEach((nodes, root) => {
        const className = leaveNodeMapIds.get(root);
        nodes.forEach((node) => removeClass(node, className));
      });
      allLeaveNodes.forEach((element) => {
        this.processLeaveNode(element);
      });
    });
    const allPlayers = [];
    const erroneousTransitions = [];
    for (let i2 = this._namespaceList.length - 1; i2 >= 0; i2--) {
      const ns = this._namespaceList[i2];
      ns.drainQueuedTransitions(microtaskId).forEach((entry) => {
        const player = entry.player;
        const element = entry.element;
        allPlayers.push(player);
        if (this.collectedEnterElements.length) {
          const details = element[REMOVAL_FLAG];
          if (details && details.setForMove) {
            if (details.previousTriggersValues && details.previousTriggersValues.has(entry.triggerName)) {
              const previousValue = details.previousTriggersValues.get(entry.triggerName);
              const triggersWithStates = this.statesByElement.get(entry.element);
              if (triggersWithStates && triggersWithStates.has(entry.triggerName)) {
                const state2 = triggersWithStates.get(entry.triggerName);
                state2.value = previousValue;
                triggersWithStates.set(entry.triggerName, state2);
              }
            }
            player.destroy();
            return;
          }
        }
        const nodeIsOrphaned = !bodyNode || !this.driver.containsElement(bodyNode, element);
        const leaveClassName = leaveNodeMapIds.get(element);
        const enterClassName = enterNodeMapIds.get(element);
        const instruction = this._buildInstruction(entry, subTimelines, enterClassName, leaveClassName, nodeIsOrphaned);
        if (instruction.errors && instruction.errors.length) {
          erroneousTransitions.push(instruction);
          return;
        }
        if (nodeIsOrphaned) {
          player.onStart(() => eraseStyles(element, instruction.fromStyles));
          player.onDestroy(() => setStyles(element, instruction.toStyles));
          skippedPlayers.push(player);
          return;
        }
        if (entry.isFallbackTransition) {
          player.onStart(() => eraseStyles(element, instruction.fromStyles));
          player.onDestroy(() => setStyles(element, instruction.toStyles));
          skippedPlayers.push(player);
          return;
        }
        const timelines = [];
        instruction.timelines.forEach((tl) => {
          tl.stretchStartingKeyframe = true;
          if (!this.disabledNodes.has(tl.element)) {
            timelines.push(tl);
          }
        });
        instruction.timelines = timelines;
        subTimelines.append(element, instruction.timelines);
        const tuple = {
          instruction,
          player,
          element
        };
        queuedInstructions.push(tuple);
        instruction.queriedElements.forEach((element2) => getOrSetDefaultValue(queriedElements, element2, []).push(player));
        instruction.preStyleProps.forEach((stringMap, element2) => {
          if (stringMap.size) {
            let setVal = allPreStyleElements.get(element2);
            if (!setVal) {
              allPreStyleElements.set(element2, setVal = /* @__PURE__ */ new Set());
            }
            stringMap.forEach((_, prop) => setVal.add(prop));
          }
        });
        instruction.postStyleProps.forEach((stringMap, element2) => {
          let setVal = allPostStyleElements.get(element2);
          if (!setVal) {
            allPostStyleElements.set(element2, setVal = /* @__PURE__ */ new Set());
          }
          stringMap.forEach((_, prop) => setVal.add(prop));
        });
      });
    }
    if (erroneousTransitions.length) {
      const errors = [];
      erroneousTransitions.forEach((instruction) => {
        errors.push(transitionFailed(instruction.triggerName, instruction.errors));
      });
      allPlayers.forEach((player) => player.destroy());
      this.reportError(errors);
    }
    const allPreviousPlayersMap = /* @__PURE__ */ new Map();
    const animationElementMap = /* @__PURE__ */ new Map();
    queuedInstructions.forEach((entry) => {
      const element = entry.element;
      if (subTimelines.has(element)) {
        animationElementMap.set(element, element);
        this._beforeAnimationBuild(entry.player.namespaceId, entry.instruction, allPreviousPlayersMap);
      }
    });
    skippedPlayers.forEach((player) => {
      const element = player.element;
      const previousPlayers = this._getPreviousPlayers(element, false, player.namespaceId, player.triggerName, null);
      previousPlayers.forEach((prevPlayer) => {
        getOrSetDefaultValue(allPreviousPlayersMap, element, []).push(prevPlayer);
        prevPlayer.destroy();
      });
    });
    const replaceNodes = allLeaveNodes.filter((node) => {
      return replacePostStylesAsPre(node, allPreStyleElements, allPostStyleElements);
    });
    const postStylesMap = /* @__PURE__ */ new Map();
    const allLeaveQueriedNodes = cloakAndComputeStyles(postStylesMap, this.driver, leaveNodesWithoutAnimations, allPostStyleElements, AUTO_STYLE);
    allLeaveQueriedNodes.forEach((node) => {
      if (replacePostStylesAsPre(node, allPreStyleElements, allPostStyleElements)) {
        replaceNodes.push(node);
      }
    });
    const preStylesMap = /* @__PURE__ */ new Map();
    enterNodeMap.forEach((nodes, root) => {
      cloakAndComputeStyles(preStylesMap, this.driver, new Set(nodes), allPreStyleElements, \u0275PRE_STYLE);
    });
    replaceNodes.forEach((node) => {
      const post = postStylesMap.get(node);
      const pre = preStylesMap.get(node);
      postStylesMap.set(node, new Map([...post?.entries() ?? [], ...pre?.entries() ?? []]));
    });
    const rootPlayers = [];
    const subPlayers = [];
    const NO_PARENT_ANIMATION_ELEMENT_DETECTED = {};
    queuedInstructions.forEach((entry) => {
      const {
        element,
        player,
        instruction
      } = entry;
      if (subTimelines.has(element)) {
        if (disabledElementsSet.has(element)) {
          player.onDestroy(() => setStyles(element, instruction.toStyles));
          player.disabled = true;
          player.overrideTotalTime(instruction.totalTime);
          skippedPlayers.push(player);
          return;
        }
        let parentWithAnimation = NO_PARENT_ANIMATION_ELEMENT_DETECTED;
        if (animationElementMap.size > 1) {
          let elm = element;
          const parentsToAdd = [];
          while (elm = elm.parentNode) {
            const detectedParent = animationElementMap.get(elm);
            if (detectedParent) {
              parentWithAnimation = detectedParent;
              break;
            }
            parentsToAdd.push(elm);
          }
          parentsToAdd.forEach((parent) => animationElementMap.set(parent, parentWithAnimation));
        }
        const innerPlayer = this._buildAnimation(player.namespaceId, instruction, allPreviousPlayersMap, skippedPlayersMap, preStylesMap, postStylesMap);
        player.setRealPlayer(innerPlayer);
        if (parentWithAnimation === NO_PARENT_ANIMATION_ELEMENT_DETECTED) {
          rootPlayers.push(player);
        } else {
          const parentPlayers = this.playersByElement.get(parentWithAnimation);
          if (parentPlayers && parentPlayers.length) {
            player.parentPlayer = optimizeGroupPlayer(parentPlayers);
          }
          skippedPlayers.push(player);
        }
      } else {
        eraseStyles(element, instruction.fromStyles);
        player.onDestroy(() => setStyles(element, instruction.toStyles));
        subPlayers.push(player);
        if (disabledElementsSet.has(element)) {
          skippedPlayers.push(player);
        }
      }
    });
    subPlayers.forEach((player) => {
      const playersForElement = skippedPlayersMap.get(player.element);
      if (playersForElement && playersForElement.length) {
        const innerPlayer = optimizeGroupPlayer(playersForElement);
        player.setRealPlayer(innerPlayer);
      }
    });
    skippedPlayers.forEach((player) => {
      if (player.parentPlayer) {
        player.syncPlayerEvents(player.parentPlayer);
      } else {
        player.destroy();
      }
    });
    for (let i2 = 0; i2 < allLeaveNodes.length; i2++) {
      const element = allLeaveNodes[i2];
      const details = element[REMOVAL_FLAG];
      removeClass(element, LEAVE_CLASSNAME);
      if (details && details.hasAnimation)
        continue;
      let players = [];
      if (queriedElements.size) {
        let queriedPlayerResults = queriedElements.get(element);
        if (queriedPlayerResults && queriedPlayerResults.length) {
          players.push(...queriedPlayerResults);
        }
        let queriedInnerElements = this.driver.query(element, NG_ANIMATING_SELECTOR, true);
        for (let j = 0; j < queriedInnerElements.length; j++) {
          let queriedPlayers = queriedElements.get(queriedInnerElements[j]);
          if (queriedPlayers && queriedPlayers.length) {
            players.push(...queriedPlayers);
          }
        }
      }
      const activePlayers = players.filter((p) => !p.destroyed);
      if (activePlayers.length) {
        removeNodesAfterAnimationDone(this, element, activePlayers);
      } else {
        this.processLeaveNode(element);
      }
    }
    allLeaveNodes.length = 0;
    rootPlayers.forEach((player) => {
      this.players.push(player);
      player.onDone(() => {
        player.destroy();
        const index = this.players.indexOf(player);
        this.players.splice(index, 1);
      });
      player.play();
    });
    return rootPlayers;
  }
  afterFlush(callback) {
    this._flushFns.push(callback);
  }
  afterFlushAnimationsDone(callback) {
    this._whenQuietFns.push(callback);
  }
  _getPreviousPlayers(element, isQueriedElement, namespaceId, triggerName, toStateValue) {
    let players = [];
    if (isQueriedElement) {
      const queriedElementPlayers = this.playersByQueriedElement.get(element);
      if (queriedElementPlayers) {
        players = queriedElementPlayers;
      }
    } else {
      const elementPlayers = this.playersByElement.get(element);
      if (elementPlayers) {
        const isRemovalAnimation = !toStateValue || toStateValue == VOID_VALUE;
        elementPlayers.forEach((player) => {
          if (player.queued)
            return;
          if (!isRemovalAnimation && player.triggerName != triggerName)
            return;
          players.push(player);
        });
      }
    }
    if (namespaceId || triggerName) {
      players = players.filter((player) => {
        if (namespaceId && namespaceId != player.namespaceId)
          return false;
        if (triggerName && triggerName != player.triggerName)
          return false;
        return true;
      });
    }
    return players;
  }
  _beforeAnimationBuild(namespaceId, instruction, allPreviousPlayersMap) {
    const triggerName = instruction.triggerName;
    const rootElement = instruction.element;
    const targetNameSpaceId = instruction.isRemovalTransition ? void 0 : namespaceId;
    const targetTriggerName = instruction.isRemovalTransition ? void 0 : triggerName;
    for (const timelineInstruction of instruction.timelines) {
      const element = timelineInstruction.element;
      const isQueriedElement = element !== rootElement;
      const players = getOrSetDefaultValue(allPreviousPlayersMap, element, []);
      const previousPlayers = this._getPreviousPlayers(element, isQueriedElement, targetNameSpaceId, targetTriggerName, instruction.toState);
      previousPlayers.forEach((player) => {
        const realPlayer = player.getRealPlayer();
        if (realPlayer.beforeDestroy) {
          realPlayer.beforeDestroy();
        }
        player.destroy();
        players.push(player);
      });
    }
    eraseStyles(rootElement, instruction.fromStyles);
  }
  _buildAnimation(namespaceId, instruction, allPreviousPlayersMap, skippedPlayersMap, preStylesMap, postStylesMap) {
    const triggerName = instruction.triggerName;
    const rootElement = instruction.element;
    const allQueriedPlayers = [];
    const allConsumedElements = /* @__PURE__ */ new Set();
    const allSubElements = /* @__PURE__ */ new Set();
    const allNewPlayers = instruction.timelines.map((timelineInstruction) => {
      const element = timelineInstruction.element;
      allConsumedElements.add(element);
      const details = element[REMOVAL_FLAG];
      if (details && details.removedBeforeQueried)
        return new NoopAnimationPlayer(timelineInstruction.duration, timelineInstruction.delay);
      const isQueriedElement = element !== rootElement;
      const previousPlayers = flattenGroupPlayers((allPreviousPlayersMap.get(element) || EMPTY_PLAYER_ARRAY).map((p) => p.getRealPlayer())).filter((p) => {
        const pp = p;
        return pp.element ? pp.element === element : false;
      });
      const preStyles = preStylesMap.get(element);
      const postStyles = postStylesMap.get(element);
      const keyframes = normalizeKeyframes$1(this._normalizer, timelineInstruction.keyframes, preStyles, postStyles);
      const player2 = this._buildPlayer(timelineInstruction, keyframes, previousPlayers);
      if (timelineInstruction.subTimeline && skippedPlayersMap) {
        allSubElements.add(element);
      }
      if (isQueriedElement) {
        const wrappedPlayer = new TransitionAnimationPlayer(namespaceId, triggerName, element);
        wrappedPlayer.setRealPlayer(player2);
        allQueriedPlayers.push(wrappedPlayer);
      }
      return player2;
    });
    allQueriedPlayers.forEach((player2) => {
      getOrSetDefaultValue(this.playersByQueriedElement, player2.element, []).push(player2);
      player2.onDone(() => deleteOrUnsetInMap(this.playersByQueriedElement, player2.element, player2));
    });
    allConsumedElements.forEach((element) => addClass(element, NG_ANIMATING_CLASSNAME));
    const player = optimizeGroupPlayer(allNewPlayers);
    player.onDestroy(() => {
      allConsumedElements.forEach((element) => removeClass(element, NG_ANIMATING_CLASSNAME));
      setStyles(rootElement, instruction.toStyles);
    });
    allSubElements.forEach((element) => {
      getOrSetDefaultValue(skippedPlayersMap, element, []).push(player);
    });
    return player;
  }
  _buildPlayer(instruction, keyframes, previousPlayers) {
    if (keyframes.length > 0) {
      return this.driver.animate(instruction.element, keyframes, instruction.duration, instruction.delay, instruction.easing, previousPlayers);
    }
    return new NoopAnimationPlayer(instruction.duration, instruction.delay);
  }
};
var TransitionAnimationPlayer = class {
  constructor(namespaceId, triggerName, element) {
    this.namespaceId = namespaceId;
    this.triggerName = triggerName;
    this.element = element;
    this._player = new NoopAnimationPlayer();
    this._containsRealPlayer = false;
    this._queuedCallbacks = /* @__PURE__ */ new Map();
    this.destroyed = false;
    this.parentPlayer = null;
    this.markedForDestroy = false;
    this.disabled = false;
    this.queued = true;
    this.totalTime = 0;
  }
  setRealPlayer(player) {
    if (this._containsRealPlayer)
      return;
    this._player = player;
    this._queuedCallbacks.forEach((callbacks, phase) => {
      callbacks.forEach((callback) => listenOnPlayer(player, phase, void 0, callback));
    });
    this._queuedCallbacks.clear();
    this._containsRealPlayer = true;
    this.overrideTotalTime(player.totalTime);
    this.queued = false;
  }
  getRealPlayer() {
    return this._player;
  }
  overrideTotalTime(totalTime) {
    this.totalTime = totalTime;
  }
  syncPlayerEvents(player) {
    const p = this._player;
    if (p.triggerCallback) {
      player.onStart(() => p.triggerCallback("start"));
    }
    player.onDone(() => this.finish());
    player.onDestroy(() => this.destroy());
  }
  _queueEvent(name, callback) {
    getOrSetDefaultValue(this._queuedCallbacks, name, []).push(callback);
  }
  onDone(fn) {
    if (this.queued) {
      this._queueEvent("done", fn);
    }
    this._player.onDone(fn);
  }
  onStart(fn) {
    if (this.queued) {
      this._queueEvent("start", fn);
    }
    this._player.onStart(fn);
  }
  onDestroy(fn) {
    if (this.queued) {
      this._queueEvent("destroy", fn);
    }
    this._player.onDestroy(fn);
  }
  init() {
    this._player.init();
  }
  hasStarted() {
    return this.queued ? false : this._player.hasStarted();
  }
  play() {
    !this.queued && this._player.play();
  }
  pause() {
    !this.queued && this._player.pause();
  }
  restart() {
    !this.queued && this._player.restart();
  }
  finish() {
    this._player.finish();
  }
  destroy() {
    this.destroyed = true;
    this._player.destroy();
  }
  reset() {
    !this.queued && this._player.reset();
  }
  setPosition(p) {
    if (!this.queued) {
      this._player.setPosition(p);
    }
  }
  getPosition() {
    return this.queued ? 0 : this._player.getPosition();
  }
  /** @internal */
  triggerCallback(phaseName) {
    const p = this._player;
    if (p.triggerCallback) {
      p.triggerCallback(phaseName);
    }
  }
};
function deleteOrUnsetInMap(map2, key, value) {
  let currentValues = map2.get(key);
  if (currentValues) {
    if (currentValues.length) {
      const index = currentValues.indexOf(value);
      currentValues.splice(index, 1);
    }
    if (currentValues.length == 0) {
      map2.delete(key);
    }
  }
  return currentValues;
}
function normalizeTriggerValue(value) {
  return value != null ? value : null;
}
function isElementNode(node) {
  return node && node["nodeType"] === 1;
}
function isTriggerEventValid(eventName) {
  return eventName == "start" || eventName == "done";
}
function cloakElement(element, value) {
  const oldValue = element.style.display;
  element.style.display = value != null ? value : "none";
  return oldValue;
}
function cloakAndComputeStyles(valuesMap, driver, elements, elementPropsMap, defaultStyle) {
  const cloakVals = [];
  elements.forEach((element) => cloakVals.push(cloakElement(element)));
  const failedElements = [];
  elementPropsMap.forEach((props, element) => {
    const styles = /* @__PURE__ */ new Map();
    props.forEach((prop) => {
      const value = driver.computeStyle(element, prop, defaultStyle);
      styles.set(prop, value);
      if (!value || value.length == 0) {
        element[REMOVAL_FLAG] = NULL_REMOVED_QUERIED_STATE;
        failedElements.push(element);
      }
    });
    valuesMap.set(element, styles);
  });
  let i = 0;
  elements.forEach((element) => cloakElement(element, cloakVals[i++]));
  return failedElements;
}
function buildRootMap(roots, nodes) {
  const rootMap = /* @__PURE__ */ new Map();
  roots.forEach((root) => rootMap.set(root, []));
  if (nodes.length == 0)
    return rootMap;
  const NULL_NODE = 1;
  const nodeSet = new Set(nodes);
  const localRootMap = /* @__PURE__ */ new Map();
  function getRoot(node) {
    if (!node)
      return NULL_NODE;
    let root = localRootMap.get(node);
    if (root)
      return root;
    const parent = node.parentNode;
    if (rootMap.has(parent)) {
      root = parent;
    } else if (nodeSet.has(parent)) {
      root = NULL_NODE;
    } else {
      root = getRoot(parent);
    }
    localRootMap.set(node, root);
    return root;
  }
  nodes.forEach((node) => {
    const root = getRoot(node);
    if (root !== NULL_NODE) {
      rootMap.get(root).push(node);
    }
  });
  return rootMap;
}
function addClass(element, className) {
  element.classList?.add(className);
}
function removeClass(element, className) {
  element.classList?.remove(className);
}
function removeNodesAfterAnimationDone(engine, element, players) {
  optimizeGroupPlayer(players).onDone(() => engine.processLeaveNode(element));
}
function flattenGroupPlayers(players) {
  const finalPlayers = [];
  _flattenGroupPlayersRecur(players, finalPlayers);
  return finalPlayers;
}
function _flattenGroupPlayersRecur(players, finalPlayers) {
  for (let i = 0; i < players.length; i++) {
    const player = players[i];
    if (player instanceof AnimationGroupPlayer) {
      _flattenGroupPlayersRecur(player.players, finalPlayers);
    } else {
      finalPlayers.push(player);
    }
  }
}
function objEquals(a, b) {
  const k1 = Object.keys(a);
  const k2 = Object.keys(b);
  if (k1.length != k2.length)
    return false;
  for (let i = 0; i < k1.length; i++) {
    const prop = k1[i];
    if (!b.hasOwnProperty(prop) || a[prop] !== b[prop])
      return false;
  }
  return true;
}
function replacePostStylesAsPre(element, allPreStyleElements, allPostStyleElements) {
  const postEntry = allPostStyleElements.get(element);
  if (!postEntry)
    return false;
  let preEntry = allPreStyleElements.get(element);
  if (preEntry) {
    postEntry.forEach((data) => preEntry.add(data));
  } else {
    allPreStyleElements.set(element, postEntry);
  }
  allPostStyleElements.delete(element);
  return true;
}
var AnimationEngine = class {
  constructor(doc, _driver, _normalizer) {
    this._driver = _driver;
    this._normalizer = _normalizer;
    this._triggerCache = {};
    this.onRemovalComplete = (element, context2) => {
    };
    this._transitionEngine = new TransitionAnimationEngine(doc.body, _driver, _normalizer);
    this._timelineEngine = new TimelineAnimationEngine(doc.body, _driver, _normalizer);
    this._transitionEngine.onRemovalComplete = (element, context2) => this.onRemovalComplete(element, context2);
  }
  registerTrigger(componentId, namespaceId, hostElement, name, metadata) {
    const cacheKey = componentId + "-" + name;
    let trigger2 = this._triggerCache[cacheKey];
    if (!trigger2) {
      const errors = [];
      const warnings = [];
      const ast = buildAnimationAst(this._driver, metadata, errors, warnings);
      if (errors.length) {
        throw triggerBuildFailed(name, errors);
      }
      if (warnings.length) {
        warnTriggerBuild(name, warnings);
      }
      trigger2 = buildTrigger(name, ast, this._normalizer);
      this._triggerCache[cacheKey] = trigger2;
    }
    this._transitionEngine.registerTrigger(namespaceId, name, trigger2);
  }
  register(namespaceId, hostElement) {
    this._transitionEngine.register(namespaceId, hostElement);
  }
  destroy(namespaceId, context2) {
    this._transitionEngine.destroy(namespaceId, context2);
  }
  onInsert(namespaceId, element, parent, insertBefore) {
    this._transitionEngine.insertNode(namespaceId, element, parent, insertBefore);
  }
  onRemove(namespaceId, element, context2) {
    this._transitionEngine.removeNode(namespaceId, element, context2);
  }
  disableAnimations(element, disable) {
    this._transitionEngine.markElementAsDisabled(element, disable);
  }
  process(namespaceId, element, property, value) {
    if (property.charAt(0) == "@") {
      const [id, action] = parseTimelineCommand(property);
      const args = value;
      this._timelineEngine.command(id, element, action, args);
    } else {
      this._transitionEngine.trigger(namespaceId, element, property, value);
    }
  }
  listen(namespaceId, element, eventName, eventPhase, callback) {
    if (eventName.charAt(0) == "@") {
      const [id, action] = parseTimelineCommand(eventName);
      return this._timelineEngine.listen(id, element, action, callback);
    }
    return this._transitionEngine.listen(namespaceId, element, eventName, eventPhase, callback);
  }
  flush(microtaskId = -1) {
    this._transitionEngine.flush(microtaskId);
  }
  get players() {
    return [...this._transitionEngine.players, ...this._timelineEngine.players];
  }
  whenRenderingDone() {
    return this._transitionEngine.whenRenderingDone();
  }
  afterFlushAnimationsDone(cb) {
    this._transitionEngine.afterFlushAnimationsDone(cb);
  }
};
function packageNonAnimatableStyles(element, styles) {
  let startStyles = null;
  let endStyles = null;
  if (Array.isArray(styles) && styles.length) {
    startStyles = filterNonAnimatableStyles(styles[0]);
    if (styles.length > 1) {
      endStyles = filterNonAnimatableStyles(styles[styles.length - 1]);
    }
  } else if (styles instanceof Map) {
    startStyles = filterNonAnimatableStyles(styles);
  }
  return startStyles || endStyles ? new SpecialCasedStyles(element, startStyles, endStyles) : null;
}
var _SpecialCasedStyles = class _SpecialCasedStyles {
  constructor(_element, _startStyles, _endStyles) {
    this._element = _element;
    this._startStyles = _startStyles;
    this._endStyles = _endStyles;
    this._state = 0;
    let initialStyles = _SpecialCasedStyles.initialStylesByElement.get(_element);
    if (!initialStyles) {
      _SpecialCasedStyles.initialStylesByElement.set(_element, initialStyles = /* @__PURE__ */ new Map());
    }
    this._initialStyles = initialStyles;
  }
  start() {
    if (this._state < 1) {
      if (this._startStyles) {
        setStyles(this._element, this._startStyles, this._initialStyles);
      }
      this._state = 1;
    }
  }
  finish() {
    this.start();
    if (this._state < 2) {
      setStyles(this._element, this._initialStyles);
      if (this._endStyles) {
        setStyles(this._element, this._endStyles);
        this._endStyles = null;
      }
      this._state = 1;
    }
  }
  destroy() {
    this.finish();
    if (this._state < 3) {
      _SpecialCasedStyles.initialStylesByElement.delete(this._element);
      if (this._startStyles) {
        eraseStyles(this._element, this._startStyles);
        this._endStyles = null;
      }
      if (this._endStyles) {
        eraseStyles(this._element, this._endStyles);
        this._endStyles = null;
      }
      setStyles(this._element, this._initialStyles);
      this._state = 3;
    }
  }
};
_SpecialCasedStyles.initialStylesByElement = /* @__PURE__ */ new WeakMap();
var SpecialCasedStyles = _SpecialCasedStyles;
function filterNonAnimatableStyles(styles) {
  let result = null;
  styles.forEach((val, prop) => {
    if (isNonAnimatableStyle(prop)) {
      result = result || /* @__PURE__ */ new Map();
      result.set(prop, val);
    }
  });
  return result;
}
function isNonAnimatableStyle(prop) {
  return prop === "display" || prop === "position";
}
var WebAnimationsPlayer = class {
  constructor(element, keyframes, options, _specialStyles) {
    this.element = element;
    this.keyframes = keyframes;
    this.options = options;
    this._specialStyles = _specialStyles;
    this._onDoneFns = [];
    this._onStartFns = [];
    this._onDestroyFns = [];
    this._initialized = false;
    this._finished = false;
    this._started = false;
    this._destroyed = false;
    this._originalOnDoneFns = [];
    this._originalOnStartFns = [];
    this.time = 0;
    this.parentPlayer = null;
    this.currentSnapshot = /* @__PURE__ */ new Map();
    this._duration = options["duration"];
    this._delay = options["delay"] || 0;
    this.time = this._duration + this._delay;
  }
  _onFinish() {
    if (!this._finished) {
      this._finished = true;
      this._onDoneFns.forEach((fn) => fn());
      this._onDoneFns = [];
    }
  }
  init() {
    this._buildPlayer();
    this._preparePlayerBeforeStart();
  }
  _buildPlayer() {
    if (this._initialized)
      return;
    this._initialized = true;
    const keyframes = this.keyframes;
    this.domPlayer = this._triggerWebAnimation(this.element, keyframes, this.options);
    this._finalKeyframe = keyframes.length ? keyframes[keyframes.length - 1] : /* @__PURE__ */ new Map();
    const onFinish = () => this._onFinish();
    this.domPlayer.addEventListener("finish", onFinish);
    this.onDestroy(() => {
      this.domPlayer.removeEventListener("finish", onFinish);
    });
  }
  _preparePlayerBeforeStart() {
    if (this._delay) {
      this._resetDomPlayerState();
    } else {
      this.domPlayer.pause();
    }
  }
  _convertKeyframesToObject(keyframes) {
    const kfs = [];
    keyframes.forEach((frame) => {
      kfs.push(Object.fromEntries(frame));
    });
    return kfs;
  }
  /** @internal */
  _triggerWebAnimation(element, keyframes, options) {
    return element.animate(this._convertKeyframesToObject(keyframes), options);
  }
  onStart(fn) {
    this._originalOnStartFns.push(fn);
    this._onStartFns.push(fn);
  }
  onDone(fn) {
    this._originalOnDoneFns.push(fn);
    this._onDoneFns.push(fn);
  }
  onDestroy(fn) {
    this._onDestroyFns.push(fn);
  }
  play() {
    this._buildPlayer();
    if (!this.hasStarted()) {
      this._onStartFns.forEach((fn) => fn());
      this._onStartFns = [];
      this._started = true;
      if (this._specialStyles) {
        this._specialStyles.start();
      }
    }
    this.domPlayer.play();
  }
  pause() {
    this.init();
    this.domPlayer.pause();
  }
  finish() {
    this.init();
    if (this._specialStyles) {
      this._specialStyles.finish();
    }
    this._onFinish();
    this.domPlayer.finish();
  }
  reset() {
    this._resetDomPlayerState();
    this._destroyed = false;
    this._finished = false;
    this._started = false;
    this._onStartFns = this._originalOnStartFns;
    this._onDoneFns = this._originalOnDoneFns;
  }
  _resetDomPlayerState() {
    if (this.domPlayer) {
      this.domPlayer.cancel();
    }
  }
  restart() {
    this.reset();
    this.play();
  }
  hasStarted() {
    return this._started;
  }
  destroy() {
    if (!this._destroyed) {
      this._destroyed = true;
      this._resetDomPlayerState();
      this._onFinish();
      if (this._specialStyles) {
        this._specialStyles.destroy();
      }
      this._onDestroyFns.forEach((fn) => fn());
      this._onDestroyFns = [];
    }
  }
  setPosition(p) {
    if (this.domPlayer === void 0) {
      this.init();
    }
    this.domPlayer.currentTime = p * this.time;
  }
  getPosition() {
    return +(this.domPlayer.currentTime ?? 0) / this.time;
  }
  get totalTime() {
    return this._delay + this._duration;
  }
  beforeDestroy() {
    const styles = /* @__PURE__ */ new Map();
    if (this.hasStarted()) {
      const finalKeyframe = this._finalKeyframe;
      finalKeyframe.forEach((val, prop) => {
        if (prop !== "offset") {
          styles.set(prop, this._finished ? val : computeStyle(this.element, prop));
        }
      });
    }
    this.currentSnapshot = styles;
  }
  /** @internal */
  triggerCallback(phaseName) {
    const methods = phaseName === "start" ? this._onStartFns : this._onDoneFns;
    methods.forEach((fn) => fn());
    methods.length = 0;
  }
};
var WebAnimationsDriver = class {
  validateStyleProperty(prop) {
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      return validateStyleProperty(prop);
    }
    return true;
  }
  validateAnimatableStyleProperty(prop) {
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      const cssProp = camelCaseToDashCase2(prop);
      return validateWebAnimatableStyleProperty(cssProp);
    }
    return true;
  }
  matchesElement(_element, _selector) {
    return false;
  }
  containsElement(elm1, elm2) {
    return containsElement(elm1, elm2);
  }
  getParentElement(element) {
    return getParentElement(element);
  }
  query(element, selector, multi) {
    return invokeQuery(element, selector, multi);
  }
  computeStyle(element, prop, defaultValue) {
    return window.getComputedStyle(element)[prop];
  }
  animate(element, keyframes, duration, delay, easing, previousPlayers = []) {
    const fill = delay == 0 ? "both" : "forwards";
    const playerOptions = {
      duration,
      delay,
      fill
    };
    if (easing) {
      playerOptions["easing"] = easing;
    }
    const previousStyles = /* @__PURE__ */ new Map();
    const previousWebAnimationPlayers = previousPlayers.filter((player) => player instanceof WebAnimationsPlayer);
    if (allowPreviousPlayerStylesMerge(duration, delay)) {
      previousWebAnimationPlayers.forEach((player) => {
        player.currentSnapshot.forEach((val, prop) => previousStyles.set(prop, val));
      });
    }
    let _keyframes = normalizeKeyframes(keyframes).map((styles) => copyStyles(styles));
    _keyframes = balancePreviousStylesIntoKeyframes(element, _keyframes, previousStyles);
    const specialStyles = packageNonAnimatableStyles(element, _keyframes);
    return new WebAnimationsPlayer(element, _keyframes, playerOptions, specialStyles);
  }
};
var ANIMATION_PREFIX = "@";
var DISABLE_ANIMATIONS_FLAG = "@.disabled";
var BaseAnimationRenderer = class {
  constructor(namespaceId, delegate, engine, _onDestroy) {
    this.namespaceId = namespaceId;
    this.delegate = delegate;
    this.engine = engine;
    this._onDestroy = _onDestroy;
    this.\u0275type = 0;
  }
  get data() {
    return this.delegate.data;
  }
  destroyNode(node) {
    this.delegate.destroyNode?.(node);
  }
  destroy() {
    this.engine.destroy(this.namespaceId, this.delegate);
    this.engine.afterFlushAnimationsDone(() => {
      queueMicrotask(() => {
        this.delegate.destroy();
      });
    });
    this._onDestroy?.();
  }
  createElement(name, namespace) {
    return this.delegate.createElement(name, namespace);
  }
  createComment(value) {
    return this.delegate.createComment(value);
  }
  createText(value) {
    return this.delegate.createText(value);
  }
  appendChild(parent, newChild) {
    this.delegate.appendChild(parent, newChild);
    this.engine.onInsert(this.namespaceId, newChild, parent, false);
  }
  insertBefore(parent, newChild, refChild, isMove = true) {
    this.delegate.insertBefore(parent, newChild, refChild);
    this.engine.onInsert(this.namespaceId, newChild, parent, isMove);
  }
  removeChild(parent, oldChild, isHostElement) {
    this.engine.onRemove(this.namespaceId, oldChild, this.delegate);
  }
  selectRootElement(selectorOrNode, preserveContent) {
    return this.delegate.selectRootElement(selectorOrNode, preserveContent);
  }
  parentNode(node) {
    return this.delegate.parentNode(node);
  }
  nextSibling(node) {
    return this.delegate.nextSibling(node);
  }
  setAttribute(el, name, value, namespace) {
    this.delegate.setAttribute(el, name, value, namespace);
  }
  removeAttribute(el, name, namespace) {
    this.delegate.removeAttribute(el, name, namespace);
  }
  addClass(el, name) {
    this.delegate.addClass(el, name);
  }
  removeClass(el, name) {
    this.delegate.removeClass(el, name);
  }
  setStyle(el, style2, value, flags) {
    this.delegate.setStyle(el, style2, value, flags);
  }
  removeStyle(el, style2, flags) {
    this.delegate.removeStyle(el, style2, flags);
  }
  setProperty(el, name, value) {
    if (name.charAt(0) == ANIMATION_PREFIX && name == DISABLE_ANIMATIONS_FLAG) {
      this.disableAnimations(el, !!value);
    } else {
      this.delegate.setProperty(el, name, value);
    }
  }
  setValue(node, value) {
    this.delegate.setValue(node, value);
  }
  listen(target, eventName, callback) {
    return this.delegate.listen(target, eventName, callback);
  }
  disableAnimations(element, value) {
    this.engine.disableAnimations(element, value);
  }
};
var AnimationRenderer = class extends BaseAnimationRenderer {
  constructor(factory, namespaceId, delegate, engine, onDestroy) {
    super(namespaceId, delegate, engine, onDestroy);
    this.factory = factory;
    this.namespaceId = namespaceId;
  }
  setProperty(el, name, value) {
    if (name.charAt(0) == ANIMATION_PREFIX) {
      if (name.charAt(1) == "." && name == DISABLE_ANIMATIONS_FLAG) {
        value = value === void 0 ? true : !!value;
        this.disableAnimations(el, value);
      } else {
        this.engine.process(this.namespaceId, el, name.slice(1), value);
      }
    } else {
      this.delegate.setProperty(el, name, value);
    }
  }
  listen(target, eventName, callback) {
    if (eventName.charAt(0) == ANIMATION_PREFIX) {
      const element = resolveElementFromTarget(target);
      let name = eventName.slice(1);
      let phase = "";
      if (name.charAt(0) != ANIMATION_PREFIX) {
        [name, phase] = parseTriggerCallbackName(name);
      }
      return this.engine.listen(this.namespaceId, element, name, phase, (event) => {
        const countId = event["_data"] || -1;
        this.factory.scheduleListenerCallback(countId, callback, event);
      });
    }
    return this.delegate.listen(target, eventName, callback);
  }
};
function resolveElementFromTarget(target) {
  switch (target) {
    case "body":
      return document.body;
    case "document":
      return document;
    case "window":
      return window;
    default:
      return target;
  }
}
function parseTriggerCallbackName(triggerName) {
  const dotIndex = triggerName.indexOf(".");
  const trigger2 = triggerName.substring(0, dotIndex);
  const phase = triggerName.slice(dotIndex + 1);
  return [trigger2, phase];
}
var AnimationRendererFactory = class {
  constructor(delegate, engine, _zone) {
    this.delegate = delegate;
    this.engine = engine;
    this._zone = _zone;
    this._currentId = 0;
    this._microtaskId = 1;
    this._animationCallbacksBuffer = [];
    this._rendererCache = /* @__PURE__ */ new Map();
    this._cdRecurDepth = 0;
    engine.onRemovalComplete = (element, delegate2) => {
      const parentNode = delegate2?.parentNode(element);
      if (parentNode) {
        delegate2.removeChild(parentNode, element);
      }
    };
  }
  createRenderer(hostElement, type) {
    const EMPTY_NAMESPACE_ID = "";
    const delegate = this.delegate.createRenderer(hostElement, type);
    if (!hostElement || !type?.data?.["animation"]) {
      const cache = this._rendererCache;
      let renderer = cache.get(delegate);
      if (!renderer) {
        const onRendererDestroy = () => cache.delete(delegate);
        renderer = new BaseAnimationRenderer(EMPTY_NAMESPACE_ID, delegate, this.engine, onRendererDestroy);
        cache.set(delegate, renderer);
      }
      return renderer;
    }
    const componentId = type.id;
    const namespaceId = type.id + "-" + this._currentId;
    this._currentId++;
    this.engine.register(namespaceId, hostElement);
    const registerTrigger = (trigger2) => {
      if (Array.isArray(trigger2)) {
        trigger2.forEach(registerTrigger);
      } else {
        this.engine.registerTrigger(componentId, namespaceId, hostElement, trigger2.name, trigger2);
      }
    };
    const animationTriggers = type.data["animation"];
    animationTriggers.forEach(registerTrigger);
    return new AnimationRenderer(this, namespaceId, delegate, this.engine);
  }
  begin() {
    this._cdRecurDepth++;
    if (this.delegate.begin) {
      this.delegate.begin();
    }
  }
  _scheduleCountTask() {
    queueMicrotask(() => {
      this._microtaskId++;
    });
  }
  /** @internal */
  scheduleListenerCallback(count, fn, data) {
    if (count >= 0 && count < this._microtaskId) {
      this._zone.run(() => fn(data));
      return;
    }
    const animationCallbacksBuffer = this._animationCallbacksBuffer;
    if (animationCallbacksBuffer.length == 0) {
      queueMicrotask(() => {
        this._zone.run(() => {
          animationCallbacksBuffer.forEach((tuple) => {
            const [fn2, data2] = tuple;
            fn2(data2);
          });
          this._animationCallbacksBuffer = [];
        });
      });
    }
    animationCallbacksBuffer.push([fn, data]);
  }
  end() {
    this._cdRecurDepth--;
    if (this._cdRecurDepth == 0) {
      this._zone.runOutsideAngular(() => {
        this._scheduleCountTask();
        this.engine.flush(this._microtaskId);
      });
    }
    if (this.delegate.end) {
      this.delegate.end();
    }
  }
  whenRenderingDone() {
    return this.engine.whenRenderingDone();
  }
};

// node_modules/@angular/platform-browser/fesm2022/animations.mjs
var _InjectableAnimationEngine = class _InjectableAnimationEngine extends AnimationEngine {
  // The `ApplicationRef` is injected here explicitly to force the dependency ordering.
  // Since the `ApplicationRef` should be created earlier before the `AnimationEngine`, they
  // both have `ngOnDestroy` hooks and `flush()` must be called after all views are destroyed.
  constructor(doc, driver, normalizer, appRef) {
    super(doc, driver, normalizer);
  }
  ngOnDestroy() {
    this.flush();
  }
};
_InjectableAnimationEngine.\u0275fac = function InjectableAnimationEngine_Factory(t) {
  return new (t || _InjectableAnimationEngine)(\u0275\u0275inject(DOCUMENT2), \u0275\u0275inject(AnimationDriver), \u0275\u0275inject(AnimationStyleNormalizer), \u0275\u0275inject(ApplicationRef));
};
_InjectableAnimationEngine.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _InjectableAnimationEngine,
  factory: _InjectableAnimationEngine.\u0275fac
});
var InjectableAnimationEngine = _InjectableAnimationEngine;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(InjectableAnimationEngine, [{
    type: Injectable
  }], () => [{
    type: Document,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }, {
    type: AnimationDriver
  }, {
    type: AnimationStyleNormalizer
  }, {
    type: ApplicationRef
  }], null);
})();
function instantiateDefaultStyleNormalizer() {
  return new WebAnimationsStyleNormalizer();
}
function instantiateRendererFactory(renderer, engine, zone) {
  return new AnimationRendererFactory(renderer, engine, zone);
}
var SHARED_ANIMATION_PROVIDERS = [{
  provide: AnimationStyleNormalizer,
  useFactory: instantiateDefaultStyleNormalizer
}, {
  provide: AnimationEngine,
  useClass: InjectableAnimationEngine
}, {
  provide: RendererFactory2,
  useFactory: instantiateRendererFactory,
  deps: [DomRendererFactory2, AnimationEngine, NgZone]
}];
var BROWSER_ANIMATIONS_PROVIDERS = [{
  provide: AnimationDriver,
  useFactory: () => new WebAnimationsDriver()
}, {
  provide: ANIMATION_MODULE_TYPE,
  useValue: "BrowserAnimations"
}, ...SHARED_ANIMATION_PROVIDERS];
var BROWSER_NOOP_ANIMATIONS_PROVIDERS = [{
  provide: AnimationDriver,
  useClass: NoopAnimationDriver
}, {
  provide: ANIMATION_MODULE_TYPE,
  useValue: "NoopAnimations"
}, ...SHARED_ANIMATION_PROVIDERS];
var _BrowserAnimationsModule = class _BrowserAnimationsModule {
  /**
   * Configures the module based on the specified object.
   *
   * @param config Object used to configure the behavior of the `BrowserAnimationsModule`.
   * @see {@link BrowserAnimationsModuleConfig}
   *
   * @usageNotes
   * When registering the `BrowserAnimationsModule`, you can use the `withConfig`
   * function as follows:
   * ```
   * @NgModule({
   *   imports: [BrowserAnimationsModule.withConfig(config)]
   * })
   * class MyNgModule {}
   * ```
   */
  static withConfig(config2) {
    return {
      ngModule: _BrowserAnimationsModule,
      providers: config2.disableAnimations ? BROWSER_NOOP_ANIMATIONS_PROVIDERS : BROWSER_ANIMATIONS_PROVIDERS
    };
  }
};
_BrowserAnimationsModule.\u0275fac = function BrowserAnimationsModule_Factory(t) {
  return new (t || _BrowserAnimationsModule)();
};
_BrowserAnimationsModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _BrowserAnimationsModule
});
_BrowserAnimationsModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
  providers: BROWSER_ANIMATIONS_PROVIDERS,
  imports: [BrowserModule]
});
var BrowserAnimationsModule = _BrowserAnimationsModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(BrowserAnimationsModule, [{
    type: NgModule,
    args: [{
      exports: [BrowserModule],
      providers: BROWSER_ANIMATIONS_PROVIDERS
    }]
  }], null, null);
})();
var _NoopAnimationsModule = class _NoopAnimationsModule {
};
_NoopAnimationsModule.\u0275fac = function NoopAnimationsModule_Factory(t) {
  return new (t || _NoopAnimationsModule)();
};
_NoopAnimationsModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _NoopAnimationsModule
});
_NoopAnimationsModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
  providers: BROWSER_NOOP_ANIMATIONS_PROVIDERS,
  imports: [BrowserModule]
});
var NoopAnimationsModule = _NoopAnimationsModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NoopAnimationsModule, [{
    type: NgModule,
    args: [{
      exports: [BrowserModule],
      providers: BROWSER_NOOP_ANIMATIONS_PROVIDERS
    }]
  }], null, null);
})();

// node_modules/@angular/cdk/fesm2022/coercion.mjs
function coerceBooleanProperty(value) {
  return value != null && `${value}` !== "false";
}
function coerceNumberProperty(value, fallbackValue = 0) {
  return _isNumberValue(value) ? Number(value) : fallbackValue;
}
function _isNumberValue(value) {
  return !isNaN(parseFloat(value)) && !isNaN(Number(value));
}
function coerceArray(value) {
  return Array.isArray(value) ? value : [value];
}
function coerceCssPixelValue(value) {
  if (value == null) {
    return "";
  }
  return typeof value === "string" ? value : `${value}px`;
}
function coerceElement(elementOrRef) {
  return elementOrRef instanceof ElementRef ? elementOrRef.nativeElement : elementOrRef;
}

// node_modules/@angular/cdk/fesm2022/platform.mjs
var hasV8BreakIterator;
try {
  hasV8BreakIterator = typeof Intl !== "undefined" && Intl.v8BreakIterator;
} catch {
  hasV8BreakIterator = false;
}
var _Platform = class _Platform {
  constructor(_platformId) {
    this._platformId = _platformId;
    this.isBrowser = this._platformId ? isPlatformBrowser2(this._platformId) : typeof document === "object" && !!document;
    this.EDGE = this.isBrowser && /(edge)/i.test(navigator.userAgent);
    this.TRIDENT = this.isBrowser && /(msie|trident)/i.test(navigator.userAgent);
    this.BLINK = this.isBrowser && !!(window.chrome || hasV8BreakIterator) && typeof CSS !== "undefined" && !this.EDGE && !this.TRIDENT;
    this.WEBKIT = this.isBrowser && /AppleWebKit/i.test(navigator.userAgent) && !this.BLINK && !this.EDGE && !this.TRIDENT;
    this.IOS = this.isBrowser && /iPad|iPhone|iPod/.test(navigator.userAgent) && !("MSStream" in window);
    this.FIREFOX = this.isBrowser && /(firefox|minefield)/i.test(navigator.userAgent);
    this.ANDROID = this.isBrowser && /android/i.test(navigator.userAgent) && !this.TRIDENT;
    this.SAFARI = this.isBrowser && /safari/i.test(navigator.userAgent) && this.WEBKIT;
  }
};
_Platform.\u0275fac = function Platform_Factory(t) {
  return new (t || _Platform)(\u0275\u0275inject(PLATFORM_ID));
};
_Platform.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _Platform,
  factory: _Platform.\u0275fac,
  providedIn: "root"
});
var Platform = _Platform;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Platform, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: Object,
    decorators: [{
      type: Inject,
      args: [PLATFORM_ID]
    }]
  }], null);
})();
var _PlatformModule = class _PlatformModule {
};
_PlatformModule.\u0275fac = function PlatformModule_Factory(t) {
  return new (t || _PlatformModule)();
};
_PlatformModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _PlatformModule
});
_PlatformModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({});
var PlatformModule = _PlatformModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PlatformModule, [{
    type: NgModule,
    args: [{}]
  }], null, null);
})();
var supportsPassiveEvents;
function supportsPassiveEventListeners() {
  if (supportsPassiveEvents == null && typeof window !== "undefined") {
    try {
      window.addEventListener("test", null, Object.defineProperty({}, "passive", {
        get: () => supportsPassiveEvents = true
      }));
    } finally {
      supportsPassiveEvents = supportsPassiveEvents || false;
    }
  }
  return supportsPassiveEvents;
}
function normalizePassiveListenerOptions(options) {
  return supportsPassiveEventListeners() ? options : !!options.capture;
}
var rtlScrollAxisType;
var scrollBehaviorSupported;
function supportsScrollBehavior() {
  if (scrollBehaviorSupported == null) {
    if (typeof document !== "object" || !document || typeof Element !== "function" || !Element) {
      scrollBehaviorSupported = false;
      return scrollBehaviorSupported;
    }
    if ("scrollBehavior" in document.documentElement.style) {
      scrollBehaviorSupported = true;
    } else {
      const scrollToFunction = Element.prototype.scrollTo;
      if (scrollToFunction) {
        scrollBehaviorSupported = !/\{\s*\[native code\]\s*\}/.test(scrollToFunction.toString());
      } else {
        scrollBehaviorSupported = false;
      }
    }
  }
  return scrollBehaviorSupported;
}
function getRtlScrollAxisType() {
  if (typeof document !== "object" || !document) {
    return 0;
  }
  if (rtlScrollAxisType == null) {
    const scrollContainer = document.createElement("div");
    const containerStyle = scrollContainer.style;
    scrollContainer.dir = "rtl";
    containerStyle.width = "1px";
    containerStyle.overflow = "auto";
    containerStyle.visibility = "hidden";
    containerStyle.pointerEvents = "none";
    containerStyle.position = "absolute";
    const content = document.createElement("div");
    const contentStyle = content.style;
    contentStyle.width = "2px";
    contentStyle.height = "1px";
    scrollContainer.appendChild(content);
    document.body.appendChild(scrollContainer);
    rtlScrollAxisType = 0;
    if (scrollContainer.scrollLeft === 0) {
      scrollContainer.scrollLeft = 1;
      rtlScrollAxisType = scrollContainer.scrollLeft === 0 ? 1 : 2;
    }
    scrollContainer.remove();
  }
  return rtlScrollAxisType;
}
var shadowDomIsSupported;
function _supportsShadowDom() {
  if (shadowDomIsSupported == null) {
    const head = typeof document !== "undefined" ? document.head : null;
    shadowDomIsSupported = !!(head && (head.createShadowRoot || head.attachShadow));
  }
  return shadowDomIsSupported;
}
function _getShadowRoot(element) {
  if (_supportsShadowDom()) {
    const rootNode = element.getRootNode ? element.getRootNode() : null;
    if (typeof ShadowRoot !== "undefined" && ShadowRoot && rootNode instanceof ShadowRoot) {
      return rootNode;
    }
  }
  return null;
}
function _getFocusedElementPierceShadowDom() {
  let activeElement = typeof document !== "undefined" && document ? document.activeElement : null;
  while (activeElement && activeElement.shadowRoot) {
    const newActiveElement = activeElement.shadowRoot.activeElement;
    if (newActiveElement === activeElement) {
      break;
    } else {
      activeElement = newActiveElement;
    }
  }
  return activeElement;
}
function _getEventTarget(event) {
  return event.composedPath ? event.composedPath()[0] : event.target;
}
function _isTestEnvironment() {
  return (
    // @ts-ignore
    typeof __karma__ !== "undefined" && !!__karma__ || // @ts-ignore
    typeof jasmine !== "undefined" && !!jasmine || // @ts-ignore
    typeof jest !== "undefined" && !!jest || // @ts-ignore
    typeof Mocha !== "undefined" && !!Mocha
  );
}

// node_modules/@angular/cdk/fesm2022/bidi.mjs
var DIR_DOCUMENT = new InjectionToken("cdk-dir-doc", {
  providedIn: "root",
  factory: DIR_DOCUMENT_FACTORY
});
function DIR_DOCUMENT_FACTORY() {
  return inject(DOCUMENT2);
}
var RTL_LOCALE_PATTERN = /^(ar|ckb|dv|he|iw|fa|nqo|ps|sd|ug|ur|yi|.*[-_](Adlm|Arab|Hebr|Nkoo|Rohg|Thaa))(?!.*[-_](Latn|Cyrl)($|-|_))($|-|_)/i;
function _resolveDirectionality(rawValue) {
  const value = rawValue?.toLowerCase() || "";
  if (value === "auto" && typeof navigator !== "undefined" && navigator?.language) {
    return RTL_LOCALE_PATTERN.test(navigator.language) ? "rtl" : "ltr";
  }
  return value === "rtl" ? "rtl" : "ltr";
}
var _Directionality = class _Directionality {
  constructor(_document2) {
    this.value = "ltr";
    this.change = new EventEmitter();
    if (_document2) {
      const bodyDir = _document2.body ? _document2.body.dir : null;
      const htmlDir = _document2.documentElement ? _document2.documentElement.dir : null;
      this.value = _resolveDirectionality(bodyDir || htmlDir || "ltr");
    }
  }
  ngOnDestroy() {
    this.change.complete();
  }
};
_Directionality.\u0275fac = function Directionality_Factory(t) {
  return new (t || _Directionality)(\u0275\u0275inject(DIR_DOCUMENT, 8));
};
_Directionality.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _Directionality,
  factory: _Directionality.\u0275fac,
  providedIn: "root"
});
var Directionality = _Directionality;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Directionality, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [DIR_DOCUMENT]
    }]
  }], null);
})();
var _Dir = class _Dir {
  constructor() {
    this._dir = "ltr";
    this._isInitialized = false;
    this.change = new EventEmitter();
  }
  /** @docs-private */
  get dir() {
    return this._dir;
  }
  set dir(value) {
    const previousValue = this._dir;
    this._dir = _resolveDirectionality(value);
    this._rawDir = value;
    if (previousValue !== this._dir && this._isInitialized) {
      this.change.emit(this._dir);
    }
  }
  /** Current layout direction of the element. */
  get value() {
    return this.dir;
  }
  /** Initialize once default value has been set. */
  ngAfterContentInit() {
    this._isInitialized = true;
  }
  ngOnDestroy() {
    this.change.complete();
  }
};
_Dir.\u0275fac = function Dir_Factory(t) {
  return new (t || _Dir)();
};
_Dir.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _Dir,
  selectors: [["", "dir", ""]],
  hostVars: 1,
  hostBindings: function Dir_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275attribute("dir", ctx._rawDir);
    }
  },
  inputs: {
    dir: "dir"
  },
  outputs: {
    change: "dirChange"
  },
  exportAs: ["dir"],
  features: [\u0275\u0275ProvidersFeature([{
    provide: Directionality,
    useExisting: _Dir
  }])]
});
var Dir = _Dir;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Dir, [{
    type: Directive,
    args: [{
      selector: "[dir]",
      providers: [{
        provide: Directionality,
        useExisting: Dir
      }],
      host: {
        "[attr.dir]": "_rawDir"
      },
      exportAs: "dir"
    }]
  }], null, {
    change: [{
      type: Output,
      args: ["dirChange"]
    }],
    dir: [{
      type: Input
    }]
  });
})();
var _BidiModule = class _BidiModule {
};
_BidiModule.\u0275fac = function BidiModule_Factory(t) {
  return new (t || _BidiModule)();
};
_BidiModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _BidiModule
});
_BidiModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({});
var BidiModule = _BidiModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(BidiModule, [{
    type: NgModule,
    args: [{
      exports: [Dir],
      declarations: [Dir]
    }]
  }], null, null);
})();

// node_modules/@angular/cdk/fesm2022/collections.mjs
var DataSource = class {
};
function isDataSource(value) {
  return value && typeof value.connect === "function" && !(value instanceof ConnectableObservable);
}
var ArrayDataSource = class extends DataSource {
  constructor(_data) {
    super();
    this._data = _data;
  }
  connect() {
    return isObservable(this._data) ? this._data : of(this._data);
  }
  disconnect() {
  }
};
var _RecycleViewRepeaterStrategy = class {
  constructor() {
    this.viewCacheSize = 20;
    this._viewCache = [];
  }
  /** Apply changes to the DOM. */
  applyChanges(changes, viewContainerRef, itemContextFactory, itemValueResolver, itemViewChanged) {
    changes.forEachOperation((record, adjustedPreviousIndex, currentIndex) => {
      let view;
      let operation;
      if (record.previousIndex == null) {
        const viewArgsFactory = () => itemContextFactory(record, adjustedPreviousIndex, currentIndex);
        view = this._insertView(viewArgsFactory, currentIndex, viewContainerRef, itemValueResolver(record));
        operation = view ? 1 : 0;
      } else if (currentIndex == null) {
        this._detachAndCacheView(adjustedPreviousIndex, viewContainerRef);
        operation = 3;
      } else {
        view = this._moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, itemValueResolver(record));
        operation = 2;
      }
      if (itemViewChanged) {
        itemViewChanged({
          context: view?.context,
          operation,
          record
        });
      }
    });
  }
  detach() {
    for (const view of this._viewCache) {
      view.destroy();
    }
    this._viewCache = [];
  }
  /**
   * Inserts a view for a new item, either from the cache or by creating a new
   * one. Returns `undefined` if the item was inserted into a cached view.
   */
  _insertView(viewArgsFactory, currentIndex, viewContainerRef, value) {
    const cachedView = this._insertViewFromCache(currentIndex, viewContainerRef);
    if (cachedView) {
      cachedView.context.$implicit = value;
      return void 0;
    }
    const viewArgs = viewArgsFactory();
    return viewContainerRef.createEmbeddedView(viewArgs.templateRef, viewArgs.context, viewArgs.index);
  }
  /** Detaches the view at the given index and inserts into the view cache. */
  _detachAndCacheView(index, viewContainerRef) {
    const detachedView = viewContainerRef.detach(index);
    this._maybeCacheView(detachedView, viewContainerRef);
  }
  /** Moves view at the previous index to the current index. */
  _moveView(adjustedPreviousIndex, currentIndex, viewContainerRef, value) {
    const view = viewContainerRef.get(adjustedPreviousIndex);
    viewContainerRef.move(view, currentIndex);
    view.context.$implicit = value;
    return view;
  }
  /**
   * Cache the given detached view. If the cache is full, the view will be
   * destroyed.
   */
  _maybeCacheView(view, viewContainerRef) {
    if (this._viewCache.length < this.viewCacheSize) {
      this._viewCache.push(view);
    } else {
      const index = viewContainerRef.indexOf(view);
      if (index === -1) {
        view.destroy();
      } else {
        viewContainerRef.remove(index);
      }
    }
  }
  /** Inserts a recycled view from the cache at the given index. */
  _insertViewFromCache(index, viewContainerRef) {
    const cachedView = this._viewCache.pop();
    if (cachedView) {
      viewContainerRef.insert(cachedView, index);
    }
    return cachedView || null;
  }
};
var _UniqueSelectionDispatcher = class _UniqueSelectionDispatcher {
  constructor() {
    this._listeners = [];
  }
  /**
   * Notify other items that selection for the given name has been set.
   * @param id ID of the item.
   * @param name Name of the item.
   */
  notify(id, name) {
    for (let listener of this._listeners) {
      listener(id, name);
    }
  }
  /**
   * Listen for future changes to item selection.
   * @return Function used to deregister listener
   */
  listen(listener) {
    this._listeners.push(listener);
    return () => {
      this._listeners = this._listeners.filter((registered) => {
        return listener !== registered;
      });
    };
  }
  ngOnDestroy() {
    this._listeners = [];
  }
};
_UniqueSelectionDispatcher.\u0275fac = function UniqueSelectionDispatcher_Factory(t) {
  return new (t || _UniqueSelectionDispatcher)();
};
_UniqueSelectionDispatcher.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _UniqueSelectionDispatcher,
  factory: _UniqueSelectionDispatcher.\u0275fac,
  providedIn: "root"
});
var UniqueSelectionDispatcher = _UniqueSelectionDispatcher;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(UniqueSelectionDispatcher, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
var _VIEW_REPEATER_STRATEGY = new InjectionToken("_ViewRepeater");

// node_modules/@angular/cdk/fesm2022/scrolling.mjs
var _c0 = ["contentWrapper"];
var _c1 = ["*"];
var VIRTUAL_SCROLL_STRATEGY = new InjectionToken("VIRTUAL_SCROLL_STRATEGY");
var FixedSizeVirtualScrollStrategy = class {
  /**
   * @param itemSize The size of the items in the virtually scrolling list.
   * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more
   * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.
   */
  constructor(itemSize, minBufferPx, maxBufferPx) {
    this._scrolledIndexChange = new Subject();
    this.scrolledIndexChange = this._scrolledIndexChange.pipe(distinctUntilChanged());
    this._viewport = null;
    this._itemSize = itemSize;
    this._minBufferPx = minBufferPx;
    this._maxBufferPx = maxBufferPx;
  }
  /**
   * Attaches this scroll strategy to a viewport.
   * @param viewport The viewport to attach this strategy to.
   */
  attach(viewport) {
    this._viewport = viewport;
    this._updateTotalContentSize();
    this._updateRenderedRange();
  }
  /** Detaches this scroll strategy from the currently attached viewport. */
  detach() {
    this._scrolledIndexChange.complete();
    this._viewport = null;
  }
  /**
   * Update the item size and buffer size.
   * @param itemSize The size of the items in the virtually scrolling list.
   * @param minBufferPx The minimum amount of buffer (in pixels) before needing to render more
   * @param maxBufferPx The amount of buffer (in pixels) to render when rendering more.
   */
  updateItemAndBufferSize(itemSize, minBufferPx, maxBufferPx) {
    if (maxBufferPx < minBufferPx && (typeof ngDevMode === "undefined" || ngDevMode)) {
      throw Error("CDK virtual scroll: maxBufferPx must be greater than or equal to minBufferPx");
    }
    this._itemSize = itemSize;
    this._minBufferPx = minBufferPx;
    this._maxBufferPx = maxBufferPx;
    this._updateTotalContentSize();
    this._updateRenderedRange();
  }
  /** @docs-private Implemented as part of VirtualScrollStrategy. */
  onContentScrolled() {
    this._updateRenderedRange();
  }
  /** @docs-private Implemented as part of VirtualScrollStrategy. */
  onDataLengthChanged() {
    this._updateTotalContentSize();
    this._updateRenderedRange();
  }
  /** @docs-private Implemented as part of VirtualScrollStrategy. */
  onContentRendered() {
  }
  /** @docs-private Implemented as part of VirtualScrollStrategy. */
  onRenderedOffsetChanged() {
  }
  /**
   * Scroll to the offset for the given index.
   * @param index The index of the element to scroll to.
   * @param behavior The ScrollBehavior to use when scrolling.
   */
  scrollToIndex(index, behavior) {
    if (this._viewport) {
      this._viewport.scrollToOffset(index * this._itemSize, behavior);
    }
  }
  /** Update the viewport's total content size. */
  _updateTotalContentSize() {
    if (!this._viewport) {
      return;
    }
    this._viewport.setTotalContentSize(this._viewport.getDataLength() * this._itemSize);
  }
  /** Update the viewport's rendered range. */
  _updateRenderedRange() {
    if (!this._viewport) {
      return;
    }
    const renderedRange = this._viewport.getRenderedRange();
    const newRange = {
      start: renderedRange.start,
      end: renderedRange.end
    };
    const viewportSize = this._viewport.getViewportSize();
    const dataLength = this._viewport.getDataLength();
    let scrollOffset = this._viewport.measureScrollOffset();
    let firstVisibleIndex = this._itemSize > 0 ? scrollOffset / this._itemSize : 0;
    if (newRange.end > dataLength) {
      const maxVisibleItems = Math.ceil(viewportSize / this._itemSize);
      const newVisibleIndex = Math.max(0, Math.min(firstVisibleIndex, dataLength - maxVisibleItems));
      if (firstVisibleIndex != newVisibleIndex) {
        firstVisibleIndex = newVisibleIndex;
        scrollOffset = newVisibleIndex * this._itemSize;
        newRange.start = Math.floor(firstVisibleIndex);
      }
      newRange.end = Math.max(0, Math.min(dataLength, newRange.start + maxVisibleItems));
    }
    const startBuffer = scrollOffset - newRange.start * this._itemSize;
    if (startBuffer < this._minBufferPx && newRange.start != 0) {
      const expandStart = Math.ceil((this._maxBufferPx - startBuffer) / this._itemSize);
      newRange.start = Math.max(0, newRange.start - expandStart);
      newRange.end = Math.min(dataLength, Math.ceil(firstVisibleIndex + (viewportSize + this._minBufferPx) / this._itemSize));
    } else {
      const endBuffer = newRange.end * this._itemSize - (scrollOffset + viewportSize);
      if (endBuffer < this._minBufferPx && newRange.end != dataLength) {
        const expandEnd = Math.ceil((this._maxBufferPx - endBuffer) / this._itemSize);
        if (expandEnd > 0) {
          newRange.end = Math.min(dataLength, newRange.end + expandEnd);
          newRange.start = Math.max(0, Math.floor(firstVisibleIndex - this._minBufferPx / this._itemSize));
        }
      }
    }
    this._viewport.setRenderedRange(newRange);
    this._viewport.setRenderedContentOffset(this._itemSize * newRange.start);
    this._scrolledIndexChange.next(Math.floor(firstVisibleIndex));
  }
};
function _fixedSizeVirtualScrollStrategyFactory(fixedSizeDir) {
  return fixedSizeDir._scrollStrategy;
}
var _CdkFixedSizeVirtualScroll = class _CdkFixedSizeVirtualScroll {
  constructor() {
    this._itemSize = 20;
    this._minBufferPx = 100;
    this._maxBufferPx = 200;
    this._scrollStrategy = new FixedSizeVirtualScrollStrategy(this.itemSize, this.minBufferPx, this.maxBufferPx);
  }
  /** The size of the items in the list (in pixels). */
  get itemSize() {
    return this._itemSize;
  }
  set itemSize(value) {
    this._itemSize = coerceNumberProperty(value);
  }
  /**
   * The minimum amount of buffer rendered beyond the viewport (in pixels).
   * If the amount of buffer dips below this number, more items will be rendered. Defaults to 100px.
   */
  get minBufferPx() {
    return this._minBufferPx;
  }
  set minBufferPx(value) {
    this._minBufferPx = coerceNumberProperty(value);
  }
  /**
   * The number of pixels worth of buffer to render for when rendering new items. Defaults to 200px.
   */
  get maxBufferPx() {
    return this._maxBufferPx;
  }
  set maxBufferPx(value) {
    this._maxBufferPx = coerceNumberProperty(value);
  }
  ngOnChanges() {
    this._scrollStrategy.updateItemAndBufferSize(this.itemSize, this.minBufferPx, this.maxBufferPx);
  }
};
_CdkFixedSizeVirtualScroll.\u0275fac = function CdkFixedSizeVirtualScroll_Factory(t) {
  return new (t || _CdkFixedSizeVirtualScroll)();
};
_CdkFixedSizeVirtualScroll.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _CdkFixedSizeVirtualScroll,
  selectors: [["cdk-virtual-scroll-viewport", "itemSize", ""]],
  inputs: {
    itemSize: "itemSize",
    minBufferPx: "minBufferPx",
    maxBufferPx: "maxBufferPx"
  },
  standalone: true,
  features: [\u0275\u0275ProvidersFeature([{
    provide: VIRTUAL_SCROLL_STRATEGY,
    useFactory: _fixedSizeVirtualScrollStrategyFactory,
    deps: [forwardRef(() => _CdkFixedSizeVirtualScroll)]
  }]), \u0275\u0275NgOnChangesFeature]
});
var CdkFixedSizeVirtualScroll = _CdkFixedSizeVirtualScroll;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CdkFixedSizeVirtualScroll, [{
    type: Directive,
    args: [{
      selector: "cdk-virtual-scroll-viewport[itemSize]",
      standalone: true,
      providers: [{
        provide: VIRTUAL_SCROLL_STRATEGY,
        useFactory: _fixedSizeVirtualScrollStrategyFactory,
        deps: [forwardRef(() => CdkFixedSizeVirtualScroll)]
      }]
    }]
  }], null, {
    itemSize: [{
      type: Input
    }],
    minBufferPx: [{
      type: Input
    }],
    maxBufferPx: [{
      type: Input
    }]
  });
})();
var DEFAULT_SCROLL_TIME = 20;
var _ScrollDispatcher = class _ScrollDispatcher {
  constructor(_ngZone, _platform, document2) {
    this._ngZone = _ngZone;
    this._platform = _platform;
    this._scrolled = new Subject();
    this._globalSubscription = null;
    this._scrolledCount = 0;
    this.scrollContainers = /* @__PURE__ */ new Map();
    this._document = document2;
  }
  /**
   * Registers a scrollable instance with the service and listens for its scrolled events. When the
   * scrollable is scrolled, the service emits the event to its scrolled observable.
   * @param scrollable Scrollable instance to be registered.
   */
  register(scrollable) {
    if (!this.scrollContainers.has(scrollable)) {
      this.scrollContainers.set(scrollable, scrollable.elementScrolled().subscribe(() => this._scrolled.next(scrollable)));
    }
  }
  /**
   * De-registers a Scrollable reference and unsubscribes from its scroll event observable.
   * @param scrollable Scrollable instance to be deregistered.
   */
  deregister(scrollable) {
    const scrollableReference = this.scrollContainers.get(scrollable);
    if (scrollableReference) {
      scrollableReference.unsubscribe();
      this.scrollContainers.delete(scrollable);
    }
  }
  /**
   * Returns an observable that emits an event whenever any of the registered Scrollable
   * references (or window, document, or body) fire a scrolled event. Can provide a time in ms
   * to override the default "throttle" time.
   *
   * **Note:** in order to avoid hitting change detection for every scroll event,
   * all of the events emitted from this stream will be run outside the Angular zone.
   * If you need to update any data bindings as a result of a scroll event, you have
   * to run the callback using `NgZone.run`.
   */
  scrolled(auditTimeInMs = DEFAULT_SCROLL_TIME) {
    if (!this._platform.isBrowser) {
      return of();
    }
    return new Observable((observer) => {
      if (!this._globalSubscription) {
        this._addGlobalListener();
      }
      const subscription = auditTimeInMs > 0 ? this._scrolled.pipe(auditTime(auditTimeInMs)).subscribe(observer) : this._scrolled.subscribe(observer);
      this._scrolledCount++;
      return () => {
        subscription.unsubscribe();
        this._scrolledCount--;
        if (!this._scrolledCount) {
          this._removeGlobalListener();
        }
      };
    });
  }
  ngOnDestroy() {
    this._removeGlobalListener();
    this.scrollContainers.forEach((_, container) => this.deregister(container));
    this._scrolled.complete();
  }
  /**
   * Returns an observable that emits whenever any of the
   * scrollable ancestors of an element are scrolled.
   * @param elementOrElementRef Element whose ancestors to listen for.
   * @param auditTimeInMs Time to throttle the scroll events.
   */
  ancestorScrolled(elementOrElementRef, auditTimeInMs) {
    const ancestors = this.getAncestorScrollContainers(elementOrElementRef);
    return this.scrolled(auditTimeInMs).pipe(filter((target) => {
      return !target || ancestors.indexOf(target) > -1;
    }));
  }
  /** Returns all registered Scrollables that contain the provided element. */
  getAncestorScrollContainers(elementOrElementRef) {
    const scrollingContainers = [];
    this.scrollContainers.forEach((_subscription, scrollable) => {
      if (this._scrollableContainsElement(scrollable, elementOrElementRef)) {
        scrollingContainers.push(scrollable);
      }
    });
    return scrollingContainers;
  }
  /** Use defaultView of injected document if available or fallback to global window reference */
  _getWindow() {
    return this._document.defaultView || window;
  }
  /** Returns true if the element is contained within the provided Scrollable. */
  _scrollableContainsElement(scrollable, elementOrElementRef) {
    let element = coerceElement(elementOrElementRef);
    let scrollableElement = scrollable.getElementRef().nativeElement;
    do {
      if (element == scrollableElement) {
        return true;
      }
    } while (element = element.parentElement);
    return false;
  }
  /** Sets up the global scroll listeners. */
  _addGlobalListener() {
    this._globalSubscription = this._ngZone.runOutsideAngular(() => {
      const window2 = this._getWindow();
      return fromEvent(window2.document, "scroll").subscribe(() => this._scrolled.next());
    });
  }
  /** Cleans up the global scroll listener. */
  _removeGlobalListener() {
    if (this._globalSubscription) {
      this._globalSubscription.unsubscribe();
      this._globalSubscription = null;
    }
  }
};
_ScrollDispatcher.\u0275fac = function ScrollDispatcher_Factory(t) {
  return new (t || _ScrollDispatcher)(\u0275\u0275inject(NgZone), \u0275\u0275inject(Platform), \u0275\u0275inject(DOCUMENT2, 8));
};
_ScrollDispatcher.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _ScrollDispatcher,
  factory: _ScrollDispatcher.\u0275fac,
  providedIn: "root"
});
var ScrollDispatcher = _ScrollDispatcher;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ScrollDispatcher, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: NgZone
  }, {
    type: Platform
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [DOCUMENT2]
    }]
  }], null);
})();
var _CdkScrollable = class _CdkScrollable {
  constructor(elementRef, scrollDispatcher, ngZone, dir) {
    this.elementRef = elementRef;
    this.scrollDispatcher = scrollDispatcher;
    this.ngZone = ngZone;
    this.dir = dir;
    this._destroyed = new Subject();
    this._elementScrolled = new Observable((observer) => this.ngZone.runOutsideAngular(() => fromEvent(this.elementRef.nativeElement, "scroll").pipe(takeUntil(this._destroyed)).subscribe(observer)));
  }
  ngOnInit() {
    this.scrollDispatcher.register(this);
  }
  ngOnDestroy() {
    this.scrollDispatcher.deregister(this);
    this._destroyed.next();
    this._destroyed.complete();
  }
  /** Returns observable that emits when a scroll event is fired on the host element. */
  elementScrolled() {
    return this._elementScrolled;
  }
  /** Gets the ElementRef for the viewport. */
  getElementRef() {
    return this.elementRef;
  }
  /**
   * Scrolls to the specified offsets. This is a normalized version of the browser's native scrollTo
   * method, since browsers are not consistent about what scrollLeft means in RTL. For this method
   * left and right always refer to the left and right side of the scrolling container irrespective
   * of the layout direction. start and end refer to left and right in an LTR context and vice-versa
   * in an RTL context.
   * @param options specified the offsets to scroll to.
   */
  scrollTo(options) {
    const el = this.elementRef.nativeElement;
    const isRtl = this.dir && this.dir.value == "rtl";
    if (options.left == null) {
      options.left = isRtl ? options.end : options.start;
    }
    if (options.right == null) {
      options.right = isRtl ? options.start : options.end;
    }
    if (options.bottom != null) {
      options.top = el.scrollHeight - el.clientHeight - options.bottom;
    }
    if (isRtl && getRtlScrollAxisType() != 0) {
      if (options.left != null) {
        options.right = el.scrollWidth - el.clientWidth - options.left;
      }
      if (getRtlScrollAxisType() == 2) {
        options.left = options.right;
      } else if (getRtlScrollAxisType() == 1) {
        options.left = options.right ? -options.right : options.right;
      }
    } else {
      if (options.right != null) {
        options.left = el.scrollWidth - el.clientWidth - options.right;
      }
    }
    this._applyScrollToOptions(options);
  }
  _applyScrollToOptions(options) {
    const el = this.elementRef.nativeElement;
    if (supportsScrollBehavior()) {
      el.scrollTo(options);
    } else {
      if (options.top != null) {
        el.scrollTop = options.top;
      }
      if (options.left != null) {
        el.scrollLeft = options.left;
      }
    }
  }
  /**
   * Measures the scroll offset relative to the specified edge of the viewport. This method can be
   * used instead of directly checking scrollLeft or scrollTop, since browsers are not consistent
   * about what scrollLeft means in RTL. The values returned by this method are normalized such that
   * left and right always refer to the left and right side of the scrolling container irrespective
   * of the layout direction. start and end refer to left and right in an LTR context and vice-versa
   * in an RTL context.
   * @param from The edge to measure from.
   */
  measureScrollOffset(from2) {
    const LEFT = "left";
    const RIGHT = "right";
    const el = this.elementRef.nativeElement;
    if (from2 == "top") {
      return el.scrollTop;
    }
    if (from2 == "bottom") {
      return el.scrollHeight - el.clientHeight - el.scrollTop;
    }
    const isRtl = this.dir && this.dir.value == "rtl";
    if (from2 == "start") {
      from2 = isRtl ? RIGHT : LEFT;
    } else if (from2 == "end") {
      from2 = isRtl ? LEFT : RIGHT;
    }
    if (isRtl && getRtlScrollAxisType() == 2) {
      if (from2 == LEFT) {
        return el.scrollWidth - el.clientWidth - el.scrollLeft;
      } else {
        return el.scrollLeft;
      }
    } else if (isRtl && getRtlScrollAxisType() == 1) {
      if (from2 == LEFT) {
        return el.scrollLeft + el.scrollWidth - el.clientWidth;
      } else {
        return -el.scrollLeft;
      }
    } else {
      if (from2 == LEFT) {
        return el.scrollLeft;
      } else {
        return el.scrollWidth - el.clientWidth - el.scrollLeft;
      }
    }
  }
};
_CdkScrollable.\u0275fac = function CdkScrollable_Factory(t) {
  return new (t || _CdkScrollable)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(ScrollDispatcher), \u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(Directionality, 8));
};
_CdkScrollable.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _CdkScrollable,
  selectors: [["", "cdk-scrollable", ""], ["", "cdkScrollable", ""]],
  standalone: true
});
var CdkScrollable = _CdkScrollable;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CdkScrollable, [{
    type: Directive,
    args: [{
      selector: "[cdk-scrollable], [cdkScrollable]",
      standalone: true
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: ScrollDispatcher
  }, {
    type: NgZone
  }, {
    type: Directionality,
    decorators: [{
      type: Optional
    }]
  }], null);
})();
var DEFAULT_RESIZE_TIME = 20;
var _ViewportRuler = class _ViewportRuler {
  constructor(_platform, ngZone, document2) {
    this._platform = _platform;
    this._change = new Subject();
    this._changeListener = (event) => {
      this._change.next(event);
    };
    this._document = document2;
    ngZone.runOutsideAngular(() => {
      if (_platform.isBrowser) {
        const window2 = this._getWindow();
        window2.addEventListener("resize", this._changeListener);
        window2.addEventListener("orientationchange", this._changeListener);
      }
      this.change().subscribe(() => this._viewportSize = null);
    });
  }
  ngOnDestroy() {
    if (this._platform.isBrowser) {
      const window2 = this._getWindow();
      window2.removeEventListener("resize", this._changeListener);
      window2.removeEventListener("orientationchange", this._changeListener);
    }
    this._change.complete();
  }
  /** Returns the viewport's width and height. */
  getViewportSize() {
    if (!this._viewportSize) {
      this._updateViewportSize();
    }
    const output = {
      width: this._viewportSize.width,
      height: this._viewportSize.height
    };
    if (!this._platform.isBrowser) {
      this._viewportSize = null;
    }
    return output;
  }
  /** Gets a ClientRect for the viewport's bounds. */
  getViewportRect() {
    const scrollPosition = this.getViewportScrollPosition();
    const {
      width,
      height
    } = this.getViewportSize();
    return {
      top: scrollPosition.top,
      left: scrollPosition.left,
      bottom: scrollPosition.top + height,
      right: scrollPosition.left + width,
      height,
      width
    };
  }
  /** Gets the (top, left) scroll position of the viewport. */
  getViewportScrollPosition() {
    if (!this._platform.isBrowser) {
      return {
        top: 0,
        left: 0
      };
    }
    const document2 = this._document;
    const window2 = this._getWindow();
    const documentElement2 = document2.documentElement;
    const documentRect = documentElement2.getBoundingClientRect();
    const top = -documentRect.top || document2.body.scrollTop || window2.scrollY || documentElement2.scrollTop || 0;
    const left = -documentRect.left || document2.body.scrollLeft || window2.scrollX || documentElement2.scrollLeft || 0;
    return {
      top,
      left
    };
  }
  /**
   * Returns a stream that emits whenever the size of the viewport changes.
   * This stream emits outside of the Angular zone.
   * @param throttleTime Time in milliseconds to throttle the stream.
   */
  change(throttleTime = DEFAULT_RESIZE_TIME) {
    return throttleTime > 0 ? this._change.pipe(auditTime(throttleTime)) : this._change;
  }
  /** Use defaultView of injected document if available or fallback to global window reference */
  _getWindow() {
    return this._document.defaultView || window;
  }
  /** Updates the cached viewport size. */
  _updateViewportSize() {
    const window2 = this._getWindow();
    this._viewportSize = this._platform.isBrowser ? {
      width: window2.innerWidth,
      height: window2.innerHeight
    } : {
      width: 0,
      height: 0
    };
  }
};
_ViewportRuler.\u0275fac = function ViewportRuler_Factory(t) {
  return new (t || _ViewportRuler)(\u0275\u0275inject(Platform), \u0275\u0275inject(NgZone), \u0275\u0275inject(DOCUMENT2, 8));
};
_ViewportRuler.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _ViewportRuler,
  factory: _ViewportRuler.\u0275fac,
  providedIn: "root"
});
var ViewportRuler = _ViewportRuler;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ViewportRuler, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: Platform
  }, {
    type: NgZone
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [DOCUMENT2]
    }]
  }], null);
})();
var VIRTUAL_SCROLLABLE = new InjectionToken("VIRTUAL_SCROLLABLE");
var _CdkVirtualScrollable = class _CdkVirtualScrollable extends CdkScrollable {
  constructor(elementRef, scrollDispatcher, ngZone, dir) {
    super(elementRef, scrollDispatcher, ngZone, dir);
  }
  /**
   * Measure the viewport size for the provided orientation.
   *
   * @param orientation The orientation to measure the size from.
   */
  measureViewportSize(orientation) {
    const viewportEl = this.elementRef.nativeElement;
    return orientation === "horizontal" ? viewportEl.clientWidth : viewportEl.clientHeight;
  }
};
_CdkVirtualScrollable.\u0275fac = function CdkVirtualScrollable_Factory(t) {
  return new (t || _CdkVirtualScrollable)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(ScrollDispatcher), \u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(Directionality, 8));
};
_CdkVirtualScrollable.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _CdkVirtualScrollable,
  features: [\u0275\u0275InheritDefinitionFeature]
});
var CdkVirtualScrollable = _CdkVirtualScrollable;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CdkVirtualScrollable, [{
    type: Directive
  }], () => [{
    type: ElementRef
  }, {
    type: ScrollDispatcher
  }, {
    type: NgZone
  }, {
    type: Directionality,
    decorators: [{
      type: Optional
    }]
  }], null);
})();
function rangesEqual(r1, r2) {
  return r1.start == r2.start && r1.end == r2.end;
}
var SCROLL_SCHEDULER = typeof requestAnimationFrame !== "undefined" ? animationFrameScheduler : asapScheduler;
var _CdkVirtualScrollViewport = class _CdkVirtualScrollViewport extends CdkVirtualScrollable {
  /** The direction the viewport scrolls. */
  get orientation() {
    return this._orientation;
  }
  set orientation(orientation) {
    if (this._orientation !== orientation) {
      this._orientation = orientation;
      this._calculateSpacerSize();
    }
  }
  constructor(elementRef, _changeDetectorRef, ngZone, _scrollStrategy, dir, scrollDispatcher, viewportRuler, scrollable) {
    super(elementRef, scrollDispatcher, ngZone, dir);
    this.elementRef = elementRef;
    this._changeDetectorRef = _changeDetectorRef;
    this._scrollStrategy = _scrollStrategy;
    this.scrollable = scrollable;
    this._platform = inject(Platform);
    this._detachedSubject = new Subject();
    this._renderedRangeSubject = new Subject();
    this._orientation = "vertical";
    this.appendOnly = false;
    this.scrolledIndexChange = new Observable((observer) => this._scrollStrategy.scrolledIndexChange.subscribe((index) => Promise.resolve().then(() => this.ngZone.run(() => observer.next(index)))));
    this.renderedRangeStream = this._renderedRangeSubject;
    this._totalContentSize = 0;
    this._totalContentWidth = "";
    this._totalContentHeight = "";
    this._renderedRange = {
      start: 0,
      end: 0
    };
    this._dataLength = 0;
    this._viewportSize = 0;
    this._renderedContentOffset = 0;
    this._renderedContentOffsetNeedsRewrite = false;
    this._isChangeDetectionPending = false;
    this._runAfterChangeDetection = [];
    this._viewportChanges = Subscription.EMPTY;
    if (!_scrollStrategy && (typeof ngDevMode === "undefined" || ngDevMode)) {
      throw Error('Error: cdk-virtual-scroll-viewport requires the "itemSize" property to be set.');
    }
    this._viewportChanges = viewportRuler.change().subscribe(() => {
      this.checkViewportSize();
    });
    if (!this.scrollable) {
      this.elementRef.nativeElement.classList.add("cdk-virtual-scrollable");
      this.scrollable = this;
    }
  }
  ngOnInit() {
    if (!this._platform.isBrowser) {
      return;
    }
    if (this.scrollable === this) {
      super.ngOnInit();
    }
    this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {
      this._measureViewportSize();
      this._scrollStrategy.attach(this);
      this.scrollable.elementScrolled().pipe(
        // Start off with a fake scroll event so we properly detect our initial position.
        startWith(null),
        // Collect multiple events into one until the next animation frame. This way if
        // there are multiple scroll events in the same frame we only need to recheck
        // our layout once.
        auditTime(0, SCROLL_SCHEDULER),
        // Usually `elementScrolled` is completed when the scrollable is destroyed, but
        // that may not be the case if a `CdkVirtualScrollableElement` is used so we have
        // to unsubscribe here just in case.
        takeUntil(this._destroyed)
      ).subscribe(() => this._scrollStrategy.onContentScrolled());
      this._markChangeDetectionNeeded();
    }));
  }
  ngOnDestroy() {
    this.detach();
    this._scrollStrategy.detach();
    this._renderedRangeSubject.complete();
    this._detachedSubject.complete();
    this._viewportChanges.unsubscribe();
    super.ngOnDestroy();
  }
  /** Attaches a `CdkVirtualScrollRepeater` to this viewport. */
  attach(forOf) {
    if (this._forOf && (typeof ngDevMode === "undefined" || ngDevMode)) {
      throw Error("CdkVirtualScrollViewport is already attached.");
    }
    this.ngZone.runOutsideAngular(() => {
      this._forOf = forOf;
      this._forOf.dataStream.pipe(takeUntil(this._detachedSubject)).subscribe((data) => {
        const newLength = data.length;
        if (newLength !== this._dataLength) {
          this._dataLength = newLength;
          this._scrollStrategy.onDataLengthChanged();
        }
        this._doChangeDetection();
      });
    });
  }
  /** Detaches the current `CdkVirtualForOf`. */
  detach() {
    this._forOf = null;
    this._detachedSubject.next();
  }
  /** Gets the length of the data bound to this viewport (in number of items). */
  getDataLength() {
    return this._dataLength;
  }
  /** Gets the size of the viewport (in pixels). */
  getViewportSize() {
    return this._viewportSize;
  }
  // TODO(mmalerba): This is technically out of sync with what's really rendered until a render
  // cycle happens. I'm being careful to only call it after the render cycle is complete and before
  // setting it to something else, but its error prone and should probably be split into
  // `pendingRange` and `renderedRange`, the latter reflecting whats actually in the DOM.
  /** Get the current rendered range of items. */
  getRenderedRange() {
    return this._renderedRange;
  }
  measureBoundingClientRectWithScrollOffset(from2) {
    return this.getElementRef().nativeElement.getBoundingClientRect()[from2];
  }
  /**
   * Sets the total size of all content (in pixels), including content that is not currently
   * rendered.
   */
  setTotalContentSize(size) {
    if (this._totalContentSize !== size) {
      this._totalContentSize = size;
      this._calculateSpacerSize();
      this._markChangeDetectionNeeded();
    }
  }
  /** Sets the currently rendered range of indices. */
  setRenderedRange(range2) {
    if (!rangesEqual(this._renderedRange, range2)) {
      if (this.appendOnly) {
        range2 = {
          start: 0,
          end: Math.max(this._renderedRange.end, range2.end)
        };
      }
      this._renderedRangeSubject.next(this._renderedRange = range2);
      this._markChangeDetectionNeeded(() => this._scrollStrategy.onContentRendered());
    }
  }
  /**
   * Gets the offset from the start of the viewport to the start of the rendered data (in pixels).
   */
  getOffsetToRenderedContentStart() {
    return this._renderedContentOffsetNeedsRewrite ? null : this._renderedContentOffset;
  }
  /**
   * Sets the offset from the start of the viewport to either the start or end of the rendered data
   * (in pixels).
   */
  setRenderedContentOffset(offset, to = "to-start") {
    offset = this.appendOnly && to === "to-start" ? 0 : offset;
    const isRtl = this.dir && this.dir.value == "rtl";
    const isHorizontal = this.orientation == "horizontal";
    const axis = isHorizontal ? "X" : "Y";
    const axisDirection = isHorizontal && isRtl ? -1 : 1;
    let transform = `translate${axis}(${Number(axisDirection * offset)}px)`;
    this._renderedContentOffset = offset;
    if (to === "to-end") {
      transform += ` translate${axis}(-100%)`;
      this._renderedContentOffsetNeedsRewrite = true;
    }
    if (this._renderedContentTransform != transform) {
      this._renderedContentTransform = transform;
      this._markChangeDetectionNeeded(() => {
        if (this._renderedContentOffsetNeedsRewrite) {
          this._renderedContentOffset -= this.measureRenderedContentSize();
          this._renderedContentOffsetNeedsRewrite = false;
          this.setRenderedContentOffset(this._renderedContentOffset);
        } else {
          this._scrollStrategy.onRenderedOffsetChanged();
        }
      });
    }
  }
  /**
   * Scrolls to the given offset from the start of the viewport. Please note that this is not always
   * the same as setting `scrollTop` or `scrollLeft`. In a horizontal viewport with right-to-left
   * direction, this would be the equivalent of setting a fictional `scrollRight` property.
   * @param offset The offset to scroll to.
   * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.
   */
  scrollToOffset(offset, behavior = "auto") {
    const options = {
      behavior
    };
    if (this.orientation === "horizontal") {
      options.start = offset;
    } else {
      options.top = offset;
    }
    this.scrollable.scrollTo(options);
  }
  /**
   * Scrolls to the offset for the given index.
   * @param index The index of the element to scroll to.
   * @param behavior The ScrollBehavior to use when scrolling. Default is behavior is `auto`.
   */
  scrollToIndex(index, behavior = "auto") {
    this._scrollStrategy.scrollToIndex(index, behavior);
  }
  /**
   * Gets the current scroll offset from the start of the scrollable (in pixels).
   * @param from The edge to measure the offset from. Defaults to 'top' in vertical mode and 'start'
   *     in horizontal mode.
   */
  measureScrollOffset(from2) {
    let measureScrollOffset;
    if (this.scrollable == this) {
      measureScrollOffset = (_from) => super.measureScrollOffset(_from);
    } else {
      measureScrollOffset = (_from) => this.scrollable.measureScrollOffset(_from);
    }
    return Math.max(0, measureScrollOffset(from2 ?? (this.orientation === "horizontal" ? "start" : "top")) - this.measureViewportOffset());
  }
  /**
   * Measures the offset of the viewport from the scrolling container
   * @param from The edge to measure from.
   */
  measureViewportOffset(from2) {
    let fromRect;
    const LEFT = "left";
    const RIGHT = "right";
    const isRtl = this.dir?.value == "rtl";
    if (from2 == "start") {
      fromRect = isRtl ? RIGHT : LEFT;
    } else if (from2 == "end") {
      fromRect = isRtl ? LEFT : RIGHT;
    } else if (from2) {
      fromRect = from2;
    } else {
      fromRect = this.orientation === "horizontal" ? "left" : "top";
    }
    const scrollerClientRect = this.scrollable.measureBoundingClientRectWithScrollOffset(fromRect);
    const viewportClientRect = this.elementRef.nativeElement.getBoundingClientRect()[fromRect];
    return viewportClientRect - scrollerClientRect;
  }
  /** Measure the combined size of all of the rendered items. */
  measureRenderedContentSize() {
    const contentEl = this._contentWrapper.nativeElement;
    return this.orientation === "horizontal" ? contentEl.offsetWidth : contentEl.offsetHeight;
  }
  /**
   * Measure the total combined size of the given range. Throws if the range includes items that are
   * not rendered.
   */
  measureRangeSize(range2) {
    if (!this._forOf) {
      return 0;
    }
    return this._forOf.measureRangeSize(range2, this.orientation);
  }
  /** Update the viewport dimensions and re-render. */
  checkViewportSize() {
    this._measureViewportSize();
    this._scrollStrategy.onDataLengthChanged();
  }
  /** Measure the viewport size. */
  _measureViewportSize() {
    this._viewportSize = this.scrollable.measureViewportSize(this.orientation);
  }
  /** Queue up change detection to run. */
  _markChangeDetectionNeeded(runAfter) {
    if (runAfter) {
      this._runAfterChangeDetection.push(runAfter);
    }
    if (!this._isChangeDetectionPending) {
      this._isChangeDetectionPending = true;
      this.ngZone.runOutsideAngular(() => Promise.resolve().then(() => {
        this._doChangeDetection();
      }));
    }
  }
  /** Run change detection. */
  _doChangeDetection() {
    this._isChangeDetectionPending = false;
    this._contentWrapper.nativeElement.style.transform = this._renderedContentTransform;
    this.ngZone.run(() => this._changeDetectorRef.markForCheck());
    const runAfterChangeDetection = this._runAfterChangeDetection;
    this._runAfterChangeDetection = [];
    for (const fn of runAfterChangeDetection) {
      fn();
    }
  }
  /** Calculates the `style.width` and `style.height` for the spacer element. */
  _calculateSpacerSize() {
    this._totalContentHeight = this.orientation === "horizontal" ? "" : `${this._totalContentSize}px`;
    this._totalContentWidth = this.orientation === "horizontal" ? `${this._totalContentSize}px` : "";
  }
};
_CdkVirtualScrollViewport.\u0275fac = function CdkVirtualScrollViewport_Factory(t) {
  return new (t || _CdkVirtualScrollViewport)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(VIRTUAL_SCROLL_STRATEGY, 8), \u0275\u0275directiveInject(Directionality, 8), \u0275\u0275directiveInject(ScrollDispatcher), \u0275\u0275directiveInject(ViewportRuler), \u0275\u0275directiveInject(VIRTUAL_SCROLLABLE, 8));
};
_CdkVirtualScrollViewport.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _CdkVirtualScrollViewport,
  selectors: [["cdk-virtual-scroll-viewport"]],
  viewQuery: function CdkVirtualScrollViewport_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c0, 7);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx._contentWrapper = _t.first);
    }
  },
  hostAttrs: [1, "cdk-virtual-scroll-viewport"],
  hostVars: 4,
  hostBindings: function CdkVirtualScrollViewport_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275classProp("cdk-virtual-scroll-orientation-horizontal", ctx.orientation === "horizontal")("cdk-virtual-scroll-orientation-vertical", ctx.orientation !== "horizontal");
    }
  },
  inputs: {
    orientation: "orientation",
    appendOnly: ["appendOnly", "appendOnly", booleanAttribute]
  },
  outputs: {
    scrolledIndexChange: "scrolledIndexChange"
  },
  standalone: true,
  features: [\u0275\u0275ProvidersFeature([{
    provide: CdkScrollable,
    useFactory: (virtualScrollable, viewport) => virtualScrollable || viewport,
    deps: [[new Optional(), new Inject(VIRTUAL_SCROLLABLE)], _CdkVirtualScrollViewport]
  }]), \u0275\u0275InputTransformsFeature, \u0275\u0275InheritDefinitionFeature, \u0275\u0275StandaloneFeature],
  ngContentSelectors: _c1,
  decls: 4,
  vars: 4,
  consts: [[1, "cdk-virtual-scroll-content-wrapper"], ["contentWrapper", ""], [1, "cdk-virtual-scroll-spacer"]],
  template: function CdkVirtualScrollViewport_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275projectionDef();
      \u0275\u0275elementStart(0, "div", 0, 1);
      \u0275\u0275projection(2);
      \u0275\u0275elementEnd();
      \u0275\u0275element(3, "div", 2);
    }
    if (rf & 2) {
      \u0275\u0275advance(3);
      \u0275\u0275styleProp("width", ctx._totalContentWidth)("height", ctx._totalContentHeight);
    }
  },
  styles: ["cdk-virtual-scroll-viewport{display:block;position:relative;transform:translateZ(0)}.cdk-virtual-scrollable{overflow:auto;will-change:scroll-position;contain:strict;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{height:1px;transform-origin:0 0;flex:0 0 auto}[dir=rtl] .cdk-virtual-scroll-spacer{transform-origin:100% 0}"],
  encapsulation: 2,
  changeDetection: 0
});
var CdkVirtualScrollViewport = _CdkVirtualScrollViewport;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CdkVirtualScrollViewport, [{
    type: Component,
    args: [{
      selector: "cdk-virtual-scroll-viewport",
      host: {
        "class": "cdk-virtual-scroll-viewport",
        "[class.cdk-virtual-scroll-orientation-horizontal]": 'orientation === "horizontal"',
        "[class.cdk-virtual-scroll-orientation-vertical]": 'orientation !== "horizontal"'
      },
      encapsulation: ViewEncapsulation$1.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      standalone: true,
      providers: [{
        provide: CdkScrollable,
        useFactory: (virtualScrollable, viewport) => virtualScrollable || viewport,
        deps: [[new Optional(), new Inject(VIRTUAL_SCROLLABLE)], CdkVirtualScrollViewport]
      }],
      template: '<!--\n  Wrap the rendered content in an element that will be used to offset it based on the scroll\n  position.\n-->\n<div #contentWrapper class="cdk-virtual-scroll-content-wrapper">\n  <ng-content></ng-content>\n</div>\n<!--\n  Spacer used to force the scrolling container to the correct size for the *total* number of items\n  so that the scrollbar captures the size of the entire data set.\n-->\n<div class="cdk-virtual-scroll-spacer"\n     [style.width]="_totalContentWidth" [style.height]="_totalContentHeight"></div>\n',
      styles: ["cdk-virtual-scroll-viewport{display:block;position:relative;transform:translateZ(0)}.cdk-virtual-scrollable{overflow:auto;will-change:scroll-position;contain:strict;-webkit-overflow-scrolling:touch}.cdk-virtual-scroll-content-wrapper{position:absolute;top:0;left:0;contain:content}[dir=rtl] .cdk-virtual-scroll-content-wrapper{right:0;left:auto}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper{min-height:100%}.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-horizontal .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-left:0;padding-right:0;margin-left:0;margin-right:0;border-left-width:0;border-right-width:0;outline:none}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{min-width:100%}.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>dl:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ol:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>table:not([cdkVirtualFor]),.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper>ul:not([cdkVirtualFor]){padding-top:0;padding-bottom:0;margin-top:0;margin-bottom:0;border-top-width:0;border-bottom-width:0;outline:none}.cdk-virtual-scroll-spacer{height:1px;transform-origin:0 0;flex:0 0 auto}[dir=rtl] .cdk-virtual-scroll-spacer{transform-origin:100% 0}"]
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: ChangeDetectorRef
  }, {
    type: NgZone
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [VIRTUAL_SCROLL_STRATEGY]
    }]
  }, {
    type: Directionality,
    decorators: [{
      type: Optional
    }]
  }, {
    type: ScrollDispatcher
  }, {
    type: ViewportRuler
  }, {
    type: CdkVirtualScrollable,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [VIRTUAL_SCROLLABLE]
    }]
  }], {
    orientation: [{
      type: Input
    }],
    appendOnly: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    scrolledIndexChange: [{
      type: Output
    }],
    _contentWrapper: [{
      type: ViewChild,
      args: ["contentWrapper", {
        static: true
      }]
    }]
  });
})();
function getOffset(orientation, direction, node) {
  const el = node;
  if (!el.getBoundingClientRect) {
    return 0;
  }
  const rect = el.getBoundingClientRect();
  if (orientation === "horizontal") {
    return direction === "start" ? rect.left : rect.right;
  }
  return direction === "start" ? rect.top : rect.bottom;
}
var _CdkVirtualForOf = class _CdkVirtualForOf {
  /** The DataSource to display. */
  get cdkVirtualForOf() {
    return this._cdkVirtualForOf;
  }
  set cdkVirtualForOf(value) {
    this._cdkVirtualForOf = value;
    if (isDataSource(value)) {
      this._dataSourceChanges.next(value);
    } else {
      this._dataSourceChanges.next(new ArrayDataSource(isObservable(value) ? value : Array.from(value || [])));
    }
  }
  /**
   * The `TrackByFunction` to use for tracking changes. The `TrackByFunction` takes the index and
   * the item and produces a value to be used as the item's identity when tracking changes.
   */
  get cdkVirtualForTrackBy() {
    return this._cdkVirtualForTrackBy;
  }
  set cdkVirtualForTrackBy(fn) {
    this._needsUpdate = true;
    this._cdkVirtualForTrackBy = fn ? (index, item) => fn(index + (this._renderedRange ? this._renderedRange.start : 0), item) : void 0;
  }
  /** The template used to stamp out new elements. */
  set cdkVirtualForTemplate(value) {
    if (value) {
      this._needsUpdate = true;
      this._template = value;
    }
  }
  /**
   * The size of the cache used to store templates that are not being used for re-use later.
   * Setting the cache size to `0` will disable caching. Defaults to 20 templates.
   */
  get cdkVirtualForTemplateCacheSize() {
    return this._viewRepeater.viewCacheSize;
  }
  set cdkVirtualForTemplateCacheSize(size) {
    this._viewRepeater.viewCacheSize = coerceNumberProperty(size);
  }
  constructor(_viewContainerRef, _template, _differs, _viewRepeater, _viewport, ngZone) {
    this._viewContainerRef = _viewContainerRef;
    this._template = _template;
    this._differs = _differs;
    this._viewRepeater = _viewRepeater;
    this._viewport = _viewport;
    this.viewChange = new Subject();
    this._dataSourceChanges = new Subject();
    this.dataStream = this._dataSourceChanges.pipe(
      // Start off with null `DataSource`.
      startWith(null),
      // Bundle up the previous and current data sources so we can work with both.
      pairwise(),
      // Use `_changeDataSource` to disconnect from the previous data source and connect to the
      // new one, passing back a stream of data changes which we run through `switchMap` to give
      // us a data stream that emits the latest data from whatever the current `DataSource` is.
      switchMap(([prev, cur]) => this._changeDataSource(prev, cur)),
      // Replay the last emitted data when someone subscribes.
      shareReplay(1)
    );
    this._differ = null;
    this._needsUpdate = false;
    this._destroyed = new Subject();
    this.dataStream.subscribe((data) => {
      this._data = data;
      this._onRenderedDataChange();
    });
    this._viewport.renderedRangeStream.pipe(takeUntil(this._destroyed)).subscribe((range2) => {
      this._renderedRange = range2;
      if (this.viewChange.observers.length) {
        ngZone.run(() => this.viewChange.next(this._renderedRange));
      }
      this._onRenderedDataChange();
    });
    this._viewport.attach(this);
  }
  /**
   * Measures the combined size (width for horizontal orientation, height for vertical) of all items
   * in the specified range. Throws an error if the range includes items that are not currently
   * rendered.
   */
  measureRangeSize(range2, orientation) {
    if (range2.start >= range2.end) {
      return 0;
    }
    if ((range2.start < this._renderedRange.start || range2.end > this._renderedRange.end) && (typeof ngDevMode === "undefined" || ngDevMode)) {
      throw Error(`Error: attempted to measure an item that isn't rendered.`);
    }
    const renderedStartIndex = range2.start - this._renderedRange.start;
    const rangeLen = range2.end - range2.start;
    let firstNode;
    let lastNode;
    for (let i = 0; i < rangeLen; i++) {
      const view = this._viewContainerRef.get(i + renderedStartIndex);
      if (view && view.rootNodes.length) {
        firstNode = lastNode = view.rootNodes[0];
        break;
      }
    }
    for (let i = rangeLen - 1; i > -1; i--) {
      const view = this._viewContainerRef.get(i + renderedStartIndex);
      if (view && view.rootNodes.length) {
        lastNode = view.rootNodes[view.rootNodes.length - 1];
        break;
      }
    }
    return firstNode && lastNode ? getOffset(orientation, "end", lastNode) - getOffset(orientation, "start", firstNode) : 0;
  }
  ngDoCheck() {
    if (this._differ && this._needsUpdate) {
      const changes = this._differ.diff(this._renderedItems);
      if (!changes) {
        this._updateContext();
      } else {
        this._applyChanges(changes);
      }
      this._needsUpdate = false;
    }
  }
  ngOnDestroy() {
    this._viewport.detach();
    this._dataSourceChanges.next(void 0);
    this._dataSourceChanges.complete();
    this.viewChange.complete();
    this._destroyed.next();
    this._destroyed.complete();
    this._viewRepeater.detach();
  }
  /** React to scroll state changes in the viewport. */
  _onRenderedDataChange() {
    if (!this._renderedRange) {
      return;
    }
    this._renderedItems = this._data.slice(this._renderedRange.start, this._renderedRange.end);
    if (!this._differ) {
      this._differ = this._differs.find(this._renderedItems).create((index, item) => {
        return this.cdkVirtualForTrackBy ? this.cdkVirtualForTrackBy(index, item) : item;
      });
    }
    this._needsUpdate = true;
  }
  /** Swap out one `DataSource` for another. */
  _changeDataSource(oldDs, newDs) {
    if (oldDs) {
      oldDs.disconnect(this);
    }
    this._needsUpdate = true;
    return newDs ? newDs.connect(this) : of();
  }
  /** Update the `CdkVirtualForOfContext` for all views. */
  _updateContext() {
    const count = this._data.length;
    let i = this._viewContainerRef.length;
    while (i--) {
      const view = this._viewContainerRef.get(i);
      view.context.index = this._renderedRange.start + i;
      view.context.count = count;
      this._updateComputedContextProperties(view.context);
      view.detectChanges();
    }
  }
  /** Apply changes to the DOM. */
  _applyChanges(changes) {
    this._viewRepeater.applyChanges(changes, this._viewContainerRef, (record, _adjustedPreviousIndex, currentIndex) => this._getEmbeddedViewArgs(record, currentIndex), (record) => record.item);
    changes.forEachIdentityChange((record) => {
      const view = this._viewContainerRef.get(record.currentIndex);
      view.context.$implicit = record.item;
    });
    const count = this._data.length;
    let i = this._viewContainerRef.length;
    while (i--) {
      const view = this._viewContainerRef.get(i);
      view.context.index = this._renderedRange.start + i;
      view.context.count = count;
      this._updateComputedContextProperties(view.context);
    }
  }
  /** Update the computed properties on the `CdkVirtualForOfContext`. */
  _updateComputedContextProperties(context2) {
    context2.first = context2.index === 0;
    context2.last = context2.index === context2.count - 1;
    context2.even = context2.index % 2 === 0;
    context2.odd = !context2.even;
  }
  _getEmbeddedViewArgs(record, index) {
    return {
      templateRef: this._template,
      context: {
        $implicit: record.item,
        // It's guaranteed that the iterable is not "undefined" or "null" because we only
        // generate views for elements if the "cdkVirtualForOf" iterable has elements.
        cdkVirtualForOf: this._cdkVirtualForOf,
        index: -1,
        count: -1,
        first: false,
        last: false,
        odd: false,
        even: false
      },
      index
    };
  }
};
_CdkVirtualForOf.\u0275fac = function CdkVirtualForOf_Factory(t) {
  return new (t || _CdkVirtualForOf)(\u0275\u0275directiveInject(ViewContainerRef), \u0275\u0275directiveInject(TemplateRef), \u0275\u0275directiveInject(IterableDiffers), \u0275\u0275directiveInject(_VIEW_REPEATER_STRATEGY), \u0275\u0275directiveInject(CdkVirtualScrollViewport, 4), \u0275\u0275directiveInject(NgZone));
};
_CdkVirtualForOf.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _CdkVirtualForOf,
  selectors: [["", "cdkVirtualFor", "", "cdkVirtualForOf", ""]],
  inputs: {
    cdkVirtualForOf: "cdkVirtualForOf",
    cdkVirtualForTrackBy: "cdkVirtualForTrackBy",
    cdkVirtualForTemplate: "cdkVirtualForTemplate",
    cdkVirtualForTemplateCacheSize: "cdkVirtualForTemplateCacheSize"
  },
  standalone: true,
  features: [\u0275\u0275ProvidersFeature([{
    provide: _VIEW_REPEATER_STRATEGY,
    useClass: _RecycleViewRepeaterStrategy
  }])]
});
var CdkVirtualForOf = _CdkVirtualForOf;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CdkVirtualForOf, [{
    type: Directive,
    args: [{
      selector: "[cdkVirtualFor][cdkVirtualForOf]",
      providers: [{
        provide: _VIEW_REPEATER_STRATEGY,
        useClass: _RecycleViewRepeaterStrategy
      }],
      standalone: true
    }]
  }], () => [{
    type: ViewContainerRef
  }, {
    type: TemplateRef
  }, {
    type: IterableDiffers
  }, {
    type: _RecycleViewRepeaterStrategy,
    decorators: [{
      type: Inject,
      args: [_VIEW_REPEATER_STRATEGY]
    }]
  }, {
    type: CdkVirtualScrollViewport,
    decorators: [{
      type: SkipSelf
    }]
  }, {
    type: NgZone
  }], {
    cdkVirtualForOf: [{
      type: Input
    }],
    cdkVirtualForTrackBy: [{
      type: Input
    }],
    cdkVirtualForTemplate: [{
      type: Input
    }],
    cdkVirtualForTemplateCacheSize: [{
      type: Input
    }]
  });
})();
var _CdkVirtualScrollableElement = class _CdkVirtualScrollableElement extends CdkVirtualScrollable {
  constructor(elementRef, scrollDispatcher, ngZone, dir) {
    super(elementRef, scrollDispatcher, ngZone, dir);
  }
  measureBoundingClientRectWithScrollOffset(from2) {
    return this.getElementRef().nativeElement.getBoundingClientRect()[from2] - this.measureScrollOffset(from2);
  }
};
_CdkVirtualScrollableElement.\u0275fac = function CdkVirtualScrollableElement_Factory(t) {
  return new (t || _CdkVirtualScrollableElement)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(ScrollDispatcher), \u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(Directionality, 8));
};
_CdkVirtualScrollableElement.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _CdkVirtualScrollableElement,
  selectors: [["", "cdkVirtualScrollingElement", ""]],
  hostAttrs: [1, "cdk-virtual-scrollable"],
  standalone: true,
  features: [\u0275\u0275ProvidersFeature([{
    provide: VIRTUAL_SCROLLABLE,
    useExisting: _CdkVirtualScrollableElement
  }]), \u0275\u0275InheritDefinitionFeature]
});
var CdkVirtualScrollableElement = _CdkVirtualScrollableElement;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CdkVirtualScrollableElement, [{
    type: Directive,
    args: [{
      selector: "[cdkVirtualScrollingElement]",
      providers: [{
        provide: VIRTUAL_SCROLLABLE,
        useExisting: CdkVirtualScrollableElement
      }],
      standalone: true,
      host: {
        "class": "cdk-virtual-scrollable"
      }
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: ScrollDispatcher
  }, {
    type: NgZone
  }, {
    type: Directionality,
    decorators: [{
      type: Optional
    }]
  }], null);
})();
var _CdkVirtualScrollableWindow = class _CdkVirtualScrollableWindow extends CdkVirtualScrollable {
  constructor(scrollDispatcher, ngZone, dir) {
    super(new ElementRef(document.documentElement), scrollDispatcher, ngZone, dir);
    this._elementScrolled = new Observable((observer) => this.ngZone.runOutsideAngular(() => fromEvent(document, "scroll").pipe(takeUntil(this._destroyed)).subscribe(observer)));
  }
  measureBoundingClientRectWithScrollOffset(from2) {
    return this.getElementRef().nativeElement.getBoundingClientRect()[from2];
  }
};
_CdkVirtualScrollableWindow.\u0275fac = function CdkVirtualScrollableWindow_Factory(t) {
  return new (t || _CdkVirtualScrollableWindow)(\u0275\u0275directiveInject(ScrollDispatcher), \u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(Directionality, 8));
};
_CdkVirtualScrollableWindow.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _CdkVirtualScrollableWindow,
  selectors: [["cdk-virtual-scroll-viewport", "scrollWindow", ""]],
  standalone: true,
  features: [\u0275\u0275ProvidersFeature([{
    provide: VIRTUAL_SCROLLABLE,
    useExisting: _CdkVirtualScrollableWindow
  }]), \u0275\u0275InheritDefinitionFeature]
});
var CdkVirtualScrollableWindow = _CdkVirtualScrollableWindow;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CdkVirtualScrollableWindow, [{
    type: Directive,
    args: [{
      selector: "cdk-virtual-scroll-viewport[scrollWindow]",
      providers: [{
        provide: VIRTUAL_SCROLLABLE,
        useExisting: CdkVirtualScrollableWindow
      }],
      standalone: true
    }]
  }], () => [{
    type: ScrollDispatcher
  }, {
    type: NgZone
  }, {
    type: Directionality,
    decorators: [{
      type: Optional
    }]
  }], null);
})();
var _CdkScrollableModule = class _CdkScrollableModule {
};
_CdkScrollableModule.\u0275fac = function CdkScrollableModule_Factory(t) {
  return new (t || _CdkScrollableModule)();
};
_CdkScrollableModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _CdkScrollableModule
});
_CdkScrollableModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({});
var CdkScrollableModule = _CdkScrollableModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CdkScrollableModule, [{
    type: NgModule,
    args: [{
      exports: [CdkScrollable],
      imports: [CdkScrollable]
    }]
  }], null, null);
})();
var _ScrollingModule = class _ScrollingModule {
};
_ScrollingModule.\u0275fac = function ScrollingModule_Factory(t) {
  return new (t || _ScrollingModule)();
};
_ScrollingModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _ScrollingModule
});
_ScrollingModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
  imports: [BidiModule, CdkScrollableModule, BidiModule, CdkScrollableModule]
});
var ScrollingModule = _ScrollingModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ScrollingModule, [{
    type: NgModule,
    args: [{
      imports: [BidiModule, CdkScrollableModule, CdkVirtualScrollViewport, CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollableWindow, CdkVirtualScrollableElement],
      exports: [BidiModule, CdkScrollableModule, CdkFixedSizeVirtualScroll, CdkVirtualForOf, CdkVirtualScrollViewport, CdkVirtualScrollableWindow, CdkVirtualScrollableElement]
    }]
  }], null, null);
})();

// node_modules/@angular/cdk/fesm2022/portal.mjs
function throwNullPortalError() {
  throw Error("Must provide a portal to attach");
}
function throwPortalAlreadyAttachedError() {
  throw Error("Host already has a portal attached");
}
function throwPortalOutletAlreadyDisposedError() {
  throw Error("This PortalOutlet has already been disposed");
}
function throwUnknownPortalTypeError() {
  throw Error("Attempting to attach an unknown Portal type. BasePortalOutlet accepts either a ComponentPortal or a TemplatePortal.");
}
function throwNullPortalOutletError() {
  throw Error("Attempting to attach a portal to a null PortalOutlet");
}
function throwNoPortalAttachedError() {
  throw Error("Attempting to detach a portal that is not attached to a host");
}
var Portal = class {
  /** Attach this portal to a host. */
  attach(host) {
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      if (host == null) {
        throwNullPortalOutletError();
      }
      if (host.hasAttached()) {
        throwPortalAlreadyAttachedError();
      }
    }
    this._attachedHost = host;
    return host.attach(this);
  }
  /** Detach this portal from its host */
  detach() {
    let host = this._attachedHost;
    if (host != null) {
      this._attachedHost = null;
      host.detach();
    } else if (typeof ngDevMode === "undefined" || ngDevMode) {
      throwNoPortalAttachedError();
    }
  }
  /** Whether this portal is attached to a host. */
  get isAttached() {
    return this._attachedHost != null;
  }
  /**
   * Sets the PortalOutlet reference without performing `attach()`. This is used directly by
   * the PortalOutlet when it is performing an `attach()` or `detach()`.
   */
  setAttachedHost(host) {
    this._attachedHost = host;
  }
};
var ComponentPortal = class extends Portal {
  constructor(component, viewContainerRef, injector, componentFactoryResolver, projectableNodes) {
    super();
    this.component = component;
    this.viewContainerRef = viewContainerRef;
    this.injector = injector;
    this.componentFactoryResolver = componentFactoryResolver;
    this.projectableNodes = projectableNodes;
  }
};
var TemplatePortal = class extends Portal {
  constructor(templateRef, viewContainerRef, context2, injector) {
    super();
    this.templateRef = templateRef;
    this.viewContainerRef = viewContainerRef;
    this.context = context2;
    this.injector = injector;
  }
  get origin() {
    return this.templateRef.elementRef;
  }
  /**
   * Attach the portal to the provided `PortalOutlet`.
   * When a context is provided it will override the `context` property of the `TemplatePortal`
   * instance.
   */
  attach(host, context2 = this.context) {
    this.context = context2;
    return super.attach(host);
  }
  detach() {
    this.context = void 0;
    return super.detach();
  }
};
var DomPortal = class extends Portal {
  constructor(element) {
    super();
    this.element = element instanceof ElementRef ? element.nativeElement : element;
  }
};
var BasePortalOutlet = class {
  constructor() {
    this._isDisposed = false;
    this.attachDomPortal = null;
  }
  /** Whether this host has an attached portal. */
  hasAttached() {
    return !!this._attachedPortal;
  }
  /** Attaches a portal. */
  attach(portal) {
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      if (!portal) {
        throwNullPortalError();
      }
      if (this.hasAttached()) {
        throwPortalAlreadyAttachedError();
      }
      if (this._isDisposed) {
        throwPortalOutletAlreadyDisposedError();
      }
    }
    if (portal instanceof ComponentPortal) {
      this._attachedPortal = portal;
      return this.attachComponentPortal(portal);
    } else if (portal instanceof TemplatePortal) {
      this._attachedPortal = portal;
      return this.attachTemplatePortal(portal);
    } else if (this.attachDomPortal && portal instanceof DomPortal) {
      this._attachedPortal = portal;
      return this.attachDomPortal(portal);
    }
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      throwUnknownPortalTypeError();
    }
  }
  /** Detaches a previously attached portal. */
  detach() {
    if (this._attachedPortal) {
      this._attachedPortal.setAttachedHost(null);
      this._attachedPortal = null;
    }
    this._invokeDisposeFn();
  }
  /** Permanently dispose of this portal host. */
  dispose() {
    if (this.hasAttached()) {
      this.detach();
    }
    this._invokeDisposeFn();
    this._isDisposed = true;
  }
  /** @docs-private */
  setDisposeFn(fn) {
    this._disposeFn = fn;
  }
  _invokeDisposeFn() {
    if (this._disposeFn) {
      this._disposeFn();
      this._disposeFn = null;
    }
  }
};
var DomPortalOutlet = class extends BasePortalOutlet {
  /**
   * @param outletElement Element into which the content is projected.
   * @param _componentFactoryResolver Used to resolve the component factory.
   *   Only required when attaching component portals.
   * @param _appRef Reference to the application. Only used in component portals when there
   *   is no `ViewContainerRef` available.
   * @param _defaultInjector Injector to use as a fallback when the portal being attached doesn't
   *   have one. Only used for component portals.
   * @param _document Reference to the document. Used when attaching a DOM portal. Will eventually
   *   become a required parameter.
   */
  constructor(outletElement, _componentFactoryResolver, _appRef, _defaultInjector, _document2) {
    super();
    this.outletElement = outletElement;
    this._componentFactoryResolver = _componentFactoryResolver;
    this._appRef = _appRef;
    this._defaultInjector = _defaultInjector;
    this.attachDomPortal = (portal) => {
      if (!this._document && (typeof ngDevMode === "undefined" || ngDevMode)) {
        throw Error("Cannot attach DOM portal without _document constructor parameter");
      }
      const element = portal.element;
      if (!element.parentNode && (typeof ngDevMode === "undefined" || ngDevMode)) {
        throw Error("DOM portal content must be attached to a parent node.");
      }
      const anchorNode = this._document.createComment("dom-portal");
      element.parentNode.insertBefore(anchorNode, element);
      this.outletElement.appendChild(element);
      this._attachedPortal = portal;
      super.setDisposeFn(() => {
        if (anchorNode.parentNode) {
          anchorNode.parentNode.replaceChild(element, anchorNode);
        }
      });
    };
    this._document = _document2;
  }
  /**
   * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.
   * @param portal Portal to be attached
   * @returns Reference to the created component.
   */
  attachComponentPortal(portal) {
    const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;
    if ((typeof ngDevMode === "undefined" || ngDevMode) && !resolver) {
      throw Error("Cannot attach component portal to outlet without a ComponentFactoryResolver.");
    }
    const componentFactory = resolver.resolveComponentFactory(portal.component);
    let componentRef;
    if (portal.viewContainerRef) {
      componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector, portal.projectableNodes || void 0);
      this.setDisposeFn(() => componentRef.destroy());
    } else {
      if ((typeof ngDevMode === "undefined" || ngDevMode) && !this._appRef) {
        throw Error("Cannot attach component portal to outlet without an ApplicationRef.");
      }
      componentRef = componentFactory.create(portal.injector || this._defaultInjector || Injector.NULL);
      this._appRef.attachView(componentRef.hostView);
      this.setDisposeFn(() => {
        if (this._appRef.viewCount > 0) {
          this._appRef.detachView(componentRef.hostView);
        }
        componentRef.destroy();
      });
    }
    this.outletElement.appendChild(this._getComponentRootNode(componentRef));
    this._attachedPortal = portal;
    return componentRef;
  }
  /**
   * Attaches a template portal to the DOM as an embedded view.
   * @param portal Portal to be attached.
   * @returns Reference to the created embedded view.
   */
  attachTemplatePortal(portal) {
    let viewContainer = portal.viewContainerRef;
    let viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context, {
      injector: portal.injector
    });
    viewRef.rootNodes.forEach((rootNode) => this.outletElement.appendChild(rootNode));
    viewRef.detectChanges();
    this.setDisposeFn(() => {
      let index = viewContainer.indexOf(viewRef);
      if (index !== -1) {
        viewContainer.remove(index);
      }
    });
    this._attachedPortal = portal;
    return viewRef;
  }
  /**
   * Clears out a portal from the DOM.
   */
  dispose() {
    super.dispose();
    this.outletElement.remove();
  }
  /** Gets the root HTMLElement for an instantiated component. */
  _getComponentRootNode(componentRef) {
    return componentRef.hostView.rootNodes[0];
  }
};
var _CdkPortal = class _CdkPortal extends TemplatePortal {
  constructor(templateRef, viewContainerRef) {
    super(templateRef, viewContainerRef);
  }
};
_CdkPortal.\u0275fac = function CdkPortal_Factory(t) {
  return new (t || _CdkPortal)(\u0275\u0275directiveInject(TemplateRef), \u0275\u0275directiveInject(ViewContainerRef));
};
_CdkPortal.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _CdkPortal,
  selectors: [["", "cdkPortal", ""]],
  exportAs: ["cdkPortal"],
  features: [\u0275\u0275InheritDefinitionFeature]
});
var CdkPortal = _CdkPortal;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CdkPortal, [{
    type: Directive,
    args: [{
      selector: "[cdkPortal]",
      exportAs: "cdkPortal"
    }]
  }], () => [{
    type: TemplateRef
  }, {
    type: ViewContainerRef
  }], null);
})();
var _TemplatePortalDirective = class _TemplatePortalDirective extends CdkPortal {
};
_TemplatePortalDirective.\u0275fac = /* @__PURE__ */ (() => {
  let \u0275TemplatePortalDirective_BaseFactory;
  return function TemplatePortalDirective_Factory(t) {
    return (\u0275TemplatePortalDirective_BaseFactory || (\u0275TemplatePortalDirective_BaseFactory = \u0275\u0275getInheritedFactory(_TemplatePortalDirective)))(t || _TemplatePortalDirective);
  };
})();
_TemplatePortalDirective.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _TemplatePortalDirective,
  selectors: [["", "cdk-portal", ""], ["", "portal", ""]],
  exportAs: ["cdkPortal"],
  features: [\u0275\u0275ProvidersFeature([{
    provide: CdkPortal,
    useExisting: _TemplatePortalDirective
  }]), \u0275\u0275InheritDefinitionFeature]
});
var TemplatePortalDirective = _TemplatePortalDirective;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TemplatePortalDirective, [{
    type: Directive,
    args: [{
      selector: "[cdk-portal], [portal]",
      exportAs: "cdkPortal",
      providers: [{
        provide: CdkPortal,
        useExisting: TemplatePortalDirective
      }]
    }]
  }], null, null);
})();
var _CdkPortalOutlet = class _CdkPortalOutlet extends BasePortalOutlet {
  constructor(_componentFactoryResolver, _viewContainerRef, _document2) {
    super();
    this._componentFactoryResolver = _componentFactoryResolver;
    this._viewContainerRef = _viewContainerRef;
    this._isInitialized = false;
    this.attached = new EventEmitter();
    this.attachDomPortal = (portal) => {
      if (!this._document && (typeof ngDevMode === "undefined" || ngDevMode)) {
        throw Error("Cannot attach DOM portal without _document constructor parameter");
      }
      const element = portal.element;
      if (!element.parentNode && (typeof ngDevMode === "undefined" || ngDevMode)) {
        throw Error("DOM portal content must be attached to a parent node.");
      }
      const anchorNode = this._document.createComment("dom-portal");
      portal.setAttachedHost(this);
      element.parentNode.insertBefore(anchorNode, element);
      this._getRootNode().appendChild(element);
      this._attachedPortal = portal;
      super.setDisposeFn(() => {
        if (anchorNode.parentNode) {
          anchorNode.parentNode.replaceChild(element, anchorNode);
        }
      });
    };
    this._document = _document2;
  }
  /** Portal associated with the Portal outlet. */
  get portal() {
    return this._attachedPortal;
  }
  set portal(portal) {
    if (this.hasAttached() && !portal && !this._isInitialized) {
      return;
    }
    if (this.hasAttached()) {
      super.detach();
    }
    if (portal) {
      super.attach(portal);
    }
    this._attachedPortal = portal || null;
  }
  /** Component or view reference that is attached to the portal. */
  get attachedRef() {
    return this._attachedRef;
  }
  ngOnInit() {
    this._isInitialized = true;
  }
  ngOnDestroy() {
    super.dispose();
    this._attachedRef = this._attachedPortal = null;
  }
  /**
   * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.
   *
   * @param portal Portal to be attached to the portal outlet.
   * @returns Reference to the created component.
   */
  attachComponentPortal(portal) {
    portal.setAttachedHost(this);
    const viewContainerRef = portal.viewContainerRef != null ? portal.viewContainerRef : this._viewContainerRef;
    const resolver = portal.componentFactoryResolver || this._componentFactoryResolver;
    const componentFactory = resolver.resolveComponentFactory(portal.component);
    const ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector, portal.projectableNodes || void 0);
    if (viewContainerRef !== this._viewContainerRef) {
      this._getRootNode().appendChild(ref.hostView.rootNodes[0]);
    }
    super.setDisposeFn(() => ref.destroy());
    this._attachedPortal = portal;
    this._attachedRef = ref;
    this.attached.emit(ref);
    return ref;
  }
  /**
   * Attach the given TemplatePortal to this PortalHost as an embedded View.
   * @param portal Portal to be attached.
   * @returns Reference to the created embedded view.
   */
  attachTemplatePortal(portal) {
    portal.setAttachedHost(this);
    const viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context, {
      injector: portal.injector
    });
    super.setDisposeFn(() => this._viewContainerRef.clear());
    this._attachedPortal = portal;
    this._attachedRef = viewRef;
    this.attached.emit(viewRef);
    return viewRef;
  }
  /** Gets the root node of the portal outlet. */
  _getRootNode() {
    const nativeElement = this._viewContainerRef.element.nativeElement;
    return nativeElement.nodeType === nativeElement.ELEMENT_NODE ? nativeElement : nativeElement.parentNode;
  }
};
_CdkPortalOutlet.\u0275fac = function CdkPortalOutlet_Factory(t) {
  return new (t || _CdkPortalOutlet)(\u0275\u0275directiveInject(ComponentFactoryResolver$1), \u0275\u0275directiveInject(ViewContainerRef), \u0275\u0275directiveInject(DOCUMENT2));
};
_CdkPortalOutlet.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _CdkPortalOutlet,
  selectors: [["", "cdkPortalOutlet", ""]],
  inputs: {
    portal: ["cdkPortalOutlet", "portal"]
  },
  outputs: {
    attached: "attached"
  },
  exportAs: ["cdkPortalOutlet"],
  features: [\u0275\u0275InheritDefinitionFeature]
});
var CdkPortalOutlet = _CdkPortalOutlet;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CdkPortalOutlet, [{
    type: Directive,
    args: [{
      selector: "[cdkPortalOutlet]",
      exportAs: "cdkPortalOutlet",
      inputs: ["portal: cdkPortalOutlet"]
    }]
  }], () => [{
    type: ComponentFactoryResolver$1
  }, {
    type: ViewContainerRef
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }], {
    attached: [{
      type: Output
    }]
  });
})();
var _PortalHostDirective = class _PortalHostDirective extends CdkPortalOutlet {
};
_PortalHostDirective.\u0275fac = /* @__PURE__ */ (() => {
  let \u0275PortalHostDirective_BaseFactory;
  return function PortalHostDirective_Factory(t) {
    return (\u0275PortalHostDirective_BaseFactory || (\u0275PortalHostDirective_BaseFactory = \u0275\u0275getInheritedFactory(_PortalHostDirective)))(t || _PortalHostDirective);
  };
})();
_PortalHostDirective.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _PortalHostDirective,
  selectors: [["", "cdkPortalHost", ""], ["", "portalHost", ""]],
  inputs: {
    portal: ["cdkPortalHost", "portal"]
  },
  exportAs: ["cdkPortalHost"],
  features: [\u0275\u0275ProvidersFeature([{
    provide: CdkPortalOutlet,
    useExisting: _PortalHostDirective
  }]), \u0275\u0275InheritDefinitionFeature]
});
var PortalHostDirective = _PortalHostDirective;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PortalHostDirective, [{
    type: Directive,
    args: [{
      selector: "[cdkPortalHost], [portalHost]",
      exportAs: "cdkPortalHost",
      inputs: ["portal: cdkPortalHost"],
      providers: [{
        provide: CdkPortalOutlet,
        useExisting: PortalHostDirective
      }]
    }]
  }], null, null);
})();
var _PortalModule = class _PortalModule {
};
_PortalModule.\u0275fac = function PortalModule_Factory(t) {
  return new (t || _PortalModule)();
};
_PortalModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _PortalModule
});
_PortalModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({});
var PortalModule = _PortalModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PortalModule, [{
    type: NgModule,
    args: [{
      exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],
      declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective]
    }]
  }], null, null);
})();

// node_modules/@angular/cdk/fesm2022/keycodes.mjs
var ENTER = 13;
var SHIFT = 16;
var CONTROL = 17;
var ALT = 18;
var ESCAPE = 27;
var SPACE = 32;
var META = 91;
var MAC_META = 224;
function hasModifierKey(event, ...modifiers) {
  if (modifiers.length) {
    return modifiers.some((modifier) => event[modifier]);
  }
  return event.altKey || event.shiftKey || event.ctrlKey || event.metaKey;
}

// node_modules/@angular/cdk/fesm2022/overlay.mjs
var scrollBehaviorSupported2 = supportsScrollBehavior();
var BlockScrollStrategy = class {
  constructor(_viewportRuler, document2) {
    this._viewportRuler = _viewportRuler;
    this._previousHTMLStyles = {
      top: "",
      left: ""
    };
    this._isEnabled = false;
    this._document = document2;
  }
  /** Attaches this scroll strategy to an overlay. */
  attach() {
  }
  /** Blocks page-level scroll while the attached overlay is open. */
  enable() {
    if (this._canBeEnabled()) {
      const root = this._document.documentElement;
      this._previousScrollPosition = this._viewportRuler.getViewportScrollPosition();
      this._previousHTMLStyles.left = root.style.left || "";
      this._previousHTMLStyles.top = root.style.top || "";
      root.style.left = coerceCssPixelValue(-this._previousScrollPosition.left);
      root.style.top = coerceCssPixelValue(-this._previousScrollPosition.top);
      root.classList.add("cdk-global-scrollblock");
      this._isEnabled = true;
    }
  }
  /** Unblocks page-level scroll while the attached overlay is open. */
  disable() {
    if (this._isEnabled) {
      const html = this._document.documentElement;
      const body = this._document.body;
      const htmlStyle = html.style;
      const bodyStyle = body.style;
      const previousHtmlScrollBehavior = htmlStyle.scrollBehavior || "";
      const previousBodyScrollBehavior = bodyStyle.scrollBehavior || "";
      this._isEnabled = false;
      htmlStyle.left = this._previousHTMLStyles.left;
      htmlStyle.top = this._previousHTMLStyles.top;
      html.classList.remove("cdk-global-scrollblock");
      if (scrollBehaviorSupported2) {
        htmlStyle.scrollBehavior = bodyStyle.scrollBehavior = "auto";
      }
      window.scroll(this._previousScrollPosition.left, this._previousScrollPosition.top);
      if (scrollBehaviorSupported2) {
        htmlStyle.scrollBehavior = previousHtmlScrollBehavior;
        bodyStyle.scrollBehavior = previousBodyScrollBehavior;
      }
    }
  }
  _canBeEnabled() {
    const html = this._document.documentElement;
    if (html.classList.contains("cdk-global-scrollblock") || this._isEnabled) {
      return false;
    }
    const body = this._document.body;
    const viewport = this._viewportRuler.getViewportSize();
    return body.scrollHeight > viewport.height || body.scrollWidth > viewport.width;
  }
};
function getMatScrollStrategyAlreadyAttachedError() {
  return Error(`Scroll strategy has already been attached.`);
}
var CloseScrollStrategy = class {
  constructor(_scrollDispatcher, _ngZone, _viewportRuler, _config) {
    this._scrollDispatcher = _scrollDispatcher;
    this._ngZone = _ngZone;
    this._viewportRuler = _viewportRuler;
    this._config = _config;
    this._scrollSubscription = null;
    this._detach = () => {
      this.disable();
      if (this._overlayRef.hasAttached()) {
        this._ngZone.run(() => this._overlayRef.detach());
      }
    };
  }
  /** Attaches this scroll strategy to an overlay. */
  attach(overlayRef) {
    if (this._overlayRef && (typeof ngDevMode === "undefined" || ngDevMode)) {
      throw getMatScrollStrategyAlreadyAttachedError();
    }
    this._overlayRef = overlayRef;
  }
  /** Enables the closing of the attached overlay on scroll. */
  enable() {
    if (this._scrollSubscription) {
      return;
    }
    const stream = this._scrollDispatcher.scrolled(0).pipe(filter((scrollable) => {
      return !scrollable || !this._overlayRef.overlayElement.contains(scrollable.getElementRef().nativeElement);
    }));
    if (this._config && this._config.threshold && this._config.threshold > 1) {
      this._initialScrollPosition = this._viewportRuler.getViewportScrollPosition().top;
      this._scrollSubscription = stream.subscribe(() => {
        const scrollPosition = this._viewportRuler.getViewportScrollPosition().top;
        if (Math.abs(scrollPosition - this._initialScrollPosition) > this._config.threshold) {
          this._detach();
        } else {
          this._overlayRef.updatePosition();
        }
      });
    } else {
      this._scrollSubscription = stream.subscribe(this._detach);
    }
  }
  /** Disables the closing the attached overlay on scroll. */
  disable() {
    if (this._scrollSubscription) {
      this._scrollSubscription.unsubscribe();
      this._scrollSubscription = null;
    }
  }
  detach() {
    this.disable();
    this._overlayRef = null;
  }
};
var NoopScrollStrategy = class {
  /** Does nothing, as this scroll strategy is a no-op. */
  enable() {
  }
  /** Does nothing, as this scroll strategy is a no-op. */
  disable() {
  }
  /** Does nothing, as this scroll strategy is a no-op. */
  attach() {
  }
};
function isElementScrolledOutsideView(element, scrollContainers) {
  return scrollContainers.some((containerBounds) => {
    const outsideAbove = element.bottom < containerBounds.top;
    const outsideBelow = element.top > containerBounds.bottom;
    const outsideLeft = element.right < containerBounds.left;
    const outsideRight = element.left > containerBounds.right;
    return outsideAbove || outsideBelow || outsideLeft || outsideRight;
  });
}
function isElementClippedByScrolling(element, scrollContainers) {
  return scrollContainers.some((scrollContainerRect) => {
    const clippedAbove = element.top < scrollContainerRect.top;
    const clippedBelow = element.bottom > scrollContainerRect.bottom;
    const clippedLeft = element.left < scrollContainerRect.left;
    const clippedRight = element.right > scrollContainerRect.right;
    return clippedAbove || clippedBelow || clippedLeft || clippedRight;
  });
}
var RepositionScrollStrategy = class {
  constructor(_scrollDispatcher, _viewportRuler, _ngZone, _config) {
    this._scrollDispatcher = _scrollDispatcher;
    this._viewportRuler = _viewportRuler;
    this._ngZone = _ngZone;
    this._config = _config;
    this._scrollSubscription = null;
  }
  /** Attaches this scroll strategy to an overlay. */
  attach(overlayRef) {
    if (this._overlayRef && (typeof ngDevMode === "undefined" || ngDevMode)) {
      throw getMatScrollStrategyAlreadyAttachedError();
    }
    this._overlayRef = overlayRef;
  }
  /** Enables repositioning of the attached overlay on scroll. */
  enable() {
    if (!this._scrollSubscription) {
      const throttle = this._config ? this._config.scrollThrottle : 0;
      this._scrollSubscription = this._scrollDispatcher.scrolled(throttle).subscribe(() => {
        this._overlayRef.updatePosition();
        if (this._config && this._config.autoClose) {
          const overlayRect = this._overlayRef.overlayElement.getBoundingClientRect();
          const {
            width,
            height
          } = this._viewportRuler.getViewportSize();
          const parentRects = [{
            width,
            height,
            bottom: height,
            right: width,
            top: 0,
            left: 0
          }];
          if (isElementScrolledOutsideView(overlayRect, parentRects)) {
            this.disable();
            this._ngZone.run(() => this._overlayRef.detach());
          }
        }
      });
    }
  }
  /** Disables repositioning of the attached overlay on scroll. */
  disable() {
    if (this._scrollSubscription) {
      this._scrollSubscription.unsubscribe();
      this._scrollSubscription = null;
    }
  }
  detach() {
    this.disable();
    this._overlayRef = null;
  }
};
var _ScrollStrategyOptions = class _ScrollStrategyOptions {
  constructor(_scrollDispatcher, _viewportRuler, _ngZone, document2) {
    this._scrollDispatcher = _scrollDispatcher;
    this._viewportRuler = _viewportRuler;
    this._ngZone = _ngZone;
    this.noop = () => new NoopScrollStrategy();
    this.close = (config2) => new CloseScrollStrategy(this._scrollDispatcher, this._ngZone, this._viewportRuler, config2);
    this.block = () => new BlockScrollStrategy(this._viewportRuler, this._document);
    this.reposition = (config2) => new RepositionScrollStrategy(this._scrollDispatcher, this._viewportRuler, this._ngZone, config2);
    this._document = document2;
  }
};
_ScrollStrategyOptions.\u0275fac = function ScrollStrategyOptions_Factory(t) {
  return new (t || _ScrollStrategyOptions)(\u0275\u0275inject(ScrollDispatcher), \u0275\u0275inject(ViewportRuler), \u0275\u0275inject(NgZone), \u0275\u0275inject(DOCUMENT2));
};
_ScrollStrategyOptions.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _ScrollStrategyOptions,
  factory: _ScrollStrategyOptions.\u0275fac,
  providedIn: "root"
});
var ScrollStrategyOptions = _ScrollStrategyOptions;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ScrollStrategyOptions, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: ScrollDispatcher
  }, {
    type: ViewportRuler
  }, {
    type: NgZone
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }], null);
})();
var OverlayConfig = class {
  constructor(config2) {
    this.scrollStrategy = new NoopScrollStrategy();
    this.panelClass = "";
    this.hasBackdrop = false;
    this.backdropClass = "cdk-overlay-dark-backdrop";
    this.disposeOnNavigation = false;
    if (config2) {
      const configKeys = Object.keys(config2);
      for (const key of configKeys) {
        if (config2[key] !== void 0) {
          this[key] = config2[key];
        }
      }
    }
  }
};
var ConnectedOverlayPositionChange = class {
  constructor(connectionPair, scrollableViewProperties) {
    this.connectionPair = connectionPair;
    this.scrollableViewProperties = scrollableViewProperties;
  }
};
function validateVerticalPosition(property, value) {
  if (value !== "top" && value !== "bottom" && value !== "center") {
    throw Error(`ConnectedPosition: Invalid ${property} "${value}". Expected "top", "bottom" or "center".`);
  }
}
function validateHorizontalPosition(property, value) {
  if (value !== "start" && value !== "end" && value !== "center") {
    throw Error(`ConnectedPosition: Invalid ${property} "${value}". Expected "start", "end" or "center".`);
  }
}
var _BaseOverlayDispatcher = class _BaseOverlayDispatcher {
  constructor(document2) {
    this._attachedOverlays = [];
    this._document = document2;
  }
  ngOnDestroy() {
    this.detach();
  }
  /** Add a new overlay to the list of attached overlay refs. */
  add(overlayRef) {
    this.remove(overlayRef);
    this._attachedOverlays.push(overlayRef);
  }
  /** Remove an overlay from the list of attached overlay refs. */
  remove(overlayRef) {
    const index = this._attachedOverlays.indexOf(overlayRef);
    if (index > -1) {
      this._attachedOverlays.splice(index, 1);
    }
    if (this._attachedOverlays.length === 0) {
      this.detach();
    }
  }
};
_BaseOverlayDispatcher.\u0275fac = function BaseOverlayDispatcher_Factory(t) {
  return new (t || _BaseOverlayDispatcher)(\u0275\u0275inject(DOCUMENT2));
};
_BaseOverlayDispatcher.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _BaseOverlayDispatcher,
  factory: _BaseOverlayDispatcher.\u0275fac,
  providedIn: "root"
});
var BaseOverlayDispatcher = _BaseOverlayDispatcher;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(BaseOverlayDispatcher, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }], null);
})();
var _OverlayKeyboardDispatcher = class _OverlayKeyboardDispatcher extends BaseOverlayDispatcher {
  constructor(document2, _ngZone) {
    super(document2);
    this._ngZone = _ngZone;
    this._keydownListener = (event) => {
      const overlays = this._attachedOverlays;
      for (let i = overlays.length - 1; i > -1; i--) {
        if (overlays[i]._keydownEvents.observers.length > 0) {
          const keydownEvents = overlays[i]._keydownEvents;
          if (this._ngZone) {
            this._ngZone.run(() => keydownEvents.next(event));
          } else {
            keydownEvents.next(event);
          }
          break;
        }
      }
    };
  }
  /** Add a new overlay to the list of attached overlay refs. */
  add(overlayRef) {
    super.add(overlayRef);
    if (!this._isAttached) {
      if (this._ngZone) {
        this._ngZone.runOutsideAngular(() => this._document.body.addEventListener("keydown", this._keydownListener));
      } else {
        this._document.body.addEventListener("keydown", this._keydownListener);
      }
      this._isAttached = true;
    }
  }
  /** Detaches the global keyboard event listener. */
  detach() {
    if (this._isAttached) {
      this._document.body.removeEventListener("keydown", this._keydownListener);
      this._isAttached = false;
    }
  }
};
_OverlayKeyboardDispatcher.\u0275fac = function OverlayKeyboardDispatcher_Factory(t) {
  return new (t || _OverlayKeyboardDispatcher)(\u0275\u0275inject(DOCUMENT2), \u0275\u0275inject(NgZone, 8));
};
_OverlayKeyboardDispatcher.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _OverlayKeyboardDispatcher,
  factory: _OverlayKeyboardDispatcher.\u0275fac,
  providedIn: "root"
});
var OverlayKeyboardDispatcher = _OverlayKeyboardDispatcher;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(OverlayKeyboardDispatcher, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }, {
    type: NgZone,
    decorators: [{
      type: Optional
    }]
  }], null);
})();
var _OverlayOutsideClickDispatcher = class _OverlayOutsideClickDispatcher extends BaseOverlayDispatcher {
  constructor(document2, _platform, _ngZone) {
    super(document2);
    this._platform = _platform;
    this._ngZone = _ngZone;
    this._cursorStyleIsSet = false;
    this._pointerDownListener = (event) => {
      this._pointerDownEventTarget = _getEventTarget(event);
    };
    this._clickListener = (event) => {
      const target = _getEventTarget(event);
      const origin = event.type === "click" && this._pointerDownEventTarget ? this._pointerDownEventTarget : target;
      this._pointerDownEventTarget = null;
      const overlays = this._attachedOverlays.slice();
      for (let i = overlays.length - 1; i > -1; i--) {
        const overlayRef = overlays[i];
        if (overlayRef._outsidePointerEvents.observers.length < 1 || !overlayRef.hasAttached()) {
          continue;
        }
        if (overlayRef.overlayElement.contains(target) || overlayRef.overlayElement.contains(origin)) {
          break;
        }
        const outsidePointerEvents = overlayRef._outsidePointerEvents;
        if (this._ngZone) {
          this._ngZone.run(() => outsidePointerEvents.next(event));
        } else {
          outsidePointerEvents.next(event);
        }
      }
    };
  }
  /** Add a new overlay to the list of attached overlay refs. */
  add(overlayRef) {
    super.add(overlayRef);
    if (!this._isAttached) {
      const body = this._document.body;
      if (this._ngZone) {
        this._ngZone.runOutsideAngular(() => this._addEventListeners(body));
      } else {
        this._addEventListeners(body);
      }
      if (this._platform.IOS && !this._cursorStyleIsSet) {
        this._cursorOriginalValue = body.style.cursor;
        body.style.cursor = "pointer";
        this._cursorStyleIsSet = true;
      }
      this._isAttached = true;
    }
  }
  /** Detaches the global keyboard event listener. */
  detach() {
    if (this._isAttached) {
      const body = this._document.body;
      body.removeEventListener("pointerdown", this._pointerDownListener, true);
      body.removeEventListener("click", this._clickListener, true);
      body.removeEventListener("auxclick", this._clickListener, true);
      body.removeEventListener("contextmenu", this._clickListener, true);
      if (this._platform.IOS && this._cursorStyleIsSet) {
        body.style.cursor = this._cursorOriginalValue;
        this._cursorStyleIsSet = false;
      }
      this._isAttached = false;
    }
  }
  _addEventListeners(body) {
    body.addEventListener("pointerdown", this._pointerDownListener, true);
    body.addEventListener("click", this._clickListener, true);
    body.addEventListener("auxclick", this._clickListener, true);
    body.addEventListener("contextmenu", this._clickListener, true);
  }
};
_OverlayOutsideClickDispatcher.\u0275fac = function OverlayOutsideClickDispatcher_Factory(t) {
  return new (t || _OverlayOutsideClickDispatcher)(\u0275\u0275inject(DOCUMENT2), \u0275\u0275inject(Platform), \u0275\u0275inject(NgZone, 8));
};
_OverlayOutsideClickDispatcher.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _OverlayOutsideClickDispatcher,
  factory: _OverlayOutsideClickDispatcher.\u0275fac,
  providedIn: "root"
});
var OverlayOutsideClickDispatcher = _OverlayOutsideClickDispatcher;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(OverlayOutsideClickDispatcher, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }, {
    type: Platform
  }, {
    type: NgZone,
    decorators: [{
      type: Optional
    }]
  }], null);
})();
var _OverlayContainer = class _OverlayContainer {
  constructor(document2, _platform) {
    this._platform = _platform;
    this._document = document2;
  }
  ngOnDestroy() {
    this._containerElement?.remove();
  }
  /**
   * This method returns the overlay container element. It will lazily
   * create the element the first time it is called to facilitate using
   * the container in non-browser environments.
   * @returns the container element
   */
  getContainerElement() {
    if (!this._containerElement) {
      this._createContainer();
    }
    return this._containerElement;
  }
  /**
   * Create the overlay container element, which is simply a div
   * with the 'cdk-overlay-container' class on the document body.
   */
  _createContainer() {
    const containerClass = "cdk-overlay-container";
    if (this._platform.isBrowser || _isTestEnvironment()) {
      const oppositePlatformContainers = this._document.querySelectorAll(`.${containerClass}[platform="server"], .${containerClass}[platform="test"]`);
      for (let i = 0; i < oppositePlatformContainers.length; i++) {
        oppositePlatformContainers[i].remove();
      }
    }
    const container = this._document.createElement("div");
    container.classList.add(containerClass);
    if (_isTestEnvironment()) {
      container.setAttribute("platform", "test");
    } else if (!this._platform.isBrowser) {
      container.setAttribute("platform", "server");
    }
    this._document.body.appendChild(container);
    this._containerElement = container;
  }
};
_OverlayContainer.\u0275fac = function OverlayContainer_Factory(t) {
  return new (t || _OverlayContainer)(\u0275\u0275inject(DOCUMENT2), \u0275\u0275inject(Platform));
};
_OverlayContainer.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _OverlayContainer,
  factory: _OverlayContainer.\u0275fac,
  providedIn: "root"
});
var OverlayContainer = _OverlayContainer;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(OverlayContainer, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }, {
    type: Platform
  }], null);
})();
var OverlayRef = class {
  constructor(_portalOutlet, _host, _pane, _config, _ngZone, _keyboardDispatcher, _document2, _location, _outsideClickDispatcher, _animationsDisabled = false) {
    this._portalOutlet = _portalOutlet;
    this._host = _host;
    this._pane = _pane;
    this._config = _config;
    this._ngZone = _ngZone;
    this._keyboardDispatcher = _keyboardDispatcher;
    this._document = _document2;
    this._location = _location;
    this._outsideClickDispatcher = _outsideClickDispatcher;
    this._animationsDisabled = _animationsDisabled;
    this._backdropElement = null;
    this._backdropClick = new Subject();
    this._attachments = new Subject();
    this._detachments = new Subject();
    this._locationChanges = Subscription.EMPTY;
    this._backdropClickHandler = (event) => this._backdropClick.next(event);
    this._backdropTransitionendHandler = (event) => {
      this._disposeBackdrop(event.target);
    };
    this._keydownEvents = new Subject();
    this._outsidePointerEvents = new Subject();
    if (_config.scrollStrategy) {
      this._scrollStrategy = _config.scrollStrategy;
      this._scrollStrategy.attach(this);
    }
    this._positionStrategy = _config.positionStrategy;
  }
  /** The overlay's HTML element */
  get overlayElement() {
    return this._pane;
  }
  /** The overlay's backdrop HTML element. */
  get backdropElement() {
    return this._backdropElement;
  }
  /**
   * Wrapper around the panel element. Can be used for advanced
   * positioning where a wrapper with specific styling is
   * required around the overlay pane.
   */
  get hostElement() {
    return this._host;
  }
  /**
   * Attaches content, given via a Portal, to the overlay.
   * If the overlay is configured to have a backdrop, it will be created.
   *
   * @param portal Portal instance to which to attach the overlay.
   * @returns The portal attachment result.
   */
  attach(portal) {
    if (!this._host.parentElement && this._previousHostParent) {
      this._previousHostParent.appendChild(this._host);
    }
    const attachResult = this._portalOutlet.attach(portal);
    if (this._positionStrategy) {
      this._positionStrategy.attach(this);
    }
    this._updateStackingOrder();
    this._updateElementSize();
    this._updateElementDirection();
    if (this._scrollStrategy) {
      this._scrollStrategy.enable();
    }
    this._ngZone.onStable.pipe(take(1)).subscribe(() => {
      if (this.hasAttached()) {
        this.updatePosition();
      }
    });
    this._togglePointerEvents(true);
    if (this._config.hasBackdrop) {
      this._attachBackdrop();
    }
    if (this._config.panelClass) {
      this._toggleClasses(this._pane, this._config.panelClass, true);
    }
    this._attachments.next();
    this._keyboardDispatcher.add(this);
    if (this._config.disposeOnNavigation) {
      this._locationChanges = this._location.subscribe(() => this.dispose());
    }
    this._outsideClickDispatcher.add(this);
    if (typeof attachResult?.onDestroy === "function") {
      attachResult.onDestroy(() => {
        if (this.hasAttached()) {
          this._ngZone.runOutsideAngular(() => Promise.resolve().then(() => this.detach()));
        }
      });
    }
    return attachResult;
  }
  /**
   * Detaches an overlay from a portal.
   * @returns The portal detachment result.
   */
  detach() {
    if (!this.hasAttached()) {
      return;
    }
    this.detachBackdrop();
    this._togglePointerEvents(false);
    if (this._positionStrategy && this._positionStrategy.detach) {
      this._positionStrategy.detach();
    }
    if (this._scrollStrategy) {
      this._scrollStrategy.disable();
    }
    const detachmentResult = this._portalOutlet.detach();
    this._detachments.next();
    this._keyboardDispatcher.remove(this);
    this._detachContentWhenStable();
    this._locationChanges.unsubscribe();
    this._outsideClickDispatcher.remove(this);
    return detachmentResult;
  }
  /** Cleans up the overlay from the DOM. */
  dispose() {
    const isAttached = this.hasAttached();
    if (this._positionStrategy) {
      this._positionStrategy.dispose();
    }
    this._disposeScrollStrategy();
    this._disposeBackdrop(this._backdropElement);
    this._locationChanges.unsubscribe();
    this._keyboardDispatcher.remove(this);
    this._portalOutlet.dispose();
    this._attachments.complete();
    this._backdropClick.complete();
    this._keydownEvents.complete();
    this._outsidePointerEvents.complete();
    this._outsideClickDispatcher.remove(this);
    this._host?.remove();
    this._previousHostParent = this._pane = this._host = null;
    if (isAttached) {
      this._detachments.next();
    }
    this._detachments.complete();
  }
  /** Whether the overlay has attached content. */
  hasAttached() {
    return this._portalOutlet.hasAttached();
  }
  /** Gets an observable that emits when the backdrop has been clicked. */
  backdropClick() {
    return this._backdropClick;
  }
  /** Gets an observable that emits when the overlay has been attached. */
  attachments() {
    return this._attachments;
  }
  /** Gets an observable that emits when the overlay has been detached. */
  detachments() {
    return this._detachments;
  }
  /** Gets an observable of keydown events targeted to this overlay. */
  keydownEvents() {
    return this._keydownEvents;
  }
  /** Gets an observable of pointer events targeted outside this overlay. */
  outsidePointerEvents() {
    return this._outsidePointerEvents;
  }
  /** Gets the current overlay configuration, which is immutable. */
  getConfig() {
    return this._config;
  }
  /** Updates the position of the overlay based on the position strategy. */
  updatePosition() {
    if (this._positionStrategy) {
      this._positionStrategy.apply();
    }
  }
  /** Switches to a new position strategy and updates the overlay position. */
  updatePositionStrategy(strategy) {
    if (strategy === this._positionStrategy) {
      return;
    }
    if (this._positionStrategy) {
      this._positionStrategy.dispose();
    }
    this._positionStrategy = strategy;
    if (this.hasAttached()) {
      strategy.attach(this);
      this.updatePosition();
    }
  }
  /** Update the size properties of the overlay. */
  updateSize(sizeConfig) {
    this._config = __spreadValues(__spreadValues({}, this._config), sizeConfig);
    this._updateElementSize();
  }
  /** Sets the LTR/RTL direction for the overlay. */
  setDirection(dir) {
    this._config = __spreadProps(__spreadValues({}, this._config), {
      direction: dir
    });
    this._updateElementDirection();
  }
  /** Add a CSS class or an array of classes to the overlay pane. */
  addPanelClass(classes) {
    if (this._pane) {
      this._toggleClasses(this._pane, classes, true);
    }
  }
  /** Remove a CSS class or an array of classes from the overlay pane. */
  removePanelClass(classes) {
    if (this._pane) {
      this._toggleClasses(this._pane, classes, false);
    }
  }
  /**
   * Returns the layout direction of the overlay panel.
   */
  getDirection() {
    const direction = this._config.direction;
    if (!direction) {
      return "ltr";
    }
    return typeof direction === "string" ? direction : direction.value;
  }
  /** Switches to a new scroll strategy. */
  updateScrollStrategy(strategy) {
    if (strategy === this._scrollStrategy) {
      return;
    }
    this._disposeScrollStrategy();
    this._scrollStrategy = strategy;
    if (this.hasAttached()) {
      strategy.attach(this);
      strategy.enable();
    }
  }
  /** Updates the text direction of the overlay panel. */
  _updateElementDirection() {
    this._host.setAttribute("dir", this.getDirection());
  }
  /** Updates the size of the overlay element based on the overlay config. */
  _updateElementSize() {
    if (!this._pane) {
      return;
    }
    const style2 = this._pane.style;
    style2.width = coerceCssPixelValue(this._config.width);
    style2.height = coerceCssPixelValue(this._config.height);
    style2.minWidth = coerceCssPixelValue(this._config.minWidth);
    style2.minHeight = coerceCssPixelValue(this._config.minHeight);
    style2.maxWidth = coerceCssPixelValue(this._config.maxWidth);
    style2.maxHeight = coerceCssPixelValue(this._config.maxHeight);
  }
  /** Toggles the pointer events for the overlay pane element. */
  _togglePointerEvents(enablePointer) {
    this._pane.style.pointerEvents = enablePointer ? "" : "none";
  }
  /** Attaches a backdrop for this overlay. */
  _attachBackdrop() {
    const showingClass = "cdk-overlay-backdrop-showing";
    this._backdropElement = this._document.createElement("div");
    this._backdropElement.classList.add("cdk-overlay-backdrop");
    if (this._animationsDisabled) {
      this._backdropElement.classList.add("cdk-overlay-backdrop-noop-animation");
    }
    if (this._config.backdropClass) {
      this._toggleClasses(this._backdropElement, this._config.backdropClass, true);
    }
    this._host.parentElement.insertBefore(this._backdropElement, this._host);
    this._backdropElement.addEventListener("click", this._backdropClickHandler);
    if (!this._animationsDisabled && typeof requestAnimationFrame !== "undefined") {
      this._ngZone.runOutsideAngular(() => {
        requestAnimationFrame(() => {
          if (this._backdropElement) {
            this._backdropElement.classList.add(showingClass);
          }
        });
      });
    } else {
      this._backdropElement.classList.add(showingClass);
    }
  }
  /**
   * Updates the stacking order of the element, moving it to the top if necessary.
   * This is required in cases where one overlay was detached, while another one,
   * that should be behind it, was destroyed. The next time both of them are opened,
   * the stacking will be wrong, because the detached element's pane will still be
   * in its original DOM position.
   */
  _updateStackingOrder() {
    if (this._host.nextSibling) {
      this._host.parentNode.appendChild(this._host);
    }
  }
  /** Detaches the backdrop (if any) associated with the overlay. */
  detachBackdrop() {
    const backdropToDetach = this._backdropElement;
    if (!backdropToDetach) {
      return;
    }
    if (this._animationsDisabled) {
      this._disposeBackdrop(backdropToDetach);
      return;
    }
    backdropToDetach.classList.remove("cdk-overlay-backdrop-showing");
    this._ngZone.runOutsideAngular(() => {
      backdropToDetach.addEventListener("transitionend", this._backdropTransitionendHandler);
    });
    backdropToDetach.style.pointerEvents = "none";
    this._backdropTimeout = this._ngZone.runOutsideAngular(() => setTimeout(() => {
      this._disposeBackdrop(backdropToDetach);
    }, 500));
  }
  /** Toggles a single CSS class or an array of classes on an element. */
  _toggleClasses(element, cssClasses, isAdd) {
    const classes = coerceArray(cssClasses || []).filter((c) => !!c);
    if (classes.length) {
      isAdd ? element.classList.add(...classes) : element.classList.remove(...classes);
    }
  }
  /** Detaches the overlay content next time the zone stabilizes. */
  _detachContentWhenStable() {
    this._ngZone.runOutsideAngular(() => {
      const subscription = this._ngZone.onStable.pipe(takeUntil(merge(this._attachments, this._detachments))).subscribe(() => {
        if (!this._pane || !this._host || this._pane.children.length === 0) {
          if (this._pane && this._config.panelClass) {
            this._toggleClasses(this._pane, this._config.panelClass, false);
          }
          if (this._host && this._host.parentElement) {
            this._previousHostParent = this._host.parentElement;
            this._host.remove();
          }
          subscription.unsubscribe();
        }
      });
    });
  }
  /** Disposes of a scroll strategy. */
  _disposeScrollStrategy() {
    const scrollStrategy = this._scrollStrategy;
    if (scrollStrategy) {
      scrollStrategy.disable();
      if (scrollStrategy.detach) {
        scrollStrategy.detach();
      }
    }
  }
  /** Removes a backdrop element from the DOM. */
  _disposeBackdrop(backdrop) {
    if (backdrop) {
      backdrop.removeEventListener("click", this._backdropClickHandler);
      backdrop.removeEventListener("transitionend", this._backdropTransitionendHandler);
      backdrop.remove();
      if (this._backdropElement === backdrop) {
        this._backdropElement = null;
      }
    }
    if (this._backdropTimeout) {
      clearTimeout(this._backdropTimeout);
      this._backdropTimeout = void 0;
    }
  }
};
var boundingBoxClass = "cdk-overlay-connected-position-bounding-box";
var cssUnitPattern = /([A-Za-z%]+)$/;
var FlexibleConnectedPositionStrategy = class {
  /** Ordered list of preferred positions, from most to least desirable. */
  get positions() {
    return this._preferredPositions;
  }
  constructor(connectedTo, _viewportRuler, _document2, _platform, _overlayContainer) {
    this._viewportRuler = _viewportRuler;
    this._document = _document2;
    this._platform = _platform;
    this._overlayContainer = _overlayContainer;
    this._lastBoundingBoxSize = {
      width: 0,
      height: 0
    };
    this._isPushed = false;
    this._canPush = true;
    this._growAfterOpen = false;
    this._hasFlexibleDimensions = true;
    this._positionLocked = false;
    this._viewportMargin = 0;
    this._scrollables = [];
    this._preferredPositions = [];
    this._positionChanges = new Subject();
    this._resizeSubscription = Subscription.EMPTY;
    this._offsetX = 0;
    this._offsetY = 0;
    this._appliedPanelClasses = [];
    this.positionChanges = this._positionChanges;
    this.setOrigin(connectedTo);
  }
  /** Attaches this position strategy to an overlay. */
  attach(overlayRef) {
    if (this._overlayRef && overlayRef !== this._overlayRef && (typeof ngDevMode === "undefined" || ngDevMode)) {
      throw Error("This position strategy is already attached to an overlay");
    }
    this._validatePositions();
    overlayRef.hostElement.classList.add(boundingBoxClass);
    this._overlayRef = overlayRef;
    this._boundingBox = overlayRef.hostElement;
    this._pane = overlayRef.overlayElement;
    this._isDisposed = false;
    this._isInitialRender = true;
    this._lastPosition = null;
    this._resizeSubscription.unsubscribe();
    this._resizeSubscription = this._viewportRuler.change().subscribe(() => {
      this._isInitialRender = true;
      this.apply();
    });
  }
  /**
   * Updates the position of the overlay element, using whichever preferred position relative
   * to the origin best fits on-screen.
   *
   * The selection of a position goes as follows:
   *  - If any positions fit completely within the viewport as-is,
   *      choose the first position that does so.
   *  - If flexible dimensions are enabled and at least one satisfies the given minimum width/height,
   *      choose the position with the greatest available size modified by the positions' weight.
   *  - If pushing is enabled, take the position that went off-screen the least and push it
   *      on-screen.
   *  - If none of the previous criteria were met, use the position that goes off-screen the least.
   * @docs-private
   */
  apply() {
    if (this._isDisposed || !this._platform.isBrowser) {
      return;
    }
    if (!this._isInitialRender && this._positionLocked && this._lastPosition) {
      this.reapplyLastPosition();
      return;
    }
    this._clearPanelClasses();
    this._resetOverlayElementStyles();
    this._resetBoundingBoxStyles();
    this._viewportRect = this._getNarrowedViewportRect();
    this._originRect = this._getOriginRect();
    this._overlayRect = this._pane.getBoundingClientRect();
    this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();
    const originRect = this._originRect;
    const overlayRect = this._overlayRect;
    const viewportRect = this._viewportRect;
    const containerRect = this._containerRect;
    const flexibleFits = [];
    let fallback;
    for (let pos of this._preferredPositions) {
      let originPoint = this._getOriginPoint(originRect, containerRect, pos);
      let overlayPoint = this._getOverlayPoint(originPoint, overlayRect, pos);
      let overlayFit = this._getOverlayFit(overlayPoint, overlayRect, viewportRect, pos);
      if (overlayFit.isCompletelyWithinViewport) {
        this._isPushed = false;
        this._applyPosition(pos, originPoint);
        return;
      }
      if (this._canFitWithFlexibleDimensions(overlayFit, overlayPoint, viewportRect)) {
        flexibleFits.push({
          position: pos,
          origin: originPoint,
          overlayRect,
          boundingBoxRect: this._calculateBoundingBoxRect(originPoint, pos)
        });
        continue;
      }
      if (!fallback || fallback.overlayFit.visibleArea < overlayFit.visibleArea) {
        fallback = {
          overlayFit,
          overlayPoint,
          originPoint,
          position: pos,
          overlayRect
        };
      }
    }
    if (flexibleFits.length) {
      let bestFit = null;
      let bestScore = -1;
      for (const fit of flexibleFits) {
        const score = fit.boundingBoxRect.width * fit.boundingBoxRect.height * (fit.position.weight || 1);
        if (score > bestScore) {
          bestScore = score;
          bestFit = fit;
        }
      }
      this._isPushed = false;
      this._applyPosition(bestFit.position, bestFit.origin);
      return;
    }
    if (this._canPush) {
      this._isPushed = true;
      this._applyPosition(fallback.position, fallback.originPoint);
      return;
    }
    this._applyPosition(fallback.position, fallback.originPoint);
  }
  detach() {
    this._clearPanelClasses();
    this._lastPosition = null;
    this._previousPushAmount = null;
    this._resizeSubscription.unsubscribe();
  }
  /** Cleanup after the element gets destroyed. */
  dispose() {
    if (this._isDisposed) {
      return;
    }
    if (this._boundingBox) {
      extendStyles(this._boundingBox.style, {
        top: "",
        left: "",
        right: "",
        bottom: "",
        height: "",
        width: "",
        alignItems: "",
        justifyContent: ""
      });
    }
    if (this._pane) {
      this._resetOverlayElementStyles();
    }
    if (this._overlayRef) {
      this._overlayRef.hostElement.classList.remove(boundingBoxClass);
    }
    this.detach();
    this._positionChanges.complete();
    this._overlayRef = this._boundingBox = null;
    this._isDisposed = true;
  }
  /**
   * This re-aligns the overlay element with the trigger in its last calculated position,
   * even if a position higher in the "preferred positions" list would now fit. This
   * allows one to re-align the panel without changing the orientation of the panel.
   */
  reapplyLastPosition() {
    if (this._isDisposed || !this._platform.isBrowser) {
      return;
    }
    const lastPosition = this._lastPosition;
    if (lastPosition) {
      this._originRect = this._getOriginRect();
      this._overlayRect = this._pane.getBoundingClientRect();
      this._viewportRect = this._getNarrowedViewportRect();
      this._containerRect = this._overlayContainer.getContainerElement().getBoundingClientRect();
      const originPoint = this._getOriginPoint(this._originRect, this._containerRect, lastPosition);
      this._applyPosition(lastPosition, originPoint);
    } else {
      this.apply();
    }
  }
  /**
   * Sets the list of Scrollable containers that host the origin element so that
   * on reposition we can evaluate if it or the overlay has been clipped or outside view. Every
   * Scrollable must be an ancestor element of the strategy's origin element.
   */
  withScrollableContainers(scrollables) {
    this._scrollables = scrollables;
    return this;
  }
  /**
   * Adds new preferred positions.
   * @param positions List of positions options for this overlay.
   */
  withPositions(positions) {
    this._preferredPositions = positions;
    if (positions.indexOf(this._lastPosition) === -1) {
      this._lastPosition = null;
    }
    this._validatePositions();
    return this;
  }
  /**
   * Sets a minimum distance the overlay may be positioned to the edge of the viewport.
   * @param margin Required margin between the overlay and the viewport edge in pixels.
   */
  withViewportMargin(margin) {
    this._viewportMargin = margin;
    return this;
  }
  /** Sets whether the overlay's width and height can be constrained to fit within the viewport. */
  withFlexibleDimensions(flexibleDimensions = true) {
    this._hasFlexibleDimensions = flexibleDimensions;
    return this;
  }
  /** Sets whether the overlay can grow after the initial open via flexible width/height. */
  withGrowAfterOpen(growAfterOpen = true) {
    this._growAfterOpen = growAfterOpen;
    return this;
  }
  /** Sets whether the overlay can be pushed on-screen if none of the provided positions fit. */
  withPush(canPush = true) {
    this._canPush = canPush;
    return this;
  }
  /**
   * Sets whether the overlay's position should be locked in after it is positioned
   * initially. When an overlay is locked in, it won't attempt to reposition itself
   * when the position is re-applied (e.g. when the user scrolls away).
   * @param isLocked Whether the overlay should locked in.
   */
  withLockedPosition(isLocked = true) {
    this._positionLocked = isLocked;
    return this;
  }
  /**
   * Sets the origin, relative to which to position the overlay.
   * Using an element origin is useful for building components that need to be positioned
   * relatively to a trigger (e.g. dropdown menus or tooltips), whereas using a point can be
   * used for cases like contextual menus which open relative to the user's pointer.
   * @param origin Reference to the new origin.
   */
  setOrigin(origin) {
    this._origin = origin;
    return this;
  }
  /**
   * Sets the default offset for the overlay's connection point on the x-axis.
   * @param offset New offset in the X axis.
   */
  withDefaultOffsetX(offset) {
    this._offsetX = offset;
    return this;
  }
  /**
   * Sets the default offset for the overlay's connection point on the y-axis.
   * @param offset New offset in the Y axis.
   */
  withDefaultOffsetY(offset) {
    this._offsetY = offset;
    return this;
  }
  /**
   * Configures that the position strategy should set a `transform-origin` on some elements
   * inside the overlay, depending on the current position that is being applied. This is
   * useful for the cases where the origin of an animation can change depending on the
   * alignment of the overlay.
   * @param selector CSS selector that will be used to find the target
   *    elements onto which to set the transform origin.
   */
  withTransformOriginOn(selector) {
    this._transformOriginSelector = selector;
    return this;
  }
  /**
   * Gets the (x, y) coordinate of a connection point on the origin based on a relative position.
   */
  _getOriginPoint(originRect, containerRect, pos) {
    let x;
    if (pos.originX == "center") {
      x = originRect.left + originRect.width / 2;
    } else {
      const startX = this._isRtl() ? originRect.right : originRect.left;
      const endX = this._isRtl() ? originRect.left : originRect.right;
      x = pos.originX == "start" ? startX : endX;
    }
    if (containerRect.left < 0) {
      x -= containerRect.left;
    }
    let y;
    if (pos.originY == "center") {
      y = originRect.top + originRect.height / 2;
    } else {
      y = pos.originY == "top" ? originRect.top : originRect.bottom;
    }
    if (containerRect.top < 0) {
      y -= containerRect.top;
    }
    return {
      x,
      y
    };
  }
  /**
   * Gets the (x, y) coordinate of the top-left corner of the overlay given a given position and
   * origin point to which the overlay should be connected.
   */
  _getOverlayPoint(originPoint, overlayRect, pos) {
    let overlayStartX;
    if (pos.overlayX == "center") {
      overlayStartX = -overlayRect.width / 2;
    } else if (pos.overlayX === "start") {
      overlayStartX = this._isRtl() ? -overlayRect.width : 0;
    } else {
      overlayStartX = this._isRtl() ? 0 : -overlayRect.width;
    }
    let overlayStartY;
    if (pos.overlayY == "center") {
      overlayStartY = -overlayRect.height / 2;
    } else {
      overlayStartY = pos.overlayY == "top" ? 0 : -overlayRect.height;
    }
    return {
      x: originPoint.x + overlayStartX,
      y: originPoint.y + overlayStartY
    };
  }
  /** Gets how well an overlay at the given point will fit within the viewport. */
  _getOverlayFit(point, rawOverlayRect, viewport, position) {
    const overlay = getRoundedBoundingClientRect(rawOverlayRect);
    let {
      x,
      y
    } = point;
    let offsetX = this._getOffset(position, "x");
    let offsetY = this._getOffset(position, "y");
    if (offsetX) {
      x += offsetX;
    }
    if (offsetY) {
      y += offsetY;
    }
    let leftOverflow = 0 - x;
    let rightOverflow = x + overlay.width - viewport.width;
    let topOverflow = 0 - y;
    let bottomOverflow = y + overlay.height - viewport.height;
    let visibleWidth = this._subtractOverflows(overlay.width, leftOverflow, rightOverflow);
    let visibleHeight = this._subtractOverflows(overlay.height, topOverflow, bottomOverflow);
    let visibleArea = visibleWidth * visibleHeight;
    return {
      visibleArea,
      isCompletelyWithinViewport: overlay.width * overlay.height === visibleArea,
      fitsInViewportVertically: visibleHeight === overlay.height,
      fitsInViewportHorizontally: visibleWidth == overlay.width
    };
  }
  /**
   * Whether the overlay can fit within the viewport when it may resize either its width or height.
   * @param fit How well the overlay fits in the viewport at some position.
   * @param point The (x, y) coordinates of the overlay at some position.
   * @param viewport The geometry of the viewport.
   */
  _canFitWithFlexibleDimensions(fit, point, viewport) {
    if (this._hasFlexibleDimensions) {
      const availableHeight = viewport.bottom - point.y;
      const availableWidth = viewport.right - point.x;
      const minHeight = getPixelValue(this._overlayRef.getConfig().minHeight);
      const minWidth = getPixelValue(this._overlayRef.getConfig().minWidth);
      const verticalFit = fit.fitsInViewportVertically || minHeight != null && minHeight <= availableHeight;
      const horizontalFit = fit.fitsInViewportHorizontally || minWidth != null && minWidth <= availableWidth;
      return verticalFit && horizontalFit;
    }
    return false;
  }
  /**
   * Gets the point at which the overlay can be "pushed" on-screen. If the overlay is larger than
   * the viewport, the top-left corner will be pushed on-screen (with overflow occurring on the
   * right and bottom).
   *
   * @param start Starting point from which the overlay is pushed.
   * @param rawOverlayRect Dimensions of the overlay.
   * @param scrollPosition Current viewport scroll position.
   * @returns The point at which to position the overlay after pushing. This is effectively a new
   *     originPoint.
   */
  _pushOverlayOnScreen(start, rawOverlayRect, scrollPosition) {
    if (this._previousPushAmount && this._positionLocked) {
      return {
        x: start.x + this._previousPushAmount.x,
        y: start.y + this._previousPushAmount.y
      };
    }
    const overlay = getRoundedBoundingClientRect(rawOverlayRect);
    const viewport = this._viewportRect;
    const overflowRight = Math.max(start.x + overlay.width - viewport.width, 0);
    const overflowBottom = Math.max(start.y + overlay.height - viewport.height, 0);
    const overflowTop = Math.max(viewport.top - scrollPosition.top - start.y, 0);
    const overflowLeft = Math.max(viewport.left - scrollPosition.left - start.x, 0);
    let pushX = 0;
    let pushY = 0;
    if (overlay.width <= viewport.width) {
      pushX = overflowLeft || -overflowRight;
    } else {
      pushX = start.x < this._viewportMargin ? viewport.left - scrollPosition.left - start.x : 0;
    }
    if (overlay.height <= viewport.height) {
      pushY = overflowTop || -overflowBottom;
    } else {
      pushY = start.y < this._viewportMargin ? viewport.top - scrollPosition.top - start.y : 0;
    }
    this._previousPushAmount = {
      x: pushX,
      y: pushY
    };
    return {
      x: start.x + pushX,
      y: start.y + pushY
    };
  }
  /**
   * Applies a computed position to the overlay and emits a position change.
   * @param position The position preference
   * @param originPoint The point on the origin element where the overlay is connected.
   */
  _applyPosition(position, originPoint) {
    this._setTransformOrigin(position);
    this._setOverlayElementStyles(originPoint, position);
    this._setBoundingBoxStyles(originPoint, position);
    if (position.panelClass) {
      this._addPanelClasses(position.panelClass);
    }
    this._lastPosition = position;
    if (this._positionChanges.observers.length) {
      const scrollableViewProperties = this._getScrollVisibility();
      const changeEvent = new ConnectedOverlayPositionChange(position, scrollableViewProperties);
      this._positionChanges.next(changeEvent);
    }
    this._isInitialRender = false;
  }
  /** Sets the transform origin based on the configured selector and the passed-in position.  */
  _setTransformOrigin(position) {
    if (!this._transformOriginSelector) {
      return;
    }
    const elements = this._boundingBox.querySelectorAll(this._transformOriginSelector);
    let xOrigin;
    let yOrigin = position.overlayY;
    if (position.overlayX === "center") {
      xOrigin = "center";
    } else if (this._isRtl()) {
      xOrigin = position.overlayX === "start" ? "right" : "left";
    } else {
      xOrigin = position.overlayX === "start" ? "left" : "right";
    }
    for (let i = 0; i < elements.length; i++) {
      elements[i].style.transformOrigin = `${xOrigin} ${yOrigin}`;
    }
  }
  /**
   * Gets the position and size of the overlay's sizing container.
   *
   * This method does no measuring and applies no styles so that we can cheaply compute the
   * bounds for all positions and choose the best fit based on these results.
   */
  _calculateBoundingBoxRect(origin, position) {
    const viewport = this._viewportRect;
    const isRtl = this._isRtl();
    let height, top, bottom;
    if (position.overlayY === "top") {
      top = origin.y;
      height = viewport.height - top + this._viewportMargin;
    } else if (position.overlayY === "bottom") {
      bottom = viewport.height - origin.y + this._viewportMargin * 2;
      height = viewport.height - bottom + this._viewportMargin;
    } else {
      const smallestDistanceToViewportEdge = Math.min(viewport.bottom - origin.y + viewport.top, origin.y);
      const previousHeight = this._lastBoundingBoxSize.height;
      height = smallestDistanceToViewportEdge * 2;
      top = origin.y - smallestDistanceToViewportEdge;
      if (height > previousHeight && !this._isInitialRender && !this._growAfterOpen) {
        top = origin.y - previousHeight / 2;
      }
    }
    const isBoundedByRightViewportEdge = position.overlayX === "start" && !isRtl || position.overlayX === "end" && isRtl;
    const isBoundedByLeftViewportEdge = position.overlayX === "end" && !isRtl || position.overlayX === "start" && isRtl;
    let width, left, right;
    if (isBoundedByLeftViewportEdge) {
      right = viewport.width - origin.x + this._viewportMargin;
      width = origin.x - this._viewportMargin;
    } else if (isBoundedByRightViewportEdge) {
      left = origin.x;
      width = viewport.right - origin.x;
    } else {
      const smallestDistanceToViewportEdge = Math.min(viewport.right - origin.x + viewport.left, origin.x);
      const previousWidth = this._lastBoundingBoxSize.width;
      width = smallestDistanceToViewportEdge * 2;
      left = origin.x - smallestDistanceToViewportEdge;
      if (width > previousWidth && !this._isInitialRender && !this._growAfterOpen) {
        left = origin.x - previousWidth / 2;
      }
    }
    return {
      top,
      left,
      bottom,
      right,
      width,
      height
    };
  }
  /**
   * Sets the position and size of the overlay's sizing wrapper. The wrapper is positioned on the
   * origin's connection point and stretches to the bounds of the viewport.
   *
   * @param origin The point on the origin element where the overlay is connected.
   * @param position The position preference
   */
  _setBoundingBoxStyles(origin, position) {
    const boundingBoxRect = this._calculateBoundingBoxRect(origin, position);
    if (!this._isInitialRender && !this._growAfterOpen) {
      boundingBoxRect.height = Math.min(boundingBoxRect.height, this._lastBoundingBoxSize.height);
      boundingBoxRect.width = Math.min(boundingBoxRect.width, this._lastBoundingBoxSize.width);
    }
    const styles = {};
    if (this._hasExactPosition()) {
      styles.top = styles.left = "0";
      styles.bottom = styles.right = styles.maxHeight = styles.maxWidth = "";
      styles.width = styles.height = "100%";
    } else {
      const maxHeight = this._overlayRef.getConfig().maxHeight;
      const maxWidth = this._overlayRef.getConfig().maxWidth;
      styles.height = coerceCssPixelValue(boundingBoxRect.height);
      styles.top = coerceCssPixelValue(boundingBoxRect.top);
      styles.bottom = coerceCssPixelValue(boundingBoxRect.bottom);
      styles.width = coerceCssPixelValue(boundingBoxRect.width);
      styles.left = coerceCssPixelValue(boundingBoxRect.left);
      styles.right = coerceCssPixelValue(boundingBoxRect.right);
      if (position.overlayX === "center") {
        styles.alignItems = "center";
      } else {
        styles.alignItems = position.overlayX === "end" ? "flex-end" : "flex-start";
      }
      if (position.overlayY === "center") {
        styles.justifyContent = "center";
      } else {
        styles.justifyContent = position.overlayY === "bottom" ? "flex-end" : "flex-start";
      }
      if (maxHeight) {
        styles.maxHeight = coerceCssPixelValue(maxHeight);
      }
      if (maxWidth) {
        styles.maxWidth = coerceCssPixelValue(maxWidth);
      }
    }
    this._lastBoundingBoxSize = boundingBoxRect;
    extendStyles(this._boundingBox.style, styles);
  }
  /** Resets the styles for the bounding box so that a new positioning can be computed. */
  _resetBoundingBoxStyles() {
    extendStyles(this._boundingBox.style, {
      top: "0",
      left: "0",
      right: "0",
      bottom: "0",
      height: "",
      width: "",
      alignItems: "",
      justifyContent: ""
    });
  }
  /** Resets the styles for the overlay pane so that a new positioning can be computed. */
  _resetOverlayElementStyles() {
    extendStyles(this._pane.style, {
      top: "",
      left: "",
      bottom: "",
      right: "",
      position: "",
      transform: ""
    });
  }
  /** Sets positioning styles to the overlay element. */
  _setOverlayElementStyles(originPoint, position) {
    const styles = {};
    const hasExactPosition = this._hasExactPosition();
    const hasFlexibleDimensions = this._hasFlexibleDimensions;
    const config2 = this._overlayRef.getConfig();
    if (hasExactPosition) {
      const scrollPosition = this._viewportRuler.getViewportScrollPosition();
      extendStyles(styles, this._getExactOverlayY(position, originPoint, scrollPosition));
      extendStyles(styles, this._getExactOverlayX(position, originPoint, scrollPosition));
    } else {
      styles.position = "static";
    }
    let transformString = "";
    let offsetX = this._getOffset(position, "x");
    let offsetY = this._getOffset(position, "y");
    if (offsetX) {
      transformString += `translateX(${offsetX}px) `;
    }
    if (offsetY) {
      transformString += `translateY(${offsetY}px)`;
    }
    styles.transform = transformString.trim();
    if (config2.maxHeight) {
      if (hasExactPosition) {
        styles.maxHeight = coerceCssPixelValue(config2.maxHeight);
      } else if (hasFlexibleDimensions) {
        styles.maxHeight = "";
      }
    }
    if (config2.maxWidth) {
      if (hasExactPosition) {
        styles.maxWidth = coerceCssPixelValue(config2.maxWidth);
      } else if (hasFlexibleDimensions) {
        styles.maxWidth = "";
      }
    }
    extendStyles(this._pane.style, styles);
  }
  /** Gets the exact top/bottom for the overlay when not using flexible sizing or when pushing. */
  _getExactOverlayY(position, originPoint, scrollPosition) {
    let styles = {
      top: "",
      bottom: ""
    };
    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);
    if (this._isPushed) {
      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);
    }
    if (position.overlayY === "bottom") {
      const documentHeight = this._document.documentElement.clientHeight;
      styles.bottom = `${documentHeight - (overlayPoint.y + this._overlayRect.height)}px`;
    } else {
      styles.top = coerceCssPixelValue(overlayPoint.y);
    }
    return styles;
  }
  /** Gets the exact left/right for the overlay when not using flexible sizing or when pushing. */
  _getExactOverlayX(position, originPoint, scrollPosition) {
    let styles = {
      left: "",
      right: ""
    };
    let overlayPoint = this._getOverlayPoint(originPoint, this._overlayRect, position);
    if (this._isPushed) {
      overlayPoint = this._pushOverlayOnScreen(overlayPoint, this._overlayRect, scrollPosition);
    }
    let horizontalStyleProperty;
    if (this._isRtl()) {
      horizontalStyleProperty = position.overlayX === "end" ? "left" : "right";
    } else {
      horizontalStyleProperty = position.overlayX === "end" ? "right" : "left";
    }
    if (horizontalStyleProperty === "right") {
      const documentWidth = this._document.documentElement.clientWidth;
      styles.right = `${documentWidth - (overlayPoint.x + this._overlayRect.width)}px`;
    } else {
      styles.left = coerceCssPixelValue(overlayPoint.x);
    }
    return styles;
  }
  /**
   * Gets the view properties of the trigger and overlay, including whether they are clipped
   * or completely outside the view of any of the strategy's scrollables.
   */
  _getScrollVisibility() {
    const originBounds = this._getOriginRect();
    const overlayBounds = this._pane.getBoundingClientRect();
    const scrollContainerBounds = this._scrollables.map((scrollable) => {
      return scrollable.getElementRef().nativeElement.getBoundingClientRect();
    });
    return {
      isOriginClipped: isElementClippedByScrolling(originBounds, scrollContainerBounds),
      isOriginOutsideView: isElementScrolledOutsideView(originBounds, scrollContainerBounds),
      isOverlayClipped: isElementClippedByScrolling(overlayBounds, scrollContainerBounds),
      isOverlayOutsideView: isElementScrolledOutsideView(overlayBounds, scrollContainerBounds)
    };
  }
  /** Subtracts the amount that an element is overflowing on an axis from its length. */
  _subtractOverflows(length, ...overflows) {
    return overflows.reduce((currentValue, currentOverflow) => {
      return currentValue - Math.max(currentOverflow, 0);
    }, length);
  }
  /** Narrows the given viewport rect by the current _viewportMargin. */
  _getNarrowedViewportRect() {
    const width = this._document.documentElement.clientWidth;
    const height = this._document.documentElement.clientHeight;
    const scrollPosition = this._viewportRuler.getViewportScrollPosition();
    return {
      top: scrollPosition.top + this._viewportMargin,
      left: scrollPosition.left + this._viewportMargin,
      right: scrollPosition.left + width - this._viewportMargin,
      bottom: scrollPosition.top + height - this._viewportMargin,
      width: width - 2 * this._viewportMargin,
      height: height - 2 * this._viewportMargin
    };
  }
  /** Whether the we're dealing with an RTL context */
  _isRtl() {
    return this._overlayRef.getDirection() === "rtl";
  }
  /** Determines whether the overlay uses exact or flexible positioning. */
  _hasExactPosition() {
    return !this._hasFlexibleDimensions || this._isPushed;
  }
  /** Retrieves the offset of a position along the x or y axis. */
  _getOffset(position, axis) {
    if (axis === "x") {
      return position.offsetX == null ? this._offsetX : position.offsetX;
    }
    return position.offsetY == null ? this._offsetY : position.offsetY;
  }
  /** Validates that the current position match the expected values. */
  _validatePositions() {
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      if (!this._preferredPositions.length) {
        throw Error("FlexibleConnectedPositionStrategy: At least one position is required.");
      }
      this._preferredPositions.forEach((pair) => {
        validateHorizontalPosition("originX", pair.originX);
        validateVerticalPosition("originY", pair.originY);
        validateHorizontalPosition("overlayX", pair.overlayX);
        validateVerticalPosition("overlayY", pair.overlayY);
      });
    }
  }
  /** Adds a single CSS class or an array of classes on the overlay panel. */
  _addPanelClasses(cssClasses) {
    if (this._pane) {
      coerceArray(cssClasses).forEach((cssClass) => {
        if (cssClass !== "" && this._appliedPanelClasses.indexOf(cssClass) === -1) {
          this._appliedPanelClasses.push(cssClass);
          this._pane.classList.add(cssClass);
        }
      });
    }
  }
  /** Clears the classes that the position strategy has applied from the overlay panel. */
  _clearPanelClasses() {
    if (this._pane) {
      this._appliedPanelClasses.forEach((cssClass) => {
        this._pane.classList.remove(cssClass);
      });
      this._appliedPanelClasses = [];
    }
  }
  /** Returns the ClientRect of the current origin. */
  _getOriginRect() {
    const origin = this._origin;
    if (origin instanceof ElementRef) {
      return origin.nativeElement.getBoundingClientRect();
    }
    if (origin instanceof Element) {
      return origin.getBoundingClientRect();
    }
    const width = origin.width || 0;
    const height = origin.height || 0;
    return {
      top: origin.y,
      bottom: origin.y + height,
      left: origin.x,
      right: origin.x + width,
      height,
      width
    };
  }
};
function extendStyles(destination, source) {
  for (let key in source) {
    if (source.hasOwnProperty(key)) {
      destination[key] = source[key];
    }
  }
  return destination;
}
function getPixelValue(input) {
  if (typeof input !== "number" && input != null) {
    const [value, units] = input.split(cssUnitPattern);
    return !units || units === "px" ? parseFloat(value) : null;
  }
  return input || null;
}
function getRoundedBoundingClientRect(clientRect) {
  return {
    top: Math.floor(clientRect.top),
    right: Math.floor(clientRect.right),
    bottom: Math.floor(clientRect.bottom),
    left: Math.floor(clientRect.left),
    width: Math.floor(clientRect.width),
    height: Math.floor(clientRect.height)
  };
}
var wrapperClass = "cdk-global-overlay-wrapper";
var GlobalPositionStrategy = class {
  constructor() {
    this._cssPosition = "static";
    this._topOffset = "";
    this._bottomOffset = "";
    this._alignItems = "";
    this._xPosition = "";
    this._xOffset = "";
    this._width = "";
    this._height = "";
    this._isDisposed = false;
  }
  attach(overlayRef) {
    const config2 = overlayRef.getConfig();
    this._overlayRef = overlayRef;
    if (this._width && !config2.width) {
      overlayRef.updateSize({
        width: this._width
      });
    }
    if (this._height && !config2.height) {
      overlayRef.updateSize({
        height: this._height
      });
    }
    overlayRef.hostElement.classList.add(wrapperClass);
    this._isDisposed = false;
  }
  /**
   * Sets the top position of the overlay. Clears any previously set vertical position.
   * @param value New top offset.
   */
  top(value = "") {
    this._bottomOffset = "";
    this._topOffset = value;
    this._alignItems = "flex-start";
    return this;
  }
  /**
   * Sets the left position of the overlay. Clears any previously set horizontal position.
   * @param value New left offset.
   */
  left(value = "") {
    this._xOffset = value;
    this._xPosition = "left";
    return this;
  }
  /**
   * Sets the bottom position of the overlay. Clears any previously set vertical position.
   * @param value New bottom offset.
   */
  bottom(value = "") {
    this._topOffset = "";
    this._bottomOffset = value;
    this._alignItems = "flex-end";
    return this;
  }
  /**
   * Sets the right position of the overlay. Clears any previously set horizontal position.
   * @param value New right offset.
   */
  right(value = "") {
    this._xOffset = value;
    this._xPosition = "right";
    return this;
  }
  /**
   * Sets the overlay to the start of the viewport, depending on the overlay direction.
   * This will be to the left in LTR layouts and to the right in RTL.
   * @param offset Offset from the edge of the screen.
   */
  start(value = "") {
    this._xOffset = value;
    this._xPosition = "start";
    return this;
  }
  /**
   * Sets the overlay to the end of the viewport, depending on the overlay direction.
   * This will be to the right in LTR layouts and to the left in RTL.
   * @param offset Offset from the edge of the screen.
   */
  end(value = "") {
    this._xOffset = value;
    this._xPosition = "end";
    return this;
  }
  /**
   * Sets the overlay width and clears any previously set width.
   * @param value New width for the overlay
   * @deprecated Pass the `width` through the `OverlayConfig`.
   * @breaking-change 8.0.0
   */
  width(value = "") {
    if (this._overlayRef) {
      this._overlayRef.updateSize({
        width: value
      });
    } else {
      this._width = value;
    }
    return this;
  }
  /**
   * Sets the overlay height and clears any previously set height.
   * @param value New height for the overlay
   * @deprecated Pass the `height` through the `OverlayConfig`.
   * @breaking-change 8.0.0
   */
  height(value = "") {
    if (this._overlayRef) {
      this._overlayRef.updateSize({
        height: value
      });
    } else {
      this._height = value;
    }
    return this;
  }
  /**
   * Centers the overlay horizontally with an optional offset.
   * Clears any previously set horizontal position.
   *
   * @param offset Overlay offset from the horizontal center.
   */
  centerHorizontally(offset = "") {
    this.left(offset);
    this._xPosition = "center";
    return this;
  }
  /**
   * Centers the overlay vertically with an optional offset.
   * Clears any previously set vertical position.
   *
   * @param offset Overlay offset from the vertical center.
   */
  centerVertically(offset = "") {
    this.top(offset);
    this._alignItems = "center";
    return this;
  }
  /**
   * Apply the position to the element.
   * @docs-private
   */
  apply() {
    if (!this._overlayRef || !this._overlayRef.hasAttached()) {
      return;
    }
    const styles = this._overlayRef.overlayElement.style;
    const parentStyles = this._overlayRef.hostElement.style;
    const config2 = this._overlayRef.getConfig();
    const {
      width,
      height,
      maxWidth,
      maxHeight
    } = config2;
    const shouldBeFlushHorizontally = (width === "100%" || width === "100vw") && (!maxWidth || maxWidth === "100%" || maxWidth === "100vw");
    const shouldBeFlushVertically = (height === "100%" || height === "100vh") && (!maxHeight || maxHeight === "100%" || maxHeight === "100vh");
    const xPosition = this._xPosition;
    const xOffset = this._xOffset;
    const isRtl = this._overlayRef.getConfig().direction === "rtl";
    let marginLeft = "";
    let marginRight = "";
    let justifyContent = "";
    if (shouldBeFlushHorizontally) {
      justifyContent = "flex-start";
    } else if (xPosition === "center") {
      justifyContent = "center";
      if (isRtl) {
        marginRight = xOffset;
      } else {
        marginLeft = xOffset;
      }
    } else if (isRtl) {
      if (xPosition === "left" || xPosition === "end") {
        justifyContent = "flex-end";
        marginLeft = xOffset;
      } else if (xPosition === "right" || xPosition === "start") {
        justifyContent = "flex-start";
        marginRight = xOffset;
      }
    } else if (xPosition === "left" || xPosition === "start") {
      justifyContent = "flex-start";
      marginLeft = xOffset;
    } else if (xPosition === "right" || xPosition === "end") {
      justifyContent = "flex-end";
      marginRight = xOffset;
    }
    styles.position = this._cssPosition;
    styles.marginLeft = shouldBeFlushHorizontally ? "0" : marginLeft;
    styles.marginTop = shouldBeFlushVertically ? "0" : this._topOffset;
    styles.marginBottom = this._bottomOffset;
    styles.marginRight = shouldBeFlushHorizontally ? "0" : marginRight;
    parentStyles.justifyContent = justifyContent;
    parentStyles.alignItems = shouldBeFlushVertically ? "flex-start" : this._alignItems;
  }
  /**
   * Cleans up the DOM changes from the position strategy.
   * @docs-private
   */
  dispose() {
    if (this._isDisposed || !this._overlayRef) {
      return;
    }
    const styles = this._overlayRef.overlayElement.style;
    const parent = this._overlayRef.hostElement;
    const parentStyles = parent.style;
    parent.classList.remove(wrapperClass);
    parentStyles.justifyContent = parentStyles.alignItems = styles.marginTop = styles.marginBottom = styles.marginLeft = styles.marginRight = styles.position = "";
    this._overlayRef = null;
    this._isDisposed = true;
  }
};
var _OverlayPositionBuilder = class _OverlayPositionBuilder {
  constructor(_viewportRuler, _document2, _platform, _overlayContainer) {
    this._viewportRuler = _viewportRuler;
    this._document = _document2;
    this._platform = _platform;
    this._overlayContainer = _overlayContainer;
  }
  /**
   * Creates a global position strategy.
   */
  global() {
    return new GlobalPositionStrategy();
  }
  /**
   * Creates a flexible position strategy.
   * @param origin Origin relative to which to position the overlay.
   */
  flexibleConnectedTo(origin) {
    return new FlexibleConnectedPositionStrategy(origin, this._viewportRuler, this._document, this._platform, this._overlayContainer);
  }
};
_OverlayPositionBuilder.\u0275fac = function OverlayPositionBuilder_Factory(t) {
  return new (t || _OverlayPositionBuilder)(\u0275\u0275inject(ViewportRuler), \u0275\u0275inject(DOCUMENT2), \u0275\u0275inject(Platform), \u0275\u0275inject(OverlayContainer));
};
_OverlayPositionBuilder.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _OverlayPositionBuilder,
  factory: _OverlayPositionBuilder.\u0275fac,
  providedIn: "root"
});
var OverlayPositionBuilder = _OverlayPositionBuilder;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(OverlayPositionBuilder, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: ViewportRuler
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }, {
    type: Platform
  }, {
    type: OverlayContainer
  }], null);
})();
var nextUniqueId = 0;
var _Overlay = class _Overlay {
  constructor(scrollStrategies, _overlayContainer, _componentFactoryResolver, _positionBuilder, _keyboardDispatcher, _injector, _ngZone, _document2, _directionality, _location, _outsideClickDispatcher, _animationsModuleType) {
    this.scrollStrategies = scrollStrategies;
    this._overlayContainer = _overlayContainer;
    this._componentFactoryResolver = _componentFactoryResolver;
    this._positionBuilder = _positionBuilder;
    this._keyboardDispatcher = _keyboardDispatcher;
    this._injector = _injector;
    this._ngZone = _ngZone;
    this._document = _document2;
    this._directionality = _directionality;
    this._location = _location;
    this._outsideClickDispatcher = _outsideClickDispatcher;
    this._animationsModuleType = _animationsModuleType;
  }
  /**
   * Creates an overlay.
   * @param config Configuration applied to the overlay.
   * @returns Reference to the created overlay.
   */
  create(config2) {
    const host = this._createHostElement();
    const pane = this._createPaneElement(host);
    const portalOutlet = this._createPortalOutlet(pane);
    const overlayConfig = new OverlayConfig(config2);
    overlayConfig.direction = overlayConfig.direction || this._directionality.value;
    return new OverlayRef(portalOutlet, host, pane, overlayConfig, this._ngZone, this._keyboardDispatcher, this._document, this._location, this._outsideClickDispatcher, this._animationsModuleType === "NoopAnimations");
  }
  /**
   * Gets a position builder that can be used, via fluent API,
   * to construct and configure a position strategy.
   * @returns An overlay position builder.
   */
  position() {
    return this._positionBuilder;
  }
  /**
   * Creates the DOM element for an overlay and appends it to the overlay container.
   * @returns Newly-created pane element
   */
  _createPaneElement(host) {
    const pane = this._document.createElement("div");
    pane.id = `cdk-overlay-${nextUniqueId++}`;
    pane.classList.add("cdk-overlay-pane");
    host.appendChild(pane);
    return pane;
  }
  /**
   * Creates the host element that wraps around an overlay
   * and can be used for advanced positioning.
   * @returns Newly-create host element.
   */
  _createHostElement() {
    const host = this._document.createElement("div");
    this._overlayContainer.getContainerElement().appendChild(host);
    return host;
  }
  /**
   * Create a DomPortalOutlet into which the overlay content can be loaded.
   * @param pane The DOM element to turn into a portal outlet.
   * @returns A portal outlet for the given DOM element.
   */
  _createPortalOutlet(pane) {
    if (!this._appRef) {
      this._appRef = this._injector.get(ApplicationRef);
    }
    return new DomPortalOutlet(pane, this._componentFactoryResolver, this._appRef, this._injector, this._document);
  }
};
_Overlay.\u0275fac = function Overlay_Factory(t) {
  return new (t || _Overlay)(\u0275\u0275inject(ScrollStrategyOptions), \u0275\u0275inject(OverlayContainer), \u0275\u0275inject(ComponentFactoryResolver$1), \u0275\u0275inject(OverlayPositionBuilder), \u0275\u0275inject(OverlayKeyboardDispatcher), \u0275\u0275inject(Injector), \u0275\u0275inject(NgZone), \u0275\u0275inject(DOCUMENT2), \u0275\u0275inject(Directionality), \u0275\u0275inject(Location), \u0275\u0275inject(OverlayOutsideClickDispatcher), \u0275\u0275inject(ANIMATION_MODULE_TYPE, 8));
};
_Overlay.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _Overlay,
  factory: _Overlay.\u0275fac,
  providedIn: "root"
});
var Overlay = _Overlay;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Overlay, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: ScrollStrategyOptions
  }, {
    type: OverlayContainer
  }, {
    type: ComponentFactoryResolver$1
  }, {
    type: OverlayPositionBuilder
  }, {
    type: OverlayKeyboardDispatcher
  }, {
    type: Injector
  }, {
    type: NgZone
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }, {
    type: Directionality
  }, {
    type: Location
  }, {
    type: OverlayOutsideClickDispatcher
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [ANIMATION_MODULE_TYPE]
    }, {
      type: Optional
    }]
  }], null);
})();
var defaultPositionList = [{
  originX: "start",
  originY: "bottom",
  overlayX: "start",
  overlayY: "top"
}, {
  originX: "start",
  originY: "top",
  overlayX: "start",
  overlayY: "bottom"
}, {
  originX: "end",
  originY: "top",
  overlayX: "end",
  overlayY: "bottom"
}, {
  originX: "end",
  originY: "bottom",
  overlayX: "end",
  overlayY: "top"
}];
var CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY = new InjectionToken("cdk-connected-overlay-scroll-strategy", {
  providedIn: "root",
  factory: () => {
    const overlay = inject(Overlay);
    return () => overlay.scrollStrategies.reposition();
  }
});
var _CdkOverlayOrigin = class _CdkOverlayOrigin {
  constructor(elementRef) {
    this.elementRef = elementRef;
  }
};
_CdkOverlayOrigin.\u0275fac = function CdkOverlayOrigin_Factory(t) {
  return new (t || _CdkOverlayOrigin)(\u0275\u0275directiveInject(ElementRef));
};
_CdkOverlayOrigin.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _CdkOverlayOrigin,
  selectors: [["", "cdk-overlay-origin", ""], ["", "overlay-origin", ""], ["", "cdkOverlayOrigin", ""]],
  exportAs: ["cdkOverlayOrigin"],
  standalone: true
});
var CdkOverlayOrigin = _CdkOverlayOrigin;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CdkOverlayOrigin, [{
    type: Directive,
    args: [{
      selector: "[cdk-overlay-origin], [overlay-origin], [cdkOverlayOrigin]",
      exportAs: "cdkOverlayOrigin",
      standalone: true
    }]
  }], () => [{
    type: ElementRef
  }], null);
})();
var _CdkConnectedOverlay = class _CdkConnectedOverlay {
  /** The offset in pixels for the overlay connection point on the x-axis */
  get offsetX() {
    return this._offsetX;
  }
  set offsetX(offsetX) {
    this._offsetX = offsetX;
    if (this._position) {
      this._updatePositionStrategy(this._position);
    }
  }
  /** The offset in pixels for the overlay connection point on the y-axis */
  get offsetY() {
    return this._offsetY;
  }
  set offsetY(offsetY) {
    this._offsetY = offsetY;
    if (this._position) {
      this._updatePositionStrategy(this._position);
    }
  }
  /** Whether the overlay should be disposed of when the user goes backwards/forwards in history. */
  get disposeOnNavigation() {
    return this._disposeOnNavigation;
  }
  set disposeOnNavigation(value) {
    this._disposeOnNavigation = value;
  }
  // TODO(jelbourn): inputs for size, scroll behavior, animation, etc.
  constructor(_overlay, templateRef, viewContainerRef, scrollStrategyFactory, _dir) {
    this._overlay = _overlay;
    this._dir = _dir;
    this._backdropSubscription = Subscription.EMPTY;
    this._attachSubscription = Subscription.EMPTY;
    this._detachSubscription = Subscription.EMPTY;
    this._positionSubscription = Subscription.EMPTY;
    this._disposeOnNavigation = false;
    this.viewportMargin = 0;
    this.open = false;
    this.disableClose = false;
    this.hasBackdrop = false;
    this.lockPosition = false;
    this.flexibleDimensions = false;
    this.growAfterOpen = false;
    this.push = false;
    this.backdropClick = new EventEmitter();
    this.positionChange = new EventEmitter();
    this.attach = new EventEmitter();
    this.detach = new EventEmitter();
    this.overlayKeydown = new EventEmitter();
    this.overlayOutsideClick = new EventEmitter();
    this._templatePortal = new TemplatePortal(templateRef, viewContainerRef);
    this._scrollStrategyFactory = scrollStrategyFactory;
    this.scrollStrategy = this._scrollStrategyFactory();
  }
  /** The associated overlay reference. */
  get overlayRef() {
    return this._overlayRef;
  }
  /** The element's layout direction. */
  get dir() {
    return this._dir ? this._dir.value : "ltr";
  }
  ngOnDestroy() {
    this._attachSubscription.unsubscribe();
    this._detachSubscription.unsubscribe();
    this._backdropSubscription.unsubscribe();
    this._positionSubscription.unsubscribe();
    if (this._overlayRef) {
      this._overlayRef.dispose();
    }
  }
  ngOnChanges(changes) {
    if (this._position) {
      this._updatePositionStrategy(this._position);
      this._overlayRef.updateSize({
        width: this.width,
        minWidth: this.minWidth,
        height: this.height,
        minHeight: this.minHeight
      });
      if (changes["origin"] && this.open) {
        this._position.apply();
      }
    }
    if (changes["open"]) {
      this.open ? this._attachOverlay() : this._detachOverlay();
    }
  }
  /** Creates an overlay */
  _createOverlay() {
    if (!this.positions || !this.positions.length) {
      this.positions = defaultPositionList;
    }
    const overlayRef = this._overlayRef = this._overlay.create(this._buildConfig());
    this._attachSubscription = overlayRef.attachments().subscribe(() => this.attach.emit());
    this._detachSubscription = overlayRef.detachments().subscribe(() => this.detach.emit());
    overlayRef.keydownEvents().subscribe((event) => {
      this.overlayKeydown.next(event);
      if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {
        event.preventDefault();
        this._detachOverlay();
      }
    });
    this._overlayRef.outsidePointerEvents().subscribe((event) => {
      this.overlayOutsideClick.next(event);
    });
  }
  /** Builds the overlay config based on the directive's inputs */
  _buildConfig() {
    const positionStrategy = this._position = this.positionStrategy || this._createPositionStrategy();
    const overlayConfig = new OverlayConfig({
      direction: this._dir,
      positionStrategy,
      scrollStrategy: this.scrollStrategy,
      hasBackdrop: this.hasBackdrop,
      disposeOnNavigation: this.disposeOnNavigation
    });
    if (this.width || this.width === 0) {
      overlayConfig.width = this.width;
    }
    if (this.height || this.height === 0) {
      overlayConfig.height = this.height;
    }
    if (this.minWidth || this.minWidth === 0) {
      overlayConfig.minWidth = this.minWidth;
    }
    if (this.minHeight || this.minHeight === 0) {
      overlayConfig.minHeight = this.minHeight;
    }
    if (this.backdropClass) {
      overlayConfig.backdropClass = this.backdropClass;
    }
    if (this.panelClass) {
      overlayConfig.panelClass = this.panelClass;
    }
    return overlayConfig;
  }
  /** Updates the state of a position strategy, based on the values of the directive inputs. */
  _updatePositionStrategy(positionStrategy) {
    const positions = this.positions.map((currentPosition) => ({
      originX: currentPosition.originX,
      originY: currentPosition.originY,
      overlayX: currentPosition.overlayX,
      overlayY: currentPosition.overlayY,
      offsetX: currentPosition.offsetX || this.offsetX,
      offsetY: currentPosition.offsetY || this.offsetY,
      panelClass: currentPosition.panelClass || void 0
    }));
    return positionStrategy.setOrigin(this._getFlexibleConnectedPositionStrategyOrigin()).withPositions(positions).withFlexibleDimensions(this.flexibleDimensions).withPush(this.push).withGrowAfterOpen(this.growAfterOpen).withViewportMargin(this.viewportMargin).withLockedPosition(this.lockPosition).withTransformOriginOn(this.transformOriginSelector);
  }
  /** Returns the position strategy of the overlay to be set on the overlay config */
  _createPositionStrategy() {
    const strategy = this._overlay.position().flexibleConnectedTo(this._getFlexibleConnectedPositionStrategyOrigin());
    this._updatePositionStrategy(strategy);
    return strategy;
  }
  _getFlexibleConnectedPositionStrategyOrigin() {
    if (this.origin instanceof CdkOverlayOrigin) {
      return this.origin.elementRef;
    } else {
      return this.origin;
    }
  }
  /** Attaches the overlay and subscribes to backdrop clicks if backdrop exists */
  _attachOverlay() {
    if (!this._overlayRef) {
      this._createOverlay();
    } else {
      this._overlayRef.getConfig().hasBackdrop = this.hasBackdrop;
    }
    if (!this._overlayRef.hasAttached()) {
      this._overlayRef.attach(this._templatePortal);
    }
    if (this.hasBackdrop) {
      this._backdropSubscription = this._overlayRef.backdropClick().subscribe((event) => {
        this.backdropClick.emit(event);
      });
    } else {
      this._backdropSubscription.unsubscribe();
    }
    this._positionSubscription.unsubscribe();
    if (this.positionChange.observers.length > 0) {
      this._positionSubscription = this._position.positionChanges.pipe(takeWhile(() => this.positionChange.observers.length > 0)).subscribe((position) => {
        this.positionChange.emit(position);
        if (this.positionChange.observers.length === 0) {
          this._positionSubscription.unsubscribe();
        }
      });
    }
  }
  /** Detaches the overlay and unsubscribes to backdrop clicks if backdrop exists */
  _detachOverlay() {
    if (this._overlayRef) {
      this._overlayRef.detach();
    }
    this._backdropSubscription.unsubscribe();
    this._positionSubscription.unsubscribe();
  }
};
_CdkConnectedOverlay.\u0275fac = function CdkConnectedOverlay_Factory(t) {
  return new (t || _CdkConnectedOverlay)(\u0275\u0275directiveInject(Overlay), \u0275\u0275directiveInject(TemplateRef), \u0275\u0275directiveInject(ViewContainerRef), \u0275\u0275directiveInject(CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY), \u0275\u0275directiveInject(Directionality, 8));
};
_CdkConnectedOverlay.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _CdkConnectedOverlay,
  selectors: [["", "cdk-connected-overlay", ""], ["", "connected-overlay", ""], ["", "cdkConnectedOverlay", ""]],
  inputs: {
    origin: ["cdkConnectedOverlayOrigin", "origin"],
    positions: ["cdkConnectedOverlayPositions", "positions"],
    positionStrategy: ["cdkConnectedOverlayPositionStrategy", "positionStrategy"],
    offsetX: ["cdkConnectedOverlayOffsetX", "offsetX"],
    offsetY: ["cdkConnectedOverlayOffsetY", "offsetY"],
    width: ["cdkConnectedOverlayWidth", "width"],
    height: ["cdkConnectedOverlayHeight", "height"],
    minWidth: ["cdkConnectedOverlayMinWidth", "minWidth"],
    minHeight: ["cdkConnectedOverlayMinHeight", "minHeight"],
    backdropClass: ["cdkConnectedOverlayBackdropClass", "backdropClass"],
    panelClass: ["cdkConnectedOverlayPanelClass", "panelClass"],
    viewportMargin: ["cdkConnectedOverlayViewportMargin", "viewportMargin"],
    scrollStrategy: ["cdkConnectedOverlayScrollStrategy", "scrollStrategy"],
    open: ["cdkConnectedOverlayOpen", "open"],
    disableClose: ["cdkConnectedOverlayDisableClose", "disableClose"],
    transformOriginSelector: ["cdkConnectedOverlayTransformOriginOn", "transformOriginSelector"],
    hasBackdrop: ["cdkConnectedOverlayHasBackdrop", "hasBackdrop", booleanAttribute],
    lockPosition: ["cdkConnectedOverlayLockPosition", "lockPosition", booleanAttribute],
    flexibleDimensions: ["cdkConnectedOverlayFlexibleDimensions", "flexibleDimensions", booleanAttribute],
    growAfterOpen: ["cdkConnectedOverlayGrowAfterOpen", "growAfterOpen", booleanAttribute],
    push: ["cdkConnectedOverlayPush", "push", booleanAttribute],
    disposeOnNavigation: ["cdkConnectedOverlayDisposeOnNavigation", "disposeOnNavigation", booleanAttribute]
  },
  outputs: {
    backdropClick: "backdropClick",
    positionChange: "positionChange",
    attach: "attach",
    detach: "detach",
    overlayKeydown: "overlayKeydown",
    overlayOutsideClick: "overlayOutsideClick"
  },
  exportAs: ["cdkConnectedOverlay"],
  standalone: true,
  features: [\u0275\u0275InputTransformsFeature, \u0275\u0275NgOnChangesFeature]
});
var CdkConnectedOverlay = _CdkConnectedOverlay;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CdkConnectedOverlay, [{
    type: Directive,
    args: [{
      selector: "[cdk-connected-overlay], [connected-overlay], [cdkConnectedOverlay]",
      exportAs: "cdkConnectedOverlay",
      standalone: true
    }]
  }], () => [{
    type: Overlay
  }, {
    type: TemplateRef
  }, {
    type: ViewContainerRef
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY]
    }]
  }, {
    type: Directionality,
    decorators: [{
      type: Optional
    }]
  }], {
    origin: [{
      type: Input,
      args: ["cdkConnectedOverlayOrigin"]
    }],
    positions: [{
      type: Input,
      args: ["cdkConnectedOverlayPositions"]
    }],
    positionStrategy: [{
      type: Input,
      args: ["cdkConnectedOverlayPositionStrategy"]
    }],
    offsetX: [{
      type: Input,
      args: ["cdkConnectedOverlayOffsetX"]
    }],
    offsetY: [{
      type: Input,
      args: ["cdkConnectedOverlayOffsetY"]
    }],
    width: [{
      type: Input,
      args: ["cdkConnectedOverlayWidth"]
    }],
    height: [{
      type: Input,
      args: ["cdkConnectedOverlayHeight"]
    }],
    minWidth: [{
      type: Input,
      args: ["cdkConnectedOverlayMinWidth"]
    }],
    minHeight: [{
      type: Input,
      args: ["cdkConnectedOverlayMinHeight"]
    }],
    backdropClass: [{
      type: Input,
      args: ["cdkConnectedOverlayBackdropClass"]
    }],
    panelClass: [{
      type: Input,
      args: ["cdkConnectedOverlayPanelClass"]
    }],
    viewportMargin: [{
      type: Input,
      args: ["cdkConnectedOverlayViewportMargin"]
    }],
    scrollStrategy: [{
      type: Input,
      args: ["cdkConnectedOverlayScrollStrategy"]
    }],
    open: [{
      type: Input,
      args: ["cdkConnectedOverlayOpen"]
    }],
    disableClose: [{
      type: Input,
      args: ["cdkConnectedOverlayDisableClose"]
    }],
    transformOriginSelector: [{
      type: Input,
      args: ["cdkConnectedOverlayTransformOriginOn"]
    }],
    hasBackdrop: [{
      type: Input,
      args: [{
        alias: "cdkConnectedOverlayHasBackdrop",
        transform: booleanAttribute
      }]
    }],
    lockPosition: [{
      type: Input,
      args: [{
        alias: "cdkConnectedOverlayLockPosition",
        transform: booleanAttribute
      }]
    }],
    flexibleDimensions: [{
      type: Input,
      args: [{
        alias: "cdkConnectedOverlayFlexibleDimensions",
        transform: booleanAttribute
      }]
    }],
    growAfterOpen: [{
      type: Input,
      args: [{
        alias: "cdkConnectedOverlayGrowAfterOpen",
        transform: booleanAttribute
      }]
    }],
    push: [{
      type: Input,
      args: [{
        alias: "cdkConnectedOverlayPush",
        transform: booleanAttribute
      }]
    }],
    disposeOnNavigation: [{
      type: Input,
      args: [{
        alias: "cdkConnectedOverlayDisposeOnNavigation",
        transform: booleanAttribute
      }]
    }],
    backdropClick: [{
      type: Output
    }],
    positionChange: [{
      type: Output
    }],
    attach: [{
      type: Output
    }],
    detach: [{
      type: Output
    }],
    overlayKeydown: [{
      type: Output
    }],
    overlayOutsideClick: [{
      type: Output
    }]
  });
})();
function CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY(overlay) {
  return () => overlay.scrollStrategies.reposition();
}
var CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER = {
  provide: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY,
  deps: [Overlay],
  useFactory: CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER_FACTORY
};
var _OverlayModule = class _OverlayModule {
};
_OverlayModule.\u0275fac = function OverlayModule_Factory(t) {
  return new (t || _OverlayModule)();
};
_OverlayModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _OverlayModule
});
_OverlayModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
  providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER],
  imports: [BidiModule, PortalModule, ScrollingModule, ScrollingModule]
});
var OverlayModule = _OverlayModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(OverlayModule, [{
    type: NgModule,
    args: [{
      imports: [BidiModule, PortalModule, ScrollingModule, CdkConnectedOverlay, CdkOverlayOrigin],
      exports: [CdkConnectedOverlay, CdkOverlayOrigin, ScrollingModule],
      providers: [Overlay, CDK_CONNECTED_OVERLAY_SCROLL_STRATEGY_PROVIDER]
    }]
  }], null, null);
})();
var _FullscreenOverlayContainer = class _FullscreenOverlayContainer extends OverlayContainer {
  constructor(_document2, platform) {
    super(_document2, platform);
  }
  ngOnDestroy() {
    super.ngOnDestroy();
    if (this._fullScreenEventName && this._fullScreenListener) {
      this._document.removeEventListener(this._fullScreenEventName, this._fullScreenListener);
    }
  }
  _createContainer() {
    super._createContainer();
    this._adjustParentForFullscreenChange();
    this._addFullscreenChangeListener(() => this._adjustParentForFullscreenChange());
  }
  _adjustParentForFullscreenChange() {
    if (!this._containerElement) {
      return;
    }
    const fullscreenElement = this.getFullscreenElement();
    const parent = fullscreenElement || this._document.body;
    parent.appendChild(this._containerElement);
  }
  _addFullscreenChangeListener(fn) {
    const eventName = this._getEventName();
    if (eventName) {
      if (this._fullScreenListener) {
        this._document.removeEventListener(eventName, this._fullScreenListener);
      }
      this._document.addEventListener(eventName, fn);
      this._fullScreenListener = fn;
    }
  }
  _getEventName() {
    if (!this._fullScreenEventName) {
      const _document2 = this._document;
      if (_document2.fullscreenEnabled) {
        this._fullScreenEventName = "fullscreenchange";
      } else if (_document2.webkitFullscreenEnabled) {
        this._fullScreenEventName = "webkitfullscreenchange";
      } else if (_document2.mozFullScreenEnabled) {
        this._fullScreenEventName = "mozfullscreenchange";
      } else if (_document2.msFullscreenEnabled) {
        this._fullScreenEventName = "MSFullscreenChange";
      }
    }
    return this._fullScreenEventName;
  }
  /**
   * When the page is put into fullscreen mode, a specific element is specified.
   * Only that element and its children are visible when in fullscreen mode.
   */
  getFullscreenElement() {
    const _document2 = this._document;
    return _document2.fullscreenElement || _document2.webkitFullscreenElement || _document2.mozFullScreenElement || _document2.msFullscreenElement || null;
  }
};
_FullscreenOverlayContainer.\u0275fac = function FullscreenOverlayContainer_Factory(t) {
  return new (t || _FullscreenOverlayContainer)(\u0275\u0275inject(DOCUMENT2), \u0275\u0275inject(Platform));
};
_FullscreenOverlayContainer.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _FullscreenOverlayContainer,
  factory: _FullscreenOverlayContainer.\u0275fac,
  providedIn: "root"
});
var FullscreenOverlayContainer = _FullscreenOverlayContainer;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(FullscreenOverlayContainer, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }, {
    type: Platform
  }], null);
})();

// node_modules/@angular/cdk/fesm2022/observers.mjs
var _MutationObserverFactory = class _MutationObserverFactory {
  create(callback) {
    return typeof MutationObserver === "undefined" ? null : new MutationObserver(callback);
  }
};
_MutationObserverFactory.\u0275fac = function MutationObserverFactory_Factory(t) {
  return new (t || _MutationObserverFactory)();
};
_MutationObserverFactory.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _MutationObserverFactory,
  factory: _MutationObserverFactory.\u0275fac,
  providedIn: "root"
});
var MutationObserverFactory = _MutationObserverFactory;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MutationObserverFactory, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
var _ContentObserver = class _ContentObserver {
  constructor(_mutationObserverFactory) {
    this._mutationObserverFactory = _mutationObserverFactory;
    this._observedElements = /* @__PURE__ */ new Map();
  }
  ngOnDestroy() {
    this._observedElements.forEach((_, element) => this._cleanupObserver(element));
  }
  observe(elementOrRef) {
    const element = coerceElement(elementOrRef);
    return new Observable((observer) => {
      const stream = this._observeElement(element);
      const subscription = stream.subscribe(observer);
      return () => {
        subscription.unsubscribe();
        this._unobserveElement(element);
      };
    });
  }
  /**
   * Observes the given element by using the existing MutationObserver if available, or creating a
   * new one if not.
   */
  _observeElement(element) {
    if (!this._observedElements.has(element)) {
      const stream = new Subject();
      const observer = this._mutationObserverFactory.create((mutations) => stream.next(mutations));
      if (observer) {
        observer.observe(element, {
          characterData: true,
          childList: true,
          subtree: true
        });
      }
      this._observedElements.set(element, {
        observer,
        stream,
        count: 1
      });
    } else {
      this._observedElements.get(element).count++;
    }
    return this._observedElements.get(element).stream;
  }
  /**
   * Un-observes the given element and cleans up the underlying MutationObserver if nobody else is
   * observing this element.
   */
  _unobserveElement(element) {
    if (this._observedElements.has(element)) {
      this._observedElements.get(element).count--;
      if (!this._observedElements.get(element).count) {
        this._cleanupObserver(element);
      }
    }
  }
  /** Clean up the underlying MutationObserver for the specified element. */
  _cleanupObserver(element) {
    if (this._observedElements.has(element)) {
      const {
        observer,
        stream
      } = this._observedElements.get(element);
      if (observer) {
        observer.disconnect();
      }
      stream.complete();
      this._observedElements.delete(element);
    }
  }
};
_ContentObserver.\u0275fac = function ContentObserver_Factory(t) {
  return new (t || _ContentObserver)(\u0275\u0275inject(MutationObserverFactory));
};
_ContentObserver.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _ContentObserver,
  factory: _ContentObserver.\u0275fac,
  providedIn: "root"
});
var ContentObserver = _ContentObserver;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ContentObserver, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: MutationObserverFactory
  }], null);
})();
var _CdkObserveContent = class _CdkObserveContent {
  /**
   * Whether observing content is disabled. This option can be used
   * to disconnect the underlying MutationObserver until it is needed.
   */
  get disabled() {
    return this._disabled;
  }
  set disabled(value) {
    this._disabled = value;
    this._disabled ? this._unsubscribe() : this._subscribe();
  }
  /** Debounce interval for emitting the changes. */
  get debounce() {
    return this._debounce;
  }
  set debounce(value) {
    this._debounce = coerceNumberProperty(value);
    this._subscribe();
  }
  constructor(_contentObserver, _elementRef, _ngZone) {
    this._contentObserver = _contentObserver;
    this._elementRef = _elementRef;
    this._ngZone = _ngZone;
    this.event = new EventEmitter();
    this._disabled = false;
    this._currentSubscription = null;
  }
  ngAfterContentInit() {
    if (!this._currentSubscription && !this.disabled) {
      this._subscribe();
    }
  }
  ngOnDestroy() {
    this._unsubscribe();
  }
  _subscribe() {
    this._unsubscribe();
    const stream = this._contentObserver.observe(this._elementRef);
    this._ngZone.runOutsideAngular(() => {
      this._currentSubscription = (this.debounce ? stream.pipe(debounceTime(this.debounce)) : stream).subscribe(this.event);
    });
  }
  _unsubscribe() {
    this._currentSubscription?.unsubscribe();
  }
};
_CdkObserveContent.\u0275fac = function CdkObserveContent_Factory(t) {
  return new (t || _CdkObserveContent)(\u0275\u0275directiveInject(ContentObserver), \u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(NgZone));
};
_CdkObserveContent.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _CdkObserveContent,
  selectors: [["", "cdkObserveContent", ""]],
  inputs: {
    disabled: ["cdkObserveContentDisabled", "disabled", booleanAttribute],
    debounce: "debounce"
  },
  outputs: {
    event: "cdkObserveContent"
  },
  exportAs: ["cdkObserveContent"],
  features: [\u0275\u0275InputTransformsFeature]
});
var CdkObserveContent = _CdkObserveContent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CdkObserveContent, [{
    type: Directive,
    args: [{
      selector: "[cdkObserveContent]",
      exportAs: "cdkObserveContent"
    }]
  }], () => [{
    type: ContentObserver
  }, {
    type: ElementRef
  }, {
    type: NgZone
  }], {
    event: [{
      type: Output,
      args: ["cdkObserveContent"]
    }],
    disabled: [{
      type: Input,
      args: [{
        alias: "cdkObserveContentDisabled",
        transform: booleanAttribute
      }]
    }],
    debounce: [{
      type: Input
    }]
  });
})();
var _ObserversModule = class _ObserversModule {
};
_ObserversModule.\u0275fac = function ObserversModule_Factory(t) {
  return new (t || _ObserversModule)();
};
_ObserversModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _ObserversModule
});
_ObserversModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
  providers: [MutationObserverFactory]
});
var ObserversModule = _ObserversModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ObserversModule, [{
    type: NgModule,
    args: [{
      exports: [CdkObserveContent],
      declarations: [CdkObserveContent],
      providers: [MutationObserverFactory]
    }]
  }], null, null);
})();

// node_modules/@angular/cdk/fesm2022/layout.mjs
var _LayoutModule = class _LayoutModule {
};
_LayoutModule.\u0275fac = function LayoutModule_Factory(t) {
  return new (t || _LayoutModule)();
};
_LayoutModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _LayoutModule
});
_LayoutModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({});
var LayoutModule = _LayoutModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(LayoutModule, [{
    type: NgModule,
    args: [{}]
  }], null, null);
})();
var mediaQueriesForWebkitCompatibility = /* @__PURE__ */ new Set();
var mediaQueryStyleNode;
var _MediaMatcher = class _MediaMatcher {
  constructor(_platform, _nonce) {
    this._platform = _platform;
    this._nonce = _nonce;
    this._matchMedia = this._platform.isBrowser && window.matchMedia ? (
      // matchMedia is bound to the window scope intentionally as it is an illegal invocation to
      // call it from a different scope.
      window.matchMedia.bind(window)
    ) : noopMatchMedia;
  }
  /**
   * Evaluates the given media query and returns the native MediaQueryList from which results
   * can be retrieved.
   * Confirms the layout engine will trigger for the selector query provided and returns the
   * MediaQueryList for the query provided.
   */
  matchMedia(query2) {
    if (this._platform.WEBKIT || this._platform.BLINK) {
      createEmptyStyleRule(query2, this._nonce);
    }
    return this._matchMedia(query2);
  }
};
_MediaMatcher.\u0275fac = function MediaMatcher_Factory(t) {
  return new (t || _MediaMatcher)(\u0275\u0275inject(Platform), \u0275\u0275inject(CSP_NONCE, 8));
};
_MediaMatcher.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _MediaMatcher,
  factory: _MediaMatcher.\u0275fac,
  providedIn: "root"
});
var MediaMatcher = _MediaMatcher;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MediaMatcher, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: Platform
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [CSP_NONCE]
    }]
  }], null);
})();
function createEmptyStyleRule(query2, nonce) {
  if (mediaQueriesForWebkitCompatibility.has(query2)) {
    return;
  }
  try {
    if (!mediaQueryStyleNode) {
      mediaQueryStyleNode = document.createElement("style");
      if (nonce) {
        mediaQueryStyleNode.nonce = nonce;
      }
      mediaQueryStyleNode.setAttribute("type", "text/css");
      document.head.appendChild(mediaQueryStyleNode);
    }
    if (mediaQueryStyleNode.sheet) {
      mediaQueryStyleNode.sheet.insertRule(`@media ${query2} {body{ }}`, 0);
      mediaQueriesForWebkitCompatibility.add(query2);
    }
  } catch (e) {
    console.error(e);
  }
}
function noopMatchMedia(query2) {
  return {
    matches: query2 === "all" || query2 === "",
    media: query2,
    addListener: () => {
    },
    removeListener: () => {
    }
  };
}
var _BreakpointObserver = class _BreakpointObserver {
  constructor(_mediaMatcher, _zone) {
    this._mediaMatcher = _mediaMatcher;
    this._zone = _zone;
    this._queries = /* @__PURE__ */ new Map();
    this._destroySubject = new Subject();
  }
  /** Completes the active subject, signalling to all other observables to complete. */
  ngOnDestroy() {
    this._destroySubject.next();
    this._destroySubject.complete();
  }
  /**
   * Whether one or more media queries match the current viewport size.
   * @param value One or more media queries to check.
   * @returns Whether any of the media queries match.
   */
  isMatched(value) {
    const queries = splitQueries(coerceArray(value));
    return queries.some((mediaQuery) => this._registerQuery(mediaQuery).mql.matches);
  }
  /**
   * Gets an observable of results for the given queries that will emit new results for any changes
   * in matching of the given queries.
   * @param value One or more media queries to check.
   * @returns A stream of matches for the given queries.
   */
  observe(value) {
    const queries = splitQueries(coerceArray(value));
    const observables = queries.map((query2) => this._registerQuery(query2).observable);
    let stateObservable = combineLatest(observables);
    stateObservable = concat(stateObservable.pipe(take(1)), stateObservable.pipe(skip(1), debounceTime(0)));
    return stateObservable.pipe(map((breakpointStates) => {
      const response = {
        matches: false,
        breakpoints: {}
      };
      breakpointStates.forEach(({
        matches,
        query: query2
      }) => {
        response.matches = response.matches || matches;
        response.breakpoints[query2] = matches;
      });
      return response;
    }));
  }
  /** Registers a specific query to be listened for. */
  _registerQuery(query2) {
    if (this._queries.has(query2)) {
      return this._queries.get(query2);
    }
    const mql = this._mediaMatcher.matchMedia(query2);
    const queryObservable = new Observable((observer) => {
      const handler = (e) => this._zone.run(() => observer.next(e));
      mql.addListener(handler);
      return () => {
        mql.removeListener(handler);
      };
    }).pipe(startWith(mql), map(({
      matches
    }) => ({
      query: query2,
      matches
    })), takeUntil(this._destroySubject));
    const output = {
      observable: queryObservable,
      mql
    };
    this._queries.set(query2, output);
    return output;
  }
};
_BreakpointObserver.\u0275fac = function BreakpointObserver_Factory(t) {
  return new (t || _BreakpointObserver)(\u0275\u0275inject(MediaMatcher), \u0275\u0275inject(NgZone));
};
_BreakpointObserver.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _BreakpointObserver,
  factory: _BreakpointObserver.\u0275fac,
  providedIn: "root"
});
var BreakpointObserver = _BreakpointObserver;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(BreakpointObserver, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: MediaMatcher
  }, {
    type: NgZone
  }], null);
})();
function splitQueries(queries) {
  return queries.map((query2) => query2.split(",")).reduce((a1, a2) => a1.concat(a2)).map((query2) => query2.trim());
}

// node_modules/@angular/cdk/fesm2022/a11y.mjs
var ID_DELIMITER = " ";
function addAriaReferencedId(el, attr, id) {
  const ids = getAriaReferenceIds(el, attr);
  if (ids.some((existingId) => existingId.trim() == id.trim())) {
    return;
  }
  ids.push(id.trim());
  el.setAttribute(attr, ids.join(ID_DELIMITER));
}
function removeAriaReferencedId(el, attr, id) {
  const ids = getAriaReferenceIds(el, attr);
  const filteredIds = ids.filter((val) => val != id.trim());
  if (filteredIds.length) {
    el.setAttribute(attr, filteredIds.join(ID_DELIMITER));
  } else {
    el.removeAttribute(attr);
  }
}
function getAriaReferenceIds(el, attr) {
  return (el.getAttribute(attr) || "").match(/\S+/g) || [];
}
var CDK_DESCRIBEDBY_ID_PREFIX = "cdk-describedby-message";
var CDK_DESCRIBEDBY_HOST_ATTRIBUTE = "cdk-describedby-host";
var nextId = 0;
var _AriaDescriber = class _AriaDescriber {
  constructor(_document2, _platform) {
    this._platform = _platform;
    this._messageRegistry = /* @__PURE__ */ new Map();
    this._messagesContainer = null;
    this._id = `${nextId++}`;
    this._document = _document2;
    this._id = inject(APP_ID) + "-" + nextId++;
  }
  describe(hostElement, message, role) {
    if (!this._canBeDescribed(hostElement, message)) {
      return;
    }
    const key = getKey(message, role);
    if (typeof message !== "string") {
      setMessageId(message, this._id);
      this._messageRegistry.set(key, {
        messageElement: message,
        referenceCount: 0
      });
    } else if (!this._messageRegistry.has(key)) {
      this._createMessageElement(message, role);
    }
    if (!this._isElementDescribedByMessage(hostElement, key)) {
      this._addMessageReference(hostElement, key);
    }
  }
  removeDescription(hostElement, message, role) {
    if (!message || !this._isElementNode(hostElement)) {
      return;
    }
    const key = getKey(message, role);
    if (this._isElementDescribedByMessage(hostElement, key)) {
      this._removeMessageReference(hostElement, key);
    }
    if (typeof message === "string") {
      const registeredMessage = this._messageRegistry.get(key);
      if (registeredMessage && registeredMessage.referenceCount === 0) {
        this._deleteMessageElement(key);
      }
    }
    if (this._messagesContainer?.childNodes.length === 0) {
      this._messagesContainer.remove();
      this._messagesContainer = null;
    }
  }
  /** Unregisters all created message elements and removes the message container. */
  ngOnDestroy() {
    const describedElements = this._document.querySelectorAll(`[${CDK_DESCRIBEDBY_HOST_ATTRIBUTE}="${this._id}"]`);
    for (let i = 0; i < describedElements.length; i++) {
      this._removeCdkDescribedByReferenceIds(describedElements[i]);
      describedElements[i].removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);
    }
    this._messagesContainer?.remove();
    this._messagesContainer = null;
    this._messageRegistry.clear();
  }
  /**
   * Creates a new element in the visually hidden message container element with the message
   * as its content and adds it to the message registry.
   */
  _createMessageElement(message, role) {
    const messageElement = this._document.createElement("div");
    setMessageId(messageElement, this._id);
    messageElement.textContent = message;
    if (role) {
      messageElement.setAttribute("role", role);
    }
    this._createMessagesContainer();
    this._messagesContainer.appendChild(messageElement);
    this._messageRegistry.set(getKey(message, role), {
      messageElement,
      referenceCount: 0
    });
  }
  /** Deletes the message element from the global messages container. */
  _deleteMessageElement(key) {
    this._messageRegistry.get(key)?.messageElement?.remove();
    this._messageRegistry.delete(key);
  }
  /** Creates the global container for all aria-describedby messages. */
  _createMessagesContainer() {
    if (this._messagesContainer) {
      return;
    }
    const containerClassName = "cdk-describedby-message-container";
    const serverContainers = this._document.querySelectorAll(`.${containerClassName}[platform="server"]`);
    for (let i = 0; i < serverContainers.length; i++) {
      serverContainers[i].remove();
    }
    const messagesContainer = this._document.createElement("div");
    messagesContainer.style.visibility = "hidden";
    messagesContainer.classList.add(containerClassName);
    messagesContainer.classList.add("cdk-visually-hidden");
    if (this._platform && !this._platform.isBrowser) {
      messagesContainer.setAttribute("platform", "server");
    }
    this._document.body.appendChild(messagesContainer);
    this._messagesContainer = messagesContainer;
  }
  /** Removes all cdk-describedby messages that are hosted through the element. */
  _removeCdkDescribedByReferenceIds(element) {
    const originalReferenceIds = getAriaReferenceIds(element, "aria-describedby").filter((id) => id.indexOf(CDK_DESCRIBEDBY_ID_PREFIX) != 0);
    element.setAttribute("aria-describedby", originalReferenceIds.join(" "));
  }
  /**
   * Adds a message reference to the element using aria-describedby and increments the registered
   * message's reference count.
   */
  _addMessageReference(element, key) {
    const registeredMessage = this._messageRegistry.get(key);
    addAriaReferencedId(element, "aria-describedby", registeredMessage.messageElement.id);
    element.setAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE, this._id);
    registeredMessage.referenceCount++;
  }
  /**
   * Removes a message reference from the element using aria-describedby
   * and decrements the registered message's reference count.
   */
  _removeMessageReference(element, key) {
    const registeredMessage = this._messageRegistry.get(key);
    registeredMessage.referenceCount--;
    removeAriaReferencedId(element, "aria-describedby", registeredMessage.messageElement.id);
    element.removeAttribute(CDK_DESCRIBEDBY_HOST_ATTRIBUTE);
  }
  /** Returns true if the element has been described by the provided message ID. */
  _isElementDescribedByMessage(element, key) {
    const referenceIds = getAriaReferenceIds(element, "aria-describedby");
    const registeredMessage = this._messageRegistry.get(key);
    const messageId = registeredMessage && registeredMessage.messageElement.id;
    return !!messageId && referenceIds.indexOf(messageId) != -1;
  }
  /** Determines whether a message can be described on a particular element. */
  _canBeDescribed(element, message) {
    if (!this._isElementNode(element)) {
      return false;
    }
    if (message && typeof message === "object") {
      return true;
    }
    const trimmedMessage = message == null ? "" : `${message}`.trim();
    const ariaLabel = element.getAttribute("aria-label");
    return trimmedMessage ? !ariaLabel || ariaLabel.trim() !== trimmedMessage : false;
  }
  /** Checks whether a node is an Element node. */
  _isElementNode(element) {
    return element.nodeType === this._document.ELEMENT_NODE;
  }
};
_AriaDescriber.\u0275fac = function AriaDescriber_Factory(t) {
  return new (t || _AriaDescriber)(\u0275\u0275inject(DOCUMENT2), \u0275\u0275inject(Platform));
};
_AriaDescriber.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _AriaDescriber,
  factory: _AriaDescriber.\u0275fac,
  providedIn: "root"
});
var AriaDescriber = _AriaDescriber;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(AriaDescriber, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }, {
    type: Platform
  }], null);
})();
function getKey(message, role) {
  return typeof message === "string" ? `${role || ""}/${message}` : message;
}
function setMessageId(element, serviceId) {
  if (!element.id) {
    element.id = `${CDK_DESCRIBEDBY_ID_PREFIX}-${serviceId}-${nextId++}`;
  }
}
var _InteractivityChecker = class _InteractivityChecker {
  constructor(_platform) {
    this._platform = _platform;
  }
  /**
   * Gets whether an element is disabled.
   *
   * @param element Element to be checked.
   * @returns Whether the element is disabled.
   */
  isDisabled(element) {
    return element.hasAttribute("disabled");
  }
  /**
   * Gets whether an element is visible for the purposes of interactivity.
   *
   * This will capture states like `display: none` and `visibility: hidden`, but not things like
   * being clipped by an `overflow: hidden` parent or being outside the viewport.
   *
   * @returns Whether the element is visible.
   */
  isVisible(element) {
    return hasGeometry(element) && getComputedStyle(element).visibility === "visible";
  }
  /**
   * Gets whether an element can be reached via Tab key.
   * Assumes that the element has already been checked with isFocusable.
   *
   * @param element Element to be checked.
   * @returns Whether the element is tabbable.
   */
  isTabbable(element) {
    if (!this._platform.isBrowser) {
      return false;
    }
    const frameElement = getFrameElement(getWindow(element));
    if (frameElement) {
      if (getTabIndexValue(frameElement) === -1) {
        return false;
      }
      if (!this.isVisible(frameElement)) {
        return false;
      }
    }
    let nodeName = element.nodeName.toLowerCase();
    let tabIndexValue = getTabIndexValue(element);
    if (element.hasAttribute("contenteditable")) {
      return tabIndexValue !== -1;
    }
    if (nodeName === "iframe" || nodeName === "object") {
      return false;
    }
    if (this._platform.WEBKIT && this._platform.IOS && !isPotentiallyTabbableIOS(element)) {
      return false;
    }
    if (nodeName === "audio") {
      if (!element.hasAttribute("controls")) {
        return false;
      }
      return tabIndexValue !== -1;
    }
    if (nodeName === "video") {
      if (tabIndexValue === -1) {
        return false;
      }
      if (tabIndexValue !== null) {
        return true;
      }
      return this._platform.FIREFOX || element.hasAttribute("controls");
    }
    return element.tabIndex >= 0;
  }
  /**
   * Gets whether an element can be focused by the user.
   *
   * @param element Element to be checked.
   * @param config The config object with options to customize this method's behavior
   * @returns Whether the element is focusable.
   */
  isFocusable(element, config2) {
    return isPotentiallyFocusable(element) && !this.isDisabled(element) && (config2?.ignoreVisibility || this.isVisible(element));
  }
};
_InteractivityChecker.\u0275fac = function InteractivityChecker_Factory(t) {
  return new (t || _InteractivityChecker)(\u0275\u0275inject(Platform));
};
_InteractivityChecker.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _InteractivityChecker,
  factory: _InteractivityChecker.\u0275fac,
  providedIn: "root"
});
var InteractivityChecker = _InteractivityChecker;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(InteractivityChecker, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: Platform
  }], null);
})();
function getFrameElement(window2) {
  try {
    return window2.frameElement;
  } catch {
    return null;
  }
}
function hasGeometry(element) {
  return !!(element.offsetWidth || element.offsetHeight || typeof element.getClientRects === "function" && element.getClientRects().length);
}
function isNativeFormElement(element) {
  let nodeName = element.nodeName.toLowerCase();
  return nodeName === "input" || nodeName === "select" || nodeName === "button" || nodeName === "textarea";
}
function isHiddenInput(element) {
  return isInputElement(element) && element.type == "hidden";
}
function isAnchorWithHref(element) {
  return isAnchorElement(element) && element.hasAttribute("href");
}
function isInputElement(element) {
  return element.nodeName.toLowerCase() == "input";
}
function isAnchorElement(element) {
  return element.nodeName.toLowerCase() == "a";
}
function hasValidTabIndex(element) {
  if (!element.hasAttribute("tabindex") || element.tabIndex === void 0) {
    return false;
  }
  let tabIndex = element.getAttribute("tabindex");
  return !!(tabIndex && !isNaN(parseInt(tabIndex, 10)));
}
function getTabIndexValue(element) {
  if (!hasValidTabIndex(element)) {
    return null;
  }
  const tabIndex = parseInt(element.getAttribute("tabindex") || "", 10);
  return isNaN(tabIndex) ? -1 : tabIndex;
}
function isPotentiallyTabbableIOS(element) {
  let nodeName = element.nodeName.toLowerCase();
  let inputType = nodeName === "input" && element.type;
  return inputType === "text" || inputType === "password" || nodeName === "select" || nodeName === "textarea";
}
function isPotentiallyFocusable(element) {
  if (isHiddenInput(element)) {
    return false;
  }
  return isNativeFormElement(element) || isAnchorWithHref(element) || element.hasAttribute("contenteditable") || hasValidTabIndex(element);
}
function getWindow(node) {
  return node.ownerDocument && node.ownerDocument.defaultView || window;
}
var FocusTrap = class {
  /** Whether the focus trap is active. */
  get enabled() {
    return this._enabled;
  }
  set enabled(value) {
    this._enabled = value;
    if (this._startAnchor && this._endAnchor) {
      this._toggleAnchorTabIndex(value, this._startAnchor);
      this._toggleAnchorTabIndex(value, this._endAnchor);
    }
  }
  constructor(_element, _checker, _ngZone, _document2, deferAnchors = false) {
    this._element = _element;
    this._checker = _checker;
    this._ngZone = _ngZone;
    this._document = _document2;
    this._hasAttached = false;
    this.startAnchorListener = () => this.focusLastTabbableElement();
    this.endAnchorListener = () => this.focusFirstTabbableElement();
    this._enabled = true;
    if (!deferAnchors) {
      this.attachAnchors();
    }
  }
  /** Destroys the focus trap by cleaning up the anchors. */
  destroy() {
    const startAnchor = this._startAnchor;
    const endAnchor = this._endAnchor;
    if (startAnchor) {
      startAnchor.removeEventListener("focus", this.startAnchorListener);
      startAnchor.remove();
    }
    if (endAnchor) {
      endAnchor.removeEventListener("focus", this.endAnchorListener);
      endAnchor.remove();
    }
    this._startAnchor = this._endAnchor = null;
    this._hasAttached = false;
  }
  /**
   * Inserts the anchors into the DOM. This is usually done automatically
   * in the constructor, but can be deferred for cases like directives with `*ngIf`.
   * @returns Whether the focus trap managed to attach successfully. This may not be the case
   * if the target element isn't currently in the DOM.
   */
  attachAnchors() {
    if (this._hasAttached) {
      return true;
    }
    this._ngZone.runOutsideAngular(() => {
      if (!this._startAnchor) {
        this._startAnchor = this._createAnchor();
        this._startAnchor.addEventListener("focus", this.startAnchorListener);
      }
      if (!this._endAnchor) {
        this._endAnchor = this._createAnchor();
        this._endAnchor.addEventListener("focus", this.endAnchorListener);
      }
    });
    if (this._element.parentNode) {
      this._element.parentNode.insertBefore(this._startAnchor, this._element);
      this._element.parentNode.insertBefore(this._endAnchor, this._element.nextSibling);
      this._hasAttached = true;
    }
    return this._hasAttached;
  }
  /**
   * Waits for the zone to stabilize, then focuses the first tabbable element.
   * @returns Returns a promise that resolves with a boolean, depending
   * on whether focus was moved successfully.
   */
  focusInitialElementWhenReady(options) {
    return new Promise((resolve) => {
      this._executeOnStable(() => resolve(this.focusInitialElement(options)));
    });
  }
  /**
   * Waits for the zone to stabilize, then focuses
   * the first tabbable element within the focus trap region.
   * @returns Returns a promise that resolves with a boolean, depending
   * on whether focus was moved successfully.
   */
  focusFirstTabbableElementWhenReady(options) {
    return new Promise((resolve) => {
      this._executeOnStable(() => resolve(this.focusFirstTabbableElement(options)));
    });
  }
  /**
   * Waits for the zone to stabilize, then focuses
   * the last tabbable element within the focus trap region.
   * @returns Returns a promise that resolves with a boolean, depending
   * on whether focus was moved successfully.
   */
  focusLastTabbableElementWhenReady(options) {
    return new Promise((resolve) => {
      this._executeOnStable(() => resolve(this.focusLastTabbableElement(options)));
    });
  }
  /**
   * Get the specified boundary element of the trapped region.
   * @param bound The boundary to get (start or end of trapped region).
   * @returns The boundary element.
   */
  _getRegionBoundary(bound) {
    const markers = this._element.querySelectorAll(`[cdk-focus-region-${bound}], [cdkFocusRegion${bound}], [cdk-focus-${bound}]`);
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      for (let i = 0; i < markers.length; i++) {
        if (markers[i].hasAttribute(`cdk-focus-${bound}`)) {
          console.warn(`Found use of deprecated attribute 'cdk-focus-${bound}', use 'cdkFocusRegion${bound}' instead. The deprecated attribute will be removed in 8.0.0.`, markers[i]);
        } else if (markers[i].hasAttribute(`cdk-focus-region-${bound}`)) {
          console.warn(`Found use of deprecated attribute 'cdk-focus-region-${bound}', use 'cdkFocusRegion${bound}' instead. The deprecated attribute will be removed in 8.0.0.`, markers[i]);
        }
      }
    }
    if (bound == "start") {
      return markers.length ? markers[0] : this._getFirstTabbableElement(this._element);
    }
    return markers.length ? markers[markers.length - 1] : this._getLastTabbableElement(this._element);
  }
  /**
   * Focuses the element that should be focused when the focus trap is initialized.
   * @returns Whether focus was moved successfully.
   */
  focusInitialElement(options) {
    const redirectToElement = this._element.querySelector(`[cdk-focus-initial], [cdkFocusInitial]`);
    if (redirectToElement) {
      if ((typeof ngDevMode === "undefined" || ngDevMode) && redirectToElement.hasAttribute(`cdk-focus-initial`)) {
        console.warn(`Found use of deprecated attribute 'cdk-focus-initial', use 'cdkFocusInitial' instead. The deprecated attribute will be removed in 8.0.0`, redirectToElement);
      }
      if ((typeof ngDevMode === "undefined" || ngDevMode) && !this._checker.isFocusable(redirectToElement)) {
        console.warn(`Element matching '[cdkFocusInitial]' is not focusable.`, redirectToElement);
      }
      if (!this._checker.isFocusable(redirectToElement)) {
        const focusableChild = this._getFirstTabbableElement(redirectToElement);
        focusableChild?.focus(options);
        return !!focusableChild;
      }
      redirectToElement.focus(options);
      return true;
    }
    return this.focusFirstTabbableElement(options);
  }
  /**
   * Focuses the first tabbable element within the focus trap region.
   * @returns Whether focus was moved successfully.
   */
  focusFirstTabbableElement(options) {
    const redirectToElement = this._getRegionBoundary("start");
    if (redirectToElement) {
      redirectToElement.focus(options);
    }
    return !!redirectToElement;
  }
  /**
   * Focuses the last tabbable element within the focus trap region.
   * @returns Whether focus was moved successfully.
   */
  focusLastTabbableElement(options) {
    const redirectToElement = this._getRegionBoundary("end");
    if (redirectToElement) {
      redirectToElement.focus(options);
    }
    return !!redirectToElement;
  }
  /**
   * Checks whether the focus trap has successfully been attached.
   */
  hasAttached() {
    return this._hasAttached;
  }
  /** Get the first tabbable element from a DOM subtree (inclusive). */
  _getFirstTabbableElement(root) {
    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {
      return root;
    }
    const children = root.children;
    for (let i = 0; i < children.length; i++) {
      const tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getFirstTabbableElement(children[i]) : null;
      if (tabbableChild) {
        return tabbableChild;
      }
    }
    return null;
  }
  /** Get the last tabbable element from a DOM subtree (inclusive). */
  _getLastTabbableElement(root) {
    if (this._checker.isFocusable(root) && this._checker.isTabbable(root)) {
      return root;
    }
    const children = root.children;
    for (let i = children.length - 1; i >= 0; i--) {
      const tabbableChild = children[i].nodeType === this._document.ELEMENT_NODE ? this._getLastTabbableElement(children[i]) : null;
      if (tabbableChild) {
        return tabbableChild;
      }
    }
    return null;
  }
  /** Creates an anchor element. */
  _createAnchor() {
    const anchor = this._document.createElement("div");
    this._toggleAnchorTabIndex(this._enabled, anchor);
    anchor.classList.add("cdk-visually-hidden");
    anchor.classList.add("cdk-focus-trap-anchor");
    anchor.setAttribute("aria-hidden", "true");
    return anchor;
  }
  /**
   * Toggles the `tabindex` of an anchor, based on the enabled state of the focus trap.
   * @param isEnabled Whether the focus trap is enabled.
   * @param anchor Anchor on which to toggle the tabindex.
   */
  _toggleAnchorTabIndex(isEnabled, anchor) {
    isEnabled ? anchor.setAttribute("tabindex", "0") : anchor.removeAttribute("tabindex");
  }
  /**
   * Toggles the`tabindex` of both anchors to either trap Tab focus or allow it to escape.
   * @param enabled: Whether the anchors should trap Tab.
   */
  toggleAnchors(enabled) {
    if (this._startAnchor && this._endAnchor) {
      this._toggleAnchorTabIndex(enabled, this._startAnchor);
      this._toggleAnchorTabIndex(enabled, this._endAnchor);
    }
  }
  /** Executes a function when the zone is stable. */
  _executeOnStable(fn) {
    if (this._ngZone.isStable) {
      fn();
    } else {
      this._ngZone.onStable.pipe(take(1)).subscribe(fn);
    }
  }
};
var _FocusTrapFactory = class _FocusTrapFactory {
  constructor(_checker, _ngZone, _document2) {
    this._checker = _checker;
    this._ngZone = _ngZone;
    this._document = _document2;
  }
  /**
   * Creates a focus-trapped region around the given element.
   * @param element The element around which focus will be trapped.
   * @param deferCaptureElements Defers the creation of focus-capturing elements to be done
   *     manually by the user.
   * @returns The created focus trap instance.
   */
  create(element, deferCaptureElements = false) {
    return new FocusTrap(element, this._checker, this._ngZone, this._document, deferCaptureElements);
  }
};
_FocusTrapFactory.\u0275fac = function FocusTrapFactory_Factory(t) {
  return new (t || _FocusTrapFactory)(\u0275\u0275inject(InteractivityChecker), \u0275\u0275inject(NgZone), \u0275\u0275inject(DOCUMENT2));
};
_FocusTrapFactory.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _FocusTrapFactory,
  factory: _FocusTrapFactory.\u0275fac,
  providedIn: "root"
});
var FocusTrapFactory = _FocusTrapFactory;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(FocusTrapFactory, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: InteractivityChecker
  }, {
    type: NgZone
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }], null);
})();
var _CdkTrapFocus = class _CdkTrapFocus {
  /** Whether the focus trap is active. */
  get enabled() {
    return this.focusTrap.enabled;
  }
  set enabled(value) {
    this.focusTrap.enabled = value;
  }
  constructor(_elementRef, _focusTrapFactory, _document2) {
    this._elementRef = _elementRef;
    this._focusTrapFactory = _focusTrapFactory;
    this._previouslyFocusedElement = null;
    this.focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement, true);
  }
  ngOnDestroy() {
    this.focusTrap.destroy();
    if (this._previouslyFocusedElement) {
      this._previouslyFocusedElement.focus();
      this._previouslyFocusedElement = null;
    }
  }
  ngAfterContentInit() {
    this.focusTrap.attachAnchors();
    if (this.autoCapture) {
      this._captureFocus();
    }
  }
  ngDoCheck() {
    if (!this.focusTrap.hasAttached()) {
      this.focusTrap.attachAnchors();
    }
  }
  ngOnChanges(changes) {
    const autoCaptureChange = changes["autoCapture"];
    if (autoCaptureChange && !autoCaptureChange.firstChange && this.autoCapture && this.focusTrap.hasAttached()) {
      this._captureFocus();
    }
  }
  _captureFocus() {
    this._previouslyFocusedElement = _getFocusedElementPierceShadowDom();
    this.focusTrap.focusInitialElementWhenReady();
  }
};
_CdkTrapFocus.\u0275fac = function CdkTrapFocus_Factory(t) {
  return new (t || _CdkTrapFocus)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(FocusTrapFactory), \u0275\u0275directiveInject(DOCUMENT2));
};
_CdkTrapFocus.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _CdkTrapFocus,
  selectors: [["", "cdkTrapFocus", ""]],
  inputs: {
    enabled: ["cdkTrapFocus", "enabled", booleanAttribute],
    autoCapture: ["cdkTrapFocusAutoCapture", "autoCapture", booleanAttribute]
  },
  exportAs: ["cdkTrapFocus"],
  features: [\u0275\u0275InputTransformsFeature, \u0275\u0275NgOnChangesFeature]
});
var CdkTrapFocus = _CdkTrapFocus;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CdkTrapFocus, [{
    type: Directive,
    args: [{
      selector: "[cdkTrapFocus]",
      exportAs: "cdkTrapFocus"
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: FocusTrapFactory
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }], {
    enabled: [{
      type: Input,
      args: [{
        alias: "cdkTrapFocus",
        transform: booleanAttribute
      }]
    }],
    autoCapture: [{
      type: Input,
      args: [{
        alias: "cdkTrapFocusAutoCapture",
        transform: booleanAttribute
      }]
    }]
  });
})();
var ConfigurableFocusTrap = class extends FocusTrap {
  /** Whether the FocusTrap is enabled. */
  get enabled() {
    return this._enabled;
  }
  set enabled(value) {
    this._enabled = value;
    if (this._enabled) {
      this._focusTrapManager.register(this);
    } else {
      this._focusTrapManager.deregister(this);
    }
  }
  constructor(_element, _checker, _ngZone, _document2, _focusTrapManager, _inertStrategy, config2) {
    super(_element, _checker, _ngZone, _document2, config2.defer);
    this._focusTrapManager = _focusTrapManager;
    this._inertStrategy = _inertStrategy;
    this._focusTrapManager.register(this);
  }
  /** Notifies the FocusTrapManager that this FocusTrap will be destroyed. */
  destroy() {
    this._focusTrapManager.deregister(this);
    super.destroy();
  }
  /** @docs-private Implemented as part of ManagedFocusTrap. */
  _enable() {
    this._inertStrategy.preventFocus(this);
    this.toggleAnchors(true);
  }
  /** @docs-private Implemented as part of ManagedFocusTrap. */
  _disable() {
    this._inertStrategy.allowFocus(this);
    this.toggleAnchors(false);
  }
};
var FOCUS_TRAP_INERT_STRATEGY = new InjectionToken("FOCUS_TRAP_INERT_STRATEGY");
var EventListenerFocusTrapInertStrategy = class {
  constructor() {
    this._listener = null;
  }
  /** Adds a document event listener that keeps focus inside the FocusTrap. */
  preventFocus(focusTrap) {
    if (this._listener) {
      focusTrap._document.removeEventListener("focus", this._listener, true);
    }
    this._listener = (e) => this._trapFocus(focusTrap, e);
    focusTrap._ngZone.runOutsideAngular(() => {
      focusTrap._document.addEventListener("focus", this._listener, true);
    });
  }
  /** Removes the event listener added in preventFocus. */
  allowFocus(focusTrap) {
    if (!this._listener) {
      return;
    }
    focusTrap._document.removeEventListener("focus", this._listener, true);
    this._listener = null;
  }
  /**
   * Refocuses the first element in the FocusTrap if the focus event target was outside
   * the FocusTrap.
   *
   * This is an event listener callback. The event listener is added in runOutsideAngular,
   * so all this code runs outside Angular as well.
   */
  _trapFocus(focusTrap, event) {
    const target = event.target;
    const focusTrapRoot = focusTrap._element;
    if (target && !focusTrapRoot.contains(target) && !target.closest?.("div.cdk-overlay-pane")) {
      setTimeout(() => {
        if (focusTrap.enabled && !focusTrapRoot.contains(focusTrap._document.activeElement)) {
          focusTrap.focusFirstTabbableElement();
        }
      });
    }
  }
};
var _FocusTrapManager = class _FocusTrapManager {
  constructor() {
    this._focusTrapStack = [];
  }
  /**
   * Disables the FocusTrap at the top of the stack, and then pushes
   * the new FocusTrap onto the stack.
   */
  register(focusTrap) {
    this._focusTrapStack = this._focusTrapStack.filter((ft) => ft !== focusTrap);
    let stack = this._focusTrapStack;
    if (stack.length) {
      stack[stack.length - 1]._disable();
    }
    stack.push(focusTrap);
    focusTrap._enable();
  }
  /**
   * Removes the FocusTrap from the stack, and activates the
   * FocusTrap that is the new top of the stack.
   */
  deregister(focusTrap) {
    focusTrap._disable();
    const stack = this._focusTrapStack;
    const i = stack.indexOf(focusTrap);
    if (i !== -1) {
      stack.splice(i, 1);
      if (stack.length) {
        stack[stack.length - 1]._enable();
      }
    }
  }
};
_FocusTrapManager.\u0275fac = function FocusTrapManager_Factory(t) {
  return new (t || _FocusTrapManager)();
};
_FocusTrapManager.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _FocusTrapManager,
  factory: _FocusTrapManager.\u0275fac,
  providedIn: "root"
});
var FocusTrapManager = _FocusTrapManager;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(FocusTrapManager, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
var _ConfigurableFocusTrapFactory = class _ConfigurableFocusTrapFactory {
  constructor(_checker, _ngZone, _focusTrapManager, _document2, _inertStrategy) {
    this._checker = _checker;
    this._ngZone = _ngZone;
    this._focusTrapManager = _focusTrapManager;
    this._document = _document2;
    this._inertStrategy = _inertStrategy || new EventListenerFocusTrapInertStrategy();
  }
  create(element, config2 = {
    defer: false
  }) {
    let configObject;
    if (typeof config2 === "boolean") {
      configObject = {
        defer: config2
      };
    } else {
      configObject = config2;
    }
    return new ConfigurableFocusTrap(element, this._checker, this._ngZone, this._document, this._focusTrapManager, this._inertStrategy, configObject);
  }
};
_ConfigurableFocusTrapFactory.\u0275fac = function ConfigurableFocusTrapFactory_Factory(t) {
  return new (t || _ConfigurableFocusTrapFactory)(\u0275\u0275inject(InteractivityChecker), \u0275\u0275inject(NgZone), \u0275\u0275inject(FocusTrapManager), \u0275\u0275inject(DOCUMENT2), \u0275\u0275inject(FOCUS_TRAP_INERT_STRATEGY, 8));
};
_ConfigurableFocusTrapFactory.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _ConfigurableFocusTrapFactory,
  factory: _ConfigurableFocusTrapFactory.\u0275fac,
  providedIn: "root"
});
var ConfigurableFocusTrapFactory = _ConfigurableFocusTrapFactory;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ConfigurableFocusTrapFactory, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: InteractivityChecker
  }, {
    type: NgZone
  }, {
    type: FocusTrapManager
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [FOCUS_TRAP_INERT_STRATEGY]
    }]
  }], null);
})();
function isFakeMousedownFromScreenReader(event) {
  return event.buttons === 0 || event.detail === 0;
}
function isFakeTouchstartFromScreenReader(event) {
  const touch = event.touches && event.touches[0] || event.changedTouches && event.changedTouches[0];
  return !!touch && touch.identifier === -1 && (touch.radiusX == null || touch.radiusX === 1) && (touch.radiusY == null || touch.radiusY === 1);
}
var INPUT_MODALITY_DETECTOR_OPTIONS = new InjectionToken("cdk-input-modality-detector-options");
var INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS = {
  ignoreKeys: [ALT, CONTROL, MAC_META, META, SHIFT]
};
var TOUCH_BUFFER_MS = 650;
var modalityEventListenerOptions = normalizePassiveListenerOptions({
  passive: true,
  capture: true
});
var _InputModalityDetector = class _InputModalityDetector {
  /** The most recently detected input modality. */
  get mostRecentModality() {
    return this._modality.value;
  }
  constructor(_platform, ngZone, document2, options) {
    this._platform = _platform;
    this._mostRecentTarget = null;
    this._modality = new BehaviorSubject(null);
    this._lastTouchMs = 0;
    this._onKeydown = (event) => {
      if (this._options?.ignoreKeys?.some((keyCode) => keyCode === event.keyCode)) {
        return;
      }
      this._modality.next("keyboard");
      this._mostRecentTarget = _getEventTarget(event);
    };
    this._onMousedown = (event) => {
      if (Date.now() - this._lastTouchMs < TOUCH_BUFFER_MS) {
        return;
      }
      this._modality.next(isFakeMousedownFromScreenReader(event) ? "keyboard" : "mouse");
      this._mostRecentTarget = _getEventTarget(event);
    };
    this._onTouchstart = (event) => {
      if (isFakeTouchstartFromScreenReader(event)) {
        this._modality.next("keyboard");
        return;
      }
      this._lastTouchMs = Date.now();
      this._modality.next("touch");
      this._mostRecentTarget = _getEventTarget(event);
    };
    this._options = __spreadValues(__spreadValues({}, INPUT_MODALITY_DETECTOR_DEFAULT_OPTIONS), options);
    this.modalityDetected = this._modality.pipe(skip(1));
    this.modalityChanged = this.modalityDetected.pipe(distinctUntilChanged());
    if (_platform.isBrowser) {
      ngZone.runOutsideAngular(() => {
        document2.addEventListener("keydown", this._onKeydown, modalityEventListenerOptions);
        document2.addEventListener("mousedown", this._onMousedown, modalityEventListenerOptions);
        document2.addEventListener("touchstart", this._onTouchstart, modalityEventListenerOptions);
      });
    }
  }
  ngOnDestroy() {
    this._modality.complete();
    if (this._platform.isBrowser) {
      document.removeEventListener("keydown", this._onKeydown, modalityEventListenerOptions);
      document.removeEventListener("mousedown", this._onMousedown, modalityEventListenerOptions);
      document.removeEventListener("touchstart", this._onTouchstart, modalityEventListenerOptions);
    }
  }
};
_InputModalityDetector.\u0275fac = function InputModalityDetector_Factory(t) {
  return new (t || _InputModalityDetector)(\u0275\u0275inject(Platform), \u0275\u0275inject(NgZone), \u0275\u0275inject(DOCUMENT2), \u0275\u0275inject(INPUT_MODALITY_DETECTOR_OPTIONS, 8));
};
_InputModalityDetector.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _InputModalityDetector,
  factory: _InputModalityDetector.\u0275fac,
  providedIn: "root"
});
var InputModalityDetector = _InputModalityDetector;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(InputModalityDetector, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: Platform
  }, {
    type: NgZone
  }, {
    type: Document,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [INPUT_MODALITY_DETECTOR_OPTIONS]
    }]
  }], null);
})();
var LIVE_ANNOUNCER_ELEMENT_TOKEN = new InjectionToken("liveAnnouncerElement", {
  providedIn: "root",
  factory: LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY
});
function LIVE_ANNOUNCER_ELEMENT_TOKEN_FACTORY() {
  return null;
}
var LIVE_ANNOUNCER_DEFAULT_OPTIONS = new InjectionToken("LIVE_ANNOUNCER_DEFAULT_OPTIONS");
var uniqueIds = 0;
var _LiveAnnouncer = class _LiveAnnouncer {
  constructor(elementToken, _ngZone, _document2, _defaultOptions) {
    this._ngZone = _ngZone;
    this._defaultOptions = _defaultOptions;
    this._document = _document2;
    this._liveElement = elementToken || this._createLiveElement();
  }
  announce(message, ...args) {
    const defaultOptions = this._defaultOptions;
    let politeness;
    let duration;
    if (args.length === 1 && typeof args[0] === "number") {
      duration = args[0];
    } else {
      [politeness, duration] = args;
    }
    this.clear();
    clearTimeout(this._previousTimeout);
    if (!politeness) {
      politeness = defaultOptions && defaultOptions.politeness ? defaultOptions.politeness : "polite";
    }
    if (duration == null && defaultOptions) {
      duration = defaultOptions.duration;
    }
    this._liveElement.setAttribute("aria-live", politeness);
    if (this._liveElement.id) {
      this._exposeAnnouncerToModals(this._liveElement.id);
    }
    return this._ngZone.runOutsideAngular(() => {
      if (!this._currentPromise) {
        this._currentPromise = new Promise((resolve) => this._currentResolve = resolve);
      }
      clearTimeout(this._previousTimeout);
      this._previousTimeout = setTimeout(() => {
        this._liveElement.textContent = message;
        if (typeof duration === "number") {
          this._previousTimeout = setTimeout(() => this.clear(), duration);
        }
        this._currentResolve();
        this._currentPromise = this._currentResolve = void 0;
      }, 100);
      return this._currentPromise;
    });
  }
  /**
   * Clears the current text from the announcer element. Can be used to prevent
   * screen readers from reading the text out again while the user is going
   * through the page landmarks.
   */
  clear() {
    if (this._liveElement) {
      this._liveElement.textContent = "";
    }
  }
  ngOnDestroy() {
    clearTimeout(this._previousTimeout);
    this._liveElement?.remove();
    this._liveElement = null;
    this._currentResolve?.();
    this._currentPromise = this._currentResolve = void 0;
  }
  _createLiveElement() {
    const elementClass = "cdk-live-announcer-element";
    const previousElements = this._document.getElementsByClassName(elementClass);
    const liveEl = this._document.createElement("div");
    for (let i = 0; i < previousElements.length; i++) {
      previousElements[i].remove();
    }
    liveEl.classList.add(elementClass);
    liveEl.classList.add("cdk-visually-hidden");
    liveEl.setAttribute("aria-atomic", "true");
    liveEl.setAttribute("aria-live", "polite");
    liveEl.id = `cdk-live-announcer-${uniqueIds++}`;
    this._document.body.appendChild(liveEl);
    return liveEl;
  }
  /**
   * Some browsers won't expose the accessibility node of the live announcer element if there is an
   * `aria-modal` and the live announcer is outside of it. This method works around the issue by
   * pointing the `aria-owns` of all modals to the live announcer element.
   */
  _exposeAnnouncerToModals(id) {
    const modals = this._document.querySelectorAll('body > .cdk-overlay-container [aria-modal="true"]');
    for (let i = 0; i < modals.length; i++) {
      const modal = modals[i];
      const ariaOwns = modal.getAttribute("aria-owns");
      if (!ariaOwns) {
        modal.setAttribute("aria-owns", id);
      } else if (ariaOwns.indexOf(id) === -1) {
        modal.setAttribute("aria-owns", ariaOwns + " " + id);
      }
    }
  }
};
_LiveAnnouncer.\u0275fac = function LiveAnnouncer_Factory(t) {
  return new (t || _LiveAnnouncer)(\u0275\u0275inject(LIVE_ANNOUNCER_ELEMENT_TOKEN, 8), \u0275\u0275inject(NgZone), \u0275\u0275inject(DOCUMENT2), \u0275\u0275inject(LIVE_ANNOUNCER_DEFAULT_OPTIONS, 8));
};
_LiveAnnouncer.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _LiveAnnouncer,
  factory: _LiveAnnouncer.\u0275fac,
  providedIn: "root"
});
var LiveAnnouncer = _LiveAnnouncer;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(LiveAnnouncer, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [LIVE_ANNOUNCER_ELEMENT_TOKEN]
    }]
  }, {
    type: NgZone
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [LIVE_ANNOUNCER_DEFAULT_OPTIONS]
    }]
  }], null);
})();
var _CdkAriaLive = class _CdkAriaLive {
  /** The aria-live politeness level to use when announcing messages. */
  get politeness() {
    return this._politeness;
  }
  set politeness(value) {
    this._politeness = value === "off" || value === "assertive" ? value : "polite";
    if (this._politeness === "off") {
      if (this._subscription) {
        this._subscription.unsubscribe();
        this._subscription = null;
      }
    } else if (!this._subscription) {
      this._subscription = this._ngZone.runOutsideAngular(() => {
        return this._contentObserver.observe(this._elementRef).subscribe(() => {
          const elementText = this._elementRef.nativeElement.textContent;
          if (elementText !== this._previousAnnouncedText) {
            this._liveAnnouncer.announce(elementText, this._politeness, this.duration);
            this._previousAnnouncedText = elementText;
          }
        });
      });
    }
  }
  constructor(_elementRef, _liveAnnouncer, _contentObserver, _ngZone) {
    this._elementRef = _elementRef;
    this._liveAnnouncer = _liveAnnouncer;
    this._contentObserver = _contentObserver;
    this._ngZone = _ngZone;
    this._politeness = "polite";
  }
  ngOnDestroy() {
    if (this._subscription) {
      this._subscription.unsubscribe();
    }
  }
};
_CdkAriaLive.\u0275fac = function CdkAriaLive_Factory(t) {
  return new (t || _CdkAriaLive)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(LiveAnnouncer), \u0275\u0275directiveInject(ContentObserver), \u0275\u0275directiveInject(NgZone));
};
_CdkAriaLive.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _CdkAriaLive,
  selectors: [["", "cdkAriaLive", ""]],
  inputs: {
    politeness: ["cdkAriaLive", "politeness"],
    duration: ["cdkAriaLiveDuration", "duration"]
  },
  exportAs: ["cdkAriaLive"]
});
var CdkAriaLive = _CdkAriaLive;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CdkAriaLive, [{
    type: Directive,
    args: [{
      selector: "[cdkAriaLive]",
      exportAs: "cdkAriaLive"
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: LiveAnnouncer
  }, {
    type: ContentObserver
  }, {
    type: NgZone
  }], {
    politeness: [{
      type: Input,
      args: ["cdkAriaLive"]
    }],
    duration: [{
      type: Input,
      args: ["cdkAriaLiveDuration"]
    }]
  });
})();
var FOCUS_MONITOR_DEFAULT_OPTIONS = new InjectionToken("cdk-focus-monitor-default-options");
var captureEventListenerOptions = normalizePassiveListenerOptions({
  passive: true,
  capture: true
});
var _FocusMonitor = class _FocusMonitor {
  constructor(_ngZone, _platform, _inputModalityDetector, document2, options) {
    this._ngZone = _ngZone;
    this._platform = _platform;
    this._inputModalityDetector = _inputModalityDetector;
    this._origin = null;
    this._windowFocused = false;
    this._originFromTouchInteraction = false;
    this._elementInfo = /* @__PURE__ */ new Map();
    this._monitoredElementCount = 0;
    this._rootNodeFocusListenerCount = /* @__PURE__ */ new Map();
    this._windowFocusListener = () => {
      this._windowFocused = true;
      this._windowFocusTimeoutId = window.setTimeout(() => this._windowFocused = false);
    };
    this._stopInputModalityDetector = new Subject();
    this._rootNodeFocusAndBlurListener = (event) => {
      const target = _getEventTarget(event);
      for (let element = target; element; element = element.parentElement) {
        if (event.type === "focus") {
          this._onFocus(event, element);
        } else {
          this._onBlur(event, element);
        }
      }
    };
    this._document = document2;
    this._detectionMode = options?.detectionMode || 0;
  }
  monitor(element, checkChildren = false) {
    const nativeElement = coerceElement(element);
    if (!this._platform.isBrowser || nativeElement.nodeType !== 1) {
      return of();
    }
    const rootNode = _getShadowRoot(nativeElement) || this._getDocument();
    const cachedInfo = this._elementInfo.get(nativeElement);
    if (cachedInfo) {
      if (checkChildren) {
        cachedInfo.checkChildren = true;
      }
      return cachedInfo.subject;
    }
    const info = {
      checkChildren,
      subject: new Subject(),
      rootNode
    };
    this._elementInfo.set(nativeElement, info);
    this._registerGlobalListeners(info);
    return info.subject;
  }
  stopMonitoring(element) {
    const nativeElement = coerceElement(element);
    const elementInfo = this._elementInfo.get(nativeElement);
    if (elementInfo) {
      elementInfo.subject.complete();
      this._setClasses(nativeElement);
      this._elementInfo.delete(nativeElement);
      this._removeGlobalListeners(elementInfo);
    }
  }
  focusVia(element, origin, options) {
    const nativeElement = coerceElement(element);
    const focusedElement = this._getDocument().activeElement;
    if (nativeElement === focusedElement) {
      this._getClosestElementsInfo(nativeElement).forEach(([currentElement, info]) => this._originChanged(currentElement, origin, info));
    } else {
      this._setOrigin(origin);
      if (typeof nativeElement.focus === "function") {
        nativeElement.focus(options);
      }
    }
  }
  ngOnDestroy() {
    this._elementInfo.forEach((_info, element) => this.stopMonitoring(element));
  }
  /** Access injected document if available or fallback to global document reference */
  _getDocument() {
    return this._document || document;
  }
  /** Use defaultView of injected document if available or fallback to global window reference */
  _getWindow() {
    const doc = this._getDocument();
    return doc.defaultView || window;
  }
  _getFocusOrigin(focusEventTarget) {
    if (this._origin) {
      if (this._originFromTouchInteraction) {
        return this._shouldBeAttributedToTouch(focusEventTarget) ? "touch" : "program";
      } else {
        return this._origin;
      }
    }
    if (this._windowFocused && this._lastFocusOrigin) {
      return this._lastFocusOrigin;
    }
    if (focusEventTarget && this._isLastInteractionFromInputLabel(focusEventTarget)) {
      return "mouse";
    }
    return "program";
  }
  /**
   * Returns whether the focus event should be attributed to touch. Recall that in IMMEDIATE mode, a
   * touch origin isn't immediately reset at the next tick (see _setOrigin). This means that when we
   * handle a focus event following a touch interaction, we need to determine whether (1) the focus
   * event was directly caused by the touch interaction or (2) the focus event was caused by a
   * subsequent programmatic focus call triggered by the touch interaction.
   * @param focusEventTarget The target of the focus event under examination.
   */
  _shouldBeAttributedToTouch(focusEventTarget) {
    return this._detectionMode === 1 || !!focusEventTarget?.contains(this._inputModalityDetector._mostRecentTarget);
  }
  /**
   * Sets the focus classes on the element based on the given focus origin.
   * @param element The element to update the classes on.
   * @param origin The focus origin.
   */
  _setClasses(element, origin) {
    element.classList.toggle("cdk-focused", !!origin);
    element.classList.toggle("cdk-touch-focused", origin === "touch");
    element.classList.toggle("cdk-keyboard-focused", origin === "keyboard");
    element.classList.toggle("cdk-mouse-focused", origin === "mouse");
    element.classList.toggle("cdk-program-focused", origin === "program");
  }
  /**
   * Updates the focus origin. If we're using immediate detection mode, we schedule an async
   * function to clear the origin at the end of a timeout. The duration of the timeout depends on
   * the origin being set.
   * @param origin The origin to set.
   * @param isFromInteraction Whether we are setting the origin from an interaction event.
   */
  _setOrigin(origin, isFromInteraction = false) {
    this._ngZone.runOutsideAngular(() => {
      this._origin = origin;
      this._originFromTouchInteraction = origin === "touch" && isFromInteraction;
      if (this._detectionMode === 0) {
        clearTimeout(this._originTimeoutId);
        const ms = this._originFromTouchInteraction ? TOUCH_BUFFER_MS : 1;
        this._originTimeoutId = setTimeout(() => this._origin = null, ms);
      }
    });
  }
  /**
   * Handles focus events on a registered element.
   * @param event The focus event.
   * @param element The monitored element.
   */
  _onFocus(event, element) {
    const elementInfo = this._elementInfo.get(element);
    const focusEventTarget = _getEventTarget(event);
    if (!elementInfo || !elementInfo.checkChildren && element !== focusEventTarget) {
      return;
    }
    this._originChanged(element, this._getFocusOrigin(focusEventTarget), elementInfo);
  }
  /**
   * Handles blur events on a registered element.
   * @param event The blur event.
   * @param element The monitored element.
   */
  _onBlur(event, element) {
    const elementInfo = this._elementInfo.get(element);
    if (!elementInfo || elementInfo.checkChildren && event.relatedTarget instanceof Node && element.contains(event.relatedTarget)) {
      return;
    }
    this._setClasses(element);
    this._emitOrigin(elementInfo, null);
  }
  _emitOrigin(info, origin) {
    if (info.subject.observers.length) {
      this._ngZone.run(() => info.subject.next(origin));
    }
  }
  _registerGlobalListeners(elementInfo) {
    if (!this._platform.isBrowser) {
      return;
    }
    const rootNode = elementInfo.rootNode;
    const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode) || 0;
    if (!rootNodeFocusListeners) {
      this._ngZone.runOutsideAngular(() => {
        rootNode.addEventListener("focus", this._rootNodeFocusAndBlurListener, captureEventListenerOptions);
        rootNode.addEventListener("blur", this._rootNodeFocusAndBlurListener, captureEventListenerOptions);
      });
    }
    this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners + 1);
    if (++this._monitoredElementCount === 1) {
      this._ngZone.runOutsideAngular(() => {
        const window2 = this._getWindow();
        window2.addEventListener("focus", this._windowFocusListener);
      });
      this._inputModalityDetector.modalityDetected.pipe(takeUntil(this._stopInputModalityDetector)).subscribe((modality) => {
        this._setOrigin(
          modality,
          true
          /* isFromInteraction */
        );
      });
    }
  }
  _removeGlobalListeners(elementInfo) {
    const rootNode = elementInfo.rootNode;
    if (this._rootNodeFocusListenerCount.has(rootNode)) {
      const rootNodeFocusListeners = this._rootNodeFocusListenerCount.get(rootNode);
      if (rootNodeFocusListeners > 1) {
        this._rootNodeFocusListenerCount.set(rootNode, rootNodeFocusListeners - 1);
      } else {
        rootNode.removeEventListener("focus", this._rootNodeFocusAndBlurListener, captureEventListenerOptions);
        rootNode.removeEventListener("blur", this._rootNodeFocusAndBlurListener, captureEventListenerOptions);
        this._rootNodeFocusListenerCount.delete(rootNode);
      }
    }
    if (!--this._monitoredElementCount) {
      const window2 = this._getWindow();
      window2.removeEventListener("focus", this._windowFocusListener);
      this._stopInputModalityDetector.next();
      clearTimeout(this._windowFocusTimeoutId);
      clearTimeout(this._originTimeoutId);
    }
  }
  /** Updates all the state on an element once its focus origin has changed. */
  _originChanged(element, origin, elementInfo) {
    this._setClasses(element, origin);
    this._emitOrigin(elementInfo, origin);
    this._lastFocusOrigin = origin;
  }
  /**
   * Collects the `MonitoredElementInfo` of a particular element and
   * all of its ancestors that have enabled `checkChildren`.
   * @param element Element from which to start the search.
   */
  _getClosestElementsInfo(element) {
    const results = [];
    this._elementInfo.forEach((info, currentElement) => {
      if (currentElement === element || info.checkChildren && currentElement.contains(element)) {
        results.push([currentElement, info]);
      }
    });
    return results;
  }
  /**
   * Returns whether an interaction is likely to have come from the user clicking the `label` of
   * an `input` or `textarea` in order to focus it.
   * @param focusEventTarget Target currently receiving focus.
   */
  _isLastInteractionFromInputLabel(focusEventTarget) {
    const {
      _mostRecentTarget: mostRecentTarget,
      mostRecentModality
    } = this._inputModalityDetector;
    if (mostRecentModality !== "mouse" || !mostRecentTarget || mostRecentTarget === focusEventTarget || focusEventTarget.nodeName !== "INPUT" && focusEventTarget.nodeName !== "TEXTAREA" || focusEventTarget.disabled) {
      return false;
    }
    const labels = focusEventTarget.labels;
    if (labels) {
      for (let i = 0; i < labels.length; i++) {
        if (labels[i].contains(mostRecentTarget)) {
          return true;
        }
      }
    }
    return false;
  }
};
_FocusMonitor.\u0275fac = function FocusMonitor_Factory(t) {
  return new (t || _FocusMonitor)(\u0275\u0275inject(NgZone), \u0275\u0275inject(Platform), \u0275\u0275inject(InputModalityDetector), \u0275\u0275inject(DOCUMENT2, 8), \u0275\u0275inject(FOCUS_MONITOR_DEFAULT_OPTIONS, 8));
};
_FocusMonitor.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _FocusMonitor,
  factory: _FocusMonitor.\u0275fac,
  providedIn: "root"
});
var FocusMonitor = _FocusMonitor;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(FocusMonitor, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: NgZone
  }, {
    type: Platform
  }, {
    type: InputModalityDetector
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [DOCUMENT2]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [FOCUS_MONITOR_DEFAULT_OPTIONS]
    }]
  }], null);
})();
var _CdkMonitorFocus = class _CdkMonitorFocus {
  constructor(_elementRef, _focusMonitor) {
    this._elementRef = _elementRef;
    this._focusMonitor = _focusMonitor;
    this._focusOrigin = null;
    this.cdkFocusChange = new EventEmitter();
  }
  get focusOrigin() {
    return this._focusOrigin;
  }
  ngAfterViewInit() {
    const element = this._elementRef.nativeElement;
    this._monitorSubscription = this._focusMonitor.monitor(element, element.nodeType === 1 && element.hasAttribute("cdkMonitorSubtreeFocus")).subscribe((origin) => {
      this._focusOrigin = origin;
      this.cdkFocusChange.emit(origin);
    });
  }
  ngOnDestroy() {
    this._focusMonitor.stopMonitoring(this._elementRef);
    if (this._monitorSubscription) {
      this._monitorSubscription.unsubscribe();
    }
  }
};
_CdkMonitorFocus.\u0275fac = function CdkMonitorFocus_Factory(t) {
  return new (t || _CdkMonitorFocus)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(FocusMonitor));
};
_CdkMonitorFocus.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _CdkMonitorFocus,
  selectors: [["", "cdkMonitorElementFocus", ""], ["", "cdkMonitorSubtreeFocus", ""]],
  outputs: {
    cdkFocusChange: "cdkFocusChange"
  },
  exportAs: ["cdkMonitorFocus"]
});
var CdkMonitorFocus = _CdkMonitorFocus;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CdkMonitorFocus, [{
    type: Directive,
    args: [{
      selector: "[cdkMonitorElementFocus], [cdkMonitorSubtreeFocus]",
      exportAs: "cdkMonitorFocus"
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: FocusMonitor
  }], {
    cdkFocusChange: [{
      type: Output
    }]
  });
})();
var BLACK_ON_WHITE_CSS_CLASS = "cdk-high-contrast-black-on-white";
var WHITE_ON_BLACK_CSS_CLASS = "cdk-high-contrast-white-on-black";
var HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS = "cdk-high-contrast-active";
var _HighContrastModeDetector = class _HighContrastModeDetector {
  constructor(_platform, document2) {
    this._platform = _platform;
    this._document = document2;
    this._breakpointSubscription = inject(BreakpointObserver).observe("(forced-colors: active)").subscribe(() => {
      if (this._hasCheckedHighContrastMode) {
        this._hasCheckedHighContrastMode = false;
        this._applyBodyHighContrastModeCssClasses();
      }
    });
  }
  /** Gets the current high-contrast-mode for the page. */
  getHighContrastMode() {
    if (!this._platform.isBrowser) {
      return 0;
    }
    const testElement = this._document.createElement("div");
    testElement.style.backgroundColor = "rgb(1,2,3)";
    testElement.style.position = "absolute";
    this._document.body.appendChild(testElement);
    const documentWindow = this._document.defaultView || window;
    const computedStyle = documentWindow && documentWindow.getComputedStyle ? documentWindow.getComputedStyle(testElement) : null;
    const computedColor = (computedStyle && computedStyle.backgroundColor || "").replace(/ /g, "");
    testElement.remove();
    switch (computedColor) {
      case "rgb(0,0,0)":
      case "rgb(45,50,54)":
      case "rgb(32,32,32)":
        return 2;
      case "rgb(255,255,255)":
      case "rgb(255,250,239)":
        return 1;
    }
    return 0;
  }
  ngOnDestroy() {
    this._breakpointSubscription.unsubscribe();
  }
  /** Applies CSS classes indicating high-contrast mode to document body (browser-only). */
  _applyBodyHighContrastModeCssClasses() {
    if (!this._hasCheckedHighContrastMode && this._platform.isBrowser && this._document.body) {
      const bodyClasses = this._document.body.classList;
      bodyClasses.remove(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, BLACK_ON_WHITE_CSS_CLASS, WHITE_ON_BLACK_CSS_CLASS);
      this._hasCheckedHighContrastMode = true;
      const mode = this.getHighContrastMode();
      if (mode === 1) {
        bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, BLACK_ON_WHITE_CSS_CLASS);
      } else if (mode === 2) {
        bodyClasses.add(HIGH_CONTRAST_MODE_ACTIVE_CSS_CLASS, WHITE_ON_BLACK_CSS_CLASS);
      }
    }
  }
};
_HighContrastModeDetector.\u0275fac = function HighContrastModeDetector_Factory(t) {
  return new (t || _HighContrastModeDetector)(\u0275\u0275inject(Platform), \u0275\u0275inject(DOCUMENT2));
};
_HighContrastModeDetector.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _HighContrastModeDetector,
  factory: _HighContrastModeDetector.\u0275fac,
  providedIn: "root"
});
var HighContrastModeDetector = _HighContrastModeDetector;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HighContrastModeDetector, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: Platform
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }], null);
})();
var _A11yModule = class _A11yModule {
  constructor(highContrastModeDetector) {
    highContrastModeDetector._applyBodyHighContrastModeCssClasses();
  }
};
_A11yModule.\u0275fac = function A11yModule_Factory(t) {
  return new (t || _A11yModule)(\u0275\u0275inject(HighContrastModeDetector));
};
_A11yModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _A11yModule
});
_A11yModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
  imports: [ObserversModule]
});
var A11yModule = _A11yModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(A11yModule, [{
    type: NgModule,
    args: [{
      imports: [ObserversModule],
      declarations: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus],
      exports: [CdkAriaLive, CdkTrapFocus, CdkMonitorFocus]
    }]
  }], () => [{
    type: HighContrastModeDetector
  }], null);
})();

// node_modules/@angular/cdk/fesm2022/dialog.mjs
function CdkDialogContainer_ng_template_0_Template(rf, ctx) {
}
var DialogConfig = class {
  constructor() {
    this.role = "dialog";
    this.panelClass = "";
    this.hasBackdrop = true;
    this.backdropClass = "";
    this.disableClose = false;
    this.width = "";
    this.height = "";
    this.data = null;
    this.ariaDescribedBy = null;
    this.ariaLabelledBy = null;
    this.ariaLabel = null;
    this.ariaModal = true;
    this.autoFocus = "first-tabbable";
    this.restoreFocus = true;
    this.closeOnNavigation = true;
    this.closeOnDestroy = true;
    this.closeOnOverlayDetachments = true;
  }
};
function throwDialogContentAlreadyAttachedError() {
  throw Error("Attempting to attach dialog content after content is already attached");
}
var _CdkDialogContainer = class _CdkDialogContainer extends BasePortalOutlet {
  constructor(_elementRef, _focusTrapFactory, _document2, _config, _interactivityChecker, _ngZone, _overlayRef, _focusMonitor) {
    super();
    this._elementRef = _elementRef;
    this._focusTrapFactory = _focusTrapFactory;
    this._config = _config;
    this._interactivityChecker = _interactivityChecker;
    this._ngZone = _ngZone;
    this._overlayRef = _overlayRef;
    this._focusMonitor = _focusMonitor;
    this._elementFocusedBeforeDialogWasOpened = null;
    this._closeInteractionType = null;
    this._ariaLabelledByQueue = [];
    this.attachDomPortal = (portal) => {
      if (this._portalOutlet.hasAttached() && (typeof ngDevMode === "undefined" || ngDevMode)) {
        throwDialogContentAlreadyAttachedError();
      }
      const result = this._portalOutlet.attachDomPortal(portal);
      this._contentAttached();
      return result;
    };
    this._document = _document2;
    if (this._config.ariaLabelledBy) {
      this._ariaLabelledByQueue.push(this._config.ariaLabelledBy);
    }
  }
  _contentAttached() {
    this._initializeFocusTrap();
    this._handleBackdropClicks();
    this._captureInitialFocus();
  }
  /**
   * Can be used by child classes to customize the initial focus
   * capturing behavior (e.g. if it's tied to an animation).
   */
  _captureInitialFocus() {
    this._trapFocus();
  }
  ngOnDestroy() {
    this._restoreFocus();
  }
  /**
   * Attach a ComponentPortal as content to this dialog container.
   * @param portal Portal to be attached as the dialog content.
   */
  attachComponentPortal(portal) {
    if (this._portalOutlet.hasAttached() && (typeof ngDevMode === "undefined" || ngDevMode)) {
      throwDialogContentAlreadyAttachedError();
    }
    const result = this._portalOutlet.attachComponentPortal(portal);
    this._contentAttached();
    return result;
  }
  /**
   * Attach a TemplatePortal as content to this dialog container.
   * @param portal Portal to be attached as the dialog content.
   */
  attachTemplatePortal(portal) {
    if (this._portalOutlet.hasAttached() && (typeof ngDevMode === "undefined" || ngDevMode)) {
      throwDialogContentAlreadyAttachedError();
    }
    const result = this._portalOutlet.attachTemplatePortal(portal);
    this._contentAttached();
    return result;
  }
  // TODO(crisbeto): this shouldn't be exposed, but there are internal references to it.
  /** Captures focus if it isn't already inside the dialog. */
  _recaptureFocus() {
    if (!this._containsFocus()) {
      this._trapFocus();
    }
  }
  /**
   * Focuses the provided element. If the element is not focusable, it will add a tabIndex
   * attribute to forcefully focus it. The attribute is removed after focus is moved.
   * @param element The element to focus.
   */
  _forceFocus(element, options) {
    if (!this._interactivityChecker.isFocusable(element)) {
      element.tabIndex = -1;
      this._ngZone.runOutsideAngular(() => {
        const callback = () => {
          element.removeEventListener("blur", callback);
          element.removeEventListener("mousedown", callback);
          element.removeAttribute("tabindex");
        };
        element.addEventListener("blur", callback);
        element.addEventListener("mousedown", callback);
      });
    }
    element.focus(options);
  }
  /**
   * Focuses the first element that matches the given selector within the focus trap.
   * @param selector The CSS selector for the element to set focus to.
   */
  _focusByCssSelector(selector, options) {
    let elementToFocus = this._elementRef.nativeElement.querySelector(selector);
    if (elementToFocus) {
      this._forceFocus(elementToFocus, options);
    }
  }
  /**
   * Moves the focus inside the focus trap. When autoFocus is not set to 'dialog', if focus
   * cannot be moved then focus will go to the dialog container.
   */
  _trapFocus() {
    const element = this._elementRef.nativeElement;
    switch (this._config.autoFocus) {
      case false:
      case "dialog":
        if (!this._containsFocus()) {
          element.focus();
        }
        break;
      case true:
      case "first-tabbable":
        this._focusTrap.focusInitialElementWhenReady().then((focusedSuccessfully) => {
          if (!focusedSuccessfully) {
            this._focusDialogContainer();
          }
        });
        break;
      case "first-heading":
        this._focusByCssSelector('h1, h2, h3, h4, h5, h6, [role="heading"]');
        break;
      default:
        this._focusByCssSelector(this._config.autoFocus);
        break;
    }
  }
  /** Restores focus to the element that was focused before the dialog opened. */
  _restoreFocus() {
    const focusConfig = this._config.restoreFocus;
    let focusTargetElement = null;
    if (typeof focusConfig === "string") {
      focusTargetElement = this._document.querySelector(focusConfig);
    } else if (typeof focusConfig === "boolean") {
      focusTargetElement = focusConfig ? this._elementFocusedBeforeDialogWasOpened : null;
    } else if (focusConfig) {
      focusTargetElement = focusConfig;
    }
    if (this._config.restoreFocus && focusTargetElement && typeof focusTargetElement.focus === "function") {
      const activeElement = _getFocusedElementPierceShadowDom();
      const element = this._elementRef.nativeElement;
      if (!activeElement || activeElement === this._document.body || activeElement === element || element.contains(activeElement)) {
        if (this._focusMonitor) {
          this._focusMonitor.focusVia(focusTargetElement, this._closeInteractionType);
          this._closeInteractionType = null;
        } else {
          focusTargetElement.focus();
        }
      }
    }
    if (this._focusTrap) {
      this._focusTrap.destroy();
    }
  }
  /** Focuses the dialog container. */
  _focusDialogContainer() {
    if (this._elementRef.nativeElement.focus) {
      this._elementRef.nativeElement.focus();
    }
  }
  /** Returns whether focus is inside the dialog. */
  _containsFocus() {
    const element = this._elementRef.nativeElement;
    const activeElement = _getFocusedElementPierceShadowDom();
    return element === activeElement || element.contains(activeElement);
  }
  /** Sets up the focus trap. */
  _initializeFocusTrap() {
    this._focusTrap = this._focusTrapFactory.create(this._elementRef.nativeElement);
    if (this._document) {
      this._elementFocusedBeforeDialogWasOpened = _getFocusedElementPierceShadowDom();
    }
  }
  /** Sets up the listener that handles clicks on the dialog backdrop. */
  _handleBackdropClicks() {
    this._overlayRef.backdropClick().subscribe(() => {
      if (this._config.disableClose) {
        this._recaptureFocus();
      }
    });
  }
};
_CdkDialogContainer.\u0275fac = function CdkDialogContainer_Factory(t) {
  return new (t || _CdkDialogContainer)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(FocusTrapFactory), \u0275\u0275directiveInject(DOCUMENT2, 8), \u0275\u0275directiveInject(DialogConfig), \u0275\u0275directiveInject(InteractivityChecker), \u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(OverlayRef), \u0275\u0275directiveInject(FocusMonitor));
};
_CdkDialogContainer.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _CdkDialogContainer,
  selectors: [["cdk-dialog-container"]],
  viewQuery: function CdkDialogContainer_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(CdkPortalOutlet, 7);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx._portalOutlet = _t.first);
    }
  },
  hostAttrs: ["tabindex", "-1", 1, "cdk-dialog-container"],
  hostVars: 6,
  hostBindings: function CdkDialogContainer_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275attribute("id", ctx._config.id || null)("role", ctx._config.role)("aria-modal", ctx._config.ariaModal)("aria-labelledby", ctx._config.ariaLabel ? null : ctx._ariaLabelledByQueue[0])("aria-label", ctx._config.ariaLabel)("aria-describedby", ctx._config.ariaDescribedBy || null);
    }
  },
  standalone: true,
  features: [\u0275\u0275InheritDefinitionFeature, \u0275\u0275StandaloneFeature],
  decls: 1,
  vars: 0,
  consts: [["cdkPortalOutlet", ""]],
  template: function CdkDialogContainer_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275template(0, CdkDialogContainer_ng_template_0_Template, 0, 0, "ng-template", 0);
    }
  },
  dependencies: [PortalModule, CdkPortalOutlet],
  styles: [".cdk-dialog-container{display:block;width:100%;height:100%;min-height:inherit;max-height:inherit}"],
  encapsulation: 2
});
var CdkDialogContainer = _CdkDialogContainer;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(CdkDialogContainer, [{
    type: Component,
    args: [{
      selector: "cdk-dialog-container",
      encapsulation: ViewEncapsulation$1.None,
      changeDetection: ChangeDetectionStrategy.Default,
      standalone: true,
      imports: [PortalModule],
      host: {
        "class": "cdk-dialog-container",
        "tabindex": "-1",
        "[attr.id]": "_config.id || null",
        "[attr.role]": "_config.role",
        "[attr.aria-modal]": "_config.ariaModal",
        "[attr.aria-labelledby]": "_config.ariaLabel ? null : _ariaLabelledByQueue[0]",
        "[attr.aria-label]": "_config.ariaLabel",
        "[attr.aria-describedby]": "_config.ariaDescribedBy || null"
      },
      template: "<ng-template cdkPortalOutlet></ng-template>\n",
      styles: [".cdk-dialog-container{display:block;width:100%;height:100%;min-height:inherit;max-height:inherit}"]
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: FocusTrapFactory
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [DOCUMENT2]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DialogConfig]
    }]
  }, {
    type: InteractivityChecker
  }, {
    type: NgZone
  }, {
    type: OverlayRef
  }, {
    type: FocusMonitor
  }], {
    _portalOutlet: [{
      type: ViewChild,
      args: [CdkPortalOutlet, {
        static: true
      }]
    }]
  });
})();
var DialogRef = class {
  constructor(overlayRef, config2) {
    this.overlayRef = overlayRef;
    this.config = config2;
    this.closed = new Subject();
    this.disableClose = config2.disableClose;
    this.backdropClick = overlayRef.backdropClick();
    this.keydownEvents = overlayRef.keydownEvents();
    this.outsidePointerEvents = overlayRef.outsidePointerEvents();
    this.id = config2.id;
    this.keydownEvents.subscribe((event) => {
      if (event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)) {
        event.preventDefault();
        this.close(void 0, {
          focusOrigin: "keyboard"
        });
      }
    });
    this.backdropClick.subscribe(() => {
      if (!this.disableClose) {
        this.close(void 0, {
          focusOrigin: "mouse"
        });
      }
    });
    this._detachSubscription = overlayRef.detachments().subscribe(() => {
      if (config2.closeOnOverlayDetachments !== false) {
        this.close();
      }
    });
  }
  /**
   * Close the dialog.
   * @param result Optional result to return to the dialog opener.
   * @param options Additional options to customize the closing behavior.
   */
  close(result, options) {
    if (this.containerInstance) {
      const closedSubject = this.closed;
      this.containerInstance._closeInteractionType = options?.focusOrigin || "program";
      this._detachSubscription.unsubscribe();
      this.overlayRef.dispose();
      closedSubject.next(result);
      closedSubject.complete();
      this.componentInstance = this.containerInstance = null;
    }
  }
  /** Updates the position of the dialog based on the current position strategy. */
  updatePosition() {
    this.overlayRef.updatePosition();
    return this;
  }
  /**
   * Updates the dialog's width and height.
   * @param width New width of the dialog.
   * @param height New height of the dialog.
   */
  updateSize(width = "", height = "") {
    this.overlayRef.updateSize({
      width,
      height
    });
    return this;
  }
  /** Add a CSS class or an array of classes to the overlay pane. */
  addPanelClass(classes) {
    this.overlayRef.addPanelClass(classes);
    return this;
  }
  /** Remove a CSS class or an array of classes from the overlay pane. */
  removePanelClass(classes) {
    this.overlayRef.removePanelClass(classes);
    return this;
  }
};
var DIALOG_SCROLL_STRATEGY = new InjectionToken("DialogScrollStrategy", {
  providedIn: "root",
  factory: () => {
    const overlay = inject(Overlay);
    return () => overlay.scrollStrategies.block();
  }
});
var DIALOG_DATA = new InjectionToken("DialogData");
var DEFAULT_DIALOG_CONFIG = new InjectionToken("DefaultDialogConfig");
var uniqueId = 0;
var _Dialog = class _Dialog {
  /** Keeps track of the currently-open dialogs. */
  get openDialogs() {
    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;
  }
  /** Stream that emits when a dialog has been opened. */
  get afterOpened() {
    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;
  }
  constructor(_overlay, _injector, _defaultOptions, _parentDialog, _overlayContainer, scrollStrategy) {
    this._overlay = _overlay;
    this._injector = _injector;
    this._defaultOptions = _defaultOptions;
    this._parentDialog = _parentDialog;
    this._overlayContainer = _overlayContainer;
    this._openDialogsAtThisLevel = [];
    this._afterAllClosedAtThisLevel = new Subject();
    this._afterOpenedAtThisLevel = new Subject();
    this._ariaHiddenElements = /* @__PURE__ */ new Map();
    this.afterAllClosed = defer(() => this.openDialogs.length ? this._getAfterAllClosed() : this._getAfterAllClosed().pipe(startWith(void 0)));
    this._scrollStrategy = scrollStrategy;
  }
  open(componentOrTemplateRef, config2) {
    const defaults = this._defaultOptions || new DialogConfig();
    config2 = __spreadValues(__spreadValues({}, defaults), config2);
    config2.id = config2.id || `cdk-dialog-${uniqueId++}`;
    if (config2.id && this.getDialogById(config2.id) && (typeof ngDevMode === "undefined" || ngDevMode)) {
      throw Error(`Dialog with id "${config2.id}" exists already. The dialog id must be unique.`);
    }
    const overlayConfig = this._getOverlayConfig(config2);
    const overlayRef = this._overlay.create(overlayConfig);
    const dialogRef = new DialogRef(overlayRef, config2);
    const dialogContainer = this._attachContainer(overlayRef, dialogRef, config2);
    dialogRef.containerInstance = dialogContainer;
    this._attachDialogContent(componentOrTemplateRef, dialogRef, dialogContainer, config2);
    if (!this.openDialogs.length) {
      this._hideNonDialogContentFromAssistiveTechnology();
    }
    this.openDialogs.push(dialogRef);
    dialogRef.closed.subscribe(() => this._removeOpenDialog(dialogRef, true));
    this.afterOpened.next(dialogRef);
    return dialogRef;
  }
  /**
   * Closes all of the currently-open dialogs.
   */
  closeAll() {
    reverseForEach(this.openDialogs, (dialog) => dialog.close());
  }
  /**
   * Finds an open dialog by its id.
   * @param id ID to use when looking up the dialog.
   */
  getDialogById(id) {
    return this.openDialogs.find((dialog) => dialog.id === id);
  }
  ngOnDestroy() {
    reverseForEach(this._openDialogsAtThisLevel, (dialog) => {
      if (dialog.config.closeOnDestroy === false) {
        this._removeOpenDialog(dialog, false);
      }
    });
    reverseForEach(this._openDialogsAtThisLevel, (dialog) => dialog.close());
    this._afterAllClosedAtThisLevel.complete();
    this._afterOpenedAtThisLevel.complete();
    this._openDialogsAtThisLevel = [];
  }
  /**
   * Creates an overlay config from a dialog config.
   * @param config The dialog configuration.
   * @returns The overlay configuration.
   */
  _getOverlayConfig(config2) {
    const state2 = new OverlayConfig({
      positionStrategy: config2.positionStrategy || this._overlay.position().global().centerHorizontally().centerVertically(),
      scrollStrategy: config2.scrollStrategy || this._scrollStrategy(),
      panelClass: config2.panelClass,
      hasBackdrop: config2.hasBackdrop,
      direction: config2.direction,
      minWidth: config2.minWidth,
      minHeight: config2.minHeight,
      maxWidth: config2.maxWidth,
      maxHeight: config2.maxHeight,
      width: config2.width,
      height: config2.height,
      disposeOnNavigation: config2.closeOnNavigation
    });
    if (config2.backdropClass) {
      state2.backdropClass = config2.backdropClass;
    }
    return state2;
  }
  /**
   * Attaches a dialog container to a dialog's already-created overlay.
   * @param overlay Reference to the dialog's underlying overlay.
   * @param config The dialog configuration.
   * @returns A promise resolving to a ComponentRef for the attached container.
   */
  _attachContainer(overlay, dialogRef, config2) {
    const userInjector = config2.injector || config2.viewContainerRef?.injector;
    const providers = [{
      provide: DialogConfig,
      useValue: config2
    }, {
      provide: DialogRef,
      useValue: dialogRef
    }, {
      provide: OverlayRef,
      useValue: overlay
    }];
    let containerType;
    if (config2.container) {
      if (typeof config2.container === "function") {
        containerType = config2.container;
      } else {
        containerType = config2.container.type;
        providers.push(...config2.container.providers(config2));
      }
    } else {
      containerType = CdkDialogContainer;
    }
    const containerPortal = new ComponentPortal(containerType, config2.viewContainerRef, Injector.create({
      parent: userInjector || this._injector,
      providers
    }), config2.componentFactoryResolver);
    const containerRef = overlay.attach(containerPortal);
    return containerRef.instance;
  }
  /**
   * Attaches the user-provided component to the already-created dialog container.
   * @param componentOrTemplateRef The type of component being loaded into the dialog,
   *     or a TemplateRef to instantiate as the content.
   * @param dialogRef Reference to the dialog being opened.
   * @param dialogContainer Component that is going to wrap the dialog content.
   * @param config Configuration used to open the dialog.
   */
  _attachDialogContent(componentOrTemplateRef, dialogRef, dialogContainer, config2) {
    if (componentOrTemplateRef instanceof TemplateRef) {
      const injector = this._createInjector(config2, dialogRef, dialogContainer, void 0);
      let context2 = {
        $implicit: config2.data,
        dialogRef
      };
      if (config2.templateContext) {
        context2 = __spreadValues(__spreadValues({}, context2), typeof config2.templateContext === "function" ? config2.templateContext() : config2.templateContext);
      }
      dialogContainer.attachTemplatePortal(new TemplatePortal(componentOrTemplateRef, null, context2, injector));
    } else {
      const injector = this._createInjector(config2, dialogRef, dialogContainer, this._injector);
      const contentRef = dialogContainer.attachComponentPortal(new ComponentPortal(componentOrTemplateRef, config2.viewContainerRef, injector, config2.componentFactoryResolver));
      dialogRef.componentRef = contentRef;
      dialogRef.componentInstance = contentRef.instance;
    }
  }
  /**
   * Creates a custom injector to be used inside the dialog. This allows a component loaded inside
   * of a dialog to close itself and, optionally, to return a value.
   * @param config Config object that is used to construct the dialog.
   * @param dialogRef Reference to the dialog being opened.
   * @param dialogContainer Component that is going to wrap the dialog content.
   * @param fallbackInjector Injector to use as a fallback when a lookup fails in the custom
   * dialog injector, if the user didn't provide a custom one.
   * @returns The custom injector that can be used inside the dialog.
   */
  _createInjector(config2, dialogRef, dialogContainer, fallbackInjector) {
    const userInjector = config2.injector || config2.viewContainerRef?.injector;
    const providers = [{
      provide: DIALOG_DATA,
      useValue: config2.data
    }, {
      provide: DialogRef,
      useValue: dialogRef
    }];
    if (config2.providers) {
      if (typeof config2.providers === "function") {
        providers.push(...config2.providers(dialogRef, config2, dialogContainer));
      } else {
        providers.push(...config2.providers);
      }
    }
    if (config2.direction && (!userInjector || !userInjector.get(Directionality, null, {
      optional: true
    }))) {
      providers.push({
        provide: Directionality,
        useValue: {
          value: config2.direction,
          change: of()
        }
      });
    }
    return Injector.create({
      parent: userInjector || fallbackInjector,
      providers
    });
  }
  /**
   * Removes a dialog from the array of open dialogs.
   * @param dialogRef Dialog to be removed.
   * @param emitEvent Whether to emit an event if this is the last dialog.
   */
  _removeOpenDialog(dialogRef, emitEvent) {
    const index = this.openDialogs.indexOf(dialogRef);
    if (index > -1) {
      this.openDialogs.splice(index, 1);
      if (!this.openDialogs.length) {
        this._ariaHiddenElements.forEach((previousValue, element) => {
          if (previousValue) {
            element.setAttribute("aria-hidden", previousValue);
          } else {
            element.removeAttribute("aria-hidden");
          }
        });
        this._ariaHiddenElements.clear();
        if (emitEvent) {
          this._getAfterAllClosed().next();
        }
      }
    }
  }
  /** Hides all of the content that isn't an overlay from assistive technology. */
  _hideNonDialogContentFromAssistiveTechnology() {
    const overlayContainer = this._overlayContainer.getContainerElement();
    if (overlayContainer.parentElement) {
      const siblings = overlayContainer.parentElement.children;
      for (let i = siblings.length - 1; i > -1; i--) {
        const sibling = siblings[i];
        if (sibling !== overlayContainer && sibling.nodeName !== "SCRIPT" && sibling.nodeName !== "STYLE" && !sibling.hasAttribute("aria-live")) {
          this._ariaHiddenElements.set(sibling, sibling.getAttribute("aria-hidden"));
          sibling.setAttribute("aria-hidden", "true");
        }
      }
    }
  }
  _getAfterAllClosed() {
    const parent = this._parentDialog;
    return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;
  }
};
_Dialog.\u0275fac = function Dialog_Factory(t) {
  return new (t || _Dialog)(\u0275\u0275inject(Overlay), \u0275\u0275inject(Injector), \u0275\u0275inject(DEFAULT_DIALOG_CONFIG, 8), \u0275\u0275inject(_Dialog, 12), \u0275\u0275inject(OverlayContainer), \u0275\u0275inject(DIALOG_SCROLL_STRATEGY));
};
_Dialog.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _Dialog,
  factory: _Dialog.\u0275fac,
  providedIn: "root"
});
var Dialog = _Dialog;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Dialog, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: Overlay
  }, {
    type: Injector
  }, {
    type: DialogConfig,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [DEFAULT_DIALOG_CONFIG]
    }]
  }, {
    type: Dialog,
    decorators: [{
      type: Optional
    }, {
      type: SkipSelf
    }]
  }, {
    type: OverlayContainer
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DIALOG_SCROLL_STRATEGY]
    }]
  }], null);
})();
function reverseForEach(items, callback) {
  let i = items.length;
  while (i--) {
    callback(items[i]);
  }
}
var _DialogModule = class _DialogModule {
};
_DialogModule.\u0275fac = function DialogModule_Factory(t) {
  return new (t || _DialogModule)();
};
_DialogModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _DialogModule
});
_DialogModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
  providers: [Dialog],
  imports: [
    OverlayModule,
    PortalModule,
    A11yModule,
    CdkDialogContainer,
    // Re-export the PortalModule so that people extending the `CdkDialogContainer`
    // don't have to remember to import it or be faced with an unhelpful error.
    PortalModule
  ]
});
var DialogModule = _DialogModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DialogModule, [{
    type: NgModule,
    args: [{
      imports: [OverlayModule, PortalModule, A11yModule, CdkDialogContainer],
      exports: [
        // Re-export the PortalModule so that people extending the `CdkDialogContainer`
        // don't have to remember to import it or be faced with an unhelpful error.
        PortalModule,
        CdkDialogContainer
      ],
      providers: [Dialog]
    }]
  }], null, null);
})();

// node_modules/@angular/cdk/fesm2022/cdk.mjs
var VERSION4 = new Version("17.0.4");

// node_modules/@angular/material/fesm2022/core.mjs
var _c02 = ["*", [["mat-option"], ["ng-container"]]];
var _c12 = ["*", "mat-option, ng-container"];
var _c2 = ["text"];
function MatOption_Conditional_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "mat-pseudo-checkbox", 6);
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("disabled", ctx_r0.disabled)("state", ctx_r0.selected ? "checked" : "unchecked");
  }
}
function MatOption_Conditional_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "mat-pseudo-checkbox", 7);
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275property("disabled", ctx_r2.disabled);
  }
}
function MatOption_Conditional_6_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 8);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r3 = \u0275\u0275nextContext();
    \u0275\u0275advance(1);
    \u0275\u0275textInterpolate1("(", ctx_r3.group.label, ")");
  }
}
var _c3 = [[["mat-icon"]], "*"];
var _c4 = ["mat-icon", "*"];
var VERSION5 = new Version("17.0.4");
var _AnimationCurves = class _AnimationCurves {
};
_AnimationCurves.STANDARD_CURVE = "cubic-bezier(0.4,0.0,0.2,1)";
_AnimationCurves.DECELERATION_CURVE = "cubic-bezier(0.0,0.0,0.2,1)";
_AnimationCurves.ACCELERATION_CURVE = "cubic-bezier(0.4,0.0,1,1)";
_AnimationCurves.SHARP_CURVE = "cubic-bezier(0.4,0.0,0.6,1)";
var AnimationCurves = _AnimationCurves;
var _AnimationDurations = class _AnimationDurations {
};
_AnimationDurations.COMPLEX = "375ms";
_AnimationDurations.ENTERING = "225ms";
_AnimationDurations.EXITING = "195ms";
var AnimationDurations = _AnimationDurations;
function MATERIAL_SANITY_CHECKS_FACTORY() {
  return true;
}
var MATERIAL_SANITY_CHECKS = new InjectionToken("mat-sanity-checks", {
  providedIn: "root",
  factory: MATERIAL_SANITY_CHECKS_FACTORY
});
var _MatCommonModule = class _MatCommonModule {
  constructor(highContrastModeDetector, _sanityChecks, _document2) {
    this._sanityChecks = _sanityChecks;
    this._document = _document2;
    this._hasDoneGlobalChecks = false;
    highContrastModeDetector._applyBodyHighContrastModeCssClasses();
    if (!this._hasDoneGlobalChecks) {
      this._hasDoneGlobalChecks = true;
      if (typeof ngDevMode === "undefined" || ngDevMode) {
        const platform = inject(Platform, {
          optional: true
        });
        if (this._checkIsEnabled("doctype")) {
          _checkDoctypeIsDefined(this._document);
        }
        if (this._checkIsEnabled("theme")) {
          _checkThemeIsPresent(this._document, !!platform?.isBrowser);
        }
        if (this._checkIsEnabled("version")) {
          _checkCdkVersionMatch();
        }
      }
    }
  }
  /** Gets whether a specific sanity check is enabled. */
  _checkIsEnabled(name) {
    if (_isTestEnvironment()) {
      return false;
    }
    if (typeof this._sanityChecks === "boolean") {
      return this._sanityChecks;
    }
    return !!this._sanityChecks[name];
  }
};
_MatCommonModule.\u0275fac = function MatCommonModule_Factory(t) {
  return new (t || _MatCommonModule)(\u0275\u0275inject(HighContrastModeDetector), \u0275\u0275inject(MATERIAL_SANITY_CHECKS, 8), \u0275\u0275inject(DOCUMENT2));
};
_MatCommonModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _MatCommonModule
});
_MatCommonModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
  imports: [BidiModule, BidiModule]
});
var MatCommonModule = _MatCommonModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MatCommonModule, [{
    type: NgModule,
    args: [{
      imports: [BidiModule],
      exports: [BidiModule]
    }]
  }], () => [{
    type: HighContrastModeDetector
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [MATERIAL_SANITY_CHECKS]
    }]
  }, {
    type: Document,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }], null);
})();
function _checkDoctypeIsDefined(doc) {
  if (!doc.doctype) {
    console.warn("Current document does not have a doctype. This may cause some Angular Material components not to behave as expected.");
  }
}
function _checkThemeIsPresent(doc, isBrowser) {
  if (!doc.body || !isBrowser) {
    return;
  }
  const testElement = doc.createElement("div");
  testElement.classList.add("mat-theme-loaded-marker");
  doc.body.appendChild(testElement);
  const computedStyle = getComputedStyle(testElement);
  if (computedStyle && computedStyle.display !== "none") {
    console.warn("Could not find Angular Material core theme. Most Material components may not work as expected. For more info refer to the theming guide: https://material.angular.io/guide/theming");
  }
  testElement.remove();
}
function _checkCdkVersionMatch() {
  if (VERSION5.full !== VERSION4.full) {
    console.warn("The Angular Material version (" + VERSION5.full + ") does not match the Angular CDK version (" + VERSION4.full + ").\nPlease ensure the versions of these two packages exactly match.");
  }
}
var MAT_DATE_LOCALE = new InjectionToken("MAT_DATE_LOCALE", {
  providedIn: "root",
  factory: MAT_DATE_LOCALE_FACTORY
});
function MAT_DATE_LOCALE_FACTORY() {
  return inject(LOCALE_ID);
}
var DateAdapter = class {
  constructor() {
    this._localeChanges = new Subject();
    this.localeChanges = this._localeChanges;
  }
  /**
   * Given a potential date object, returns that same date object if it is
   * a valid date, or `null` if it's not a valid date.
   * @param obj The object to check.
   * @returns A date or `null`.
   */
  getValidDateOrNull(obj) {
    return this.isDateInstance(obj) && this.isValid(obj) ? obj : null;
  }
  /**
   * Attempts to deserialize a value to a valid date object. This is different from parsing in that
   * deserialize should only accept non-ambiguous, locale-independent formats (e.g. a ISO 8601
   * string). The default implementation does not allow any deserialization, it simply checks that
   * the given value is already a valid date object or null. The `<mat-datepicker>` will call this
   * method on all of its `@Input()` properties that accept dates. It is therefore possible to
   * support passing values from your backend directly to these properties by overriding this method
   * to also deserialize the format used by your backend.
   * @param value The value to be deserialized into a date object.
   * @returns The deserialized date object, either a valid date, null if the value can be
   *     deserialized into a null date (e.g. the empty string), or an invalid date.
   */
  deserialize(value) {
    if (value == null || this.isDateInstance(value) && this.isValid(value)) {
      return value;
    }
    return this.invalid();
  }
  /**
   * Sets the locale used for all dates.
   * @param locale The new locale.
   */
  setLocale(locale) {
    this.locale = locale;
    this._localeChanges.next();
  }
  /**
   * Compares two dates.
   * @param first The first date to compare.
   * @param second The second date to compare.
   * @returns 0 if the dates are equal, a number less than 0 if the first date is earlier,
   *     a number greater than 0 if the first date is later.
   */
  compareDate(first2, second) {
    return this.getYear(first2) - this.getYear(second) || this.getMonth(first2) - this.getMonth(second) || this.getDate(first2) - this.getDate(second);
  }
  /**
   * Checks if two dates are equal.
   * @param first The first date to check.
   * @param second The second date to check.
   * @returns Whether the two dates are equal.
   *     Null dates are considered equal to other null dates.
   */
  sameDate(first2, second) {
    if (first2 && second) {
      let firstValid = this.isValid(first2);
      let secondValid = this.isValid(second);
      if (firstValid && secondValid) {
        return !this.compareDate(first2, second);
      }
      return firstValid == secondValid;
    }
    return first2 == second;
  }
  /**
   * Clamp the given date between min and max dates.
   * @param date The date to clamp.
   * @param min The minimum value to allow. If null or omitted no min is enforced.
   * @param max The maximum value to allow. If null or omitted no max is enforced.
   * @returns `min` if `date` is less than `min`, `max` if date is greater than `max`,
   *     otherwise `date`.
   */
  clampDate(date, min, max) {
    if (min && this.compareDate(date, min) < 0) {
      return min;
    }
    if (max && this.compareDate(date, max) > 0) {
      return max;
    }
    return date;
  }
};
var MAT_DATE_FORMATS = new InjectionToken("mat-date-formats");
var ISO_8601_REGEX = /^\d{4}-\d{2}-\d{2}(?:T\d{2}:\d{2}:\d{2}(?:\.\d+)?(?:Z|(?:(?:\+|-)\d{2}:\d{2}))?)?$/;
function range(length, valueFunction) {
  const valuesArray = Array(length);
  for (let i = 0; i < length; i++) {
    valuesArray[i] = valueFunction(i);
  }
  return valuesArray;
}
var _NativeDateAdapter = class _NativeDateAdapter extends DateAdapter {
  constructor(matDateLocale) {
    super();
    this.useUtcForDisplay = false;
    this._matDateLocale = inject(MAT_DATE_LOCALE, {
      optional: true
    });
    if (matDateLocale !== void 0) {
      this._matDateLocale = matDateLocale;
    }
    super.setLocale(this._matDateLocale);
  }
  getYear(date) {
    return date.getFullYear();
  }
  getMonth(date) {
    return date.getMonth();
  }
  getDate(date) {
    return date.getDate();
  }
  getDayOfWeek(date) {
    return date.getDay();
  }
  getMonthNames(style2) {
    const dtf = new Intl.DateTimeFormat(this.locale, {
      month: style2,
      timeZone: "utc"
    });
    return range(12, (i) => this._format(dtf, new Date(2017, i, 1)));
  }
  getDateNames() {
    const dtf = new Intl.DateTimeFormat(this.locale, {
      day: "numeric",
      timeZone: "utc"
    });
    return range(31, (i) => this._format(dtf, new Date(2017, 0, i + 1)));
  }
  getDayOfWeekNames(style2) {
    const dtf = new Intl.DateTimeFormat(this.locale, {
      weekday: style2,
      timeZone: "utc"
    });
    return range(7, (i) => this._format(dtf, new Date(2017, 0, i + 1)));
  }
  getYearName(date) {
    const dtf = new Intl.DateTimeFormat(this.locale, {
      year: "numeric",
      timeZone: "utc"
    });
    return this._format(dtf, date);
  }
  getFirstDayOfWeek() {
    return 0;
  }
  getNumDaysInMonth(date) {
    return this.getDate(this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + 1, 0));
  }
  clone(date) {
    return new Date(date.getTime());
  }
  createDate(year, month, date) {
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      if (month < 0 || month > 11) {
        throw Error(`Invalid month index "${month}". Month index has to be between 0 and 11.`);
      }
      if (date < 1) {
        throw Error(`Invalid date "${date}". Date has to be greater than 0.`);
      }
    }
    let result = this._createDateWithOverflow(year, month, date);
    if (result.getMonth() != month && (typeof ngDevMode === "undefined" || ngDevMode)) {
      throw Error(`Invalid date "${date}" for month with index "${month}".`);
    }
    return result;
  }
  today() {
    return /* @__PURE__ */ new Date();
  }
  parse(value, parseFormat) {
    if (typeof value == "number") {
      return new Date(value);
    }
    return value ? new Date(Date.parse(value)) : null;
  }
  format(date, displayFormat) {
    if (!this.isValid(date)) {
      throw Error("NativeDateAdapter: Cannot format invalid date.");
    }
    const dtf = new Intl.DateTimeFormat(this.locale, __spreadProps(__spreadValues({}, displayFormat), {
      timeZone: "utc"
    }));
    return this._format(dtf, date);
  }
  addCalendarYears(date, years) {
    return this.addCalendarMonths(date, years * 12);
  }
  addCalendarMonths(date, months) {
    let newDate = this._createDateWithOverflow(this.getYear(date), this.getMonth(date) + months, this.getDate(date));
    if (this.getMonth(newDate) != ((this.getMonth(date) + months) % 12 + 12) % 12) {
      newDate = this._createDateWithOverflow(this.getYear(newDate), this.getMonth(newDate), 0);
    }
    return newDate;
  }
  addCalendarDays(date, days) {
    return this._createDateWithOverflow(this.getYear(date), this.getMonth(date), this.getDate(date) + days);
  }
  toIso8601(date) {
    return [date.getUTCFullYear(), this._2digit(date.getUTCMonth() + 1), this._2digit(date.getUTCDate())].join("-");
  }
  /**
   * Returns the given value if given a valid Date or null. Deserializes valid ISO 8601 strings
   * (https://www.ietf.org/rfc/rfc3339.txt) into valid Dates and empty string into null. Returns an
   * invalid date for all other values.
   */
  deserialize(value) {
    if (typeof value === "string") {
      if (!value) {
        return null;
      }
      if (ISO_8601_REGEX.test(value)) {
        let date = new Date(value);
        if (this.isValid(date)) {
          return date;
        }
      }
    }
    return super.deserialize(value);
  }
  isDateInstance(obj) {
    return obj instanceof Date;
  }
  isValid(date) {
    return !isNaN(date.getTime());
  }
  invalid() {
    return /* @__PURE__ */ new Date(NaN);
  }
  /** Creates a date but allows the month and date to overflow. */
  _createDateWithOverflow(year, month, date) {
    const d = /* @__PURE__ */ new Date();
    d.setFullYear(year, month, date);
    d.setHours(0, 0, 0, 0);
    return d;
  }
  /**
   * Pads a number to make it two digits.
   * @param n The number to pad.
   * @returns The padded number.
   */
  _2digit(n) {
    return ("00" + n).slice(-2);
  }
  /**
   * When converting Date object to string, javascript built-in functions may return wrong
   * results because it applies its internal DST rules. The DST rules around the world change
   * very frequently, and the current valid rule is not always valid in previous years though.
   * We work around this problem building a new Date object which has its internal UTC
   * representation with the local date and time.
   * @param dtf Intl.DateTimeFormat object, containing the desired string format. It must have
   *    timeZone set to 'utc' to work fine.
   * @param date Date from which we want to get the string representation according to dtf
   * @returns A Date object with its UTC representation based on the passed in date info
   */
  _format(dtf, date) {
    const d = /* @__PURE__ */ new Date();
    d.setUTCFullYear(date.getFullYear(), date.getMonth(), date.getDate());
    d.setUTCHours(date.getHours(), date.getMinutes(), date.getSeconds(), date.getMilliseconds());
    return dtf.format(d);
  }
};
_NativeDateAdapter.\u0275fac = function NativeDateAdapter_Factory(t) {
  return new (t || _NativeDateAdapter)(\u0275\u0275inject(MAT_DATE_LOCALE, 8));
};
_NativeDateAdapter.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _NativeDateAdapter,
  factory: _NativeDateAdapter.\u0275fac
});
var NativeDateAdapter = _NativeDateAdapter;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NativeDateAdapter, [{
    type: Injectable
  }], () => [{
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [MAT_DATE_LOCALE]
    }]
  }], null);
})();
var MAT_NATIVE_DATE_FORMATS = {
  parse: {
    dateInput: null
  },
  display: {
    dateInput: {
      year: "numeric",
      month: "numeric",
      day: "numeric"
    },
    monthYearLabel: {
      year: "numeric",
      month: "short"
    },
    dateA11yLabel: {
      year: "numeric",
      month: "long",
      day: "numeric"
    },
    monthYearA11yLabel: {
      year: "numeric",
      month: "long"
    }
  }
};
var _NativeDateModule = class _NativeDateModule {
};
_NativeDateModule.\u0275fac = function NativeDateModule_Factory(t) {
  return new (t || _NativeDateModule)();
};
_NativeDateModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _NativeDateModule
});
_NativeDateModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
  providers: [{
    provide: DateAdapter,
    useClass: NativeDateAdapter
  }]
});
var NativeDateModule = _NativeDateModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NativeDateModule, [{
    type: NgModule,
    args: [{
      providers: [{
        provide: DateAdapter,
        useClass: NativeDateAdapter
      }]
    }]
  }], null, null);
})();
var _MatNativeDateModule = class _MatNativeDateModule {
};
_MatNativeDateModule.\u0275fac = function MatNativeDateModule_Factory(t) {
  return new (t || _MatNativeDateModule)();
};
_MatNativeDateModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _MatNativeDateModule
});
_MatNativeDateModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
  providers: [{
    provide: MAT_DATE_FORMATS,
    useValue: MAT_NATIVE_DATE_FORMATS
  }],
  imports: [NativeDateModule]
});
var MatNativeDateModule = _MatNativeDateModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MatNativeDateModule, [{
    type: NgModule,
    args: [{
      imports: [NativeDateModule],
      providers: [{
        provide: MAT_DATE_FORMATS,
        useValue: MAT_NATIVE_DATE_FORMATS
      }]
    }]
  }], null, null);
})();
var _ShowOnDirtyErrorStateMatcher = class _ShowOnDirtyErrorStateMatcher {
  isErrorState(control, form) {
    return !!(control && control.invalid && (control.dirty || form && form.submitted));
  }
};
_ShowOnDirtyErrorStateMatcher.\u0275fac = function ShowOnDirtyErrorStateMatcher_Factory(t) {
  return new (t || _ShowOnDirtyErrorStateMatcher)();
};
_ShowOnDirtyErrorStateMatcher.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _ShowOnDirtyErrorStateMatcher,
  factory: _ShowOnDirtyErrorStateMatcher.\u0275fac
});
var ShowOnDirtyErrorStateMatcher = _ShowOnDirtyErrorStateMatcher;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ShowOnDirtyErrorStateMatcher, [{
    type: Injectable
  }], null, null);
})();
var _ErrorStateMatcher = class _ErrorStateMatcher {
  isErrorState(control, form) {
    return !!(control && control.invalid && (control.touched || form && form.submitted));
  }
};
_ErrorStateMatcher.\u0275fac = function ErrorStateMatcher_Factory(t) {
  return new (t || _ErrorStateMatcher)();
};
_ErrorStateMatcher.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _ErrorStateMatcher,
  factory: _ErrorStateMatcher.\u0275fac,
  providedIn: "root"
});
var ErrorStateMatcher = _ErrorStateMatcher;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ErrorStateMatcher, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
var _MatLine = class _MatLine {
};
_MatLine.\u0275fac = function MatLine_Factory(t) {
  return new (t || _MatLine)();
};
_MatLine.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _MatLine,
  selectors: [["", "mat-line", ""], ["", "matLine", ""]],
  hostAttrs: [1, "mat-line"]
});
var MatLine = _MatLine;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MatLine, [{
    type: Directive,
    args: [{
      selector: "[mat-line], [matLine]",
      host: {
        "class": "mat-line"
      }
    }]
  }], null, null);
})();
var _MatLineModule = class _MatLineModule {
};
_MatLineModule.\u0275fac = function MatLineModule_Factory(t) {
  return new (t || _MatLineModule)();
};
_MatLineModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _MatLineModule
});
_MatLineModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
  imports: [MatCommonModule, MatCommonModule]
});
var MatLineModule = _MatLineModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MatLineModule, [{
    type: NgModule,
    args: [{
      imports: [MatCommonModule],
      exports: [MatLine, MatCommonModule],
      declarations: [MatLine]
    }]
  }], null, null);
})();
var RippleRef = class {
  constructor(_renderer, element, config2, _animationForciblyDisabledThroughCss = false) {
    this._renderer = _renderer;
    this.element = element;
    this.config = config2;
    this._animationForciblyDisabledThroughCss = _animationForciblyDisabledThroughCss;
    this.state = 3;
  }
  /** Fades out the ripple element. */
  fadeOut() {
    this._renderer.fadeOutRipple(this);
  }
};
var passiveCapturingEventOptions$1 = normalizePassiveListenerOptions({
  passive: true,
  capture: true
});
var RippleEventManager = class {
  constructor() {
    this._events = /* @__PURE__ */ new Map();
    this._delegateEventHandler = (event) => {
      const target = _getEventTarget(event);
      if (target) {
        this._events.get(event.type)?.forEach((handlers, element) => {
          if (element === target || element.contains(target)) {
            handlers.forEach((handler) => handler.handleEvent(event));
          }
        });
      }
    };
  }
  /** Adds an event handler. */
  addHandler(ngZone, name, element, handler) {
    const handlersForEvent = this._events.get(name);
    if (handlersForEvent) {
      const handlersForElement = handlersForEvent.get(element);
      if (handlersForElement) {
        handlersForElement.add(handler);
      } else {
        handlersForEvent.set(element, /* @__PURE__ */ new Set([handler]));
      }
    } else {
      this._events.set(name, /* @__PURE__ */ new Map([[element, /* @__PURE__ */ new Set([handler])]]));
      ngZone.runOutsideAngular(() => {
        document.addEventListener(name, this._delegateEventHandler, passiveCapturingEventOptions$1);
      });
    }
  }
  /** Removes an event handler. */
  removeHandler(name, element, handler) {
    const handlersForEvent = this._events.get(name);
    if (!handlersForEvent) {
      return;
    }
    const handlersForElement = handlersForEvent.get(element);
    if (!handlersForElement) {
      return;
    }
    handlersForElement.delete(handler);
    if (handlersForElement.size === 0) {
      handlersForEvent.delete(element);
    }
    if (handlersForEvent.size === 0) {
      this._events.delete(name);
      document.removeEventListener(name, this._delegateEventHandler, passiveCapturingEventOptions$1);
    }
  }
};
var defaultRippleAnimationConfig = {
  enterDuration: 225,
  exitDuration: 150
};
var ignoreMouseEventsTimeout = 800;
var passiveCapturingEventOptions = normalizePassiveListenerOptions({
  passive: true,
  capture: true
});
var pointerDownEvents = ["mousedown", "touchstart"];
var pointerUpEvents = ["mouseup", "mouseleave", "touchend", "touchcancel"];
var _RippleRenderer = class _RippleRenderer {
  constructor(_target, _ngZone, elementOrElementRef, _platform) {
    this._target = _target;
    this._ngZone = _ngZone;
    this._platform = _platform;
    this._isPointerDown = false;
    this._activeRipples = /* @__PURE__ */ new Map();
    this._pointerUpEventsRegistered = false;
    if (_platform.isBrowser) {
      this._containerElement = coerceElement(elementOrElementRef);
    }
  }
  /**
   * Fades in a ripple at the given coordinates.
   * @param x Coordinate within the element, along the X axis at which to start the ripple.
   * @param y Coordinate within the element, along the Y axis at which to start the ripple.
   * @param config Extra ripple options.
   */
  fadeInRipple(x, y, config2 = {}) {
    const containerRect = this._containerRect = this._containerRect || this._containerElement.getBoundingClientRect();
    const animationConfig = __spreadValues(__spreadValues({}, defaultRippleAnimationConfig), config2.animation);
    if (config2.centered) {
      x = containerRect.left + containerRect.width / 2;
      y = containerRect.top + containerRect.height / 2;
    }
    const radius = config2.radius || distanceToFurthestCorner(x, y, containerRect);
    const offsetX = x - containerRect.left;
    const offsetY = y - containerRect.top;
    const enterDuration = animationConfig.enterDuration;
    const ripple = document.createElement("div");
    ripple.classList.add("mat-ripple-element");
    ripple.style.left = `${offsetX - radius}px`;
    ripple.style.top = `${offsetY - radius}px`;
    ripple.style.height = `${radius * 2}px`;
    ripple.style.width = `${radius * 2}px`;
    if (config2.color != null) {
      ripple.style.backgroundColor = config2.color;
    }
    ripple.style.transitionDuration = `${enterDuration}ms`;
    this._containerElement.appendChild(ripple);
    const computedStyles = window.getComputedStyle(ripple);
    const userTransitionProperty = computedStyles.transitionProperty;
    const userTransitionDuration = computedStyles.transitionDuration;
    const animationForciblyDisabledThroughCss = userTransitionProperty === "none" || // Note: The canonical unit for serialized CSS `<time>` properties is seconds. Additionally
    // some browsers expand the duration for every property (in our case `opacity` and `transform`).
    userTransitionDuration === "0s" || userTransitionDuration === "0s, 0s" || // If the container is 0x0, it's likely `display: none`.
    containerRect.width === 0 && containerRect.height === 0;
    const rippleRef = new RippleRef(this, ripple, config2, animationForciblyDisabledThroughCss);
    ripple.style.transform = "scale3d(1, 1, 1)";
    rippleRef.state = 0;
    if (!config2.persistent) {
      this._mostRecentTransientRipple = rippleRef;
    }
    let eventListeners = null;
    if (!animationForciblyDisabledThroughCss && (enterDuration || animationConfig.exitDuration)) {
      this._ngZone.runOutsideAngular(() => {
        const onTransitionEnd = () => this._finishRippleTransition(rippleRef);
        const onTransitionCancel = () => this._destroyRipple(rippleRef);
        ripple.addEventListener("transitionend", onTransitionEnd);
        ripple.addEventListener("transitioncancel", onTransitionCancel);
        eventListeners = {
          onTransitionEnd,
          onTransitionCancel
        };
      });
    }
    this._activeRipples.set(rippleRef, eventListeners);
    if (animationForciblyDisabledThroughCss || !enterDuration) {
      this._finishRippleTransition(rippleRef);
    }
    return rippleRef;
  }
  /** Fades out a ripple reference. */
  fadeOutRipple(rippleRef) {
    if (rippleRef.state === 2 || rippleRef.state === 3) {
      return;
    }
    const rippleEl = rippleRef.element;
    const animationConfig = __spreadValues(__spreadValues({}, defaultRippleAnimationConfig), rippleRef.config.animation);
    rippleEl.style.transitionDuration = `${animationConfig.exitDuration}ms`;
    rippleEl.style.opacity = "0";
    rippleRef.state = 2;
    if (rippleRef._animationForciblyDisabledThroughCss || !animationConfig.exitDuration) {
      this._finishRippleTransition(rippleRef);
    }
  }
  /** Fades out all currently active ripples. */
  fadeOutAll() {
    this._getActiveRipples().forEach((ripple) => ripple.fadeOut());
  }
  /** Fades out all currently active non-persistent ripples. */
  fadeOutAllNonPersistent() {
    this._getActiveRipples().forEach((ripple) => {
      if (!ripple.config.persistent) {
        ripple.fadeOut();
      }
    });
  }
  /** Sets up the trigger event listeners */
  setupTriggerEvents(elementOrElementRef) {
    const element = coerceElement(elementOrElementRef);
    if (!this._platform.isBrowser || !element || element === this._triggerElement) {
      return;
    }
    this._removeTriggerEvents();
    this._triggerElement = element;
    pointerDownEvents.forEach((type) => {
      _RippleRenderer._eventManager.addHandler(this._ngZone, type, element, this);
    });
  }
  /**
   * Handles all registered events.
   * @docs-private
   */
  handleEvent(event) {
    if (event.type === "mousedown") {
      this._onMousedown(event);
    } else if (event.type === "touchstart") {
      this._onTouchStart(event);
    } else {
      this._onPointerUp();
    }
    if (!this._pointerUpEventsRegistered) {
      this._ngZone.runOutsideAngular(() => {
        pointerUpEvents.forEach((type) => {
          this._triggerElement.addEventListener(type, this, passiveCapturingEventOptions);
        });
      });
      this._pointerUpEventsRegistered = true;
    }
  }
  /** Method that will be called if the fade-in or fade-in transition completed. */
  _finishRippleTransition(rippleRef) {
    if (rippleRef.state === 0) {
      this._startFadeOutTransition(rippleRef);
    } else if (rippleRef.state === 2) {
      this._destroyRipple(rippleRef);
    }
  }
  /**
   * Starts the fade-out transition of the given ripple if it's not persistent and the pointer
   * is not held down anymore.
   */
  _startFadeOutTransition(rippleRef) {
    const isMostRecentTransientRipple = rippleRef === this._mostRecentTransientRipple;
    const {
      persistent
    } = rippleRef.config;
    rippleRef.state = 1;
    if (!persistent && (!isMostRecentTransientRipple || !this._isPointerDown)) {
      rippleRef.fadeOut();
    }
  }
  /** Destroys the given ripple by removing it from the DOM and updating its state. */
  _destroyRipple(rippleRef) {
    const eventListeners = this._activeRipples.get(rippleRef) ?? null;
    this._activeRipples.delete(rippleRef);
    if (!this._activeRipples.size) {
      this._containerRect = null;
    }
    if (rippleRef === this._mostRecentTransientRipple) {
      this._mostRecentTransientRipple = null;
    }
    rippleRef.state = 3;
    if (eventListeners !== null) {
      rippleRef.element.removeEventListener("transitionend", eventListeners.onTransitionEnd);
      rippleRef.element.removeEventListener("transitioncancel", eventListeners.onTransitionCancel);
    }
    rippleRef.element.remove();
  }
  /** Function being called whenever the trigger is being pressed using mouse. */
  _onMousedown(event) {
    const isFakeMousedown = isFakeMousedownFromScreenReader(event);
    const isSyntheticEvent = this._lastTouchStartEvent && Date.now() < this._lastTouchStartEvent + ignoreMouseEventsTimeout;
    if (!this._target.rippleDisabled && !isFakeMousedown && !isSyntheticEvent) {
      this._isPointerDown = true;
      this.fadeInRipple(event.clientX, event.clientY, this._target.rippleConfig);
    }
  }
  /** Function being called whenever the trigger is being pressed using touch. */
  _onTouchStart(event) {
    if (!this._target.rippleDisabled && !isFakeTouchstartFromScreenReader(event)) {
      this._lastTouchStartEvent = Date.now();
      this._isPointerDown = true;
      const touches = event.changedTouches;
      if (touches) {
        for (let i = 0; i < touches.length; i++) {
          this.fadeInRipple(touches[i].clientX, touches[i].clientY, this._target.rippleConfig);
        }
      }
    }
  }
  /** Function being called whenever the trigger is being released. */
  _onPointerUp() {
    if (!this._isPointerDown) {
      return;
    }
    this._isPointerDown = false;
    this._getActiveRipples().forEach((ripple) => {
      const isVisible = ripple.state === 1 || ripple.config.terminateOnPointerUp && ripple.state === 0;
      if (!ripple.config.persistent && isVisible) {
        ripple.fadeOut();
      }
    });
  }
  _getActiveRipples() {
    return Array.from(this._activeRipples.keys());
  }
  /** Removes previously registered event listeners from the trigger element. */
  _removeTriggerEvents() {
    const trigger2 = this._triggerElement;
    if (trigger2) {
      pointerDownEvents.forEach((type) => _RippleRenderer._eventManager.removeHandler(type, trigger2, this));
      if (this._pointerUpEventsRegistered) {
        pointerUpEvents.forEach((type) => trigger2.removeEventListener(type, this, passiveCapturingEventOptions));
      }
    }
  }
};
_RippleRenderer._eventManager = new RippleEventManager();
var RippleRenderer = _RippleRenderer;
function distanceToFurthestCorner(x, y, rect) {
  const distX = Math.max(Math.abs(x - rect.left), Math.abs(x - rect.right));
  const distY = Math.max(Math.abs(y - rect.top), Math.abs(y - rect.bottom));
  return Math.sqrt(distX * distX + distY * distY);
}
var MAT_RIPPLE_GLOBAL_OPTIONS = new InjectionToken("mat-ripple-global-options");
var _MatRipple = class _MatRipple {
  /**
   * Whether click events will not trigger the ripple. Ripples can be still launched manually
   * by using the `launch()` method.
   */
  get disabled() {
    return this._disabled;
  }
  set disabled(value) {
    if (value) {
      this.fadeOutAllNonPersistent();
    }
    this._disabled = value;
    this._setupTriggerEventsIfEnabled();
  }
  /**
   * The element that triggers the ripple when click events are received.
   * Defaults to the directive's host element.
   */
  get trigger() {
    return this._trigger || this._elementRef.nativeElement;
  }
  set trigger(trigger2) {
    this._trigger = trigger2;
    this._setupTriggerEventsIfEnabled();
  }
  constructor(_elementRef, ngZone, platform, globalOptions, _animationMode) {
    this._elementRef = _elementRef;
    this._animationMode = _animationMode;
    this.radius = 0;
    this._disabled = false;
    this._isInitialized = false;
    this._globalOptions = globalOptions || {};
    this._rippleRenderer = new RippleRenderer(this, ngZone, _elementRef, platform);
  }
  ngOnInit() {
    this._isInitialized = true;
    this._setupTriggerEventsIfEnabled();
  }
  ngOnDestroy() {
    this._rippleRenderer._removeTriggerEvents();
  }
  /** Fades out all currently showing ripple elements. */
  fadeOutAll() {
    this._rippleRenderer.fadeOutAll();
  }
  /** Fades out all currently showing non-persistent ripple elements. */
  fadeOutAllNonPersistent() {
    this._rippleRenderer.fadeOutAllNonPersistent();
  }
  /**
   * Ripple configuration from the directive's input values.
   * @docs-private Implemented as part of RippleTarget
   */
  get rippleConfig() {
    return {
      centered: this.centered,
      radius: this.radius,
      color: this.color,
      animation: __spreadValues(__spreadValues(__spreadValues({}, this._globalOptions.animation), this._animationMode === "NoopAnimations" ? {
        enterDuration: 0,
        exitDuration: 0
      } : {}), this.animation),
      terminateOnPointerUp: this._globalOptions.terminateOnPointerUp
    };
  }
  /**
   * Whether ripples on pointer-down are disabled or not.
   * @docs-private Implemented as part of RippleTarget
   */
  get rippleDisabled() {
    return this.disabled || !!this._globalOptions.disabled;
  }
  /** Sets up the trigger event listeners if ripples are enabled. */
  _setupTriggerEventsIfEnabled() {
    if (!this.disabled && this._isInitialized) {
      this._rippleRenderer.setupTriggerEvents(this.trigger);
    }
  }
  /** Launches a manual ripple at the specified coordinated or just by the ripple config. */
  launch(configOrX, y = 0, config2) {
    if (typeof configOrX === "number") {
      return this._rippleRenderer.fadeInRipple(configOrX, y, __spreadValues(__spreadValues({}, this.rippleConfig), config2));
    } else {
      return this._rippleRenderer.fadeInRipple(0, 0, __spreadValues(__spreadValues({}, this.rippleConfig), configOrX));
    }
  }
};
_MatRipple.\u0275fac = function MatRipple_Factory(t) {
  return new (t || _MatRipple)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(Platform), \u0275\u0275directiveInject(MAT_RIPPLE_GLOBAL_OPTIONS, 8), \u0275\u0275directiveInject(ANIMATION_MODULE_TYPE, 8));
};
_MatRipple.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _MatRipple,
  selectors: [["", "mat-ripple", ""], ["", "matRipple", ""]],
  hostAttrs: [1, "mat-ripple"],
  hostVars: 2,
  hostBindings: function MatRipple_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275classProp("mat-ripple-unbounded", ctx.unbounded);
    }
  },
  inputs: {
    color: ["matRippleColor", "color"],
    unbounded: ["matRippleUnbounded", "unbounded"],
    centered: ["matRippleCentered", "centered"],
    radius: ["matRippleRadius", "radius"],
    animation: ["matRippleAnimation", "animation"],
    disabled: ["matRippleDisabled", "disabled"],
    trigger: ["matRippleTrigger", "trigger"]
  },
  exportAs: ["matRipple"]
});
var MatRipple = _MatRipple;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MatRipple, [{
    type: Directive,
    args: [{
      selector: "[mat-ripple], [matRipple]",
      exportAs: "matRipple",
      host: {
        "class": "mat-ripple",
        "[class.mat-ripple-unbounded]": "unbounded"
      }
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: NgZone
  }, {
    type: Platform
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [MAT_RIPPLE_GLOBAL_OPTIONS]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [ANIMATION_MODULE_TYPE]
    }]
  }], {
    color: [{
      type: Input,
      args: ["matRippleColor"]
    }],
    unbounded: [{
      type: Input,
      args: ["matRippleUnbounded"]
    }],
    centered: [{
      type: Input,
      args: ["matRippleCentered"]
    }],
    radius: [{
      type: Input,
      args: ["matRippleRadius"]
    }],
    animation: [{
      type: Input,
      args: ["matRippleAnimation"]
    }],
    disabled: [{
      type: Input,
      args: ["matRippleDisabled"]
    }],
    trigger: [{
      type: Input,
      args: ["matRippleTrigger"]
    }]
  });
})();
var _MatRippleModule = class _MatRippleModule {
};
_MatRippleModule.\u0275fac = function MatRippleModule_Factory(t) {
  return new (t || _MatRippleModule)();
};
_MatRippleModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _MatRippleModule
});
_MatRippleModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
  imports: [MatCommonModule, MatCommonModule]
});
var MatRippleModule = _MatRippleModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MatRippleModule, [{
    type: NgModule,
    args: [{
      imports: [MatCommonModule],
      exports: [MatRipple, MatCommonModule],
      declarations: [MatRipple]
    }]
  }], null, null);
})();
var _MatPseudoCheckbox = class _MatPseudoCheckbox {
  constructor(_animationMode) {
    this._animationMode = _animationMode;
    this.state = "unchecked";
    this.disabled = false;
    this.appearance = "full";
  }
};
_MatPseudoCheckbox.\u0275fac = function MatPseudoCheckbox_Factory(t) {
  return new (t || _MatPseudoCheckbox)(\u0275\u0275directiveInject(ANIMATION_MODULE_TYPE, 8));
};
_MatPseudoCheckbox.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _MatPseudoCheckbox,
  selectors: [["mat-pseudo-checkbox"]],
  hostAttrs: [1, "mat-pseudo-checkbox"],
  hostVars: 12,
  hostBindings: function MatPseudoCheckbox_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275classProp("mat-pseudo-checkbox-indeterminate", ctx.state === "indeterminate")("mat-pseudo-checkbox-checked", ctx.state === "checked")("mat-pseudo-checkbox-disabled", ctx.disabled)("mat-pseudo-checkbox-minimal", ctx.appearance === "minimal")("mat-pseudo-checkbox-full", ctx.appearance === "full")("_mat-animation-noopable", ctx._animationMode === "NoopAnimations");
    }
  },
  inputs: {
    state: "state",
    disabled: "disabled",
    appearance: "appearance"
  },
  decls: 0,
  vars: 0,
  template: function MatPseudoCheckbox_Template(rf, ctx) {
  },
  styles: ['.mat-pseudo-checkbox{border-radius:2px;cursor:pointer;display:inline-block;vertical-align:middle;box-sizing:border-box;position:relative;flex-shrink:0;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1),background-color 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox::after{position:absolute;opacity:0;content:"";border-bottom:2px solid currentColor;transition:opacity 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox._mat-animation-noopable{transition:none !important;animation:none !important}.mat-pseudo-checkbox._mat-animation-noopable::after{transition:none}.mat-pseudo-checkbox-disabled{cursor:default}.mat-pseudo-checkbox-indeterminate::after{left:1px;opacity:1;border-radius:2px}.mat-pseudo-checkbox-checked::after{left:1px;border-left:2px solid currentColor;transform:rotate(-45deg);opacity:1;box-sizing:content-box}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-checked::after,.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-indeterminate::after{color:var(--mat-minimal-pseudo-checkbox-selected-checkmark-color)}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-checked.mat-pseudo-checkbox-disabled::after,.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-indeterminate.mat-pseudo-checkbox-disabled::after{color:var(--mat-minimal-pseudo-checkbox-disabled-selected-checkmark-color)}.mat-pseudo-checkbox-full{border-color:var(--mat-full-pseudo-checkbox-unselected-icon-color);border-width:2px;border-style:solid}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-disabled{border-color:var(--mat-full-pseudo-checkbox-disabled-unselected-icon-color)}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate{background-color:var(--mat-full-pseudo-checkbox-selected-icon-color);border-color:rgba(0,0,0,0)}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked::after,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate::after{color:var(--mat-full-pseudo-checkbox-selected-checkmark-color)}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked.mat-pseudo-checkbox-disabled,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate.mat-pseudo-checkbox-disabled{background-color:var(--mat-full-pseudo-checkbox-disabled-selected-icon-color)}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked.mat-pseudo-checkbox-disabled::after,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate.mat-pseudo-checkbox-disabled::after{color:var(--mat-full-pseudo-checkbox-disabled-selected-checkmark-color)}.mat-pseudo-checkbox{width:18px;height:18px}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-checked::after{width:14px;height:6px;transform-origin:center;top:-4.2426406871px;left:0;bottom:0;right:0;margin:auto}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-indeterminate::after{top:8px;width:16px}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked::after{width:10px;height:4px;transform-origin:center;top:-2.8284271247px;left:0;bottom:0;right:0;margin:auto}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate::after{top:6px;width:12px}'],
  encapsulation: 2,
  changeDetection: 0
});
var MatPseudoCheckbox = _MatPseudoCheckbox;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MatPseudoCheckbox, [{
    type: Component,
    args: [{
      encapsulation: ViewEncapsulation$1.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      selector: "mat-pseudo-checkbox",
      template: "",
      host: {
        "class": "mat-pseudo-checkbox",
        "[class.mat-pseudo-checkbox-indeterminate]": 'state === "indeterminate"',
        "[class.mat-pseudo-checkbox-checked]": 'state === "checked"',
        "[class.mat-pseudo-checkbox-disabled]": "disabled",
        "[class.mat-pseudo-checkbox-minimal]": 'appearance === "minimal"',
        "[class.mat-pseudo-checkbox-full]": 'appearance === "full"',
        "[class._mat-animation-noopable]": '_animationMode === "NoopAnimations"'
      },
      styles: ['.mat-pseudo-checkbox{border-radius:2px;cursor:pointer;display:inline-block;vertical-align:middle;box-sizing:border-box;position:relative;flex-shrink:0;transition:border-color 90ms cubic-bezier(0, 0, 0.2, 0.1),background-color 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox::after{position:absolute;opacity:0;content:"";border-bottom:2px solid currentColor;transition:opacity 90ms cubic-bezier(0, 0, 0.2, 0.1)}.mat-pseudo-checkbox._mat-animation-noopable{transition:none !important;animation:none !important}.mat-pseudo-checkbox._mat-animation-noopable::after{transition:none}.mat-pseudo-checkbox-disabled{cursor:default}.mat-pseudo-checkbox-indeterminate::after{left:1px;opacity:1;border-radius:2px}.mat-pseudo-checkbox-checked::after{left:1px;border-left:2px solid currentColor;transform:rotate(-45deg);opacity:1;box-sizing:content-box}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-checked::after,.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-indeterminate::after{color:var(--mat-minimal-pseudo-checkbox-selected-checkmark-color)}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-checked.mat-pseudo-checkbox-disabled::after,.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-indeterminate.mat-pseudo-checkbox-disabled::after{color:var(--mat-minimal-pseudo-checkbox-disabled-selected-checkmark-color)}.mat-pseudo-checkbox-full{border-color:var(--mat-full-pseudo-checkbox-unselected-icon-color);border-width:2px;border-style:solid}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-disabled{border-color:var(--mat-full-pseudo-checkbox-disabled-unselected-icon-color)}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate{background-color:var(--mat-full-pseudo-checkbox-selected-icon-color);border-color:rgba(0,0,0,0)}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked::after,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate::after{color:var(--mat-full-pseudo-checkbox-selected-checkmark-color)}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked.mat-pseudo-checkbox-disabled,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate.mat-pseudo-checkbox-disabled{background-color:var(--mat-full-pseudo-checkbox-disabled-selected-icon-color)}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked.mat-pseudo-checkbox-disabled::after,.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate.mat-pseudo-checkbox-disabled::after{color:var(--mat-full-pseudo-checkbox-disabled-selected-checkmark-color)}.mat-pseudo-checkbox{width:18px;height:18px}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-checked::after{width:14px;height:6px;transform-origin:center;top:-4.2426406871px;left:0;bottom:0;right:0;margin:auto}.mat-pseudo-checkbox-minimal.mat-pseudo-checkbox-indeterminate::after{top:8px;width:16px}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-checked::after{width:10px;height:4px;transform-origin:center;top:-2.8284271247px;left:0;bottom:0;right:0;margin:auto}.mat-pseudo-checkbox-full.mat-pseudo-checkbox-indeterminate::after{top:6px;width:12px}']
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [ANIMATION_MODULE_TYPE]
    }]
  }], {
    state: [{
      type: Input
    }],
    disabled: [{
      type: Input
    }],
    appearance: [{
      type: Input
    }]
  });
})();
var _MatPseudoCheckboxModule = class _MatPseudoCheckboxModule {
};
_MatPseudoCheckboxModule.\u0275fac = function MatPseudoCheckboxModule_Factory(t) {
  return new (t || _MatPseudoCheckboxModule)();
};
_MatPseudoCheckboxModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _MatPseudoCheckboxModule
});
_MatPseudoCheckboxModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
  imports: [MatCommonModule]
});
var MatPseudoCheckboxModule = _MatPseudoCheckboxModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MatPseudoCheckboxModule, [{
    type: NgModule,
    args: [{
      imports: [MatCommonModule],
      exports: [MatPseudoCheckbox],
      declarations: [MatPseudoCheckbox]
    }]
  }], null, null);
})();
var MAT_OPTION_PARENT_COMPONENT = new InjectionToken("MAT_OPTION_PARENT_COMPONENT");
var _uniqueOptgroupIdCounter = 0;
var MAT_OPTGROUP = new InjectionToken("MatOptgroup");
var _MatOptgroup = class _MatOptgroup {
  constructor(parent) {
    this.disabled = false;
    this._labelId = `mat-optgroup-label-${_uniqueOptgroupIdCounter++}`;
    this._inert = parent?.inertGroups ?? false;
  }
};
_MatOptgroup.\u0275fac = function MatOptgroup_Factory(t) {
  return new (t || _MatOptgroup)(\u0275\u0275directiveInject(MAT_OPTION_PARENT_COMPONENT, 8));
};
_MatOptgroup.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _MatOptgroup,
  selectors: [["mat-optgroup"]],
  hostAttrs: [1, "mat-mdc-optgroup"],
  hostVars: 3,
  hostBindings: function MatOptgroup_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275attribute("role", ctx._inert ? null : "group")("aria-disabled", ctx._inert ? null : ctx.disabled.toString())("aria-labelledby", ctx._inert ? null : ctx._labelId);
    }
  },
  inputs: {
    label: "label",
    disabled: ["disabled", "disabled", booleanAttribute]
  },
  exportAs: ["matOptgroup"],
  features: [\u0275\u0275ProvidersFeature([{
    provide: MAT_OPTGROUP,
    useExisting: _MatOptgroup
  }]), \u0275\u0275InputTransformsFeature],
  ngContentSelectors: _c12,
  decls: 5,
  vars: 4,
  consts: [["role", "presentation", 1, "mat-mdc-optgroup-label", 3, "id"], [1, "mdc-list-item__primary-text"]],
  template: function MatOptgroup_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275projectionDef(_c02);
      \u0275\u0275elementStart(0, "span", 0)(1, "span", 1);
      \u0275\u0275text(2);
      \u0275\u0275projection(3);
      \u0275\u0275elementEnd()();
      \u0275\u0275projection(4, 1);
    }
    if (rf & 2) {
      \u0275\u0275classProp("mdc-list-item--disabled", ctx.disabled);
      \u0275\u0275property("id", ctx._labelId);
      \u0275\u0275advance(2);
      \u0275\u0275textInterpolate1("", ctx.label, " ");
    }
  },
  styles: [".mat-mdc-optgroup{color:var(--mat-optgroup-label-text-color);font-family:var(--mat-optgroup-label-text-font);line-height:var(--mat-optgroup-label-text-line-height);font-size:var(--mat-optgroup-label-text-size);letter-spacing:var(--mat-optgroup-label-text-tracking);font-weight:var(--mat-optgroup-label-text-weight)}.mat-mdc-optgroup-label{display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;padding:0;padding-left:16px;padding-right:16px;min-height:48px}.mat-mdc-optgroup-label:focus{outline:none}[dir=rtl] .mat-mdc-optgroup-label,.mat-mdc-optgroup-label[dir=rtl]{padding-left:16px;padding-right:16px}.mat-mdc-optgroup-label.mdc-list-item--disabled{opacity:.38}.mat-mdc-optgroup-label .mdc-list-item__primary-text{font-size:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;font-family:inherit;text-decoration:inherit;text-transform:inherit;white-space:normal}"],
  encapsulation: 2,
  changeDetection: 0
});
var MatOptgroup = _MatOptgroup;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MatOptgroup, [{
    type: Component,
    args: [{
      selector: "mat-optgroup",
      exportAs: "matOptgroup",
      encapsulation: ViewEncapsulation$1.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      host: {
        "class": "mat-mdc-optgroup",
        "[attr.role]": '_inert ? null : "group"',
        "[attr.aria-disabled]": "_inert ? null : disabled.toString()",
        "[attr.aria-labelledby]": "_inert ? null : _labelId"
      },
      providers: [{
        provide: MAT_OPTGROUP,
        useExisting: MatOptgroup
      }],
      template: '<span\n  class="mat-mdc-optgroup-label"\n  role="presentation"\n  [class.mdc-list-item--disabled]="disabled"\n  [id]="_labelId">\n  <span class="mdc-list-item__primary-text">{{ label }} <ng-content></ng-content></span>\n</span>\n\n<ng-content select="mat-option, ng-container"></ng-content>\n',
      styles: [".mat-mdc-optgroup{color:var(--mat-optgroup-label-text-color);font-family:var(--mat-optgroup-label-text-font);line-height:var(--mat-optgroup-label-text-line-height);font-size:var(--mat-optgroup-label-text-size);letter-spacing:var(--mat-optgroup-label-text-tracking);font-weight:var(--mat-optgroup-label-text-weight)}.mat-mdc-optgroup-label{display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;padding:0;padding-left:16px;padding-right:16px;min-height:48px}.mat-mdc-optgroup-label:focus{outline:none}[dir=rtl] .mat-mdc-optgroup-label,.mat-mdc-optgroup-label[dir=rtl]{padding-left:16px;padding-right:16px}.mat-mdc-optgroup-label.mdc-list-item--disabled{opacity:.38}.mat-mdc-optgroup-label .mdc-list-item__primary-text{font-size:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;font-family:inherit;text-decoration:inherit;text-transform:inherit;white-space:normal}"]
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Inject,
      args: [MAT_OPTION_PARENT_COMPONENT]
    }, {
      type: Optional
    }]
  }], {
    label: [{
      type: Input
    }],
    disabled: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }]
  });
})();
var _uniqueIdCounter = 0;
var MatOptionSelectionChange = class {
  constructor(source, isUserInput = false) {
    this.source = source;
    this.isUserInput = isUserInput;
  }
};
var _MatOption = class _MatOption {
  /** Whether the wrapping component is in multiple selection mode. */
  get multiple() {
    return this._parent && this._parent.multiple;
  }
  /** Whether or not the option is currently selected. */
  get selected() {
    return this._selected;
  }
  /** Whether the option is disabled. */
  get disabled() {
    return this.group && this.group.disabled || this._disabled;
  }
  set disabled(value) {
    this._disabled = value;
  }
  /** Whether ripples for the option are disabled. */
  get disableRipple() {
    return !!(this._parent && this._parent.disableRipple);
  }
  /** Whether to display checkmark for single-selection. */
  get hideSingleSelectionIndicator() {
    return !!(this._parent && this._parent.hideSingleSelectionIndicator);
  }
  constructor(_element, _changeDetectorRef, _parent, group2) {
    this._element = _element;
    this._changeDetectorRef = _changeDetectorRef;
    this._parent = _parent;
    this.group = group2;
    this._selected = false;
    this._active = false;
    this._disabled = false;
    this._mostRecentViewValue = "";
    this.id = `mat-option-${_uniqueIdCounter++}`;
    this.onSelectionChange = new EventEmitter();
    this._stateChanges = new Subject();
  }
  /**
   * Whether or not the option is currently active and ready to be selected.
   * An active option displays styles as if it is focused, but the
   * focus is actually retained somewhere else. This comes in handy
   * for components like autocomplete where focus must remain on the input.
   */
  get active() {
    return this._active;
  }
  /**
   * The displayed value of the option. It is necessary to show the selected option in the
   * select's trigger.
   */
  get viewValue() {
    return (this._text?.nativeElement.textContent || "").trim();
  }
  /** Selects the option. */
  select(emitEvent = true) {
    if (!this._selected) {
      this._selected = true;
      this._changeDetectorRef.markForCheck();
      if (emitEvent) {
        this._emitSelectionChangeEvent();
      }
    }
  }
  /** Deselects the option. */
  deselect(emitEvent = true) {
    if (this._selected) {
      this._selected = false;
      this._changeDetectorRef.markForCheck();
      if (emitEvent) {
        this._emitSelectionChangeEvent();
      }
    }
  }
  /** Sets focus onto this option. */
  focus(_origin, options) {
    const element = this._getHostElement();
    if (typeof element.focus === "function") {
      element.focus(options);
    }
  }
  /**
   * This method sets display styles on the option to make it appear
   * active. This is used by the ActiveDescendantKeyManager so key
   * events will display the proper options as active on arrow key events.
   */
  setActiveStyles() {
    if (!this._active) {
      this._active = true;
      this._changeDetectorRef.markForCheck();
    }
  }
  /**
   * This method removes display styles on the option that made it appear
   * active. This is used by the ActiveDescendantKeyManager so key
   * events will display the proper options as active on arrow key events.
   */
  setInactiveStyles() {
    if (this._active) {
      this._active = false;
      this._changeDetectorRef.markForCheck();
    }
  }
  /** Gets the label to be used when determining whether the option should be focused. */
  getLabel() {
    return this.viewValue;
  }
  /** Ensures the option is selected when activated from the keyboard. */
  _handleKeydown(event) {
    if ((event.keyCode === ENTER || event.keyCode === SPACE) && !hasModifierKey(event)) {
      this._selectViaInteraction();
      event.preventDefault();
    }
  }
  /**
   * `Selects the option while indicating the selection came from the user. Used to
   * determine if the select's view -> model callback should be invoked.`
   */
  _selectViaInteraction() {
    if (!this.disabled) {
      this._selected = this.multiple ? !this._selected : true;
      this._changeDetectorRef.markForCheck();
      this._emitSelectionChangeEvent(true);
    }
  }
  /** Returns the correct tabindex for the option depending on disabled state. */
  // This method is only used by `MatLegacyOption`. Keeping it here to avoid breaking the types.
  // That's because `MatLegacyOption` use `MatOption` type in a few places such as
  // `MatOptionSelectionChange`. It is safe to delete this when `MatLegacyOption` is deleted.
  _getTabIndex() {
    return this.disabled ? "-1" : "0";
  }
  /** Gets the host DOM element. */
  _getHostElement() {
    return this._element.nativeElement;
  }
  ngAfterViewChecked() {
    if (this._selected) {
      const viewValue = this.viewValue;
      if (viewValue !== this._mostRecentViewValue) {
        if (this._mostRecentViewValue) {
          this._stateChanges.next();
        }
        this._mostRecentViewValue = viewValue;
      }
    }
  }
  ngOnDestroy() {
    this._stateChanges.complete();
  }
  /** Emits the selection change event. */
  _emitSelectionChangeEvent(isUserInput = false) {
    this.onSelectionChange.emit(new MatOptionSelectionChange(this, isUserInput));
  }
};
_MatOption.\u0275fac = function MatOption_Factory(t) {
  return new (t || _MatOption)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(MAT_OPTION_PARENT_COMPONENT, 8), \u0275\u0275directiveInject(MAT_OPTGROUP, 8));
};
_MatOption.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _MatOption,
  selectors: [["mat-option"]],
  viewQuery: function MatOption_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c2, 7);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx._text = _t.first);
    }
  },
  hostAttrs: ["role", "option", 1, "mat-mdc-option", "mdc-list-item"],
  hostVars: 11,
  hostBindings: function MatOption_HostBindings(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275listener("click", function MatOption_click_HostBindingHandler() {
        return ctx._selectViaInteraction();
      })("keydown", function MatOption_keydown_HostBindingHandler($event) {
        return ctx._handleKeydown($event);
      });
    }
    if (rf & 2) {
      \u0275\u0275hostProperty("id", ctx.id);
      \u0275\u0275attribute("aria-selected", ctx.selected)("aria-disabled", ctx.disabled.toString());
      \u0275\u0275classProp("mdc-list-item--selected", ctx.selected)("mat-mdc-option-multiple", ctx.multiple)("mat-mdc-option-active", ctx.active)("mdc-list-item--disabled", ctx.disabled);
    }
  },
  inputs: {
    value: "value",
    id: "id",
    disabled: ["disabled", "disabled", booleanAttribute]
  },
  outputs: {
    onSelectionChange: "onSelectionChange"
  },
  exportAs: ["matOption"],
  features: [\u0275\u0275InputTransformsFeature],
  ngContentSelectors: _c4,
  decls: 8,
  vars: 5,
  consts: [["class", "mat-mdc-option-pseudo-checkbox", "aria-hidden", "true", 3, "disabled", "state"], [1, "mdc-list-item__primary-text"], ["text", ""], ["class", "mat-mdc-option-pseudo-checkbox", "state", "checked", "aria-hidden", "true", "appearance", "minimal", 3, "disabled"], ["class", "cdk-visually-hidden"], ["aria-hidden", "true", "mat-ripple", "", 1, "mat-mdc-option-ripple", "mat-mdc-focus-indicator", 3, "matRippleTrigger", "matRippleDisabled"], ["aria-hidden", "true", 1, "mat-mdc-option-pseudo-checkbox", 3, "disabled", "state"], ["state", "checked", "aria-hidden", "true", "appearance", "minimal", 1, "mat-mdc-option-pseudo-checkbox", 3, "disabled"], [1, "cdk-visually-hidden"]],
  template: function MatOption_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275projectionDef(_c3);
      \u0275\u0275template(0, MatOption_Conditional_0_Template, 1, 2, "mat-pseudo-checkbox", 0);
      \u0275\u0275projection(1);
      \u0275\u0275elementStart(2, "span", 1, 2);
      \u0275\u0275projection(4, 1);
      \u0275\u0275elementEnd();
      \u0275\u0275template(5, MatOption_Conditional_5_Template, 1, 1, "mat-pseudo-checkbox", 3)(6, MatOption_Conditional_6_Template, 2, 1, "span", 4);
      \u0275\u0275element(7, "div", 5);
    }
    if (rf & 2) {
      \u0275\u0275conditional(0, ctx.multiple ? 0 : -1);
      \u0275\u0275advance(5);
      \u0275\u0275conditional(5, !ctx.multiple && ctx.selected && !ctx.hideSingleSelectionIndicator ? 5 : -1);
      \u0275\u0275advance(1);
      \u0275\u0275conditional(6, ctx.group && ctx.group._inert ? 6 : -1);
      \u0275\u0275advance(1);
      \u0275\u0275property("matRippleTrigger", ctx._getHostElement())("matRippleDisabled", ctx.disabled || ctx.disableRipple);
    }
  },
  dependencies: [MatRipple, MatPseudoCheckbox],
  styles: ['.mat-mdc-option{display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;padding:0;padding-left:16px;padding-right:16px;-webkit-user-select:none;user-select:none;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;cursor:pointer;-webkit-tap-highlight-color:rgba(0,0,0,0);color:var(--mat-option-label-text-color);font-family:var(--mat-option-label-text-font);line-height:var(--mat-option-label-text-line-height);font-size:var(--mat-option-label-text-size);letter-spacing:var(--mat-option-label-text-tracking);font-weight:var(--mat-option-label-text-weight);min-height:48px}.mat-mdc-option:focus{outline:none}[dir=rtl] .mat-mdc-option,.mat-mdc-option[dir=rtl]{padding-left:16px;padding-right:16px}.mat-mdc-option:hover:not(.mdc-list-item--disabled){background-color:var(--mat-option-hover-state-layer-color)}.mat-mdc-option:focus.mdc-list-item,.mat-mdc-option.mat-mdc-option-active.mdc-list-item{background-color:var(--mat-option-focus-state-layer-color)}.mat-mdc-option.mdc-list-item--selected:not(.mdc-list-item--disabled) .mdc-list-item__primary-text{color:var(--mat-option-selected-state-label-text-color)}.mat-mdc-option.mdc-list-item--selected:not(.mdc-list-item--disabled):not(.mat-mdc-option-multiple){background-color:var(--mat-option-selected-state-layer-color)}.mat-mdc-option.mdc-list-item{align-items:center}.mat-mdc-option.mdc-list-item--disabled{cursor:default;pointer-events:none}.mat-mdc-option.mdc-list-item--disabled .mat-mdc-option-pseudo-checkbox,.mat-mdc-option.mdc-list-item--disabled .mdc-list-item__primary-text,.mat-mdc-option.mdc-list-item--disabled>mat-icon{opacity:.38}.mat-mdc-optgroup .mat-mdc-option:not(.mat-mdc-option-multiple){padding-left:32px}[dir=rtl] .mat-mdc-optgroup .mat-mdc-option:not(.mat-mdc-option-multiple){padding-left:16px;padding-right:32px}.mat-mdc-option .mat-icon,.mat-mdc-option .mat-pseudo-checkbox-full{margin-right:16px;flex-shrink:0}[dir=rtl] .mat-mdc-option .mat-icon,[dir=rtl] .mat-mdc-option .mat-pseudo-checkbox-full{margin-right:0;margin-left:16px}.mat-mdc-option .mat-pseudo-checkbox-minimal{margin-left:16px;flex-shrink:0}[dir=rtl] .mat-mdc-option .mat-pseudo-checkbox-minimal{margin-right:16px;margin-left:0}.mat-mdc-option .mat-mdc-option-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-mdc-option .mdc-list-item__primary-text{white-space:normal;font-size:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;font-family:inherit;text-decoration:inherit;text-transform:inherit;margin-right:auto}[dir=rtl] .mat-mdc-option .mdc-list-item__primary-text{margin-right:0;margin-left:auto}.cdk-high-contrast-active .mat-mdc-option.mdc-list-item--selected:not(.mat-mdc-option-multiple)::after{content:"";position:absolute;top:50%;right:16px;transform:translateY(-50%);width:10px;height:0;border-bottom:solid 10px;border-radius:10px}[dir=rtl] .cdk-high-contrast-active .mat-mdc-option.mdc-list-item--selected:not(.mat-mdc-option-multiple)::after{right:auto;left:16px}.mat-mdc-option-active .mat-mdc-focus-indicator::before{content:""}'],
  encapsulation: 2,
  changeDetection: 0
});
var MatOption = _MatOption;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MatOption, [{
    type: Component,
    args: [{
      selector: "mat-option",
      exportAs: "matOption",
      host: {
        "role": "option",
        "[class.mdc-list-item--selected]": "selected",
        "[class.mat-mdc-option-multiple]": "multiple",
        "[class.mat-mdc-option-active]": "active",
        "[class.mdc-list-item--disabled]": "disabled",
        "[id]": "id",
        // Set aria-selected to false for non-selected items and true for selected items. Conform to
        // [WAI ARIA Listbox authoring practices guide](
        //  https://www.w3.org/WAI/ARIA/apg/patterns/listbox/), "If any options are selected, each
        // selected option has either aria-selected or aria-checked  set to true. All options that are
        // selectable but not selected have either aria-selected or aria-checked set to false." Align
        // aria-selected implementation of Chips and List components.
        //
        // Set `aria-selected="false"` on not-selected listbox options to fix VoiceOver announcing
        // every option as "selected" (#21491).
        "[attr.aria-selected]": "selected",
        "[attr.aria-disabled]": "disabled.toString()",
        "(click)": "_selectViaInteraction()",
        "(keydown)": "_handleKeydown($event)",
        "class": "mat-mdc-option mdc-list-item"
      },
      encapsulation: ViewEncapsulation$1.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      template: `<!-- Set aria-hidden="true" to this DOM node and other decorative nodes in this file. This might
 be contributing to issue where sometimes VoiceOver focuses on a TextNode in the a11y tree instead
 of the Option node (#23202). Most assistive technology will generally ignore non-role,
 non-text-content elements. Adding aria-hidden seems to make VoiceOver behave more consistently. -->
@if (multiple) {
    <mat-pseudo-checkbox
        class="mat-mdc-option-pseudo-checkbox"
        [disabled]="disabled"
        [state]="selected ? 'checked' : 'unchecked'"
        aria-hidden="true"></mat-pseudo-checkbox>
}

<ng-content select="mat-icon"></ng-content>

<span class="mdc-list-item__primary-text" #text><ng-content></ng-content></span>

<!-- Render checkmark at the end for single-selection. -->
@if (!multiple && selected && !hideSingleSelectionIndicator) {
    <mat-pseudo-checkbox
        class="mat-mdc-option-pseudo-checkbox"
        [disabled]="disabled"
        state="checked"
        aria-hidden="true"
        appearance="minimal"></mat-pseudo-checkbox>
}

<!-- See a11y notes inside optgroup.ts for context behind this element. -->
@if (group && group._inert) {
    <span class="cdk-visually-hidden">({{ group.label }})</span>
}

<div class="mat-mdc-option-ripple mat-mdc-focus-indicator" aria-hidden="true" mat-ripple
     [matRippleTrigger]="_getHostElement()" [matRippleDisabled]="disabled || disableRipple">
</div>
`,
      styles: ['.mat-mdc-option{display:flex;position:relative;align-items:center;justify-content:flex-start;overflow:hidden;padding:0;padding-left:16px;padding-right:16px;-webkit-user-select:none;user-select:none;-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;cursor:pointer;-webkit-tap-highlight-color:rgba(0,0,0,0);color:var(--mat-option-label-text-color);font-family:var(--mat-option-label-text-font);line-height:var(--mat-option-label-text-line-height);font-size:var(--mat-option-label-text-size);letter-spacing:var(--mat-option-label-text-tracking);font-weight:var(--mat-option-label-text-weight);min-height:48px}.mat-mdc-option:focus{outline:none}[dir=rtl] .mat-mdc-option,.mat-mdc-option[dir=rtl]{padding-left:16px;padding-right:16px}.mat-mdc-option:hover:not(.mdc-list-item--disabled){background-color:var(--mat-option-hover-state-layer-color)}.mat-mdc-option:focus.mdc-list-item,.mat-mdc-option.mat-mdc-option-active.mdc-list-item{background-color:var(--mat-option-focus-state-layer-color)}.mat-mdc-option.mdc-list-item--selected:not(.mdc-list-item--disabled) .mdc-list-item__primary-text{color:var(--mat-option-selected-state-label-text-color)}.mat-mdc-option.mdc-list-item--selected:not(.mdc-list-item--disabled):not(.mat-mdc-option-multiple){background-color:var(--mat-option-selected-state-layer-color)}.mat-mdc-option.mdc-list-item{align-items:center}.mat-mdc-option.mdc-list-item--disabled{cursor:default;pointer-events:none}.mat-mdc-option.mdc-list-item--disabled .mat-mdc-option-pseudo-checkbox,.mat-mdc-option.mdc-list-item--disabled .mdc-list-item__primary-text,.mat-mdc-option.mdc-list-item--disabled>mat-icon{opacity:.38}.mat-mdc-optgroup .mat-mdc-option:not(.mat-mdc-option-multiple){padding-left:32px}[dir=rtl] .mat-mdc-optgroup .mat-mdc-option:not(.mat-mdc-option-multiple){padding-left:16px;padding-right:32px}.mat-mdc-option .mat-icon,.mat-mdc-option .mat-pseudo-checkbox-full{margin-right:16px;flex-shrink:0}[dir=rtl] .mat-mdc-option .mat-icon,[dir=rtl] .mat-mdc-option .mat-pseudo-checkbox-full{margin-right:0;margin-left:16px}.mat-mdc-option .mat-pseudo-checkbox-minimal{margin-left:16px;flex-shrink:0}[dir=rtl] .mat-mdc-option .mat-pseudo-checkbox-minimal{margin-right:16px;margin-left:0}.mat-mdc-option .mat-mdc-option-ripple{top:0;left:0;right:0;bottom:0;position:absolute;pointer-events:none}.mat-mdc-option .mdc-list-item__primary-text{white-space:normal;font-size:inherit;font-weight:inherit;letter-spacing:inherit;line-height:inherit;font-family:inherit;text-decoration:inherit;text-transform:inherit;margin-right:auto}[dir=rtl] .mat-mdc-option .mdc-list-item__primary-text{margin-right:0;margin-left:auto}.cdk-high-contrast-active .mat-mdc-option.mdc-list-item--selected:not(.mat-mdc-option-multiple)::after{content:"";position:absolute;top:50%;right:16px;transform:translateY(-50%);width:10px;height:0;border-bottom:solid 10px;border-radius:10px}[dir=rtl] .cdk-high-contrast-active .mat-mdc-option.mdc-list-item--selected:not(.mat-mdc-option-multiple)::after{right:auto;left:16px}.mat-mdc-option-active .mat-mdc-focus-indicator::before{content:""}']
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: ChangeDetectorRef
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [MAT_OPTION_PARENT_COMPONENT]
    }]
  }, {
    type: MatOptgroup,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [MAT_OPTGROUP]
    }]
  }], {
    value: [{
      type: Input
    }],
    id: [{
      type: Input
    }],
    disabled: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    onSelectionChange: [{
      type: Output
    }],
    _text: [{
      type: ViewChild,
      args: ["text", {
        static: true
      }]
    }]
  });
})();
var _MatOptionModule = class _MatOptionModule {
};
_MatOptionModule.\u0275fac = function MatOptionModule_Factory(t) {
  return new (t || _MatOptionModule)();
};
_MatOptionModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _MatOptionModule
});
_MatOptionModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
  imports: [MatRippleModule, MatCommonModule, MatPseudoCheckboxModule]
});
var MatOptionModule = _MatOptionModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MatOptionModule, [{
    type: NgModule,
    args: [{
      imports: [MatRippleModule, MatCommonModule, MatPseudoCheckboxModule],
      exports: [MatOption, MatOptgroup],
      declarations: [MatOption, MatOptgroup]
    }]
  }], null, null);
})();
var eventListenerOptions2 = {
  capture: true
};
var rippleInteractionEvents = ["focus", "click", "mouseenter", "touchstart"];
var matRippleUninitialized = "mat-ripple-loader-uninitialized";
var matRippleClassName = "mat-ripple-loader-class-name";
var matRippleCentered = "mat-ripple-loader-centered";
var matRippleDisabled = "mat-ripple-loader-disabled";
var _MatRippleLoader = class _MatRippleLoader {
  constructor() {
    this._document = inject(DOCUMENT2, {
      optional: true
    });
    this._animationMode = inject(ANIMATION_MODULE_TYPE, {
      optional: true
    });
    this._globalRippleOptions = inject(MAT_RIPPLE_GLOBAL_OPTIONS, {
      optional: true
    });
    this._platform = inject(Platform);
    this._ngZone = inject(NgZone);
    this._hosts = /* @__PURE__ */ new Map();
    this._onInteraction = (event) => {
      if (!(event.target instanceof HTMLElement)) {
        return;
      }
      const eventTarget = event.target;
      const element = eventTarget.closest(`[${matRippleUninitialized}]`);
      if (element) {
        this._createRipple(element);
      }
    };
    this._ngZone.runOutsideAngular(() => {
      for (const event of rippleInteractionEvents) {
        this._document?.addEventListener(event, this._onInteraction, eventListenerOptions2);
      }
    });
  }
  ngOnDestroy() {
    const hosts = this._hosts.keys();
    for (const host of hosts) {
      this.destroyRipple(host);
    }
    for (const event of rippleInteractionEvents) {
      this._document?.removeEventListener(event, this._onInteraction, eventListenerOptions2);
    }
  }
  /**
   * Configures the ripple that will be rendered by the ripple loader.
   *
   * Stores the given information about how the ripple should be configured on the host
   * element so that it can later be retrived & used when the ripple is actually created.
   */
  configureRipple(host, config2) {
    host.setAttribute(matRippleUninitialized, "");
    if (config2.className || !host.hasAttribute(matRippleClassName)) {
      host.setAttribute(matRippleClassName, config2.className || "");
    }
    if (config2.centered) {
      host.setAttribute(matRippleCentered, "");
    }
    if (config2.disabled) {
      host.setAttribute(matRippleDisabled, "");
    }
  }
  /** Returns the ripple instance for the given host element. */
  getRipple(host) {
    const ripple = this._hosts.get(host);
    return ripple || this._createRipple(host);
  }
  /** Sets the disabled state on the ripple instance corresponding to the given host element. */
  setDisabled(host, disabled) {
    const ripple = this._hosts.get(host);
    if (ripple) {
      ripple.disabled = disabled;
      return;
    }
    if (disabled) {
      host.setAttribute(matRippleDisabled, "");
    } else {
      host.removeAttribute(matRippleDisabled);
    }
  }
  /** Creates a MatRipple and appends it to the given element. */
  _createRipple(host) {
    if (!this._document) {
      return;
    }
    const existingRipple = this._hosts.get(host);
    if (existingRipple) {
      return existingRipple;
    }
    host.querySelector(".mat-ripple")?.remove();
    const rippleEl = this._document.createElement("span");
    rippleEl.classList.add("mat-ripple", host.getAttribute(matRippleClassName));
    host.append(rippleEl);
    const ripple = new MatRipple(new ElementRef(rippleEl), this._ngZone, this._platform, this._globalRippleOptions ? this._globalRippleOptions : void 0, this._animationMode ? this._animationMode : void 0);
    ripple._isInitialized = true;
    ripple.trigger = host;
    ripple.centered = host.hasAttribute(matRippleCentered);
    ripple.disabled = host.hasAttribute(matRippleDisabled);
    this.attachRipple(host, ripple);
    return ripple;
  }
  attachRipple(host, ripple) {
    host.removeAttribute(matRippleUninitialized);
    this._hosts.set(host, ripple);
  }
  destroyRipple(host) {
    const ripple = this._hosts.get(host);
    if (ripple) {
      ripple.ngOnDestroy();
      this._hosts.delete(host);
    }
  }
};
_MatRippleLoader.\u0275fac = function MatRippleLoader_Factory(t) {
  return new (t || _MatRippleLoader)();
};
_MatRippleLoader.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _MatRippleLoader,
  factory: _MatRippleLoader.\u0275fac,
  providedIn: "root"
});
var MatRippleLoader = _MatRippleLoader;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MatRippleLoader, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [], null);
})();

// node_modules/@angular/material/fesm2022/dialog.mjs
function MatDialogContainer_ng_template_2_Template(rf, ctx) {
}
var MatDialogConfig = class {
  constructor() {
    this.role = "dialog";
    this.panelClass = "";
    this.hasBackdrop = true;
    this.backdropClass = "";
    this.disableClose = false;
    this.width = "";
    this.height = "";
    this.maxWidth = "80vw";
    this.data = null;
    this.ariaDescribedBy = null;
    this.ariaLabelledBy = null;
    this.ariaLabel = null;
    this.ariaModal = true;
    this.autoFocus = "first-tabbable";
    this.restoreFocus = true;
    this.delayFocusTrap = true;
    this.closeOnNavigation = true;
  }
};
var OPEN_CLASS = "mdc-dialog--open";
var OPENING_CLASS = "mdc-dialog--opening";
var CLOSING_CLASS = "mdc-dialog--closing";
var OPEN_ANIMATION_DURATION = 150;
var CLOSE_ANIMATION_DURATION = 75;
var _MatDialogContainer = class _MatDialogContainer extends CdkDialogContainer {
  constructor(elementRef, focusTrapFactory, _document2, dialogConfig, interactivityChecker, ngZone, overlayRef, _animationMode, focusMonitor) {
    super(elementRef, focusTrapFactory, _document2, dialogConfig, interactivityChecker, ngZone, overlayRef, focusMonitor);
    this._animationMode = _animationMode;
    this._animationStateChanged = new EventEmitter();
    this._animationsEnabled = this._animationMode !== "NoopAnimations";
    this._hostElement = this._elementRef.nativeElement;
    this._enterAnimationDuration = this._animationsEnabled ? parseCssTime(this._config.enterAnimationDuration) ?? OPEN_ANIMATION_DURATION : 0;
    this._exitAnimationDuration = this._animationsEnabled ? parseCssTime(this._config.exitAnimationDuration) ?? CLOSE_ANIMATION_DURATION : 0;
    this._animationTimer = null;
    this._finishDialogOpen = () => {
      this._clearAnimationClasses();
      this._openAnimationDone(this._enterAnimationDuration);
    };
    this._finishDialogClose = () => {
      this._clearAnimationClasses();
      this._animationStateChanged.emit({
        state: "closed",
        totalTime: this._exitAnimationDuration
      });
    };
  }
  _contentAttached() {
    super._contentAttached();
    this._startOpenAnimation();
  }
  /** Starts the dialog open animation if enabled. */
  _startOpenAnimation() {
    this._animationStateChanged.emit({
      state: "opening",
      totalTime: this._enterAnimationDuration
    });
    if (this._animationsEnabled) {
      this._hostElement.style.setProperty(TRANSITION_DURATION_PROPERTY, `${this._enterAnimationDuration}ms`);
      this._requestAnimationFrame(() => this._hostElement.classList.add(OPENING_CLASS, OPEN_CLASS));
      this._waitForAnimationToComplete(this._enterAnimationDuration, this._finishDialogOpen);
    } else {
      this._hostElement.classList.add(OPEN_CLASS);
      Promise.resolve().then(() => this._finishDialogOpen());
    }
  }
  /**
   * Starts the exit animation of the dialog if enabled. This method is
   * called by the dialog ref.
   */
  _startExitAnimation() {
    this._animationStateChanged.emit({
      state: "closing",
      totalTime: this._exitAnimationDuration
    });
    this._hostElement.classList.remove(OPEN_CLASS);
    if (this._animationsEnabled) {
      this._hostElement.style.setProperty(TRANSITION_DURATION_PROPERTY, `${this._exitAnimationDuration}ms`);
      this._requestAnimationFrame(() => this._hostElement.classList.add(CLOSING_CLASS));
      this._waitForAnimationToComplete(this._exitAnimationDuration, this._finishDialogClose);
    } else {
      Promise.resolve().then(() => this._finishDialogClose());
    }
  }
  /** Clears all dialog animation classes. */
  _clearAnimationClasses() {
    this._hostElement.classList.remove(OPENING_CLASS, CLOSING_CLASS);
  }
  _waitForAnimationToComplete(duration, callback) {
    if (this._animationTimer !== null) {
      clearTimeout(this._animationTimer);
    }
    this._animationTimer = setTimeout(callback, duration);
  }
  /** Runs a callback in `requestAnimationFrame`, if available. */
  _requestAnimationFrame(callback) {
    this._ngZone.runOutsideAngular(() => {
      if (typeof requestAnimationFrame === "function") {
        requestAnimationFrame(callback);
      } else {
        callback();
      }
    });
  }
  _captureInitialFocus() {
    if (!this._config.delayFocusTrap) {
      this._trapFocus();
    }
  }
  /**
   * Callback for when the open dialog animation has finished. Intended to
   * be called by sub-classes that use different animation implementations.
   */
  _openAnimationDone(totalTime) {
    if (this._config.delayFocusTrap) {
      this._trapFocus();
    }
    this._animationStateChanged.next({
      state: "opened",
      totalTime
    });
  }
  ngOnDestroy() {
    super.ngOnDestroy();
    if (this._animationTimer !== null) {
      clearTimeout(this._animationTimer);
    }
  }
  attachComponentPortal(portal) {
    const ref = super.attachComponentPortal(portal);
    ref.location.nativeElement.classList.add("mat-mdc-dialog-component-host");
    return ref;
  }
};
_MatDialogContainer.\u0275fac = function MatDialogContainer_Factory(t) {
  return new (t || _MatDialogContainer)(\u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(FocusTrapFactory), \u0275\u0275directiveInject(DOCUMENT2, 8), \u0275\u0275directiveInject(MatDialogConfig), \u0275\u0275directiveInject(InteractivityChecker), \u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(OverlayRef), \u0275\u0275directiveInject(ANIMATION_MODULE_TYPE, 8), \u0275\u0275directiveInject(FocusMonitor));
};
_MatDialogContainer.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _MatDialogContainer,
  selectors: [["mat-dialog-container"]],
  hostAttrs: ["tabindex", "-1", 1, "mat-mdc-dialog-container", "mdc-dialog"],
  hostVars: 8,
  hostBindings: function MatDialogContainer_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275hostProperty("id", ctx._config.id);
      \u0275\u0275attribute("aria-modal", ctx._config.ariaModal)("role", ctx._config.role)("aria-labelledby", ctx._config.ariaLabel ? null : ctx._ariaLabelledByQueue[0])("aria-label", ctx._config.ariaLabel)("aria-describedby", ctx._config.ariaDescribedBy || null);
      \u0275\u0275classProp("_mat-animation-noopable", !ctx._animationsEnabled);
    }
  },
  standalone: true,
  features: [\u0275\u0275InheritDefinitionFeature, \u0275\u0275StandaloneFeature],
  decls: 3,
  vars: 0,
  consts: [[1, "mdc-dialog__container"], [1, "mat-mdc-dialog-surface", "mdc-dialog__surface"], ["cdkPortalOutlet", ""]],
  template: function MatDialogContainer_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
      \u0275\u0275template(2, MatDialogContainer_ng_template_2_Template, 0, 0, "ng-template", 2);
      \u0275\u0275elementEnd()();
    }
  },
  dependencies: [PortalModule, CdkPortalOutlet],
  styles: ['.mdc-elevation-overlay{position:absolute;border-radius:inherit;pointer-events:none;opacity:var(--mdc-elevation-overlay-opacity, 0);transition:opacity 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-dialog,.mdc-dialog__scrim{position:fixed;top:0;left:0;align-items:center;justify-content:center;box-sizing:border-box;width:100%;height:100%}.mdc-dialog{display:none;z-index:var(--mdc-dialog-z-index, 7)}.mdc-dialog .mdc-dialog__content{padding:20px 24px 20px 24px}.mdc-dialog .mdc-dialog__surface{min-width:280px}@media(max-width: 592px){.mdc-dialog .mdc-dialog__surface{max-width:calc(100vw - 32px)}}@media(min-width: 592px){.mdc-dialog .mdc-dialog__surface{max-width:560px}}.mdc-dialog .mdc-dialog__surface{max-height:calc(100% - 32px)}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-width:none}@media(max-width: 960px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-height:560px;width:560px}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{right:-12px}}@media(max-width: 720px)and (max-width: 672px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{width:calc(100vw - 112px)}}@media(max-width: 720px)and (min-width: 672px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{width:560px}}@media(max-width: 720px)and (max-height: 720px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-height:calc(100vh - 160px)}}@media(max-width: 720px)and (min-height: 720px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-height:560px}}@media(max-width: 720px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{right:-12px}}@media(max-width: 720px)and (max-height: 400px),(max-width: 600px),(min-width: 720px)and (max-height: 400px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{height:100%;max-height:100vh;max-width:100vw;width:100vw;border-radius:0}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{order:-1;left:-12px}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__header{padding:0 16px 9px;justify-content:flex-start}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__title{margin-left:calc(16px - 2 * 12px)}}@media(min-width: 960px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{width:calc(100vw - 400px)}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{right:-12px}}.mdc-dialog.mdc-dialog__scrim--hidden .mdc-dialog__scrim{opacity:0}.mdc-dialog__scrim{opacity:0;z-index:-1}.mdc-dialog__container{display:flex;flex-direction:row;align-items:center;justify-content:space-around;box-sizing:border-box;height:100%;transform:scale(0.8);opacity:0;pointer-events:none}.mdc-dialog__surface{position:relative;display:flex;flex-direction:column;flex-grow:0;flex-shrink:0;box-sizing:border-box;max-width:100%;max-height:100%;pointer-events:auto;overflow-y:auto;outline:0}.mdc-dialog__surface .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}[dir=rtl] .mdc-dialog__surface,.mdc-dialog__surface[dir=rtl]{text-align:right}@media screen and (forced-colors: active),(-ms-high-contrast: active){.mdc-dialog__surface{outline:2px solid windowText}}.mdc-dialog__surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:2px solid rgba(0,0,0,0);border-radius:inherit;content:"";pointer-events:none}@media screen and (forced-colors: active){.mdc-dialog__surface::before{border-color:CanvasText}}@media screen and (-ms-high-contrast: active),screen and (-ms-high-contrast: none){.mdc-dialog__surface::before{content:none}}.mdc-dialog__title{display:block;margin-top:0;position:relative;flex-shrink:0;box-sizing:border-box;margin:0 0 1px;padding:0 24px 9px}.mdc-dialog__title::before{display:inline-block;width:0;height:40px;content:"";vertical-align:0}[dir=rtl] .mdc-dialog__title,.mdc-dialog__title[dir=rtl]{text-align:right}.mdc-dialog--scrollable .mdc-dialog__title{margin-bottom:1px;padding-bottom:15px}.mdc-dialog--fullscreen .mdc-dialog__header{align-items:baseline;border-bottom:1px solid rgba(0,0,0,0);display:inline-flex;justify-content:space-between;padding:0 24px 9px;z-index:1}@media screen and (forced-colors: active){.mdc-dialog--fullscreen .mdc-dialog__header{border-bottom-color:CanvasText}}.mdc-dialog--fullscreen .mdc-dialog__header .mdc-dialog__close{right:-12px}.mdc-dialog--fullscreen .mdc-dialog__title{margin-bottom:0;padding:0;border-bottom:0}.mdc-dialog--fullscreen.mdc-dialog--scrollable .mdc-dialog__title{border-bottom:0;margin-bottom:0}.mdc-dialog--fullscreen .mdc-dialog__close{top:5px}.mdc-dialog--fullscreen.mdc-dialog--scrollable .mdc-dialog__actions{border-top:1px solid rgba(0,0,0,0)}@media screen and (forced-colors: active){.mdc-dialog--fullscreen.mdc-dialog--scrollable .mdc-dialog__actions{border-top-color:CanvasText}}.mdc-dialog--fullscreen--titleless .mdc-dialog__close{margin-top:4px}.mdc-dialog--fullscreen--titleless.mdc-dialog--scrollable .mdc-dialog__close{margin-top:0}.mdc-dialog__content{flex-grow:1;box-sizing:border-box;margin:0;overflow:auto}.mdc-dialog__content>:first-child{margin-top:0}.mdc-dialog__content>:last-child{margin-bottom:0}.mdc-dialog__title+.mdc-dialog__content,.mdc-dialog__header+.mdc-dialog__content{padding-top:0}.mdc-dialog--scrollable .mdc-dialog__title+.mdc-dialog__content{padding-top:8px;padding-bottom:8px}.mdc-dialog__content .mdc-deprecated-list:first-child:last-child{padding:6px 0 0}.mdc-dialog--scrollable .mdc-dialog__content .mdc-deprecated-list:first-child:last-child{padding:0}.mdc-dialog__actions{display:flex;position:relative;flex-shrink:0;flex-wrap:wrap;align-items:center;justify-content:flex-end;box-sizing:border-box;min-height:52px;margin:0;padding:8px;border-top:1px solid rgba(0,0,0,0)}@media screen and (forced-colors: active){.mdc-dialog__actions{border-top-color:CanvasText}}.mdc-dialog--stacked .mdc-dialog__actions{flex-direction:column;align-items:flex-end}.mdc-dialog__button{margin-left:8px;margin-right:0;max-width:100%;text-align:right}[dir=rtl] .mdc-dialog__button,.mdc-dialog__button[dir=rtl]{margin-left:0;margin-right:8px}.mdc-dialog__button:first-child{margin-left:0;margin-right:0}[dir=rtl] .mdc-dialog__button:first-child,.mdc-dialog__button:first-child[dir=rtl]{margin-left:0;margin-right:0}[dir=rtl] .mdc-dialog__button,.mdc-dialog__button[dir=rtl]{text-align:left}.mdc-dialog--stacked .mdc-dialog__button:not(:first-child){margin-top:12px}.mdc-dialog--open,.mdc-dialog--opening,.mdc-dialog--closing{display:flex}.mdc-dialog--opening .mdc-dialog__scrim{transition:opacity 150ms linear}.mdc-dialog--opening .mdc-dialog__container{transition:opacity 75ms linear,transform 150ms 0ms cubic-bezier(0, 0, 0.2, 1)}.mdc-dialog--closing .mdc-dialog__scrim,.mdc-dialog--closing .mdc-dialog__container{transition:opacity 75ms linear}.mdc-dialog--closing .mdc-dialog__container{transform:none}.mdc-dialog--open .mdc-dialog__scrim{opacity:1}.mdc-dialog--open .mdc-dialog__container{transform:none;opacity:1}.mdc-dialog--open.mdc-dialog__surface-scrim--shown .mdc-dialog__surface-scrim{opacity:1}.mdc-dialog--open.mdc-dialog__surface-scrim--hiding .mdc-dialog__surface-scrim{transition:opacity 75ms linear}.mdc-dialog--open.mdc-dialog__surface-scrim--showing .mdc-dialog__surface-scrim{transition:opacity 150ms linear}.mdc-dialog__surface-scrim{display:none;opacity:0;position:absolute;width:100%;height:100%;z-index:1}.mdc-dialog__surface-scrim--shown .mdc-dialog__surface-scrim,.mdc-dialog__surface-scrim--showing .mdc-dialog__surface-scrim,.mdc-dialog__surface-scrim--hiding .mdc-dialog__surface-scrim{display:block}.mdc-dialog-scroll-lock{overflow:hidden}.mdc-dialog--no-content-padding .mdc-dialog__content{padding:0}.mdc-dialog--sheet .mdc-dialog__container .mdc-dialog__close{right:12px;top:9px;position:absolute;z-index:1}.mdc-dialog__scrim--removed{pointer-events:none}.mdc-dialog__scrim--removed .mdc-dialog__scrim,.mdc-dialog__scrim--removed .mdc-dialog__surface-scrim{display:none}.mat-mdc-dialog-content{max-height:65vh}.mat-mdc-dialog-container{position:static;display:block}.mat-mdc-dialog-container,.mat-mdc-dialog-container .mdc-dialog__container,.mat-mdc-dialog-container .mdc-dialog__surface{max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit}.mat-mdc-dialog-container .mdc-dialog__surface{width:100%;height:100%}.mat-mdc-dialog-component-host{display:contents}.mat-mdc-dialog-container{--mdc-dialog-container-elevation: var(--mdc-dialog-container-elevation-shadow);outline:0}.mat-mdc-dialog-container .mdc-dialog__surface{background-color:var(--mdc-dialog-container-color, white)}.mat-mdc-dialog-container .mdc-dialog__surface{box-shadow:var(--mdc-dialog-container-elevation, 0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14), 0px 9px 46px 8px rgba(0, 0, 0, 0.12))}.mat-mdc-dialog-container .mdc-dialog__surface{border-radius:var(--mdc-dialog-container-shape, 4px)}.mat-mdc-dialog-container .mdc-dialog__title{font-family:var(--mdc-dialog-subhead-font, Roboto, sans-serif);line-height:var(--mdc-dialog-subhead-line-height, 1.5rem);font-size:var(--mdc-dialog-subhead-size, 1rem);font-weight:var(--mdc-dialog-subhead-weight, 400);letter-spacing:var(--mdc-dialog-subhead-tracking, 0.03125em)}.mat-mdc-dialog-container .mdc-dialog__title{color:var(--mdc-dialog-subhead-color, rgba(0, 0, 0, 0.87))}.mat-mdc-dialog-container .mdc-dialog__content{font-family:var(--mdc-dialog-supporting-text-font, Roboto, sans-serif);line-height:var(--mdc-dialog-supporting-text-line-height, 1.5rem);font-size:var(--mdc-dialog-supporting-text-size, 1rem);font-weight:var(--mdc-dialog-supporting-text-weight, 400);letter-spacing:var(--mdc-dialog-supporting-text-tracking, 0.03125em)}.mat-mdc-dialog-container .mdc-dialog__content{color:var(--mdc-dialog-supporting-text-color, rgba(0, 0, 0, 0.6))}.mat-mdc-dialog-container .mdc-dialog__container{transition-duration:var(--mat-dialog-transition-duration, 0ms)}.mat-mdc-dialog-container._mat-animation-noopable .mdc-dialog__container{transition:none}.mat-mdc-dialog-content{display:block}.mat-mdc-dialog-actions{justify-content:start}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-center,.mat-mdc-dialog-actions[align=center]{justify-content:center}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-end,.mat-mdc-dialog-actions[align=end]{justify-content:flex-end}.mat-mdc-dialog-actions .mat-button-base+.mat-button-base,.mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-mdc-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}'],
  encapsulation: 2
});
var MatDialogContainer = _MatDialogContainer;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MatDialogContainer, [{
    type: Component,
    args: [{
      selector: "mat-dialog-container",
      encapsulation: ViewEncapsulation$1.None,
      changeDetection: ChangeDetectionStrategy.Default,
      standalone: true,
      imports: [PortalModule],
      host: {
        "class": "mat-mdc-dialog-container mdc-dialog",
        "tabindex": "-1",
        "[attr.aria-modal]": "_config.ariaModal",
        "[id]": "_config.id",
        "[attr.role]": "_config.role",
        "[attr.aria-labelledby]": "_config.ariaLabel ? null : _ariaLabelledByQueue[0]",
        "[attr.aria-label]": "_config.ariaLabel",
        "[attr.aria-describedby]": "_config.ariaDescribedBy || null",
        "[class._mat-animation-noopable]": "!_animationsEnabled"
      },
      template: '<div class="mdc-dialog__container">\n  <div class="mat-mdc-dialog-surface mdc-dialog__surface">\n    <ng-template cdkPortalOutlet></ng-template>\n  </div>\n</div>\n',
      styles: ['.mdc-elevation-overlay{position:absolute;border-radius:inherit;pointer-events:none;opacity:var(--mdc-elevation-overlay-opacity, 0);transition:opacity 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-dialog,.mdc-dialog__scrim{position:fixed;top:0;left:0;align-items:center;justify-content:center;box-sizing:border-box;width:100%;height:100%}.mdc-dialog{display:none;z-index:var(--mdc-dialog-z-index, 7)}.mdc-dialog .mdc-dialog__content{padding:20px 24px 20px 24px}.mdc-dialog .mdc-dialog__surface{min-width:280px}@media(max-width: 592px){.mdc-dialog .mdc-dialog__surface{max-width:calc(100vw - 32px)}}@media(min-width: 592px){.mdc-dialog .mdc-dialog__surface{max-width:560px}}.mdc-dialog .mdc-dialog__surface{max-height:calc(100% - 32px)}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-width:none}@media(max-width: 960px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-height:560px;width:560px}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{right:-12px}}@media(max-width: 720px)and (max-width: 672px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{width:calc(100vw - 112px)}}@media(max-width: 720px)and (min-width: 672px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{width:560px}}@media(max-width: 720px)and (max-height: 720px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-height:calc(100vh - 160px)}}@media(max-width: 720px)and (min-height: 720px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{max-height:560px}}@media(max-width: 720px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{right:-12px}}@media(max-width: 720px)and (max-height: 400px),(max-width: 600px),(min-width: 720px)and (max-height: 400px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{height:100%;max-height:100vh;max-width:100vw;width:100vw;border-radius:0}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{order:-1;left:-12px}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__header{padding:0 16px 9px;justify-content:flex-start}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__title{margin-left:calc(16px - 2 * 12px)}}@media(min-width: 960px){.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface{width:calc(100vw - 400px)}.mdc-dialog.mdc-dialog--fullscreen .mdc-dialog__surface .mdc-dialog__close{right:-12px}}.mdc-dialog.mdc-dialog__scrim--hidden .mdc-dialog__scrim{opacity:0}.mdc-dialog__scrim{opacity:0;z-index:-1}.mdc-dialog__container{display:flex;flex-direction:row;align-items:center;justify-content:space-around;box-sizing:border-box;height:100%;transform:scale(0.8);opacity:0;pointer-events:none}.mdc-dialog__surface{position:relative;display:flex;flex-direction:column;flex-grow:0;flex-shrink:0;box-sizing:border-box;max-width:100%;max-height:100%;pointer-events:auto;overflow-y:auto;outline:0}.mdc-dialog__surface .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}[dir=rtl] .mdc-dialog__surface,.mdc-dialog__surface[dir=rtl]{text-align:right}@media screen and (forced-colors: active),(-ms-high-contrast: active){.mdc-dialog__surface{outline:2px solid windowText}}.mdc-dialog__surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:2px solid rgba(0,0,0,0);border-radius:inherit;content:"";pointer-events:none}@media screen and (forced-colors: active){.mdc-dialog__surface::before{border-color:CanvasText}}@media screen and (-ms-high-contrast: active),screen and (-ms-high-contrast: none){.mdc-dialog__surface::before{content:none}}.mdc-dialog__title{display:block;margin-top:0;position:relative;flex-shrink:0;box-sizing:border-box;margin:0 0 1px;padding:0 24px 9px}.mdc-dialog__title::before{display:inline-block;width:0;height:40px;content:"";vertical-align:0}[dir=rtl] .mdc-dialog__title,.mdc-dialog__title[dir=rtl]{text-align:right}.mdc-dialog--scrollable .mdc-dialog__title{margin-bottom:1px;padding-bottom:15px}.mdc-dialog--fullscreen .mdc-dialog__header{align-items:baseline;border-bottom:1px solid rgba(0,0,0,0);display:inline-flex;justify-content:space-between;padding:0 24px 9px;z-index:1}@media screen and (forced-colors: active){.mdc-dialog--fullscreen .mdc-dialog__header{border-bottom-color:CanvasText}}.mdc-dialog--fullscreen .mdc-dialog__header .mdc-dialog__close{right:-12px}.mdc-dialog--fullscreen .mdc-dialog__title{margin-bottom:0;padding:0;border-bottom:0}.mdc-dialog--fullscreen.mdc-dialog--scrollable .mdc-dialog__title{border-bottom:0;margin-bottom:0}.mdc-dialog--fullscreen .mdc-dialog__close{top:5px}.mdc-dialog--fullscreen.mdc-dialog--scrollable .mdc-dialog__actions{border-top:1px solid rgba(0,0,0,0)}@media screen and (forced-colors: active){.mdc-dialog--fullscreen.mdc-dialog--scrollable .mdc-dialog__actions{border-top-color:CanvasText}}.mdc-dialog--fullscreen--titleless .mdc-dialog__close{margin-top:4px}.mdc-dialog--fullscreen--titleless.mdc-dialog--scrollable .mdc-dialog__close{margin-top:0}.mdc-dialog__content{flex-grow:1;box-sizing:border-box;margin:0;overflow:auto}.mdc-dialog__content>:first-child{margin-top:0}.mdc-dialog__content>:last-child{margin-bottom:0}.mdc-dialog__title+.mdc-dialog__content,.mdc-dialog__header+.mdc-dialog__content{padding-top:0}.mdc-dialog--scrollable .mdc-dialog__title+.mdc-dialog__content{padding-top:8px;padding-bottom:8px}.mdc-dialog__content .mdc-deprecated-list:first-child:last-child{padding:6px 0 0}.mdc-dialog--scrollable .mdc-dialog__content .mdc-deprecated-list:first-child:last-child{padding:0}.mdc-dialog__actions{display:flex;position:relative;flex-shrink:0;flex-wrap:wrap;align-items:center;justify-content:flex-end;box-sizing:border-box;min-height:52px;margin:0;padding:8px;border-top:1px solid rgba(0,0,0,0)}@media screen and (forced-colors: active){.mdc-dialog__actions{border-top-color:CanvasText}}.mdc-dialog--stacked .mdc-dialog__actions{flex-direction:column;align-items:flex-end}.mdc-dialog__button{margin-left:8px;margin-right:0;max-width:100%;text-align:right}[dir=rtl] .mdc-dialog__button,.mdc-dialog__button[dir=rtl]{margin-left:0;margin-right:8px}.mdc-dialog__button:first-child{margin-left:0;margin-right:0}[dir=rtl] .mdc-dialog__button:first-child,.mdc-dialog__button:first-child[dir=rtl]{margin-left:0;margin-right:0}[dir=rtl] .mdc-dialog__button,.mdc-dialog__button[dir=rtl]{text-align:left}.mdc-dialog--stacked .mdc-dialog__button:not(:first-child){margin-top:12px}.mdc-dialog--open,.mdc-dialog--opening,.mdc-dialog--closing{display:flex}.mdc-dialog--opening .mdc-dialog__scrim{transition:opacity 150ms linear}.mdc-dialog--opening .mdc-dialog__container{transition:opacity 75ms linear,transform 150ms 0ms cubic-bezier(0, 0, 0.2, 1)}.mdc-dialog--closing .mdc-dialog__scrim,.mdc-dialog--closing .mdc-dialog__container{transition:opacity 75ms linear}.mdc-dialog--closing .mdc-dialog__container{transform:none}.mdc-dialog--open .mdc-dialog__scrim{opacity:1}.mdc-dialog--open .mdc-dialog__container{transform:none;opacity:1}.mdc-dialog--open.mdc-dialog__surface-scrim--shown .mdc-dialog__surface-scrim{opacity:1}.mdc-dialog--open.mdc-dialog__surface-scrim--hiding .mdc-dialog__surface-scrim{transition:opacity 75ms linear}.mdc-dialog--open.mdc-dialog__surface-scrim--showing .mdc-dialog__surface-scrim{transition:opacity 150ms linear}.mdc-dialog__surface-scrim{display:none;opacity:0;position:absolute;width:100%;height:100%;z-index:1}.mdc-dialog__surface-scrim--shown .mdc-dialog__surface-scrim,.mdc-dialog__surface-scrim--showing .mdc-dialog__surface-scrim,.mdc-dialog__surface-scrim--hiding .mdc-dialog__surface-scrim{display:block}.mdc-dialog-scroll-lock{overflow:hidden}.mdc-dialog--no-content-padding .mdc-dialog__content{padding:0}.mdc-dialog--sheet .mdc-dialog__container .mdc-dialog__close{right:12px;top:9px;position:absolute;z-index:1}.mdc-dialog__scrim--removed{pointer-events:none}.mdc-dialog__scrim--removed .mdc-dialog__scrim,.mdc-dialog__scrim--removed .mdc-dialog__surface-scrim{display:none}.mat-mdc-dialog-content{max-height:65vh}.mat-mdc-dialog-container{position:static;display:block}.mat-mdc-dialog-container,.mat-mdc-dialog-container .mdc-dialog__container,.mat-mdc-dialog-container .mdc-dialog__surface{max-height:inherit;min-height:inherit;min-width:inherit;max-width:inherit}.mat-mdc-dialog-container .mdc-dialog__surface{width:100%;height:100%}.mat-mdc-dialog-component-host{display:contents}.mat-mdc-dialog-container{--mdc-dialog-container-elevation: var(--mdc-dialog-container-elevation-shadow);outline:0}.mat-mdc-dialog-container .mdc-dialog__surface{background-color:var(--mdc-dialog-container-color, white)}.mat-mdc-dialog-container .mdc-dialog__surface{box-shadow:var(--mdc-dialog-container-elevation, 0px 11px 15px -7px rgba(0, 0, 0, 0.2), 0px 24px 38px 3px rgba(0, 0, 0, 0.14), 0px 9px 46px 8px rgba(0, 0, 0, 0.12))}.mat-mdc-dialog-container .mdc-dialog__surface{border-radius:var(--mdc-dialog-container-shape, 4px)}.mat-mdc-dialog-container .mdc-dialog__title{font-family:var(--mdc-dialog-subhead-font, Roboto, sans-serif);line-height:var(--mdc-dialog-subhead-line-height, 1.5rem);font-size:var(--mdc-dialog-subhead-size, 1rem);font-weight:var(--mdc-dialog-subhead-weight, 400);letter-spacing:var(--mdc-dialog-subhead-tracking, 0.03125em)}.mat-mdc-dialog-container .mdc-dialog__title{color:var(--mdc-dialog-subhead-color, rgba(0, 0, 0, 0.87))}.mat-mdc-dialog-container .mdc-dialog__content{font-family:var(--mdc-dialog-supporting-text-font, Roboto, sans-serif);line-height:var(--mdc-dialog-supporting-text-line-height, 1.5rem);font-size:var(--mdc-dialog-supporting-text-size, 1rem);font-weight:var(--mdc-dialog-supporting-text-weight, 400);letter-spacing:var(--mdc-dialog-supporting-text-tracking, 0.03125em)}.mat-mdc-dialog-container .mdc-dialog__content{color:var(--mdc-dialog-supporting-text-color, rgba(0, 0, 0, 0.6))}.mat-mdc-dialog-container .mdc-dialog__container{transition-duration:var(--mat-dialog-transition-duration, 0ms)}.mat-mdc-dialog-container._mat-animation-noopable .mdc-dialog__container{transition:none}.mat-mdc-dialog-content{display:block}.mat-mdc-dialog-actions{justify-content:start}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-center,.mat-mdc-dialog-actions[align=center]{justify-content:center}.mat-mdc-dialog-actions.mat-mdc-dialog-actions-align-end,.mat-mdc-dialog-actions[align=end]{justify-content:flex-end}.mat-mdc-dialog-actions .mat-button-base+.mat-button-base,.mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:8px}[dir=rtl] .mat-mdc-dialog-actions .mat-button-base+.mat-button-base,[dir=rtl] .mat-mdc-dialog-actions .mat-mdc-button-base+.mat-mdc-button-base{margin-left:0;margin-right:8px}']
    }]
  }], () => [{
    type: ElementRef
  }, {
    type: FocusTrapFactory
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [DOCUMENT2]
    }]
  }, {
    type: MatDialogConfig
  }, {
    type: InteractivityChecker
  }, {
    type: NgZone
  }, {
    type: OverlayRef
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [ANIMATION_MODULE_TYPE]
    }]
  }, {
    type: FocusMonitor
  }], null);
})();
var TRANSITION_DURATION_PROPERTY = "--mat-dialog-transition-duration";
function parseCssTime(time) {
  if (time == null) {
    return null;
  }
  if (typeof time === "number") {
    return time;
  }
  if (time.endsWith("ms")) {
    return coerceNumberProperty(time.substring(0, time.length - 2));
  }
  if (time.endsWith("s")) {
    return coerceNumberProperty(time.substring(0, time.length - 1)) * 1e3;
  }
  if (time === "0") {
    return 0;
  }
  return null;
}
var MatDialogRef = class {
  constructor(_ref, config2, _containerInstance) {
    this._ref = _ref;
    this._containerInstance = _containerInstance;
    this._afterOpened = new Subject();
    this._beforeClosed = new Subject();
    this._state = 0;
    this.disableClose = config2.disableClose;
    this.id = _ref.id;
    _containerInstance._animationStateChanged.pipe(filter((event) => event.state === "opened"), take(1)).subscribe(() => {
      this._afterOpened.next();
      this._afterOpened.complete();
    });
    _containerInstance._animationStateChanged.pipe(filter((event) => event.state === "closed"), take(1)).subscribe(() => {
      clearTimeout(this._closeFallbackTimeout);
      this._finishDialogClose();
    });
    _ref.overlayRef.detachments().subscribe(() => {
      this._beforeClosed.next(this._result);
      this._beforeClosed.complete();
      this._finishDialogClose();
    });
    merge(this.backdropClick(), this.keydownEvents().pipe(filter((event) => event.keyCode === ESCAPE && !this.disableClose && !hasModifierKey(event)))).subscribe((event) => {
      if (!this.disableClose) {
        event.preventDefault();
        _closeDialogVia(this, event.type === "keydown" ? "keyboard" : "mouse");
      }
    });
  }
  /**
   * Close the dialog.
   * @param dialogResult Optional result to return to the dialog opener.
   */
  close(dialogResult) {
    this._result = dialogResult;
    this._containerInstance._animationStateChanged.pipe(filter((event) => event.state === "closing"), take(1)).subscribe((event) => {
      this._beforeClosed.next(dialogResult);
      this._beforeClosed.complete();
      this._ref.overlayRef.detachBackdrop();
      this._closeFallbackTimeout = setTimeout(() => this._finishDialogClose(), event.totalTime + 100);
    });
    this._state = 1;
    this._containerInstance._startExitAnimation();
  }
  /**
   * Gets an observable that is notified when the dialog is finished opening.
   */
  afterOpened() {
    return this._afterOpened;
  }
  /**
   * Gets an observable that is notified when the dialog is finished closing.
   */
  afterClosed() {
    return this._ref.closed;
  }
  /**
   * Gets an observable that is notified when the dialog has started closing.
   */
  beforeClosed() {
    return this._beforeClosed;
  }
  /**
   * Gets an observable that emits when the overlay's backdrop has been clicked.
   */
  backdropClick() {
    return this._ref.backdropClick;
  }
  /**
   * Gets an observable that emits when keydown events are targeted on the overlay.
   */
  keydownEvents() {
    return this._ref.keydownEvents;
  }
  /**
   * Updates the dialog's position.
   * @param position New dialog position.
   */
  updatePosition(position) {
    let strategy = this._ref.config.positionStrategy;
    if (position && (position.left || position.right)) {
      position.left ? strategy.left(position.left) : strategy.right(position.right);
    } else {
      strategy.centerHorizontally();
    }
    if (position && (position.top || position.bottom)) {
      position.top ? strategy.top(position.top) : strategy.bottom(position.bottom);
    } else {
      strategy.centerVertically();
    }
    this._ref.updatePosition();
    return this;
  }
  /**
   * Updates the dialog's width and height.
   * @param width New width of the dialog.
   * @param height New height of the dialog.
   */
  updateSize(width = "", height = "") {
    this._ref.updateSize(width, height);
    return this;
  }
  /** Add a CSS class or an array of classes to the overlay pane. */
  addPanelClass(classes) {
    this._ref.addPanelClass(classes);
    return this;
  }
  /** Remove a CSS class or an array of classes from the overlay pane. */
  removePanelClass(classes) {
    this._ref.removePanelClass(classes);
    return this;
  }
  /** Gets the current state of the dialog's lifecycle. */
  getState() {
    return this._state;
  }
  /**
   * Finishes the dialog close by updating the state of the dialog
   * and disposing the overlay.
   */
  _finishDialogClose() {
    this._state = 2;
    this._ref.close(this._result, {
      focusOrigin: this._closeInteractionType
    });
    this.componentInstance = null;
  }
};
function _closeDialogVia(ref, interactionType, result) {
  ref._closeInteractionType = interactionType;
  return ref.close(result);
}
var MAT_DIALOG_DATA = new InjectionToken("MatMdcDialogData");
var MAT_DIALOG_DEFAULT_OPTIONS = new InjectionToken("mat-mdc-dialog-default-options");
var MAT_DIALOG_SCROLL_STRATEGY = new InjectionToken("mat-mdc-dialog-scroll-strategy", {
  providedIn: "root",
  factory: () => {
    const overlay = inject(Overlay);
    return () => overlay.scrollStrategies.block();
  }
});
var uniqueId2 = 0;
var _MatDialog = class _MatDialog {
  /** Keeps track of the currently-open dialogs. */
  get openDialogs() {
    return this._parentDialog ? this._parentDialog.openDialogs : this._openDialogsAtThisLevel;
  }
  /** Stream that emits when a dialog has been opened. */
  get afterOpened() {
    return this._parentDialog ? this._parentDialog.afterOpened : this._afterOpenedAtThisLevel;
  }
  _getAfterAllClosed() {
    const parent = this._parentDialog;
    return parent ? parent._getAfterAllClosed() : this._afterAllClosedAtThisLevel;
  }
  constructor(_overlay, injector, location2, _defaultOptions, _scrollStrategy, _parentDialog, _overlayContainer, _animationMode) {
    this._overlay = _overlay;
    this._defaultOptions = _defaultOptions;
    this._scrollStrategy = _scrollStrategy;
    this._parentDialog = _parentDialog;
    this._openDialogsAtThisLevel = [];
    this._afterAllClosedAtThisLevel = new Subject();
    this._afterOpenedAtThisLevel = new Subject();
    this.dialogConfigClass = MatDialogConfig;
    this.afterAllClosed = defer(() => this.openDialogs.length ? this._getAfterAllClosed() : this._getAfterAllClosed().pipe(startWith(void 0)));
    this._dialog = injector.get(Dialog);
    this._dialogRefConstructor = MatDialogRef;
    this._dialogContainerType = MatDialogContainer;
    this._dialogDataToken = MAT_DIALOG_DATA;
  }
  open(componentOrTemplateRef, config2) {
    let dialogRef;
    config2 = __spreadValues(__spreadValues({}, this._defaultOptions || new MatDialogConfig()), config2);
    config2.id = config2.id || `mat-mdc-dialog-${uniqueId2++}`;
    config2.scrollStrategy = config2.scrollStrategy || this._scrollStrategy();
    const cdkRef = this._dialog.open(componentOrTemplateRef, __spreadProps(__spreadValues({}, config2), {
      positionStrategy: this._overlay.position().global().centerHorizontally().centerVertically(),
      // Disable closing since we need to sync it up to the animation ourselves.
      disableClose: true,
      // Disable closing on destroy, because this service cleans up its open dialogs as well.
      // We want to do the cleanup here, rather than the CDK service, because the CDK destroys
      // the dialogs immediately whereas we want it to wait for the animations to finish.
      closeOnDestroy: false,
      // Disable closing on detachments so that we can sync up the animation.
      // The Material dialog ref handles this manually.
      closeOnOverlayDetachments: false,
      container: {
        type: this._dialogContainerType,
        providers: () => [
          // Provide our config as the CDK config as well since it has the same interface as the
          // CDK one, but it contains the actual values passed in by the user for things like
          // `disableClose` which we disable for the CDK dialog since we handle it ourselves.
          {
            provide: this.dialogConfigClass,
            useValue: config2
          },
          {
            provide: DialogConfig,
            useValue: config2
          }
        ]
      },
      templateContext: () => ({
        dialogRef
      }),
      providers: (ref, cdkConfig, dialogContainer) => {
        dialogRef = new this._dialogRefConstructor(ref, config2, dialogContainer);
        dialogRef.updatePosition(config2?.position);
        return [{
          provide: this._dialogContainerType,
          useValue: dialogContainer
        }, {
          provide: this._dialogDataToken,
          useValue: cdkConfig.data
        }, {
          provide: this._dialogRefConstructor,
          useValue: dialogRef
        }];
      }
    }));
    dialogRef.componentRef = cdkRef.componentRef;
    dialogRef.componentInstance = cdkRef.componentInstance;
    this.openDialogs.push(dialogRef);
    this.afterOpened.next(dialogRef);
    dialogRef.afterClosed().subscribe(() => {
      const index = this.openDialogs.indexOf(dialogRef);
      if (index > -1) {
        this.openDialogs.splice(index, 1);
        if (!this.openDialogs.length) {
          this._getAfterAllClosed().next();
        }
      }
    });
    return dialogRef;
  }
  /**
   * Closes all of the currently-open dialogs.
   */
  closeAll() {
    this._closeDialogs(this.openDialogs);
  }
  /**
   * Finds an open dialog by its id.
   * @param id ID to use when looking up the dialog.
   */
  getDialogById(id) {
    return this.openDialogs.find((dialog) => dialog.id === id);
  }
  ngOnDestroy() {
    this._closeDialogs(this._openDialogsAtThisLevel);
    this._afterAllClosedAtThisLevel.complete();
    this._afterOpenedAtThisLevel.complete();
  }
  _closeDialogs(dialogs) {
    let i = dialogs.length;
    while (i--) {
      dialogs[i].close();
    }
  }
};
_MatDialog.\u0275fac = function MatDialog_Factory(t) {
  return new (t || _MatDialog)(\u0275\u0275inject(Overlay), \u0275\u0275inject(Injector), \u0275\u0275inject(Location, 8), \u0275\u0275inject(MAT_DIALOG_DEFAULT_OPTIONS, 8), \u0275\u0275inject(MAT_DIALOG_SCROLL_STRATEGY), \u0275\u0275inject(_MatDialog, 12), \u0275\u0275inject(OverlayContainer), \u0275\u0275inject(ANIMATION_MODULE_TYPE, 8));
};
_MatDialog.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _MatDialog,
  factory: _MatDialog.\u0275fac,
  providedIn: "root"
});
var MatDialog = _MatDialog;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MatDialog, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: Overlay
  }, {
    type: Injector
  }, {
    type: Location,
    decorators: [{
      type: Optional
    }]
  }, {
    type: MatDialogConfig,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [MAT_DIALOG_DEFAULT_OPTIONS]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [MAT_DIALOG_SCROLL_STRATEGY]
    }]
  }, {
    type: MatDialog,
    decorators: [{
      type: Optional
    }, {
      type: SkipSelf
    }]
  }, {
    type: OverlayContainer
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [ANIMATION_MODULE_TYPE]
    }]
  }], null);
})();
var dialogElementUid = 0;
var _MatDialogClose = class _MatDialogClose {
  constructor(dialogRef, _elementRef, _dialog) {
    this.dialogRef = dialogRef;
    this._elementRef = _elementRef;
    this._dialog = _dialog;
    this.type = "button";
  }
  ngOnInit() {
    if (!this.dialogRef) {
      this.dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);
    }
  }
  ngOnChanges(changes) {
    const proxiedChange = changes["_matDialogClose"] || changes["_matDialogCloseResult"];
    if (proxiedChange) {
      this.dialogResult = proxiedChange.currentValue;
    }
  }
  _onButtonClick(event) {
    _closeDialogVia(this.dialogRef, event.screenX === 0 && event.screenY === 0 ? "keyboard" : "mouse", this.dialogResult);
  }
};
_MatDialogClose.\u0275fac = function MatDialogClose_Factory(t) {
  return new (t || _MatDialogClose)(\u0275\u0275directiveInject(MatDialogRef, 8), \u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(MatDialog));
};
_MatDialogClose.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _MatDialogClose,
  selectors: [["", "mat-dialog-close", ""], ["", "matDialogClose", ""]],
  hostVars: 2,
  hostBindings: function MatDialogClose_HostBindings(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275listener("click", function MatDialogClose_click_HostBindingHandler($event) {
        return ctx._onButtonClick($event);
      });
    }
    if (rf & 2) {
      \u0275\u0275attribute("aria-label", ctx.ariaLabel || null)("type", ctx.type);
    }
  },
  inputs: {
    ariaLabel: ["aria-label", "ariaLabel"],
    type: "type",
    dialogResult: ["mat-dialog-close", "dialogResult"],
    _matDialogClose: ["matDialogClose", "_matDialogClose"]
  },
  exportAs: ["matDialogClose"],
  standalone: true,
  features: [\u0275\u0275NgOnChangesFeature]
});
var MatDialogClose = _MatDialogClose;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MatDialogClose, [{
    type: Directive,
    args: [{
      selector: "[mat-dialog-close], [matDialogClose]",
      exportAs: "matDialogClose",
      standalone: true,
      host: {
        "(click)": "_onButtonClick($event)",
        "[attr.aria-label]": "ariaLabel || null",
        "[attr.type]": "type"
      }
    }]
  }], () => [{
    type: MatDialogRef,
    decorators: [{
      type: Optional
    }]
  }, {
    type: ElementRef
  }, {
    type: MatDialog
  }], {
    ariaLabel: [{
      type: Input,
      args: ["aria-label"]
    }],
    type: [{
      type: Input
    }],
    dialogResult: [{
      type: Input,
      args: ["mat-dialog-close"]
    }],
    _matDialogClose: [{
      type: Input,
      args: ["matDialogClose"]
    }]
  });
})();
var _MatDialogTitle = class _MatDialogTitle {
  constructor(_dialogRef, _elementRef, _dialog) {
    this._dialogRef = _dialogRef;
    this._elementRef = _elementRef;
    this._dialog = _dialog;
    this.id = `mat-mdc-dialog-title-${dialogElementUid++}`;
  }
  ngOnInit() {
    if (!this._dialogRef) {
      this._dialogRef = getClosestDialog(this._elementRef, this._dialog.openDialogs);
    }
    if (this._dialogRef) {
      Promise.resolve().then(() => {
        this._dialogRef._containerInstance?._ariaLabelledByQueue?.push(this.id);
      });
    }
  }
  ngOnDestroy() {
    const queue = this._dialogRef?._containerInstance?._ariaLabelledByQueue;
    if (queue) {
      Promise.resolve().then(() => {
        const index = queue.indexOf(this.id);
        if (index > -1) {
          queue.splice(index, 1);
        }
      });
    }
  }
};
_MatDialogTitle.\u0275fac = function MatDialogTitle_Factory(t) {
  return new (t || _MatDialogTitle)(\u0275\u0275directiveInject(MatDialogRef, 8), \u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(MatDialog));
};
_MatDialogTitle.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _MatDialogTitle,
  selectors: [["", "mat-dialog-title", ""], ["", "matDialogTitle", ""]],
  hostAttrs: [1, "mat-mdc-dialog-title", "mdc-dialog__title"],
  hostVars: 1,
  hostBindings: function MatDialogTitle_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275hostProperty("id", ctx.id);
    }
  },
  inputs: {
    id: "id"
  },
  exportAs: ["matDialogTitle"],
  standalone: true
});
var MatDialogTitle = _MatDialogTitle;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MatDialogTitle, [{
    type: Directive,
    args: [{
      selector: "[mat-dialog-title], [matDialogTitle]",
      exportAs: "matDialogTitle",
      standalone: true,
      host: {
        "class": "mat-mdc-dialog-title mdc-dialog__title",
        "[id]": "id"
      }
    }]
  }], () => [{
    type: MatDialogRef,
    decorators: [{
      type: Optional
    }]
  }, {
    type: ElementRef
  }, {
    type: MatDialog
  }], {
    id: [{
      type: Input
    }]
  });
})();
var _MatDialogContent = class _MatDialogContent {
};
_MatDialogContent.\u0275fac = function MatDialogContent_Factory(t) {
  return new (t || _MatDialogContent)();
};
_MatDialogContent.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _MatDialogContent,
  selectors: [["", "mat-dialog-content", ""], ["mat-dialog-content"], ["", "matDialogContent", ""]],
  hostAttrs: [1, "mat-mdc-dialog-content", "mdc-dialog__content"],
  standalone: true
});
var MatDialogContent = _MatDialogContent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MatDialogContent, [{
    type: Directive,
    args: [{
      selector: `[mat-dialog-content], mat-dialog-content, [matDialogContent]`,
      host: {
        "class": "mat-mdc-dialog-content mdc-dialog__content"
      },
      standalone: true
    }]
  }], null, null);
})();
var _MatDialogActions = class _MatDialogActions {
  constructor() {
    this.align = "start";
  }
};
_MatDialogActions.\u0275fac = function MatDialogActions_Factory(t) {
  return new (t || _MatDialogActions)();
};
_MatDialogActions.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _MatDialogActions,
  selectors: [["", "mat-dialog-actions", ""], ["mat-dialog-actions"], ["", "matDialogActions", ""]],
  hostAttrs: [1, "mat-mdc-dialog-actions", "mdc-dialog__actions"],
  hostVars: 4,
  hostBindings: function MatDialogActions_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275classProp("mat-mdc-dialog-actions-align-center", ctx.align === "center")("mat-mdc-dialog-actions-align-end", ctx.align === "end");
    }
  },
  inputs: {
    align: "align"
  },
  standalone: true
});
var MatDialogActions = _MatDialogActions;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MatDialogActions, [{
    type: Directive,
    args: [{
      selector: `[mat-dialog-actions], mat-dialog-actions, [matDialogActions]`,
      standalone: true,
      host: {
        "class": "mat-mdc-dialog-actions mdc-dialog__actions",
        "[class.mat-mdc-dialog-actions-align-center]": 'align === "center"',
        "[class.mat-mdc-dialog-actions-align-end]": 'align === "end"'
      }
    }]
  }], null, {
    align: [{
      type: Input
    }]
  });
})();
function getClosestDialog(element, openDialogs) {
  let parent = element.nativeElement.parentElement;
  while (parent && !parent.classList.contains("mat-mdc-dialog-container")) {
    parent = parent.parentElement;
  }
  return parent ? openDialogs.find((dialog) => dialog.id === parent.id) : null;
}
var DIRECTIVES = [MatDialogContainer, MatDialogClose, MatDialogTitle, MatDialogActions, MatDialogContent];
var _MatDialogModule = class _MatDialogModule {
};
_MatDialogModule.\u0275fac = function MatDialogModule_Factory(t) {
  return new (t || _MatDialogModule)();
};
_MatDialogModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _MatDialogModule
});
_MatDialogModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
  providers: [MatDialog],
  imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule, MatDialogContainer, MatCommonModule]
});
var MatDialogModule = _MatDialogModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MatDialogModule, [{
    type: NgModule,
    args: [{
      imports: [DialogModule, OverlayModule, PortalModule, MatCommonModule, ...DIRECTIVES],
      exports: [MatCommonModule, ...DIRECTIVES],
      providers: [MatDialog]
    }]
  }], null, null);
})();
var _defaultParams = {
  params: {
    enterAnimationDuration: "150ms",
    exitAnimationDuration: "75ms"
  }
};
var matDialogAnimations = {
  /** Animation that is applied on the dialog container by default. */
  dialogContainer: trigger("dialogContainer", [
    // Note: The `enter` animation transitions to `transform: none`, because for some reason
    // specifying the transform explicitly, causes IE both to blur the dialog content and
    // decimate the animation performance. Leaving it as `none` solves both issues.
    state("void, exit", style({
      opacity: 0,
      transform: "scale(0.7)"
    })),
    state("enter", style({
      transform: "none"
    })),
    transition("* => enter", group([animate("{{enterAnimationDuration}} cubic-bezier(0, 0, 0.2, 1)", style({
      transform: "none",
      opacity: 1
    })), query("@*", animateChild(), {
      optional: true
    })]), _defaultParams),
    transition("* => void, * => exit", group([animate("{{exitAnimationDuration}} cubic-bezier(0.4, 0.0, 0.2, 1)", style({
      opacity: 0
    })), query("@*", animateChild(), {
      optional: true
    })]), _defaultParams)
  ])
};

// node_modules/@angular/material/fesm2022/tooltip.mjs
var _c03 = ["tooltip"];
var SCROLL_THROTTLE_MS = 20;
function getMatTooltipInvalidPositionError(position) {
  return Error(`Tooltip position "${position}" is invalid.`);
}
var MAT_TOOLTIP_SCROLL_STRATEGY = new InjectionToken("mat-tooltip-scroll-strategy", {
  providedIn: "root",
  factory: () => {
    const overlay = inject(Overlay);
    return () => overlay.scrollStrategies.reposition({
      scrollThrottle: SCROLL_THROTTLE_MS
    });
  }
});
function MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY(overlay) {
  return () => overlay.scrollStrategies.reposition({
    scrollThrottle: SCROLL_THROTTLE_MS
  });
}
var MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER = {
  provide: MAT_TOOLTIP_SCROLL_STRATEGY,
  deps: [Overlay],
  useFactory: MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY
};
function MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY() {
  return {
    showDelay: 0,
    hideDelay: 0,
    touchendHideDelay: 1500
  };
}
var MAT_TOOLTIP_DEFAULT_OPTIONS = new InjectionToken("mat-tooltip-default-options", {
  providedIn: "root",
  factory: MAT_TOOLTIP_DEFAULT_OPTIONS_FACTORY
});
var PANEL_CLASS = "tooltip-panel";
var passiveListenerOptions = normalizePassiveListenerOptions({
  passive: true
});
var LONGPRESS_DELAY = 500;
var MIN_VIEWPORT_TOOLTIP_THRESHOLD = 8;
var UNBOUNDED_ANCHOR_GAP = 8;
var MIN_HEIGHT = 24;
var MAX_WIDTH = 200;
var _MatTooltip = class _MatTooltip {
  /** Allows the user to define the position of the tooltip relative to the parent element */
  get position() {
    return this._position;
  }
  set position(value) {
    if (value !== this._position) {
      this._position = value;
      if (this._overlayRef) {
        this._updatePosition(this._overlayRef);
        this._tooltipInstance?.show(0);
        this._overlayRef.updatePosition();
      }
    }
  }
  /**
   * Whether tooltip should be relative to the click or touch origin
   * instead of outside the element bounding box.
   */
  get positionAtOrigin() {
    return this._positionAtOrigin;
  }
  set positionAtOrigin(value) {
    this._positionAtOrigin = coerceBooleanProperty(value);
    this._detach();
    this._overlayRef = null;
  }
  /** Disables the display of the tooltip. */
  get disabled() {
    return this._disabled;
  }
  set disabled(value) {
    this._disabled = coerceBooleanProperty(value);
    if (this._disabled) {
      this.hide(0);
    } else {
      this._setupPointerEnterEventsIfNeeded();
    }
  }
  /** The default delay in ms before showing the tooltip after show is called */
  get showDelay() {
    return this._showDelay;
  }
  set showDelay(value) {
    this._showDelay = coerceNumberProperty(value);
  }
  /** The default delay in ms before hiding the tooltip after hide is called */
  get hideDelay() {
    return this._hideDelay;
  }
  set hideDelay(value) {
    this._hideDelay = coerceNumberProperty(value);
    if (this._tooltipInstance) {
      this._tooltipInstance._mouseLeaveHideDelay = this._hideDelay;
    }
  }
  /** The message to be displayed in the tooltip */
  get message() {
    return this._message;
  }
  set message(value) {
    this._ariaDescriber.removeDescription(this._elementRef.nativeElement, this._message, "tooltip");
    this._message = value != null ? String(value).trim() : "";
    if (!this._message && this._isTooltipVisible()) {
      this.hide(0);
    } else {
      this._setupPointerEnterEventsIfNeeded();
      this._updateTooltipMessage();
      this._ngZone.runOutsideAngular(() => {
        Promise.resolve().then(() => {
          this._ariaDescriber.describe(this._elementRef.nativeElement, this.message, "tooltip");
        });
      });
    }
  }
  /** Classes to be passed to the tooltip. Supports the same syntax as `ngClass`. */
  get tooltipClass() {
    return this._tooltipClass;
  }
  set tooltipClass(value) {
    this._tooltipClass = value;
    if (this._tooltipInstance) {
      this._setTooltipClass(this._tooltipClass);
    }
  }
  constructor(_overlay, _elementRef, _scrollDispatcher, _viewContainerRef, _ngZone, _platform, _ariaDescriber, _focusMonitor, scrollStrategy, _dir, _defaultOptions, _document2) {
    this._overlay = _overlay;
    this._elementRef = _elementRef;
    this._scrollDispatcher = _scrollDispatcher;
    this._viewContainerRef = _viewContainerRef;
    this._ngZone = _ngZone;
    this._platform = _platform;
    this._ariaDescriber = _ariaDescriber;
    this._focusMonitor = _focusMonitor;
    this._dir = _dir;
    this._defaultOptions = _defaultOptions;
    this._position = "below";
    this._positionAtOrigin = false;
    this._disabled = false;
    this._viewInitialized = false;
    this._pointerExitEventsInitialized = false;
    this._tooltipComponent = TooltipComponent;
    this._viewportMargin = 8;
    this._cssClassPrefix = "mat-mdc";
    this.touchGestures = "auto";
    this._message = "";
    this._passiveListeners = [];
    this._destroyed = new Subject();
    this._scrollStrategy = scrollStrategy;
    this._document = _document2;
    if (_defaultOptions) {
      this._showDelay = _defaultOptions.showDelay;
      this._hideDelay = _defaultOptions.hideDelay;
      if (_defaultOptions.position) {
        this.position = _defaultOptions.position;
      }
      if (_defaultOptions.positionAtOrigin) {
        this.positionAtOrigin = _defaultOptions.positionAtOrigin;
      }
      if (_defaultOptions.touchGestures) {
        this.touchGestures = _defaultOptions.touchGestures;
      }
    }
    _dir.change.pipe(takeUntil(this._destroyed)).subscribe(() => {
      if (this._overlayRef) {
        this._updatePosition(this._overlayRef);
      }
    });
    this._viewportMargin = MIN_VIEWPORT_TOOLTIP_THRESHOLD;
  }
  ngAfterViewInit() {
    this._viewInitialized = true;
    this._setupPointerEnterEventsIfNeeded();
    this._focusMonitor.monitor(this._elementRef).pipe(takeUntil(this._destroyed)).subscribe((origin) => {
      if (!origin) {
        this._ngZone.run(() => this.hide(0));
      } else if (origin === "keyboard") {
        this._ngZone.run(() => this.show());
      }
    });
  }
  /**
   * Dispose the tooltip when destroyed.
   */
  ngOnDestroy() {
    const nativeElement = this._elementRef.nativeElement;
    clearTimeout(this._touchstartTimeout);
    if (this._overlayRef) {
      this._overlayRef.dispose();
      this._tooltipInstance = null;
    }
    this._passiveListeners.forEach(([event, listener]) => {
      nativeElement.removeEventListener(event, listener, passiveListenerOptions);
    });
    this._passiveListeners.length = 0;
    this._destroyed.next();
    this._destroyed.complete();
    this._ariaDescriber.removeDescription(nativeElement, this.message, "tooltip");
    this._focusMonitor.stopMonitoring(nativeElement);
  }
  /** Shows the tooltip after the delay in ms, defaults to tooltip-delay-show or 0ms if no input */
  show(delay = this.showDelay, origin) {
    if (this.disabled || !this.message || this._isTooltipVisible()) {
      this._tooltipInstance?._cancelPendingAnimations();
      return;
    }
    const overlayRef = this._createOverlay(origin);
    this._detach();
    this._portal = this._portal || new ComponentPortal(this._tooltipComponent, this._viewContainerRef);
    const instance = this._tooltipInstance = overlayRef.attach(this._portal).instance;
    instance._triggerElement = this._elementRef.nativeElement;
    instance._mouseLeaveHideDelay = this._hideDelay;
    instance.afterHidden().pipe(takeUntil(this._destroyed)).subscribe(() => this._detach());
    this._setTooltipClass(this._tooltipClass);
    this._updateTooltipMessage();
    instance.show(delay);
  }
  /** Hides the tooltip after the delay in ms, defaults to tooltip-delay-hide or 0ms if no input */
  hide(delay = this.hideDelay) {
    const instance = this._tooltipInstance;
    if (instance) {
      if (instance.isVisible()) {
        instance.hide(delay);
      } else {
        instance._cancelPendingAnimations();
        this._detach();
      }
    }
  }
  /** Shows/hides the tooltip */
  toggle(origin) {
    this._isTooltipVisible() ? this.hide() : this.show(void 0, origin);
  }
  /** Returns true if the tooltip is currently visible to the user */
  _isTooltipVisible() {
    return !!this._tooltipInstance && this._tooltipInstance.isVisible();
  }
  /** Create the overlay config and position strategy */
  _createOverlay(origin) {
    if (this._overlayRef) {
      const existingStrategy = this._overlayRef.getConfig().positionStrategy;
      if ((!this.positionAtOrigin || !origin) && existingStrategy._origin instanceof ElementRef) {
        return this._overlayRef;
      }
      this._detach();
    }
    const scrollableAncestors = this._scrollDispatcher.getAncestorScrollContainers(this._elementRef);
    const strategy = this._overlay.position().flexibleConnectedTo(this.positionAtOrigin ? origin || this._elementRef : this._elementRef).withTransformOriginOn(`.${this._cssClassPrefix}-tooltip`).withFlexibleDimensions(false).withViewportMargin(this._viewportMargin).withScrollableContainers(scrollableAncestors);
    strategy.positionChanges.pipe(takeUntil(this._destroyed)).subscribe((change) => {
      this._updateCurrentPositionClass(change.connectionPair);
      if (this._tooltipInstance) {
        if (change.scrollableViewProperties.isOverlayClipped && this._tooltipInstance.isVisible()) {
          this._ngZone.run(() => this.hide(0));
        }
      }
    });
    this._overlayRef = this._overlay.create({
      direction: this._dir,
      positionStrategy: strategy,
      panelClass: `${this._cssClassPrefix}-${PANEL_CLASS}`,
      scrollStrategy: this._scrollStrategy()
    });
    this._updatePosition(this._overlayRef);
    this._overlayRef.detachments().pipe(takeUntil(this._destroyed)).subscribe(() => this._detach());
    this._overlayRef.outsidePointerEvents().pipe(takeUntil(this._destroyed)).subscribe(() => this._tooltipInstance?._handleBodyInteraction());
    this._overlayRef.keydownEvents().pipe(takeUntil(this._destroyed)).subscribe((event) => {
      if (this._isTooltipVisible() && event.keyCode === ESCAPE && !hasModifierKey(event)) {
        event.preventDefault();
        event.stopPropagation();
        this._ngZone.run(() => this.hide(0));
      }
    });
    if (this._defaultOptions?.disableTooltipInteractivity) {
      this._overlayRef.addPanelClass(`${this._cssClassPrefix}-tooltip-panel-non-interactive`);
    }
    return this._overlayRef;
  }
  /** Detaches the currently-attached tooltip. */
  _detach() {
    if (this._overlayRef && this._overlayRef.hasAttached()) {
      this._overlayRef.detach();
    }
    this._tooltipInstance = null;
  }
  /** Updates the position of the current tooltip. */
  _updatePosition(overlayRef) {
    const position = overlayRef.getConfig().positionStrategy;
    const origin = this._getOrigin();
    const overlay = this._getOverlayPosition();
    position.withPositions([this._addOffset(__spreadValues(__spreadValues({}, origin.main), overlay.main)), this._addOffset(__spreadValues(__spreadValues({}, origin.fallback), overlay.fallback))]);
  }
  /** Adds the configured offset to a position. Used as a hook for child classes. */
  _addOffset(position) {
    const offset = UNBOUNDED_ANCHOR_GAP;
    const isLtr = !this._dir || this._dir.value == "ltr";
    if (position.originY === "top") {
      position.offsetY = -offset;
    } else if (position.originY === "bottom") {
      position.offsetY = offset;
    } else if (position.originX === "start") {
      position.offsetX = isLtr ? -offset : offset;
    } else if (position.originX === "end") {
      position.offsetX = isLtr ? offset : -offset;
    }
    return position;
  }
  /**
   * Returns the origin position and a fallback position based on the user's position preference.
   * The fallback position is the inverse of the origin (e.g. `'below' -> 'above'`).
   */
  _getOrigin() {
    const isLtr = !this._dir || this._dir.value == "ltr";
    const position = this.position;
    let originPosition;
    if (position == "above" || position == "below") {
      originPosition = {
        originX: "center",
        originY: position == "above" ? "top" : "bottom"
      };
    } else if (position == "before" || position == "left" && isLtr || position == "right" && !isLtr) {
      originPosition = {
        originX: "start",
        originY: "center"
      };
    } else if (position == "after" || position == "right" && isLtr || position == "left" && !isLtr) {
      originPosition = {
        originX: "end",
        originY: "center"
      };
    } else if (typeof ngDevMode === "undefined" || ngDevMode) {
      throw getMatTooltipInvalidPositionError(position);
    }
    const {
      x,
      y
    } = this._invertPosition(originPosition.originX, originPosition.originY);
    return {
      main: originPosition,
      fallback: {
        originX: x,
        originY: y
      }
    };
  }
  /** Returns the overlay position and a fallback position based on the user's preference */
  _getOverlayPosition() {
    const isLtr = !this._dir || this._dir.value == "ltr";
    const position = this.position;
    let overlayPosition;
    if (position == "above") {
      overlayPosition = {
        overlayX: "center",
        overlayY: "bottom"
      };
    } else if (position == "below") {
      overlayPosition = {
        overlayX: "center",
        overlayY: "top"
      };
    } else if (position == "before" || position == "left" && isLtr || position == "right" && !isLtr) {
      overlayPosition = {
        overlayX: "end",
        overlayY: "center"
      };
    } else if (position == "after" || position == "right" && isLtr || position == "left" && !isLtr) {
      overlayPosition = {
        overlayX: "start",
        overlayY: "center"
      };
    } else if (typeof ngDevMode === "undefined" || ngDevMode) {
      throw getMatTooltipInvalidPositionError(position);
    }
    const {
      x,
      y
    } = this._invertPosition(overlayPosition.overlayX, overlayPosition.overlayY);
    return {
      main: overlayPosition,
      fallback: {
        overlayX: x,
        overlayY: y
      }
    };
  }
  /** Updates the tooltip message and repositions the overlay according to the new message length */
  _updateTooltipMessage() {
    if (this._tooltipInstance) {
      this._tooltipInstance.message = this.message;
      this._tooltipInstance._markForCheck();
      this._ngZone.onMicrotaskEmpty.pipe(take(1), takeUntil(this._destroyed)).subscribe(() => {
        if (this._tooltipInstance) {
          this._overlayRef.updatePosition();
        }
      });
    }
  }
  /** Updates the tooltip class */
  _setTooltipClass(tooltipClass) {
    if (this._tooltipInstance) {
      this._tooltipInstance.tooltipClass = tooltipClass;
      this._tooltipInstance._markForCheck();
    }
  }
  /** Inverts an overlay position. */
  _invertPosition(x, y) {
    if (this.position === "above" || this.position === "below") {
      if (y === "top") {
        y = "bottom";
      } else if (y === "bottom") {
        y = "top";
      }
    } else {
      if (x === "end") {
        x = "start";
      } else if (x === "start") {
        x = "end";
      }
    }
    return {
      x,
      y
    };
  }
  /** Updates the class on the overlay panel based on the current position of the tooltip. */
  _updateCurrentPositionClass(connectionPair) {
    const {
      overlayY,
      originX,
      originY
    } = connectionPair;
    let newPosition;
    if (overlayY === "center") {
      if (this._dir && this._dir.value === "rtl") {
        newPosition = originX === "end" ? "left" : "right";
      } else {
        newPosition = originX === "start" ? "left" : "right";
      }
    } else {
      newPosition = overlayY === "bottom" && originY === "top" ? "above" : "below";
    }
    if (newPosition !== this._currentPosition) {
      const overlayRef = this._overlayRef;
      if (overlayRef) {
        const classPrefix = `${this._cssClassPrefix}-${PANEL_CLASS}-`;
        overlayRef.removePanelClass(classPrefix + this._currentPosition);
        overlayRef.addPanelClass(classPrefix + newPosition);
      }
      this._currentPosition = newPosition;
    }
  }
  /** Binds the pointer events to the tooltip trigger. */
  _setupPointerEnterEventsIfNeeded() {
    if (this._disabled || !this.message || !this._viewInitialized || this._passiveListeners.length) {
      return;
    }
    if (this._platformSupportsMouseEvents()) {
      this._passiveListeners.push(["mouseenter", (event) => {
        this._setupPointerExitEventsIfNeeded();
        let point = void 0;
        if (event.x !== void 0 && event.y !== void 0) {
          point = event;
        }
        this.show(void 0, point);
      }]);
    } else if (this.touchGestures !== "off") {
      this._disableNativeGesturesIfNecessary();
      this._passiveListeners.push(["touchstart", (event) => {
        const touch = event.targetTouches?.[0];
        const origin = touch ? {
          x: touch.clientX,
          y: touch.clientY
        } : void 0;
        this._setupPointerExitEventsIfNeeded();
        clearTimeout(this._touchstartTimeout);
        this._touchstartTimeout = setTimeout(() => this.show(void 0, origin), LONGPRESS_DELAY);
      }]);
    }
    this._addListeners(this._passiveListeners);
  }
  _setupPointerExitEventsIfNeeded() {
    if (this._pointerExitEventsInitialized) {
      return;
    }
    this._pointerExitEventsInitialized = true;
    const exitListeners = [];
    if (this._platformSupportsMouseEvents()) {
      exitListeners.push(["mouseleave", (event) => {
        const newTarget = event.relatedTarget;
        if (!newTarget || !this._overlayRef?.overlayElement.contains(newTarget)) {
          this.hide();
        }
      }], ["wheel", (event) => this._wheelListener(event)]);
    } else if (this.touchGestures !== "off") {
      this._disableNativeGesturesIfNecessary();
      const touchendListener = () => {
        clearTimeout(this._touchstartTimeout);
        this.hide(this._defaultOptions.touchendHideDelay);
      };
      exitListeners.push(["touchend", touchendListener], ["touchcancel", touchendListener]);
    }
    this._addListeners(exitListeners);
    this._passiveListeners.push(...exitListeners);
  }
  _addListeners(listeners) {
    listeners.forEach(([event, listener]) => {
      this._elementRef.nativeElement.addEventListener(event, listener, passiveListenerOptions);
    });
  }
  _platformSupportsMouseEvents() {
    return !this._platform.IOS && !this._platform.ANDROID;
  }
  /** Listener for the `wheel` event on the element. */
  _wheelListener(event) {
    if (this._isTooltipVisible()) {
      const elementUnderPointer = this._document.elementFromPoint(event.clientX, event.clientY);
      const element = this._elementRef.nativeElement;
      if (elementUnderPointer !== element && !element.contains(elementUnderPointer)) {
        this.hide();
      }
    }
  }
  /** Disables the native browser gestures, based on how the tooltip has been configured. */
  _disableNativeGesturesIfNecessary() {
    const gestures = this.touchGestures;
    if (gestures !== "off") {
      const element = this._elementRef.nativeElement;
      const style2 = element.style;
      if (gestures === "on" || element.nodeName !== "INPUT" && element.nodeName !== "TEXTAREA") {
        style2.userSelect = style2.msUserSelect = style2.webkitUserSelect = style2.MozUserSelect = "none";
      }
      if (gestures === "on" || !element.draggable) {
        style2.webkitUserDrag = "none";
      }
      style2.touchAction = "none";
      style2.webkitTapHighlightColor = "transparent";
    }
  }
};
_MatTooltip.\u0275fac = function MatTooltip_Factory(t) {
  return new (t || _MatTooltip)(\u0275\u0275directiveInject(Overlay), \u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(ScrollDispatcher), \u0275\u0275directiveInject(ViewContainerRef), \u0275\u0275directiveInject(NgZone), \u0275\u0275directiveInject(Platform), \u0275\u0275directiveInject(AriaDescriber), \u0275\u0275directiveInject(FocusMonitor), \u0275\u0275directiveInject(MAT_TOOLTIP_SCROLL_STRATEGY), \u0275\u0275directiveInject(Directionality), \u0275\u0275directiveInject(MAT_TOOLTIP_DEFAULT_OPTIONS, 8), \u0275\u0275directiveInject(DOCUMENT2));
};
_MatTooltip.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _MatTooltip,
  selectors: [["", "matTooltip", ""]],
  hostAttrs: [1, "mat-mdc-tooltip-trigger"],
  hostVars: 2,
  hostBindings: function MatTooltip_HostBindings(rf, ctx) {
    if (rf & 2) {
      \u0275\u0275classProp("mat-mdc-tooltip-disabled", ctx.disabled);
    }
  },
  inputs: {
    position: ["matTooltipPosition", "position"],
    positionAtOrigin: ["matTooltipPositionAtOrigin", "positionAtOrigin"],
    disabled: ["matTooltipDisabled", "disabled"],
    showDelay: ["matTooltipShowDelay", "showDelay"],
    hideDelay: ["matTooltipHideDelay", "hideDelay"],
    touchGestures: ["matTooltipTouchGestures", "touchGestures"],
    message: ["matTooltip", "message"],
    tooltipClass: ["matTooltipClass", "tooltipClass"]
  },
  exportAs: ["matTooltip"]
});
var MatTooltip = _MatTooltip;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MatTooltip, [{
    type: Directive,
    args: [{
      selector: "[matTooltip]",
      exportAs: "matTooltip",
      host: {
        "class": "mat-mdc-tooltip-trigger",
        "[class.mat-mdc-tooltip-disabled]": "disabled"
      }
    }]
  }], () => [{
    type: Overlay
  }, {
    type: ElementRef
  }, {
    type: ScrollDispatcher
  }, {
    type: ViewContainerRef
  }, {
    type: NgZone
  }, {
    type: Platform
  }, {
    type: AriaDescriber
  }, {
    type: FocusMonitor
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [MAT_TOOLTIP_SCROLL_STRATEGY]
    }]
  }, {
    type: Directionality
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [MAT_TOOLTIP_DEFAULT_OPTIONS]
    }]
  }, {
    type: void 0,
    decorators: [{
      type: Inject,
      args: [DOCUMENT2]
    }]
  }], {
    position: [{
      type: Input,
      args: ["matTooltipPosition"]
    }],
    positionAtOrigin: [{
      type: Input,
      args: ["matTooltipPositionAtOrigin"]
    }],
    disabled: [{
      type: Input,
      args: ["matTooltipDisabled"]
    }],
    showDelay: [{
      type: Input,
      args: ["matTooltipShowDelay"]
    }],
    hideDelay: [{
      type: Input,
      args: ["matTooltipHideDelay"]
    }],
    touchGestures: [{
      type: Input,
      args: ["matTooltipTouchGestures"]
    }],
    message: [{
      type: Input,
      args: ["matTooltip"]
    }],
    tooltipClass: [{
      type: Input,
      args: ["matTooltipClass"]
    }]
  });
})();
var _TooltipComponent = class _TooltipComponent {
  constructor(_changeDetectorRef, _elementRef, animationMode) {
    this._changeDetectorRef = _changeDetectorRef;
    this._elementRef = _elementRef;
    this._isMultiline = false;
    this._closeOnInteraction = false;
    this._isVisible = false;
    this._onHide = new Subject();
    this._showAnimation = "mat-mdc-tooltip-show";
    this._hideAnimation = "mat-mdc-tooltip-hide";
    this._animationsDisabled = animationMode === "NoopAnimations";
  }
  /**
   * Shows the tooltip with an animation originating from the provided origin
   * @param delay Amount of milliseconds to the delay showing the tooltip.
   */
  show(delay) {
    if (this._hideTimeoutId != null) {
      clearTimeout(this._hideTimeoutId);
    }
    this._showTimeoutId = setTimeout(() => {
      this._toggleVisibility(true);
      this._showTimeoutId = void 0;
    }, delay);
  }
  /**
   * Begins the animation to hide the tooltip after the provided delay in ms.
   * @param delay Amount of milliseconds to delay showing the tooltip.
   */
  hide(delay) {
    if (this._showTimeoutId != null) {
      clearTimeout(this._showTimeoutId);
    }
    this._hideTimeoutId = setTimeout(() => {
      this._toggleVisibility(false);
      this._hideTimeoutId = void 0;
    }, delay);
  }
  /** Returns an observable that notifies when the tooltip has been hidden from view. */
  afterHidden() {
    return this._onHide;
  }
  /** Whether the tooltip is being displayed. */
  isVisible() {
    return this._isVisible;
  }
  ngOnDestroy() {
    this._cancelPendingAnimations();
    this._onHide.complete();
    this._triggerElement = null;
  }
  /**
   * Interactions on the HTML body should close the tooltip immediately as defined in the
   * material design spec.
   * https://material.io/design/components/tooltips.html#behavior
   */
  _handleBodyInteraction() {
    if (this._closeOnInteraction) {
      this.hide(0);
    }
  }
  /**
   * Marks that the tooltip needs to be checked in the next change detection run.
   * Mainly used for rendering the initial text before positioning a tooltip, which
   * can be problematic in components with OnPush change detection.
   */
  _markForCheck() {
    this._changeDetectorRef.markForCheck();
  }
  _handleMouseLeave({
    relatedTarget
  }) {
    if (!relatedTarget || !this._triggerElement.contains(relatedTarget)) {
      if (this.isVisible()) {
        this.hide(this._mouseLeaveHideDelay);
      } else {
        this._finalizeAnimation(false);
      }
    }
  }
  /**
   * Callback for when the timeout in this.show() gets completed.
   * This method is only needed by the mdc-tooltip, and so it is only implemented
   * in the mdc-tooltip, not here.
   */
  _onShow() {
    this._isMultiline = this._isTooltipMultiline();
    this._markForCheck();
  }
  /** Whether the tooltip text has overflown to the next line */
  _isTooltipMultiline() {
    const rect = this._elementRef.nativeElement.getBoundingClientRect();
    return rect.height > MIN_HEIGHT && rect.width >= MAX_WIDTH;
  }
  /** Event listener dispatched when an animation on the tooltip finishes. */
  _handleAnimationEnd({
    animationName
  }) {
    if (animationName === this._showAnimation || animationName === this._hideAnimation) {
      this._finalizeAnimation(animationName === this._showAnimation);
    }
  }
  /** Cancels any pending animation sequences. */
  _cancelPendingAnimations() {
    if (this._showTimeoutId != null) {
      clearTimeout(this._showTimeoutId);
    }
    if (this._hideTimeoutId != null) {
      clearTimeout(this._hideTimeoutId);
    }
    this._showTimeoutId = this._hideTimeoutId = void 0;
  }
  /** Handles the cleanup after an animation has finished. */
  _finalizeAnimation(toVisible) {
    if (toVisible) {
      this._closeOnInteraction = true;
    } else if (!this.isVisible()) {
      this._onHide.next();
    }
  }
  /** Toggles the visibility of the tooltip element. */
  _toggleVisibility(isVisible) {
    const tooltip = this._tooltip.nativeElement;
    const showClass = this._showAnimation;
    const hideClass = this._hideAnimation;
    tooltip.classList.remove(isVisible ? hideClass : showClass);
    tooltip.classList.add(isVisible ? showClass : hideClass);
    this._isVisible = isVisible;
    if (isVisible && !this._animationsDisabled && typeof getComputedStyle === "function") {
      const styles = getComputedStyle(tooltip);
      if (styles.getPropertyValue("animation-duration") === "0s" || styles.getPropertyValue("animation-name") === "none") {
        this._animationsDisabled = true;
      }
    }
    if (isVisible) {
      this._onShow();
    }
    if (this._animationsDisabled) {
      tooltip.classList.add("_mat-animation-noopable");
      this._finalizeAnimation(isVisible);
    }
  }
};
_TooltipComponent.\u0275fac = function TooltipComponent_Factory(t) {
  return new (t || _TooltipComponent)(\u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(ANIMATION_MODULE_TYPE, 8));
};
_TooltipComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _TooltipComponent,
  selectors: [["mat-tooltip-component"]],
  viewQuery: function TooltipComponent_Query(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275viewQuery(_c03, 7);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx._tooltip = _t.first);
    }
  },
  hostAttrs: ["aria-hidden", "true"],
  hostVars: 2,
  hostBindings: function TooltipComponent_HostBindings(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275listener("mouseleave", function TooltipComponent_mouseleave_HostBindingHandler($event) {
        return ctx._handleMouseLeave($event);
      });
    }
    if (rf & 2) {
      \u0275\u0275styleProp("zoom", ctx.isVisible() ? 1 : null);
    }
  },
  decls: 4,
  vars: 4,
  consts: [[1, "mdc-tooltip", "mdc-tooltip--shown", "mat-mdc-tooltip", 3, "ngClass", "animationend"], ["tooltip", ""], [1, "mdc-tooltip__surface", "mdc-tooltip__surface-animation"]],
  template: function TooltipComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275elementStart(0, "div", 0, 1);
      \u0275\u0275listener("animationend", function TooltipComponent_Template_div_animationend_0_listener($event) {
        return ctx._handleAnimationEnd($event);
      });
      \u0275\u0275elementStart(2, "div", 2);
      \u0275\u0275text(3);
      \u0275\u0275elementEnd()();
    }
    if (rf & 2) {
      \u0275\u0275classProp("mdc-tooltip--multiline", ctx._isMultiline);
      \u0275\u0275property("ngClass", ctx.tooltipClass);
      \u0275\u0275advance(3);
      \u0275\u0275textInterpolate(ctx.message);
    }
  },
  dependencies: [NgClass],
  styles: ['.mdc-tooltip__surface{word-break:break-all;word-break:var(--mdc-tooltip-word-break, normal);overflow-wrap:anywhere}.mdc-tooltip--showing-transition .mdc-tooltip__surface-animation{transition:opacity 150ms 0ms cubic-bezier(0, 0, 0.2, 1),transform 150ms 0ms cubic-bezier(0, 0, 0.2, 1)}.mdc-tooltip--hide-transition .mdc-tooltip__surface-animation{transition:opacity 75ms 0ms cubic-bezier(0.4, 0, 1, 1)}.mdc-tooltip{position:fixed;display:none;z-index:9}.mdc-tooltip-wrapper--rich{position:relative}.mdc-tooltip--shown,.mdc-tooltip--showing,.mdc-tooltip--hide{display:inline-flex}.mdc-tooltip--shown.mdc-tooltip--rich,.mdc-tooltip--showing.mdc-tooltip--rich,.mdc-tooltip--hide.mdc-tooltip--rich{display:inline-block;left:-320px;position:absolute}.mdc-tooltip__surface{line-height:16px;padding:4px 8px;min-width:40px;max-width:200px;min-height:24px;max-height:40vh;box-sizing:border-box;overflow:hidden;text-align:center}.mdc-tooltip__surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:"";pointer-events:none}@media screen and (forced-colors: active){.mdc-tooltip__surface::before{border-color:CanvasText}}.mdc-tooltip--rich .mdc-tooltip__surface{align-items:flex-start;display:flex;flex-direction:column;min-height:24px;min-width:40px;max-width:320px;position:relative}.mdc-tooltip--multiline .mdc-tooltip__surface{text-align:left}[dir=rtl] .mdc-tooltip--multiline .mdc-tooltip__surface,.mdc-tooltip--multiline .mdc-tooltip__surface[dir=rtl]{text-align:right}.mdc-tooltip__surface .mdc-tooltip__title{margin:0 8px}.mdc-tooltip__surface .mdc-tooltip__content{max-width:calc(200px - 2*8px);margin:8px;text-align:left}[dir=rtl] .mdc-tooltip__surface .mdc-tooltip__content,.mdc-tooltip__surface .mdc-tooltip__content[dir=rtl]{text-align:right}.mdc-tooltip--rich .mdc-tooltip__surface .mdc-tooltip__content{max-width:calc(320px - 2*8px);align-self:stretch}.mdc-tooltip__surface .mdc-tooltip__content-link{text-decoration:none}.mdc-tooltip--rich-actions,.mdc-tooltip__content,.mdc-tooltip__title{z-index:1}.mdc-tooltip__surface-animation{opacity:0;transform:scale(0.8);will-change:transform,opacity}.mdc-tooltip--shown .mdc-tooltip__surface-animation{transform:scale(1);opacity:1}.mdc-tooltip--hide .mdc-tooltip__surface-animation{transform:scale(1)}.mdc-tooltip__caret-surface-top,.mdc-tooltip__caret-surface-bottom{position:absolute;height:24px;width:24px;transform:rotate(35deg) skewY(20deg) scaleX(0.9396926208)}.mdc-tooltip__caret-surface-top .mdc-elevation-overlay,.mdc-tooltip__caret-surface-bottom .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}.mdc-tooltip__caret-surface-bottom{box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);outline:1px solid rgba(0,0,0,0);z-index:-1}@media screen and (forced-colors: active){.mdc-tooltip__caret-surface-bottom{outline-color:CanvasText}}.mat-mdc-tooltip .mdc-tooltip__surface{background-color:var(--mdc-plain-tooltip-container-color)}.mat-mdc-tooltip .mdc-tooltip__surface{border-radius:var(--mdc-plain-tooltip-container-shape)}.mat-mdc-tooltip .mdc-tooltip__caret-surface-top,.mat-mdc-tooltip .mdc-tooltip__caret-surface-bottom{border-radius:var(--mdc-plain-tooltip-container-shape)}.mat-mdc-tooltip .mdc-tooltip__surface{color:var(--mdc-plain-tooltip-supporting-text-color)}.mat-mdc-tooltip .mdc-tooltip__surface{font-family:var(--mdc-plain-tooltip-supporting-text-font);line-height:var(--mdc-plain-tooltip-supporting-text-line-height);font-size:var(--mdc-plain-tooltip-supporting-text-size);font-weight:var(--mdc-plain-tooltip-supporting-text-weight);letter-spacing:var(--mdc-plain-tooltip-supporting-text-tracking)}.mat-mdc-tooltip{position:relative;transform:scale(0)}.mat-mdc-tooltip::before{content:"";top:0;right:0;bottom:0;left:0;z-index:-1;position:absolute}.mat-mdc-tooltip-panel-below .mat-mdc-tooltip::before{top:-8px}.mat-mdc-tooltip-panel-above .mat-mdc-tooltip::before{bottom:-8px}.mat-mdc-tooltip-panel-right .mat-mdc-tooltip::before{left:-8px}.mat-mdc-tooltip-panel-left .mat-mdc-tooltip::before{right:-8px}.mat-mdc-tooltip._mat-animation-noopable{animation:none;transform:scale(1)}.mat-mdc-tooltip-panel.mat-mdc-tooltip-panel-non-interactive{pointer-events:none}@keyframes mat-mdc-tooltip-show{0%{opacity:0;transform:scale(0.8)}100%{opacity:1;transform:scale(1)}}@keyframes mat-mdc-tooltip-hide{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(0.8)}}.mat-mdc-tooltip-show{animation:mat-mdc-tooltip-show 150ms cubic-bezier(0, 0, 0.2, 1) forwards}.mat-mdc-tooltip-hide{animation:mat-mdc-tooltip-hide 75ms cubic-bezier(0.4, 0, 1, 1) forwards}'],
  encapsulation: 2,
  changeDetection: 0
});
var TooltipComponent = _TooltipComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TooltipComponent, [{
    type: Component,
    args: [{
      selector: "mat-tooltip-component",
      encapsulation: ViewEncapsulation$1.None,
      changeDetection: ChangeDetectionStrategy.OnPush,
      host: {
        // Forces the element to have a layout in IE and Edge. This fixes issues where the element
        // won't be rendered if the animations are disabled or there is no web animations polyfill.
        "[style.zoom]": "isVisible() ? 1 : null",
        "(mouseleave)": "_handleMouseLeave($event)",
        "aria-hidden": "true"
      },
      template: '<div\n  #tooltip\n  class="mdc-tooltip mdc-tooltip--shown mat-mdc-tooltip"\n  [ngClass]="tooltipClass"\n  (animationend)="_handleAnimationEnd($event)"\n  [class.mdc-tooltip--multiline]="_isMultiline">\n  <div class="mdc-tooltip__surface mdc-tooltip__surface-animation">{{message}}</div>\n</div>\n',
      styles: ['.mdc-tooltip__surface{word-break:break-all;word-break:var(--mdc-tooltip-word-break, normal);overflow-wrap:anywhere}.mdc-tooltip--showing-transition .mdc-tooltip__surface-animation{transition:opacity 150ms 0ms cubic-bezier(0, 0, 0.2, 1),transform 150ms 0ms cubic-bezier(0, 0, 0.2, 1)}.mdc-tooltip--hide-transition .mdc-tooltip__surface-animation{transition:opacity 75ms 0ms cubic-bezier(0.4, 0, 1, 1)}.mdc-tooltip{position:fixed;display:none;z-index:9}.mdc-tooltip-wrapper--rich{position:relative}.mdc-tooltip--shown,.mdc-tooltip--showing,.mdc-tooltip--hide{display:inline-flex}.mdc-tooltip--shown.mdc-tooltip--rich,.mdc-tooltip--showing.mdc-tooltip--rich,.mdc-tooltip--hide.mdc-tooltip--rich{display:inline-block;left:-320px;position:absolute}.mdc-tooltip__surface{line-height:16px;padding:4px 8px;min-width:40px;max-width:200px;min-height:24px;max-height:40vh;box-sizing:border-box;overflow:hidden;text-align:center}.mdc-tooltip__surface::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid rgba(0,0,0,0);border-radius:inherit;content:"";pointer-events:none}@media screen and (forced-colors: active){.mdc-tooltip__surface::before{border-color:CanvasText}}.mdc-tooltip--rich .mdc-tooltip__surface{align-items:flex-start;display:flex;flex-direction:column;min-height:24px;min-width:40px;max-width:320px;position:relative}.mdc-tooltip--multiline .mdc-tooltip__surface{text-align:left}[dir=rtl] .mdc-tooltip--multiline .mdc-tooltip__surface,.mdc-tooltip--multiline .mdc-tooltip__surface[dir=rtl]{text-align:right}.mdc-tooltip__surface .mdc-tooltip__title{margin:0 8px}.mdc-tooltip__surface .mdc-tooltip__content{max-width:calc(200px - 2*8px);margin:8px;text-align:left}[dir=rtl] .mdc-tooltip__surface .mdc-tooltip__content,.mdc-tooltip__surface .mdc-tooltip__content[dir=rtl]{text-align:right}.mdc-tooltip--rich .mdc-tooltip__surface .mdc-tooltip__content{max-width:calc(320px - 2*8px);align-self:stretch}.mdc-tooltip__surface .mdc-tooltip__content-link{text-decoration:none}.mdc-tooltip--rich-actions,.mdc-tooltip__content,.mdc-tooltip__title{z-index:1}.mdc-tooltip__surface-animation{opacity:0;transform:scale(0.8);will-change:transform,opacity}.mdc-tooltip--shown .mdc-tooltip__surface-animation{transform:scale(1);opacity:1}.mdc-tooltip--hide .mdc-tooltip__surface-animation{transform:scale(1)}.mdc-tooltip__caret-surface-top,.mdc-tooltip__caret-surface-bottom{position:absolute;height:24px;width:24px;transform:rotate(35deg) skewY(20deg) scaleX(0.9396926208)}.mdc-tooltip__caret-surface-top .mdc-elevation-overlay,.mdc-tooltip__caret-surface-bottom .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}.mdc-tooltip__caret-surface-bottom{box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);outline:1px solid rgba(0,0,0,0);z-index:-1}@media screen and (forced-colors: active){.mdc-tooltip__caret-surface-bottom{outline-color:CanvasText}}.mat-mdc-tooltip .mdc-tooltip__surface{background-color:var(--mdc-plain-tooltip-container-color)}.mat-mdc-tooltip .mdc-tooltip__surface{border-radius:var(--mdc-plain-tooltip-container-shape)}.mat-mdc-tooltip .mdc-tooltip__caret-surface-top,.mat-mdc-tooltip .mdc-tooltip__caret-surface-bottom{border-radius:var(--mdc-plain-tooltip-container-shape)}.mat-mdc-tooltip .mdc-tooltip__surface{color:var(--mdc-plain-tooltip-supporting-text-color)}.mat-mdc-tooltip .mdc-tooltip__surface{font-family:var(--mdc-plain-tooltip-supporting-text-font);line-height:var(--mdc-plain-tooltip-supporting-text-line-height);font-size:var(--mdc-plain-tooltip-supporting-text-size);font-weight:var(--mdc-plain-tooltip-supporting-text-weight);letter-spacing:var(--mdc-plain-tooltip-supporting-text-tracking)}.mat-mdc-tooltip{position:relative;transform:scale(0)}.mat-mdc-tooltip::before{content:"";top:0;right:0;bottom:0;left:0;z-index:-1;position:absolute}.mat-mdc-tooltip-panel-below .mat-mdc-tooltip::before{top:-8px}.mat-mdc-tooltip-panel-above .mat-mdc-tooltip::before{bottom:-8px}.mat-mdc-tooltip-panel-right .mat-mdc-tooltip::before{left:-8px}.mat-mdc-tooltip-panel-left .mat-mdc-tooltip::before{right:-8px}.mat-mdc-tooltip._mat-animation-noopable{animation:none;transform:scale(1)}.mat-mdc-tooltip-panel.mat-mdc-tooltip-panel-non-interactive{pointer-events:none}@keyframes mat-mdc-tooltip-show{0%{opacity:0;transform:scale(0.8)}100%{opacity:1;transform:scale(1)}}@keyframes mat-mdc-tooltip-hide{0%{opacity:1;transform:scale(1)}100%{opacity:0;transform:scale(0.8)}}.mat-mdc-tooltip-show{animation:mat-mdc-tooltip-show 150ms cubic-bezier(0, 0, 0.2, 1) forwards}.mat-mdc-tooltip-hide{animation:mat-mdc-tooltip-hide 75ms cubic-bezier(0.4, 0, 1, 1) forwards}']
    }]
  }], () => [{
    type: ChangeDetectorRef
  }, {
    type: ElementRef
  }, {
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [ANIMATION_MODULE_TYPE]
    }]
  }], {
    _tooltip: [{
      type: ViewChild,
      args: ["tooltip", {
        // Use a static query here since we interact directly with
        // the DOM which can happen before `ngAfterViewInit`.
        static: true
      }]
    }]
  });
})();
var matTooltipAnimations = {
  /** Animation that transitions a tooltip in and out. */
  tooltipState: trigger("state", [
    // TODO(crisbeto): these values are based on MDC's CSS.
    // We should be able to use their styles directly once we land #19432.
    state("initial, void, hidden", style({
      opacity: 0,
      transform: "scale(0.8)"
    })),
    state("visible", style({
      transform: "scale(1)"
    })),
    transition("* => visible", animate("150ms cubic-bezier(0, 0, 0.2, 1)")),
    transition("* => hidden", animate("75ms cubic-bezier(0.4, 0, 1, 1)"))
  ])
};
var _MatTooltipModule = class _MatTooltipModule {
};
_MatTooltipModule.\u0275fac = function MatTooltipModule_Factory(t) {
  return new (t || _MatTooltipModule)();
};
_MatTooltipModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _MatTooltipModule
});
_MatTooltipModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({
  providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER],
  imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule, MatCommonModule, CdkScrollableModule]
});
var MatTooltipModule = _MatTooltipModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(MatTooltipModule, [{
    type: NgModule,
    args: [{
      imports: [A11yModule, CommonModule, OverlayModule, MatCommonModule],
      exports: [MatTooltip, TooltipComponent, MatCommonModule, CdkScrollableModule],
      declarations: [MatTooltip, TooltipComponent],
      providers: [MAT_TOOLTIP_SCROLL_STRATEGY_FACTORY_PROVIDER]
    }]
  }], null, null);
})();

// node_modules/@angular/router/fesm2022/router.mjs
var PRIMARY_OUTLET = "primary";
var RouteTitleKey = /* @__PURE__ */ Symbol("RouteTitle");
var ParamsAsMap = class {
  constructor(params) {
    this.params = params || {};
  }
  has(name) {
    return Object.prototype.hasOwnProperty.call(this.params, name);
  }
  get(name) {
    if (this.has(name)) {
      const v = this.params[name];
      return Array.isArray(v) ? v[0] : v;
    }
    return null;
  }
  getAll(name) {
    if (this.has(name)) {
      const v = this.params[name];
      return Array.isArray(v) ? v : [v];
    }
    return [];
  }
  get keys() {
    return Object.keys(this.params);
  }
};
function convertToParamMap(params) {
  return new ParamsAsMap(params);
}
function defaultUrlMatcher(segments, segmentGroup, route) {
  const parts = route.path.split("/");
  if (parts.length > segments.length) {
    return null;
  }
  if (route.pathMatch === "full" && (segmentGroup.hasChildren() || parts.length < segments.length)) {
    return null;
  }
  const posParams = {};
  for (let index = 0; index < parts.length; index++) {
    const part = parts[index];
    const segment = segments[index];
    const isParameter = part.startsWith(":");
    if (isParameter) {
      posParams[part.substring(1)] = segment;
    } else if (part !== segment.path) {
      return null;
    }
  }
  return {
    consumed: segments.slice(0, parts.length),
    posParams
  };
}
function shallowEqualArrays(a, b) {
  if (a.length !== b.length)
    return false;
  for (let i = 0; i < a.length; ++i) {
    if (!shallowEqual(a[i], b[i]))
      return false;
  }
  return true;
}
function shallowEqual(a, b) {
  const k1 = a ? getDataKeys(a) : void 0;
  const k2 = b ? getDataKeys(b) : void 0;
  if (!k1 || !k2 || k1.length != k2.length) {
    return false;
  }
  let key;
  for (let i = 0; i < k1.length; i++) {
    key = k1[i];
    if (!equalArraysOrString(a[key], b[key])) {
      return false;
    }
  }
  return true;
}
function getDataKeys(obj) {
  return [...Object.keys(obj), ...Object.getOwnPropertySymbols(obj)];
}
function equalArraysOrString(a, b) {
  if (Array.isArray(a) && Array.isArray(b)) {
    if (a.length !== b.length)
      return false;
    const aSorted = [...a].sort();
    const bSorted = [...b].sort();
    return aSorted.every((val, index) => bSorted[index] === val);
  } else {
    return a === b;
  }
}
function last3(a) {
  return a.length > 0 ? a[a.length - 1] : null;
}
function wrapIntoObservable(value) {
  if (isObservable(value)) {
    return value;
  }
  if (isPromise2(value)) {
    return from(Promise.resolve(value));
  }
  return of(value);
}
var pathCompareMap = {
  "exact": equalSegmentGroups,
  "subset": containsSegmentGroup
};
var paramCompareMap = {
  "exact": equalParams,
  "subset": containsParams,
  "ignored": () => true
};
function containsTree(container, containee, options) {
  return pathCompareMap[options.paths](container.root, containee.root, options.matrixParams) && paramCompareMap[options.queryParams](container.queryParams, containee.queryParams) && !(options.fragment === "exact" && container.fragment !== containee.fragment);
}
function equalParams(container, containee) {
  return shallowEqual(container, containee);
}
function equalSegmentGroups(container, containee, matrixParams) {
  if (!equalPath(container.segments, containee.segments))
    return false;
  if (!matrixParamsMatch(container.segments, containee.segments, matrixParams)) {
    return false;
  }
  if (container.numberOfChildren !== containee.numberOfChildren)
    return false;
  for (const c in containee.children) {
    if (!container.children[c])
      return false;
    if (!equalSegmentGroups(container.children[c], containee.children[c], matrixParams))
      return false;
  }
  return true;
}
function containsParams(container, containee) {
  return Object.keys(containee).length <= Object.keys(container).length && Object.keys(containee).every((key) => equalArraysOrString(container[key], containee[key]));
}
function containsSegmentGroup(container, containee, matrixParams) {
  return containsSegmentGroupHelper(container, containee, containee.segments, matrixParams);
}
function containsSegmentGroupHelper(container, containee, containeePaths, matrixParams) {
  if (container.segments.length > containeePaths.length) {
    const current = container.segments.slice(0, containeePaths.length);
    if (!equalPath(current, containeePaths))
      return false;
    if (containee.hasChildren())
      return false;
    if (!matrixParamsMatch(current, containeePaths, matrixParams))
      return false;
    return true;
  } else if (container.segments.length === containeePaths.length) {
    if (!equalPath(container.segments, containeePaths))
      return false;
    if (!matrixParamsMatch(container.segments, containeePaths, matrixParams))
      return false;
    for (const c in containee.children) {
      if (!container.children[c])
        return false;
      if (!containsSegmentGroup(container.children[c], containee.children[c], matrixParams)) {
        return false;
      }
    }
    return true;
  } else {
    const current = containeePaths.slice(0, container.segments.length);
    const next = containeePaths.slice(container.segments.length);
    if (!equalPath(container.segments, current))
      return false;
    if (!matrixParamsMatch(container.segments, current, matrixParams))
      return false;
    if (!container.children[PRIMARY_OUTLET])
      return false;
    return containsSegmentGroupHelper(container.children[PRIMARY_OUTLET], containee, next, matrixParams);
  }
}
function matrixParamsMatch(containerPaths, containeePaths, options) {
  return containeePaths.every((containeeSegment, i) => {
    return paramCompareMap[options](containerPaths[i].parameters, containeeSegment.parameters);
  });
}
var UrlTree = class {
  constructor(root = new UrlSegmentGroup([], {}), queryParams = {}, fragment = null) {
    this.root = root;
    this.queryParams = queryParams;
    this.fragment = fragment;
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      if (root.segments.length > 0) {
        throw new RuntimeError(4015, "The root `UrlSegmentGroup` should not contain `segments`. Instead, these segments belong in the `children` so they can be associated with a named outlet.");
      }
    }
  }
  get queryParamMap() {
    if (!this._queryParamMap) {
      this._queryParamMap = convertToParamMap(this.queryParams);
    }
    return this._queryParamMap;
  }
  /** @docsNotRequired */
  toString() {
    return DEFAULT_SERIALIZER.serialize(this);
  }
};
var UrlSegmentGroup = class {
  constructor(segments, children) {
    this.segments = segments;
    this.children = children;
    this.parent = null;
    Object.values(children).forEach((v) => v.parent = this);
  }
  /** Whether the segment has child segments */
  hasChildren() {
    return this.numberOfChildren > 0;
  }
  /** Number of child segments */
  get numberOfChildren() {
    return Object.keys(this.children).length;
  }
  /** @docsNotRequired */
  toString() {
    return serializePaths(this);
  }
};
var UrlSegment = class {
  constructor(path, parameters) {
    this.path = path;
    this.parameters = parameters;
  }
  get parameterMap() {
    if (!this._parameterMap) {
      this._parameterMap = convertToParamMap(this.parameters);
    }
    return this._parameterMap;
  }
  /** @docsNotRequired */
  toString() {
    return serializePath(this);
  }
};
function equalSegments(as, bs) {
  return equalPath(as, bs) && as.every((a, i) => shallowEqual(a.parameters, bs[i].parameters));
}
function equalPath(as, bs) {
  if (as.length !== bs.length)
    return false;
  return as.every((a, i) => a.path === bs[i].path);
}
function mapChildrenIntoArray(segment, fn) {
  let res = [];
  Object.entries(segment.children).forEach(([childOutlet, child]) => {
    if (childOutlet === PRIMARY_OUTLET) {
      res = res.concat(fn(child, childOutlet));
    }
  });
  Object.entries(segment.children).forEach(([childOutlet, child]) => {
    if (childOutlet !== PRIMARY_OUTLET) {
      res = res.concat(fn(child, childOutlet));
    }
  });
  return res;
}
var _UrlSerializer = class _UrlSerializer {
};
_UrlSerializer.\u0275fac = function UrlSerializer_Factory(t) {
  return new (t || _UrlSerializer)();
};
_UrlSerializer.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _UrlSerializer,
  factory: () => (() => new DefaultUrlSerializer())(),
  providedIn: "root"
});
var UrlSerializer = _UrlSerializer;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(UrlSerializer, [{
    type: Injectable,
    args: [{
      providedIn: "root",
      useFactory: () => new DefaultUrlSerializer()
    }]
  }], null, null);
})();
var DefaultUrlSerializer = class {
  /** Parses a url into a `UrlTree` */
  parse(url) {
    const p = new UrlParser(url);
    return new UrlTree(p.parseRootSegment(), p.parseQueryParams(), p.parseFragment());
  }
  /** Converts a `UrlTree` into a url */
  serialize(tree2) {
    const segment = `/${serializeSegment(tree2.root, true)}`;
    const query2 = serializeQueryParams(tree2.queryParams);
    const fragment = typeof tree2.fragment === `string` ? `#${encodeUriFragment(tree2.fragment)}` : "";
    return `${segment}${query2}${fragment}`;
  }
};
var DEFAULT_SERIALIZER = new DefaultUrlSerializer();
function serializePaths(segment) {
  return segment.segments.map((p) => serializePath(p)).join("/");
}
function serializeSegment(segment, root) {
  if (!segment.hasChildren()) {
    return serializePaths(segment);
  }
  if (root) {
    const primary = segment.children[PRIMARY_OUTLET] ? serializeSegment(segment.children[PRIMARY_OUTLET], false) : "";
    const children = [];
    Object.entries(segment.children).forEach(([k, v]) => {
      if (k !== PRIMARY_OUTLET) {
        children.push(`${k}:${serializeSegment(v, false)}`);
      }
    });
    return children.length > 0 ? `${primary}(${children.join("//")})` : primary;
  } else {
    const children = mapChildrenIntoArray(segment, (v, k) => {
      if (k === PRIMARY_OUTLET) {
        return [serializeSegment(segment.children[PRIMARY_OUTLET], false)];
      }
      return [`${k}:${serializeSegment(v, false)}`];
    });
    if (Object.keys(segment.children).length === 1 && segment.children[PRIMARY_OUTLET] != null) {
      return `${serializePaths(segment)}/${children[0]}`;
    }
    return `${serializePaths(segment)}/(${children.join("//")})`;
  }
}
function encodeUriString(s) {
  return encodeURIComponent(s).replace(/%40/g, "@").replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",");
}
function encodeUriQuery(s) {
  return encodeUriString(s).replace(/%3B/gi, ";");
}
function encodeUriFragment(s) {
  return encodeURI(s);
}
function encodeUriSegment(s) {
  return encodeUriString(s).replace(/\(/g, "%28").replace(/\)/g, "%29").replace(/%26/gi, "&");
}
function decode(s) {
  return decodeURIComponent(s);
}
function decodeQuery(s) {
  return decode(s.replace(/\+/g, "%20"));
}
function serializePath(path) {
  return `${encodeUriSegment(path.path)}${serializeMatrixParams(path.parameters)}`;
}
function serializeMatrixParams(params) {
  return Object.keys(params).map((key) => `;${encodeUriSegment(key)}=${encodeUriSegment(params[key])}`).join("");
}
function serializeQueryParams(params) {
  const strParams = Object.keys(params).map((name) => {
    const value = params[name];
    return Array.isArray(value) ? value.map((v) => `${encodeUriQuery(name)}=${encodeUriQuery(v)}`).join("&") : `${encodeUriQuery(name)}=${encodeUriQuery(value)}`;
  }).filter((s) => !!s);
  return strParams.length ? `?${strParams.join("&")}` : "";
}
var SEGMENT_RE = /^[^\/()?;#]+/;
function matchSegments(str) {
  const match2 = str.match(SEGMENT_RE);
  return match2 ? match2[0] : "";
}
var MATRIX_PARAM_SEGMENT_RE = /^[^\/()?;=#]+/;
function matchMatrixKeySegments(str) {
  const match2 = str.match(MATRIX_PARAM_SEGMENT_RE);
  return match2 ? match2[0] : "";
}
var QUERY_PARAM_RE = /^[^=?&#]+/;
function matchQueryParams(str) {
  const match2 = str.match(QUERY_PARAM_RE);
  return match2 ? match2[0] : "";
}
var QUERY_PARAM_VALUE_RE = /^[^&#]+/;
function matchUrlQueryParamValue(str) {
  const match2 = str.match(QUERY_PARAM_VALUE_RE);
  return match2 ? match2[0] : "";
}
var UrlParser = class {
  constructor(url) {
    this.url = url;
    this.remaining = url;
  }
  parseRootSegment() {
    this.consumeOptional("/");
    if (this.remaining === "" || this.peekStartsWith("?") || this.peekStartsWith("#")) {
      return new UrlSegmentGroup([], {});
    }
    return new UrlSegmentGroup([], this.parseChildren());
  }
  parseQueryParams() {
    const params = {};
    if (this.consumeOptional("?")) {
      do {
        this.parseQueryParam(params);
      } while (this.consumeOptional("&"));
    }
    return params;
  }
  parseFragment() {
    return this.consumeOptional("#") ? decodeURIComponent(this.remaining) : null;
  }
  parseChildren() {
    if (this.remaining === "") {
      return {};
    }
    this.consumeOptional("/");
    const segments = [];
    if (!this.peekStartsWith("(")) {
      segments.push(this.parseSegment());
    }
    while (this.peekStartsWith("/") && !this.peekStartsWith("//") && !this.peekStartsWith("/(")) {
      this.capture("/");
      segments.push(this.parseSegment());
    }
    let children = {};
    if (this.peekStartsWith("/(")) {
      this.capture("/");
      children = this.parseParens(true);
    }
    let res = {};
    if (this.peekStartsWith("(")) {
      res = this.parseParens(false);
    }
    if (segments.length > 0 || Object.keys(children).length > 0) {
      res[PRIMARY_OUTLET] = new UrlSegmentGroup(segments, children);
    }
    return res;
  }
  // parse a segment with its matrix parameters
  // ie `name;k1=v1;k2`
  parseSegment() {
    const path = matchSegments(this.remaining);
    if (path === "" && this.peekStartsWith(";")) {
      throw new RuntimeError(4009, (typeof ngDevMode === "undefined" || ngDevMode) && `Empty path url segment cannot have parameters: '${this.remaining}'.`);
    }
    this.capture(path);
    return new UrlSegment(decode(path), this.parseMatrixParams());
  }
  parseMatrixParams() {
    const params = {};
    while (this.consumeOptional(";")) {
      this.parseParam(params);
    }
    return params;
  }
  parseParam(params) {
    const key = matchMatrixKeySegments(this.remaining);
    if (!key) {
      return;
    }
    this.capture(key);
    let value = "";
    if (this.consumeOptional("=")) {
      const valueMatch = matchSegments(this.remaining);
      if (valueMatch) {
        value = valueMatch;
        this.capture(value);
      }
    }
    params[decode(key)] = decode(value);
  }
  // Parse a single query parameter `name[=value]`
  parseQueryParam(params) {
    const key = matchQueryParams(this.remaining);
    if (!key) {
      return;
    }
    this.capture(key);
    let value = "";
    if (this.consumeOptional("=")) {
      const valueMatch = matchUrlQueryParamValue(this.remaining);
      if (valueMatch) {
        value = valueMatch;
        this.capture(value);
      }
    }
    const decodedKey = decodeQuery(key);
    const decodedVal = decodeQuery(value);
    if (params.hasOwnProperty(decodedKey)) {
      let currentVal = params[decodedKey];
      if (!Array.isArray(currentVal)) {
        currentVal = [currentVal];
        params[decodedKey] = currentVal;
      }
      currentVal.push(decodedVal);
    } else {
      params[decodedKey] = decodedVal;
    }
  }
  // parse `(a/b//outlet_name:c/d)`
  parseParens(allowPrimary) {
    const segments = {};
    this.capture("(");
    while (!this.consumeOptional(")") && this.remaining.length > 0) {
      const path = matchSegments(this.remaining);
      const next = this.remaining[path.length];
      if (next !== "/" && next !== ")" && next !== ";") {
        throw new RuntimeError(4010, (typeof ngDevMode === "undefined" || ngDevMode) && `Cannot parse url '${this.url}'`);
      }
      let outletName = void 0;
      if (path.indexOf(":") > -1) {
        outletName = path.slice(0, path.indexOf(":"));
        this.capture(outletName);
        this.capture(":");
      } else if (allowPrimary) {
        outletName = PRIMARY_OUTLET;
      }
      const children = this.parseChildren();
      segments[outletName] = Object.keys(children).length === 1 ? children[PRIMARY_OUTLET] : new UrlSegmentGroup([], children);
      this.consumeOptional("//");
    }
    return segments;
  }
  peekStartsWith(str) {
    return this.remaining.startsWith(str);
  }
  // Consumes the prefix when it is present and returns whether it has been consumed
  consumeOptional(str) {
    if (this.peekStartsWith(str)) {
      this.remaining = this.remaining.substring(str.length);
      return true;
    }
    return false;
  }
  capture(str) {
    if (!this.consumeOptional(str)) {
      throw new RuntimeError(4011, (typeof ngDevMode === "undefined" || ngDevMode) && `Expected "${str}".`);
    }
  }
};
function createRoot(rootCandidate) {
  return rootCandidate.segments.length > 0 ? new UrlSegmentGroup([], {
    [PRIMARY_OUTLET]: rootCandidate
  }) : rootCandidate;
}
function squashSegmentGroup(segmentGroup) {
  const newChildren = {};
  for (const childOutlet of Object.keys(segmentGroup.children)) {
    const child = segmentGroup.children[childOutlet];
    const childCandidate = squashSegmentGroup(child);
    if (childOutlet === PRIMARY_OUTLET && childCandidate.segments.length === 0 && childCandidate.hasChildren()) {
      for (const [grandChildOutlet, grandChild] of Object.entries(childCandidate.children)) {
        newChildren[grandChildOutlet] = grandChild;
      }
    } else if (childCandidate.segments.length > 0 || childCandidate.hasChildren()) {
      newChildren[childOutlet] = childCandidate;
    }
  }
  const s = new UrlSegmentGroup(segmentGroup.segments, newChildren);
  return mergeTrivialChildren(s);
}
function mergeTrivialChildren(s) {
  if (s.numberOfChildren === 1 && s.children[PRIMARY_OUTLET]) {
    const c = s.children[PRIMARY_OUTLET];
    return new UrlSegmentGroup(s.segments.concat(c.segments), c.children);
  }
  return s;
}
function isUrlTree(v) {
  return v instanceof UrlTree;
}
function createUrlTreeFromSnapshot(relativeTo, commands, queryParams = null, fragment = null) {
  const relativeToUrlSegmentGroup = createSegmentGroupFromRoute(relativeTo);
  return createUrlTreeFromSegmentGroup(relativeToUrlSegmentGroup, commands, queryParams, fragment);
}
function createSegmentGroupFromRoute(route) {
  let targetGroup;
  function createSegmentGroupFromRouteRecursive(currentRoute) {
    const childOutlets = {};
    for (const childSnapshot of currentRoute.children) {
      const root = createSegmentGroupFromRouteRecursive(childSnapshot);
      childOutlets[childSnapshot.outlet] = root;
    }
    const segmentGroup = new UrlSegmentGroup(currentRoute.url, childOutlets);
    if (currentRoute === route) {
      targetGroup = segmentGroup;
    }
    return segmentGroup;
  }
  const rootCandidate = createSegmentGroupFromRouteRecursive(route.root);
  const rootSegmentGroup = createRoot(rootCandidate);
  return targetGroup ?? rootSegmentGroup;
}
function createUrlTreeFromSegmentGroup(relativeTo, commands, queryParams, fragment) {
  let root = relativeTo;
  while (root.parent) {
    root = root.parent;
  }
  if (commands.length === 0) {
    return tree(root, root, root, queryParams, fragment);
  }
  const nav = computeNavigation(commands);
  if (nav.toRoot()) {
    return tree(root, root, new UrlSegmentGroup([], {}), queryParams, fragment);
  }
  const position = findStartingPositionForTargetGroup(nav, root, relativeTo);
  const newSegmentGroup = position.processChildren ? updateSegmentGroupChildren(position.segmentGroup, position.index, nav.commands) : updateSegmentGroup(position.segmentGroup, position.index, nav.commands);
  return tree(root, position.segmentGroup, newSegmentGroup, queryParams, fragment);
}
function isMatrixParams(command) {
  return typeof command === "object" && command != null && !command.outlets && !command.segmentPath;
}
function isCommandWithOutlets(command) {
  return typeof command === "object" && command != null && command.outlets;
}
function tree(oldRoot, oldSegmentGroup, newSegmentGroup, queryParams, fragment) {
  let qp = {};
  if (queryParams) {
    Object.entries(queryParams).forEach(([name, value]) => {
      qp[name] = Array.isArray(value) ? value.map((v) => `${v}`) : `${value}`;
    });
  }
  let rootCandidate;
  if (oldRoot === oldSegmentGroup) {
    rootCandidate = newSegmentGroup;
  } else {
    rootCandidate = replaceSegment(oldRoot, oldSegmentGroup, newSegmentGroup);
  }
  const newRoot = createRoot(squashSegmentGroup(rootCandidate));
  return new UrlTree(newRoot, qp, fragment);
}
function replaceSegment(current, oldSegment, newSegment) {
  const children = {};
  Object.entries(current.children).forEach(([outletName, c]) => {
    if (c === oldSegment) {
      children[outletName] = newSegment;
    } else {
      children[outletName] = replaceSegment(c, oldSegment, newSegment);
    }
  });
  return new UrlSegmentGroup(current.segments, children);
}
var Navigation = class {
  constructor(isAbsolute, numberOfDoubleDots, commands) {
    this.isAbsolute = isAbsolute;
    this.numberOfDoubleDots = numberOfDoubleDots;
    this.commands = commands;
    if (isAbsolute && commands.length > 0 && isMatrixParams(commands[0])) {
      throw new RuntimeError(4003, (typeof ngDevMode === "undefined" || ngDevMode) && "Root segment cannot have matrix parameters");
    }
    const cmdWithOutlet = commands.find(isCommandWithOutlets);
    if (cmdWithOutlet && cmdWithOutlet !== last3(commands)) {
      throw new RuntimeError(4004, (typeof ngDevMode === "undefined" || ngDevMode) && "{outlets:{}} has to be the last command");
    }
  }
  toRoot() {
    return this.isAbsolute && this.commands.length === 1 && this.commands[0] == "/";
  }
};
function computeNavigation(commands) {
  if (typeof commands[0] === "string" && commands.length === 1 && commands[0] === "/") {
    return new Navigation(true, 0, commands);
  }
  let numberOfDoubleDots = 0;
  let isAbsolute = false;
  const res = commands.reduce((res2, cmd, cmdIdx) => {
    if (typeof cmd === "object" && cmd != null) {
      if (cmd.outlets) {
        const outlets = {};
        Object.entries(cmd.outlets).forEach(([name, commands2]) => {
          outlets[name] = typeof commands2 === "string" ? commands2.split("/") : commands2;
        });
        return [...res2, {
          outlets
        }];
      }
      if (cmd.segmentPath) {
        return [...res2, cmd.segmentPath];
      }
    }
    if (!(typeof cmd === "string")) {
      return [...res2, cmd];
    }
    if (cmdIdx === 0) {
      cmd.split("/").forEach((urlPart, partIndex) => {
        if (partIndex == 0 && urlPart === ".") {
        } else if (partIndex == 0 && urlPart === "") {
          isAbsolute = true;
        } else if (urlPart === "..") {
          numberOfDoubleDots++;
        } else if (urlPart != "") {
          res2.push(urlPart);
        }
      });
      return res2;
    }
    return [...res2, cmd];
  }, []);
  return new Navigation(isAbsolute, numberOfDoubleDots, res);
}
var Position = class {
  constructor(segmentGroup, processChildren, index) {
    this.segmentGroup = segmentGroup;
    this.processChildren = processChildren;
    this.index = index;
  }
};
function findStartingPositionForTargetGroup(nav, root, target) {
  if (nav.isAbsolute) {
    return new Position(root, true, 0);
  }
  if (!target) {
    return new Position(root, false, NaN);
  }
  if (target.parent === null) {
    return new Position(target, true, 0);
  }
  const modifier = isMatrixParams(nav.commands[0]) ? 0 : 1;
  const index = target.segments.length - 1 + modifier;
  return createPositionApplyingDoubleDots(target, index, nav.numberOfDoubleDots);
}
function createPositionApplyingDoubleDots(group2, index, numberOfDoubleDots) {
  let g = group2;
  let ci = index;
  let dd = numberOfDoubleDots;
  while (dd > ci) {
    dd -= ci;
    g = g.parent;
    if (!g) {
      throw new RuntimeError(4005, (typeof ngDevMode === "undefined" || ngDevMode) && "Invalid number of '../'");
    }
    ci = g.segments.length;
  }
  return new Position(g, false, ci - dd);
}
function getOutlets(commands) {
  if (isCommandWithOutlets(commands[0])) {
    return commands[0].outlets;
  }
  return {
    [PRIMARY_OUTLET]: commands
  };
}
function updateSegmentGroup(segmentGroup, startIndex, commands) {
  if (!segmentGroup) {
    segmentGroup = new UrlSegmentGroup([], {});
  }
  if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
    return updateSegmentGroupChildren(segmentGroup, startIndex, commands);
  }
  const m = prefixedWith(segmentGroup, startIndex, commands);
  const slicedCommands = commands.slice(m.commandIndex);
  if (m.match && m.pathIndex < segmentGroup.segments.length) {
    const g = new UrlSegmentGroup(segmentGroup.segments.slice(0, m.pathIndex), {});
    g.children[PRIMARY_OUTLET] = new UrlSegmentGroup(segmentGroup.segments.slice(m.pathIndex), segmentGroup.children);
    return updateSegmentGroupChildren(g, 0, slicedCommands);
  } else if (m.match && slicedCommands.length === 0) {
    return new UrlSegmentGroup(segmentGroup.segments, {});
  } else if (m.match && !segmentGroup.hasChildren()) {
    return createNewSegmentGroup(segmentGroup, startIndex, commands);
  } else if (m.match) {
    return updateSegmentGroupChildren(segmentGroup, 0, slicedCommands);
  } else {
    return createNewSegmentGroup(segmentGroup, startIndex, commands);
  }
}
function updateSegmentGroupChildren(segmentGroup, startIndex, commands) {
  if (commands.length === 0) {
    return new UrlSegmentGroup(segmentGroup.segments, {});
  } else {
    const outlets = getOutlets(commands);
    const children = {};
    if (Object.keys(outlets).some((o) => o !== PRIMARY_OUTLET) && segmentGroup.children[PRIMARY_OUTLET] && segmentGroup.numberOfChildren === 1 && segmentGroup.children[PRIMARY_OUTLET].segments.length === 0) {
      const childrenOfEmptyChild = updateSegmentGroupChildren(segmentGroup.children[PRIMARY_OUTLET], startIndex, commands);
      return new UrlSegmentGroup(segmentGroup.segments, childrenOfEmptyChild.children);
    }
    Object.entries(outlets).forEach(([outlet, commands2]) => {
      if (typeof commands2 === "string") {
        commands2 = [commands2];
      }
      if (commands2 !== null) {
        children[outlet] = updateSegmentGroup(segmentGroup.children[outlet], startIndex, commands2);
      }
    });
    Object.entries(segmentGroup.children).forEach(([childOutlet, child]) => {
      if (outlets[childOutlet] === void 0) {
        children[childOutlet] = child;
      }
    });
    return new UrlSegmentGroup(segmentGroup.segments, children);
  }
}
function prefixedWith(segmentGroup, startIndex, commands) {
  let currentCommandIndex = 0;
  let currentPathIndex = startIndex;
  const noMatch2 = {
    match: false,
    pathIndex: 0,
    commandIndex: 0
  };
  while (currentPathIndex < segmentGroup.segments.length) {
    if (currentCommandIndex >= commands.length)
      return noMatch2;
    const path = segmentGroup.segments[currentPathIndex];
    const command = commands[currentCommandIndex];
    if (isCommandWithOutlets(command)) {
      break;
    }
    const curr = `${command}`;
    const next = currentCommandIndex < commands.length - 1 ? commands[currentCommandIndex + 1] : null;
    if (currentPathIndex > 0 && curr === void 0)
      break;
    if (curr && next && typeof next === "object" && next.outlets === void 0) {
      if (!compare(curr, next, path))
        return noMatch2;
      currentCommandIndex += 2;
    } else {
      if (!compare(curr, {}, path))
        return noMatch2;
      currentCommandIndex++;
    }
    currentPathIndex++;
  }
  return {
    match: true,
    pathIndex: currentPathIndex,
    commandIndex: currentCommandIndex
  };
}
function createNewSegmentGroup(segmentGroup, startIndex, commands) {
  const paths = segmentGroup.segments.slice(0, startIndex);
  let i = 0;
  while (i < commands.length) {
    const command = commands[i];
    if (isCommandWithOutlets(command)) {
      const children = createNewSegmentChildren(command.outlets);
      return new UrlSegmentGroup(paths, children);
    }
    if (i === 0 && isMatrixParams(commands[0])) {
      const p = segmentGroup.segments[startIndex];
      paths.push(new UrlSegment(p.path, stringify2(commands[0])));
      i++;
      continue;
    }
    const curr = isCommandWithOutlets(command) ? command.outlets[PRIMARY_OUTLET] : `${command}`;
    const next = i < commands.length - 1 ? commands[i + 1] : null;
    if (curr && next && isMatrixParams(next)) {
      paths.push(new UrlSegment(curr, stringify2(next)));
      i += 2;
    } else {
      paths.push(new UrlSegment(curr, {}));
      i++;
    }
  }
  return new UrlSegmentGroup(paths, {});
}
function createNewSegmentChildren(outlets) {
  const children = {};
  Object.entries(outlets).forEach(([outlet, commands]) => {
    if (typeof commands === "string") {
      commands = [commands];
    }
    if (commands !== null) {
      children[outlet] = createNewSegmentGroup(new UrlSegmentGroup([], {}), 0, commands);
    }
  });
  return children;
}
function stringify2(params) {
  const res = {};
  Object.entries(params).forEach(([k, v]) => res[k] = `${v}`);
  return res;
}
function compare(path, params, segment) {
  return path == segment.path && shallowEqual(params, segment.parameters);
}
var IMPERATIVE_NAVIGATION = "imperative";
var RouterEvent = class {
  constructor(id, url) {
    this.id = id;
    this.url = url;
  }
};
var NavigationStart = class extends RouterEvent {
  constructor(id, url, navigationTrigger = "imperative", restoredState = null) {
    super(id, url);
    this.type = 0;
    this.navigationTrigger = navigationTrigger;
    this.restoredState = restoredState;
  }
  /** @docsNotRequired */
  toString() {
    return `NavigationStart(id: ${this.id}, url: '${this.url}')`;
  }
};
var NavigationEnd = class extends RouterEvent {
  constructor(id, url, urlAfterRedirects) {
    super(id, url);
    this.urlAfterRedirects = urlAfterRedirects;
    this.type = 1;
  }
  /** @docsNotRequired */
  toString() {
    return `NavigationEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}')`;
  }
};
var NavigationCancel = class extends RouterEvent {
  constructor(id, url, reason, code) {
    super(id, url);
    this.reason = reason;
    this.code = code;
    this.type = 2;
  }
  /** @docsNotRequired */
  toString() {
    return `NavigationCancel(id: ${this.id}, url: '${this.url}')`;
  }
};
var NavigationSkipped = class extends RouterEvent {
  constructor(id, url, reason, code) {
    super(id, url);
    this.reason = reason;
    this.code = code;
    this.type = 16;
  }
};
var NavigationError = class extends RouterEvent {
  constructor(id, url, error, target) {
    super(id, url);
    this.error = error;
    this.target = target;
    this.type = 3;
  }
  /** @docsNotRequired */
  toString() {
    return `NavigationError(id: ${this.id}, url: '${this.url}', error: ${this.error})`;
  }
};
var RoutesRecognized = class extends RouterEvent {
  constructor(id, url, urlAfterRedirects, state2) {
    super(id, url);
    this.urlAfterRedirects = urlAfterRedirects;
    this.state = state2;
    this.type = 4;
  }
  /** @docsNotRequired */
  toString() {
    return `RoutesRecognized(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;
  }
};
var GuardsCheckStart = class extends RouterEvent {
  constructor(id, url, urlAfterRedirects, state2) {
    super(id, url);
    this.urlAfterRedirects = urlAfterRedirects;
    this.state = state2;
    this.type = 7;
  }
  toString() {
    return `GuardsCheckStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;
  }
};
var GuardsCheckEnd = class extends RouterEvent {
  constructor(id, url, urlAfterRedirects, state2, shouldActivate) {
    super(id, url);
    this.urlAfterRedirects = urlAfterRedirects;
    this.state = state2;
    this.shouldActivate = shouldActivate;
    this.type = 8;
  }
  toString() {
    return `GuardsCheckEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state}, shouldActivate: ${this.shouldActivate})`;
  }
};
var ResolveStart = class extends RouterEvent {
  constructor(id, url, urlAfterRedirects, state2) {
    super(id, url);
    this.urlAfterRedirects = urlAfterRedirects;
    this.state = state2;
    this.type = 5;
  }
  toString() {
    return `ResolveStart(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;
  }
};
var ResolveEnd = class extends RouterEvent {
  constructor(id, url, urlAfterRedirects, state2) {
    super(id, url);
    this.urlAfterRedirects = urlAfterRedirects;
    this.state = state2;
    this.type = 6;
  }
  toString() {
    return `ResolveEnd(id: ${this.id}, url: '${this.url}', urlAfterRedirects: '${this.urlAfterRedirects}', state: ${this.state})`;
  }
};
var RouteConfigLoadStart = class {
  constructor(route) {
    this.route = route;
    this.type = 9;
  }
  toString() {
    return `RouteConfigLoadStart(path: ${this.route.path})`;
  }
};
var RouteConfigLoadEnd = class {
  constructor(route) {
    this.route = route;
    this.type = 10;
  }
  toString() {
    return `RouteConfigLoadEnd(path: ${this.route.path})`;
  }
};
var ChildActivationStart = class {
  constructor(snapshot) {
    this.snapshot = snapshot;
    this.type = 11;
  }
  toString() {
    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || "";
    return `ChildActivationStart(path: '${path}')`;
  }
};
var ChildActivationEnd = class {
  constructor(snapshot) {
    this.snapshot = snapshot;
    this.type = 12;
  }
  toString() {
    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || "";
    return `ChildActivationEnd(path: '${path}')`;
  }
};
var ActivationStart = class {
  constructor(snapshot) {
    this.snapshot = snapshot;
    this.type = 13;
  }
  toString() {
    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || "";
    return `ActivationStart(path: '${path}')`;
  }
};
var ActivationEnd = class {
  constructor(snapshot) {
    this.snapshot = snapshot;
    this.type = 14;
  }
  toString() {
    const path = this.snapshot.routeConfig && this.snapshot.routeConfig.path || "";
    return `ActivationEnd(path: '${path}')`;
  }
};
var Scroll = class {
  constructor(routerEvent, position, anchor) {
    this.routerEvent = routerEvent;
    this.position = position;
    this.anchor = anchor;
    this.type = 15;
  }
  toString() {
    const pos = this.position ? `${this.position[0]}, ${this.position[1]}` : null;
    return `Scroll(anchor: '${this.anchor}', position: '${pos}')`;
  }
};
var BeforeActivateRoutes = class {
};
var RedirectRequest = class {
  constructor(url) {
    this.url = url;
  }
};
function stringifyEvent(routerEvent) {
  switch (routerEvent.type) {
    case 14:
      return `ActivationEnd(path: '${routerEvent.snapshot.routeConfig?.path || ""}')`;
    case 13:
      return `ActivationStart(path: '${routerEvent.snapshot.routeConfig?.path || ""}')`;
    case 12:
      return `ChildActivationEnd(path: '${routerEvent.snapshot.routeConfig?.path || ""}')`;
    case 11:
      return `ChildActivationStart(path: '${routerEvent.snapshot.routeConfig?.path || ""}')`;
    case 8:
      return `GuardsCheckEnd(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state}, shouldActivate: ${routerEvent.shouldActivate})`;
    case 7:
      return `GuardsCheckStart(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state})`;
    case 2:
      return `NavigationCancel(id: ${routerEvent.id}, url: '${routerEvent.url}')`;
    case 16:
      return `NavigationSkipped(id: ${routerEvent.id}, url: '${routerEvent.url}')`;
    case 1:
      return `NavigationEnd(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}')`;
    case 3:
      return `NavigationError(id: ${routerEvent.id}, url: '${routerEvent.url}', error: ${routerEvent.error})`;
    case 0:
      return `NavigationStart(id: ${routerEvent.id}, url: '${routerEvent.url}')`;
    case 6:
      return `ResolveEnd(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state})`;
    case 5:
      return `ResolveStart(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state})`;
    case 10:
      return `RouteConfigLoadEnd(path: ${routerEvent.route.path})`;
    case 9:
      return `RouteConfigLoadStart(path: ${routerEvent.route.path})`;
    case 4:
      return `RoutesRecognized(id: ${routerEvent.id}, url: '${routerEvent.url}', urlAfterRedirects: '${routerEvent.urlAfterRedirects}', state: ${routerEvent.state})`;
    case 15:
      const pos = routerEvent.position ? `${routerEvent.position[0]}, ${routerEvent.position[1]}` : null;
      return `Scroll(anchor: '${routerEvent.anchor}', position: '${pos}')`;
  }
}
var OutletContext = class {
  constructor() {
    this.outlet = null;
    this.route = null;
    this.injector = null;
    this.children = new ChildrenOutletContexts();
    this.attachRef = null;
  }
};
var _ChildrenOutletContexts = class _ChildrenOutletContexts {
  constructor() {
    this.contexts = /* @__PURE__ */ new Map();
  }
  /** Called when a `RouterOutlet` directive is instantiated */
  onChildOutletCreated(childName, outlet) {
    const context2 = this.getOrCreateContext(childName);
    context2.outlet = outlet;
    this.contexts.set(childName, context2);
  }
  /**
   * Called when a `RouterOutlet` directive is destroyed.
   * We need to keep the context as the outlet could be destroyed inside a NgIf and might be
   * re-created later.
   */
  onChildOutletDestroyed(childName) {
    const context2 = this.getContext(childName);
    if (context2) {
      context2.outlet = null;
      context2.attachRef = null;
    }
  }
  /**
   * Called when the corresponding route is deactivated during navigation.
   * Because the component get destroyed, all children outlet are destroyed.
   */
  onOutletDeactivated() {
    const contexts = this.contexts;
    this.contexts = /* @__PURE__ */ new Map();
    return contexts;
  }
  onOutletReAttached(contexts) {
    this.contexts = contexts;
  }
  getOrCreateContext(childName) {
    let context2 = this.getContext(childName);
    if (!context2) {
      context2 = new OutletContext();
      this.contexts.set(childName, context2);
    }
    return context2;
  }
  getContext(childName) {
    return this.contexts.get(childName) || null;
  }
};
_ChildrenOutletContexts.\u0275fac = function ChildrenOutletContexts_Factory(t) {
  return new (t || _ChildrenOutletContexts)();
};
_ChildrenOutletContexts.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _ChildrenOutletContexts,
  factory: _ChildrenOutletContexts.\u0275fac,
  providedIn: "root"
});
var ChildrenOutletContexts = _ChildrenOutletContexts;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(ChildrenOutletContexts, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
var Tree = class {
  constructor(root) {
    this._root = root;
  }
  get root() {
    return this._root.value;
  }
  /**
   * @internal
   */
  parent(t) {
    const p = this.pathFromRoot(t);
    return p.length > 1 ? p[p.length - 2] : null;
  }
  /**
   * @internal
   */
  children(t) {
    const n = findNode(t, this._root);
    return n ? n.children.map((t2) => t2.value) : [];
  }
  /**
   * @internal
   */
  firstChild(t) {
    const n = findNode(t, this._root);
    return n && n.children.length > 0 ? n.children[0].value : null;
  }
  /**
   * @internal
   */
  siblings(t) {
    const p = findPath(t, this._root);
    if (p.length < 2)
      return [];
    const c = p[p.length - 2].children.map((c2) => c2.value);
    return c.filter((cc) => cc !== t);
  }
  /**
   * @internal
   */
  pathFromRoot(t) {
    return findPath(t, this._root).map((s) => s.value);
  }
};
function findNode(value, node) {
  if (value === node.value)
    return node;
  for (const child of node.children) {
    const node2 = findNode(value, child);
    if (node2)
      return node2;
  }
  return null;
}
function findPath(value, node) {
  if (value === node.value)
    return [node];
  for (const child of node.children) {
    const path = findPath(value, child);
    if (path.length) {
      path.unshift(node);
      return path;
    }
  }
  return [];
}
var TreeNode = class {
  constructor(value, children) {
    this.value = value;
    this.children = children;
  }
  toString() {
    return `TreeNode(${this.value})`;
  }
};
function nodeChildrenAsMap(node) {
  const map2 = {};
  if (node) {
    node.children.forEach((child) => map2[child.value.outlet] = child);
  }
  return map2;
}
var RouterState = class extends Tree {
  /** @internal */
  constructor(root, snapshot) {
    super(root);
    this.snapshot = snapshot;
    setRouterState(this, root);
  }
  toString() {
    return this.snapshot.toString();
  }
};
function createEmptyState(urlTree, rootComponent) {
  const snapshot = createEmptyStateSnapshot(urlTree, rootComponent);
  const emptyUrl = new BehaviorSubject([new UrlSegment("", {})]);
  const emptyParams = new BehaviorSubject({});
  const emptyData = new BehaviorSubject({});
  const emptyQueryParams = new BehaviorSubject({});
  const fragment = new BehaviorSubject("");
  const activated = new ActivatedRoute(emptyUrl, emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, snapshot.root);
  activated.snapshot = snapshot.root;
  return new RouterState(new TreeNode(activated, []), snapshot);
}
function createEmptyStateSnapshot(urlTree, rootComponent) {
  const emptyParams = {};
  const emptyData = {};
  const emptyQueryParams = {};
  const fragment = "";
  const activated = new ActivatedRouteSnapshot([], emptyParams, emptyQueryParams, fragment, emptyData, PRIMARY_OUTLET, rootComponent, null, {});
  return new RouterStateSnapshot("", new TreeNode(activated, []));
}
var ActivatedRoute = class {
  /** @internal */
  constructor(urlSubject, paramsSubject, queryParamsSubject, fragmentSubject, dataSubject, outlet, component, futureSnapshot) {
    this.urlSubject = urlSubject;
    this.paramsSubject = paramsSubject;
    this.queryParamsSubject = queryParamsSubject;
    this.fragmentSubject = fragmentSubject;
    this.dataSubject = dataSubject;
    this.outlet = outlet;
    this.component = component;
    this._futureSnapshot = futureSnapshot;
    this.title = this.dataSubject?.pipe(map((d) => d[RouteTitleKey])) ?? of(void 0);
    this.url = urlSubject;
    this.params = paramsSubject;
    this.queryParams = queryParamsSubject;
    this.fragment = fragmentSubject;
    this.data = dataSubject;
  }
  /** The configuration used to match this route. */
  get routeConfig() {
    return this._futureSnapshot.routeConfig;
  }
  /** The root of the router state. */
  get root() {
    return this._routerState.root;
  }
  /** The parent of this route in the router state tree. */
  get parent() {
    return this._routerState.parent(this);
  }
  /** The first child of this route in the router state tree. */
  get firstChild() {
    return this._routerState.firstChild(this);
  }
  /** The children of this route in the router state tree. */
  get children() {
    return this._routerState.children(this);
  }
  /** The path from the root of the router state tree to this route. */
  get pathFromRoot() {
    return this._routerState.pathFromRoot(this);
  }
  /**
   * An Observable that contains a map of the required and optional parameters
   * specific to the route.
   * The map supports retrieving single and multiple values from the same parameter.
   */
  get paramMap() {
    if (!this._paramMap) {
      this._paramMap = this.params.pipe(map((p) => convertToParamMap(p)));
    }
    return this._paramMap;
  }
  /**
   * An Observable that contains a map of the query parameters available to all routes.
   * The map supports retrieving single and multiple values from the query parameter.
   */
  get queryParamMap() {
    if (!this._queryParamMap) {
      this._queryParamMap = this.queryParams.pipe(map((p) => convertToParamMap(p)));
    }
    return this._queryParamMap;
  }
  toString() {
    return this.snapshot ? this.snapshot.toString() : `Future(${this._futureSnapshot})`;
  }
};
function getInherited(route, parent, paramsInheritanceStrategy = "emptyOnly") {
  let inherited;
  const {
    routeConfig
  } = route;
  if (parent !== null && (paramsInheritanceStrategy === "always" || // inherit parent data if route is empty path
  routeConfig?.path === "" || // inherit parent data if parent was componentless
  !parent.component && !parent.routeConfig?.loadComponent)) {
    inherited = {
      params: __spreadValues(__spreadValues({}, parent.params), route.params),
      data: __spreadValues(__spreadValues({}, parent.data), route.data),
      resolve: __spreadValues(__spreadValues(__spreadValues(__spreadValues({}, route.data), parent.data), routeConfig?.data), route._resolvedData)
    };
  } else {
    inherited = {
      params: route.params,
      data: route.data,
      resolve: __spreadValues(__spreadValues({}, route.data), route._resolvedData ?? {})
    };
  }
  if (routeConfig && hasStaticTitle(routeConfig)) {
    inherited.resolve[RouteTitleKey] = routeConfig.title;
  }
  return inherited;
}
var ActivatedRouteSnapshot = class {
  /** The resolved route title */
  get title() {
    return this.data?.[RouteTitleKey];
  }
  /** @internal */
  constructor(url, params, queryParams, fragment, data, outlet, component, routeConfig, resolve) {
    this.url = url;
    this.params = params;
    this.queryParams = queryParams;
    this.fragment = fragment;
    this.data = data;
    this.outlet = outlet;
    this.component = component;
    this.routeConfig = routeConfig;
    this._resolve = resolve;
  }
  /** The root of the router state */
  get root() {
    return this._routerState.root;
  }
  /** The parent of this route in the router state tree */
  get parent() {
    return this._routerState.parent(this);
  }
  /** The first child of this route in the router state tree */
  get firstChild() {
    return this._routerState.firstChild(this);
  }
  /** The children of this route in the router state tree */
  get children() {
    return this._routerState.children(this);
  }
  /** The path from the root of the router state tree to this route */
  get pathFromRoot() {
    return this._routerState.pathFromRoot(this);
  }
  get paramMap() {
    if (!this._paramMap) {
      this._paramMap = convertToParamMap(this.params);
    }
    return this._paramMap;
  }
  get queryParamMap() {
    if (!this._queryParamMap) {
      this._queryParamMap = convertToParamMap(this.queryParams);
    }
    return this._queryParamMap;
  }
  toString() {
    const url = this.url.map((segment) => segment.toString()).join("/");
    const matched = this.routeConfig ? this.routeConfig.path : "";
    return `Route(url:'${url}', path:'${matched}')`;
  }
};
var RouterStateSnapshot = class extends Tree {
  /** @internal */
  constructor(url, root) {
    super(root);
    this.url = url;
    setRouterState(this, root);
  }
  toString() {
    return serializeNode(this._root);
  }
};
function setRouterState(state2, node) {
  node.value._routerState = state2;
  node.children.forEach((c) => setRouterState(state2, c));
}
function serializeNode(node) {
  const c = node.children.length > 0 ? ` { ${node.children.map(serializeNode).join(", ")} } ` : "";
  return `${node.value}${c}`;
}
function advanceActivatedRoute(route) {
  if (route.snapshot) {
    const currentSnapshot = route.snapshot;
    const nextSnapshot = route._futureSnapshot;
    route.snapshot = nextSnapshot;
    if (!shallowEqual(currentSnapshot.queryParams, nextSnapshot.queryParams)) {
      route.queryParamsSubject.next(nextSnapshot.queryParams);
    }
    if (currentSnapshot.fragment !== nextSnapshot.fragment) {
      route.fragmentSubject.next(nextSnapshot.fragment);
    }
    if (!shallowEqual(currentSnapshot.params, nextSnapshot.params)) {
      route.paramsSubject.next(nextSnapshot.params);
    }
    if (!shallowEqualArrays(currentSnapshot.url, nextSnapshot.url)) {
      route.urlSubject.next(nextSnapshot.url);
    }
    if (!shallowEqual(currentSnapshot.data, nextSnapshot.data)) {
      route.dataSubject.next(nextSnapshot.data);
    }
  } else {
    route.snapshot = route._futureSnapshot;
    route.dataSubject.next(route._futureSnapshot.data);
  }
}
function equalParamsAndUrlSegments(a, b) {
  const equalUrlParams = shallowEqual(a.params, b.params) && equalSegments(a.url, b.url);
  const parentsMismatch = !a.parent !== !b.parent;
  return equalUrlParams && !parentsMismatch && (!a.parent || equalParamsAndUrlSegments(a.parent, b.parent));
}
function hasStaticTitle(config2) {
  return typeof config2.title === "string" || config2.title === null;
}
var _RouterOutlet = class _RouterOutlet {
  constructor() {
    this.activated = null;
    this._activatedRoute = null;
    this.name = PRIMARY_OUTLET;
    this.activateEvents = new EventEmitter();
    this.deactivateEvents = new EventEmitter();
    this.attachEvents = new EventEmitter();
    this.detachEvents = new EventEmitter();
    this.parentContexts = inject(ChildrenOutletContexts);
    this.location = inject(ViewContainerRef);
    this.changeDetector = inject(ChangeDetectorRef);
    this.environmentInjector = inject(EnvironmentInjector);
    this.inputBinder = inject(INPUT_BINDER, {
      optional: true
    });
    this.supportsBindingToComponentInputs = true;
  }
  /** @internal */
  get activatedComponentRef() {
    return this.activated;
  }
  /** @nodoc */
  ngOnChanges(changes) {
    if (changes["name"]) {
      const {
        firstChange,
        previousValue
      } = changes["name"];
      if (firstChange) {
        return;
      }
      if (this.isTrackedInParentContexts(previousValue)) {
        this.deactivate();
        this.parentContexts.onChildOutletDestroyed(previousValue);
      }
      this.initializeOutletWithName();
    }
  }
  /** @nodoc */
  ngOnDestroy() {
    if (this.isTrackedInParentContexts(this.name)) {
      this.parentContexts.onChildOutletDestroyed(this.name);
    }
    this.inputBinder?.unsubscribeFromRouteData(this);
  }
  isTrackedInParentContexts(outletName) {
    return this.parentContexts.getContext(outletName)?.outlet === this;
  }
  /** @nodoc */
  ngOnInit() {
    this.initializeOutletWithName();
  }
  initializeOutletWithName() {
    this.parentContexts.onChildOutletCreated(this.name, this);
    if (this.activated) {
      return;
    }
    const context2 = this.parentContexts.getContext(this.name);
    if (context2?.route) {
      if (context2.attachRef) {
        this.attach(context2.attachRef, context2.route);
      } else {
        this.activateWith(context2.route, context2.injector);
      }
    }
  }
  get isActivated() {
    return !!this.activated;
  }
  /**
   * @returns The currently activated component instance.
   * @throws An error if the outlet is not activated.
   */
  get component() {
    if (!this.activated)
      throw new RuntimeError(4012, (typeof ngDevMode === "undefined" || ngDevMode) && "Outlet is not activated");
    return this.activated.instance;
  }
  get activatedRoute() {
    if (!this.activated)
      throw new RuntimeError(4012, (typeof ngDevMode === "undefined" || ngDevMode) && "Outlet is not activated");
    return this._activatedRoute;
  }
  get activatedRouteData() {
    if (this._activatedRoute) {
      return this._activatedRoute.snapshot.data;
    }
    return {};
  }
  /**
   * Called when the `RouteReuseStrategy` instructs to detach the subtree
   */
  detach() {
    if (!this.activated)
      throw new RuntimeError(4012, (typeof ngDevMode === "undefined" || ngDevMode) && "Outlet is not activated");
    this.location.detach();
    const cmp = this.activated;
    this.activated = null;
    this._activatedRoute = null;
    this.detachEvents.emit(cmp.instance);
    return cmp;
  }
  /**
   * Called when the `RouteReuseStrategy` instructs to re-attach a previously detached subtree
   */
  attach(ref, activatedRoute) {
    this.activated = ref;
    this._activatedRoute = activatedRoute;
    this.location.insert(ref.hostView);
    this.inputBinder?.bindActivatedRouteToOutletComponent(this);
    this.attachEvents.emit(ref.instance);
  }
  deactivate() {
    if (this.activated) {
      const c = this.component;
      this.activated.destroy();
      this.activated = null;
      this._activatedRoute = null;
      this.deactivateEvents.emit(c);
    }
  }
  activateWith(activatedRoute, environmentInjector) {
    if (this.isActivated) {
      throw new RuntimeError(4013, (typeof ngDevMode === "undefined" || ngDevMode) && "Cannot activate an already activated outlet");
    }
    this._activatedRoute = activatedRoute;
    const location2 = this.location;
    const snapshot = activatedRoute.snapshot;
    const component = snapshot.component;
    const childContexts = this.parentContexts.getOrCreateContext(this.name).children;
    const injector = new OutletInjector(activatedRoute, childContexts, location2.injector);
    this.activated = location2.createComponent(component, {
      index: location2.length,
      injector,
      environmentInjector: environmentInjector ?? this.environmentInjector
    });
    this.changeDetector.markForCheck();
    this.inputBinder?.bindActivatedRouteToOutletComponent(this);
    this.activateEvents.emit(this.activated.instance);
  }
};
_RouterOutlet.\u0275fac = function RouterOutlet_Factory(t) {
  return new (t || _RouterOutlet)();
};
_RouterOutlet.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _RouterOutlet,
  selectors: [["router-outlet"]],
  inputs: {
    name: "name"
  },
  outputs: {
    activateEvents: "activate",
    deactivateEvents: "deactivate",
    attachEvents: "attach",
    detachEvents: "detach"
  },
  exportAs: ["outlet"],
  standalone: true,
  features: [\u0275\u0275NgOnChangesFeature]
});
var RouterOutlet = _RouterOutlet;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RouterOutlet, [{
    type: Directive,
    args: [{
      selector: "router-outlet",
      exportAs: "outlet",
      standalone: true
    }]
  }], null, {
    name: [{
      type: Input
    }],
    activateEvents: [{
      type: Output,
      args: ["activate"]
    }],
    deactivateEvents: [{
      type: Output,
      args: ["deactivate"]
    }],
    attachEvents: [{
      type: Output,
      args: ["attach"]
    }],
    detachEvents: [{
      type: Output,
      args: ["detach"]
    }]
  });
})();
var OutletInjector = class {
  constructor(route, childContexts, parent) {
    this.route = route;
    this.childContexts = childContexts;
    this.parent = parent;
  }
  get(token, notFoundValue) {
    if (token === ActivatedRoute) {
      return this.route;
    }
    if (token === ChildrenOutletContexts) {
      return this.childContexts;
    }
    return this.parent.get(token, notFoundValue);
  }
};
var INPUT_BINDER = new InjectionToken("");
var _RoutedComponentInputBinder = class _RoutedComponentInputBinder {
  constructor() {
    this.outletDataSubscriptions = /* @__PURE__ */ new Map();
  }
  bindActivatedRouteToOutletComponent(outlet) {
    this.unsubscribeFromRouteData(outlet);
    this.subscribeToRouteData(outlet);
  }
  unsubscribeFromRouteData(outlet) {
    this.outletDataSubscriptions.get(outlet)?.unsubscribe();
    this.outletDataSubscriptions.delete(outlet);
  }
  subscribeToRouteData(outlet) {
    const {
      activatedRoute
    } = outlet;
    const dataSubscription = combineLatest([activatedRoute.queryParams, activatedRoute.params, activatedRoute.data]).pipe(switchMap(([queryParams, params, data], index) => {
      data = __spreadValues(__spreadValues(__spreadValues({}, queryParams), params), data);
      if (index === 0) {
        return of(data);
      }
      return Promise.resolve(data);
    })).subscribe((data) => {
      if (!outlet.isActivated || !outlet.activatedComponentRef || outlet.activatedRoute !== activatedRoute || activatedRoute.component === null) {
        this.unsubscribeFromRouteData(outlet);
        return;
      }
      const mirror = reflectComponentType(activatedRoute.component);
      if (!mirror) {
        this.unsubscribeFromRouteData(outlet);
        return;
      }
      for (const {
        templateName
      } of mirror.inputs) {
        outlet.activatedComponentRef.setInput(templateName, data[templateName]);
      }
    });
    this.outletDataSubscriptions.set(outlet, dataSubscription);
  }
};
_RoutedComponentInputBinder.\u0275fac = function RoutedComponentInputBinder_Factory(t) {
  return new (t || _RoutedComponentInputBinder)();
};
_RoutedComponentInputBinder.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _RoutedComponentInputBinder,
  factory: _RoutedComponentInputBinder.\u0275fac
});
var RoutedComponentInputBinder = _RoutedComponentInputBinder;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RoutedComponentInputBinder, [{
    type: Injectable
  }], null, null);
})();
function createRouterState(routeReuseStrategy, curr, prevState) {
  const root = createNode(routeReuseStrategy, curr._root, prevState ? prevState._root : void 0);
  return new RouterState(root, curr);
}
function createNode(routeReuseStrategy, curr, prevState) {
  if (prevState && routeReuseStrategy.shouldReuseRoute(curr.value, prevState.value.snapshot)) {
    const value = prevState.value;
    value._futureSnapshot = curr.value;
    const children = createOrReuseChildren(routeReuseStrategy, curr, prevState);
    return new TreeNode(value, children);
  } else {
    if (routeReuseStrategy.shouldAttach(curr.value)) {
      const detachedRouteHandle = routeReuseStrategy.retrieve(curr.value);
      if (detachedRouteHandle !== null) {
        const tree2 = detachedRouteHandle.route;
        tree2.value._futureSnapshot = curr.value;
        tree2.children = curr.children.map((c) => createNode(routeReuseStrategy, c));
        return tree2;
      }
    }
    const value = createActivatedRoute(curr.value);
    const children = curr.children.map((c) => createNode(routeReuseStrategy, c));
    return new TreeNode(value, children);
  }
}
function createOrReuseChildren(routeReuseStrategy, curr, prevState) {
  return curr.children.map((child) => {
    for (const p of prevState.children) {
      if (routeReuseStrategy.shouldReuseRoute(child.value, p.value.snapshot)) {
        return createNode(routeReuseStrategy, child, p);
      }
    }
    return createNode(routeReuseStrategy, child);
  });
}
function createActivatedRoute(c) {
  return new ActivatedRoute(new BehaviorSubject(c.url), new BehaviorSubject(c.params), new BehaviorSubject(c.queryParams), new BehaviorSubject(c.fragment), new BehaviorSubject(c.data), c.outlet, c.component, c);
}
var NAVIGATION_CANCELING_ERROR = "ngNavigationCancelingError";
function redirectingNavigationError(urlSerializer, redirect) {
  const {
    redirectTo,
    navigationBehaviorOptions
  } = isUrlTree(redirect) ? {
    redirectTo: redirect,
    navigationBehaviorOptions: void 0
  } : redirect;
  const error = navigationCancelingError(ngDevMode && `Redirecting to "${urlSerializer.serialize(redirectTo)}"`, 0, redirect);
  error.url = redirectTo;
  error.navigationBehaviorOptions = navigationBehaviorOptions;
  return error;
}
function navigationCancelingError(message, code, redirectUrl) {
  const error = new Error("NavigationCancelingError: " + (message || ""));
  error[NAVIGATION_CANCELING_ERROR] = true;
  error.cancellationCode = code;
  if (redirectUrl) {
    error.url = redirectUrl;
  }
  return error;
}
function isRedirectingNavigationCancelingError$1(error) {
  return isNavigationCancelingError$1(error) && isUrlTree(error.url);
}
function isNavigationCancelingError$1(error) {
  return error && error[NAVIGATION_CANCELING_ERROR];
}
var _\u0275EmptyOutletComponent = class _\u0275EmptyOutletComponent {
};
_\u0275EmptyOutletComponent.\u0275fac = function \u0275EmptyOutletComponent_Factory(t) {
  return new (t || _\u0275EmptyOutletComponent)();
};
_\u0275EmptyOutletComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({
  type: _\u0275EmptyOutletComponent,
  selectors: [["ng-component"]],
  standalone: true,
  features: [\u0275\u0275StandaloneFeature],
  decls: 1,
  vars: 0,
  template: function \u0275EmptyOutletComponent_Template(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275element(0, "router-outlet");
    }
  },
  dependencies: [RouterOutlet],
  encapsulation: 2
});
var \u0275EmptyOutletComponent = _\u0275EmptyOutletComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(\u0275EmptyOutletComponent, [{
    type: Component,
    args: [{
      template: `<router-outlet></router-outlet>`,
      imports: [RouterOutlet],
      standalone: true
    }]
  }], null, null);
})();
function getOrCreateRouteInjectorIfNeeded(route, currentInjector) {
  if (route.providers && !route._injector) {
    route._injector = createEnvironmentInjector(route.providers, currentInjector, `Route: ${route.path}`);
  }
  return route._injector ?? currentInjector;
}
function validateConfig(config2, parentPath = "", requireStandaloneComponents = false) {
  for (let i = 0; i < config2.length; i++) {
    const route = config2[i];
    const fullPath = getFullPath(parentPath, route);
    validateNode(route, fullPath, requireStandaloneComponents);
  }
}
function assertStandalone(fullPath, component) {
  if (component && isNgModule(component)) {
    throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}'. You are using 'loadComponent' with a module, but it must be used with standalone components. Use 'loadChildren' instead.`);
  } else if (component && !isStandalone(component)) {
    throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}'. The component must be standalone.`);
  }
}
function validateNode(route, fullPath, requireStandaloneComponents) {
  if (typeof ngDevMode === "undefined" || ngDevMode) {
    if (!route) {
      throw new RuntimeError(4014, `
      Invalid configuration of route '${fullPath}': Encountered undefined route.
      The reason might be an extra comma.

      Example:
      const routes: Routes = [
        { path: '', redirectTo: '/dashboard', pathMatch: 'full' },
        { path: 'dashboard',  component: DashboardComponent },, << two commas
        { path: 'detail/:id', component: HeroDetailComponent }
      ];
    `);
    }
    if (Array.isArray(route)) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': Array cannot be specified`);
    }
    if (!route.redirectTo && !route.component && !route.loadComponent && !route.children && !route.loadChildren && route.outlet && route.outlet !== PRIMARY_OUTLET) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': a componentless route without children or loadChildren cannot have a named outlet set`);
    }
    if (route.redirectTo && route.children) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': redirectTo and children cannot be used together`);
    }
    if (route.redirectTo && route.loadChildren) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': redirectTo and loadChildren cannot be used together`);
    }
    if (route.children && route.loadChildren) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': children and loadChildren cannot be used together`);
    }
    if (route.redirectTo && (route.component || route.loadComponent)) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': redirectTo and component/loadComponent cannot be used together`);
    }
    if (route.component && route.loadComponent) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': component and loadComponent cannot be used together`);
    }
    if (route.redirectTo && route.canActivate) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': redirectTo and canActivate cannot be used together. Redirects happen before activation so canActivate will never be executed.`);
    }
    if (route.path && route.matcher) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': path and matcher cannot be used together`);
    }
    if (route.redirectTo === void 0 && !route.component && !route.loadComponent && !route.children && !route.loadChildren) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}'. One of the following must be provided: component, loadComponent, redirectTo, children or loadChildren`);
    }
    if (route.path === void 0 && route.matcher === void 0) {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': routes must have either a path or a matcher specified`);
    }
    if (typeof route.path === "string" && route.path.charAt(0) === "/") {
      throw new RuntimeError(4014, `Invalid configuration of route '${fullPath}': path cannot start with a slash`);
    }
    if (route.path === "" && route.redirectTo !== void 0 && route.pathMatch === void 0) {
      const exp = `The default value of 'pathMatch' is 'prefix', but often the intent is to use 'full'.`;
      throw new RuntimeError(4014, `Invalid configuration of route '{path: "${fullPath}", redirectTo: "${route.redirectTo}"}': please provide 'pathMatch'. ${exp}`);
    }
    if (requireStandaloneComponents) {
      assertStandalone(fullPath, route.component);
    }
  }
  if (route.children) {
    validateConfig(route.children, fullPath, requireStandaloneComponents);
  }
}
function getFullPath(parentPath, currentRoute) {
  if (!currentRoute) {
    return parentPath;
  }
  if (!parentPath && !currentRoute.path) {
    return "";
  } else if (parentPath && !currentRoute.path) {
    return `${parentPath}/`;
  } else if (!parentPath && currentRoute.path) {
    return currentRoute.path;
  } else {
    return `${parentPath}/${currentRoute.path}`;
  }
}
function standardizeConfig(r) {
  const children = r.children && r.children.map(standardizeConfig);
  const c = children ? __spreadProps(__spreadValues({}, r), {
    children
  }) : __spreadValues({}, r);
  if (!c.component && !c.loadComponent && (children || c.loadChildren) && c.outlet && c.outlet !== PRIMARY_OUTLET) {
    c.component = \u0275EmptyOutletComponent;
  }
  return c;
}
function getOutlet(route) {
  return route.outlet || PRIMARY_OUTLET;
}
function sortByMatchingOutlets(routes2, outletName) {
  const sortedConfig = routes2.filter((r) => getOutlet(r) === outletName);
  sortedConfig.push(...routes2.filter((r) => getOutlet(r) !== outletName));
  return sortedConfig;
}
function getClosestRouteInjector(snapshot) {
  if (!snapshot)
    return null;
  if (snapshot.routeConfig?._injector) {
    return snapshot.routeConfig._injector;
  }
  for (let s = snapshot.parent; s; s = s.parent) {
    const route = s.routeConfig;
    if (route?._loadedInjector)
      return route._loadedInjector;
    if (route?._injector)
      return route._injector;
  }
  return null;
}
var warnedAboutUnsupportedInputBinding = false;
var activateRoutes = (rootContexts, routeReuseStrategy, forwardEvent, inputBindingEnabled) => map((t) => {
  new ActivateRoutes(routeReuseStrategy, t.targetRouterState, t.currentRouterState, forwardEvent, inputBindingEnabled).activate(rootContexts);
  return t;
});
var ActivateRoutes = class {
  constructor(routeReuseStrategy, futureState, currState, forwardEvent, inputBindingEnabled) {
    this.routeReuseStrategy = routeReuseStrategy;
    this.futureState = futureState;
    this.currState = currState;
    this.forwardEvent = forwardEvent;
    this.inputBindingEnabled = inputBindingEnabled;
  }
  activate(parentContexts) {
    const futureRoot = this.futureState._root;
    const currRoot = this.currState ? this.currState._root : null;
    this.deactivateChildRoutes(futureRoot, currRoot, parentContexts);
    advanceActivatedRoute(this.futureState.root);
    this.activateChildRoutes(futureRoot, currRoot, parentContexts);
  }
  // De-activate the child route that are not re-used for the future state
  deactivateChildRoutes(futureNode, currNode, contexts) {
    const children = nodeChildrenAsMap(currNode);
    futureNode.children.forEach((futureChild) => {
      const childOutletName = futureChild.value.outlet;
      this.deactivateRoutes(futureChild, children[childOutletName], contexts);
      delete children[childOutletName];
    });
    Object.values(children).forEach((v) => {
      this.deactivateRouteAndItsChildren(v, contexts);
    });
  }
  deactivateRoutes(futureNode, currNode, parentContext) {
    const future = futureNode.value;
    const curr = currNode ? currNode.value : null;
    if (future === curr) {
      if (future.component) {
        const context2 = parentContext.getContext(future.outlet);
        if (context2) {
          this.deactivateChildRoutes(futureNode, currNode, context2.children);
        }
      } else {
        this.deactivateChildRoutes(futureNode, currNode, parentContext);
      }
    } else {
      if (curr) {
        this.deactivateRouteAndItsChildren(currNode, parentContext);
      }
    }
  }
  deactivateRouteAndItsChildren(route, parentContexts) {
    if (route.value.component && this.routeReuseStrategy.shouldDetach(route.value.snapshot)) {
      this.detachAndStoreRouteSubtree(route, parentContexts);
    } else {
      this.deactivateRouteAndOutlet(route, parentContexts);
    }
  }
  detachAndStoreRouteSubtree(route, parentContexts) {
    const context2 = parentContexts.getContext(route.value.outlet);
    const contexts = context2 && route.value.component ? context2.children : parentContexts;
    const children = nodeChildrenAsMap(route);
    for (const childOutlet of Object.keys(children)) {
      this.deactivateRouteAndItsChildren(children[childOutlet], contexts);
    }
    if (context2 && context2.outlet) {
      const componentRef = context2.outlet.detach();
      const contexts2 = context2.children.onOutletDeactivated();
      this.routeReuseStrategy.store(route.value.snapshot, {
        componentRef,
        route,
        contexts: contexts2
      });
    }
  }
  deactivateRouteAndOutlet(route, parentContexts) {
    const context2 = parentContexts.getContext(route.value.outlet);
    const contexts = context2 && route.value.component ? context2.children : parentContexts;
    const children = nodeChildrenAsMap(route);
    for (const childOutlet of Object.keys(children)) {
      this.deactivateRouteAndItsChildren(children[childOutlet], contexts);
    }
    if (context2) {
      if (context2.outlet) {
        context2.outlet.deactivate();
        context2.children.onOutletDeactivated();
      }
      context2.attachRef = null;
      context2.route = null;
    }
  }
  activateChildRoutes(futureNode, currNode, contexts) {
    const children = nodeChildrenAsMap(currNode);
    futureNode.children.forEach((c) => {
      this.activateRoutes(c, children[c.value.outlet], contexts);
      this.forwardEvent(new ActivationEnd(c.value.snapshot));
    });
    if (futureNode.children.length) {
      this.forwardEvent(new ChildActivationEnd(futureNode.value.snapshot));
    }
  }
  activateRoutes(futureNode, currNode, parentContexts) {
    const future = futureNode.value;
    const curr = currNode ? currNode.value : null;
    advanceActivatedRoute(future);
    if (future === curr) {
      if (future.component) {
        const context2 = parentContexts.getOrCreateContext(future.outlet);
        this.activateChildRoutes(futureNode, currNode, context2.children);
      } else {
        this.activateChildRoutes(futureNode, currNode, parentContexts);
      }
    } else {
      if (future.component) {
        const context2 = parentContexts.getOrCreateContext(future.outlet);
        if (this.routeReuseStrategy.shouldAttach(future.snapshot)) {
          const stored = this.routeReuseStrategy.retrieve(future.snapshot);
          this.routeReuseStrategy.store(future.snapshot, null);
          context2.children.onOutletReAttached(stored.contexts);
          context2.attachRef = stored.componentRef;
          context2.route = stored.route.value;
          if (context2.outlet) {
            context2.outlet.attach(stored.componentRef, stored.route.value);
          }
          advanceActivatedRoute(stored.route.value);
          this.activateChildRoutes(futureNode, null, context2.children);
        } else {
          const injector = getClosestRouteInjector(future.snapshot);
          context2.attachRef = null;
          context2.route = future;
          context2.injector = injector;
          if (context2.outlet) {
            context2.outlet.activateWith(future, context2.injector);
          }
          this.activateChildRoutes(futureNode, null, context2.children);
        }
      } else {
        this.activateChildRoutes(futureNode, null, parentContexts);
      }
    }
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      const context2 = parentContexts.getOrCreateContext(future.outlet);
      const outlet = context2.outlet;
      if (outlet && this.inputBindingEnabled && !outlet.supportsBindingToComponentInputs && !warnedAboutUnsupportedInputBinding) {
        console.warn(`'withComponentInputBinding' feature is enabled but this application is using an outlet that may not support binding to component inputs.`);
        warnedAboutUnsupportedInputBinding = true;
      }
    }
  }
};
var CanActivate = class {
  constructor(path) {
    this.path = path;
    this.route = this.path[this.path.length - 1];
  }
};
var CanDeactivate = class {
  constructor(component, route) {
    this.component = component;
    this.route = route;
  }
};
function getAllRouteGuards(future, curr, parentContexts) {
  const futureRoot = future._root;
  const currRoot = curr ? curr._root : null;
  return getChildRouteGuards(futureRoot, currRoot, parentContexts, [futureRoot.value]);
}
function getCanActivateChild(p) {
  const canActivateChild = p.routeConfig ? p.routeConfig.canActivateChild : null;
  if (!canActivateChild || canActivateChild.length === 0)
    return null;
  return {
    node: p,
    guards: canActivateChild
  };
}
function getTokenOrFunctionIdentity(tokenOrFunction, injector) {
  const NOT_FOUND2 = Symbol();
  const result = injector.get(tokenOrFunction, NOT_FOUND2);
  if (result === NOT_FOUND2) {
    if (typeof tokenOrFunction === "function" && !isInjectable(tokenOrFunction)) {
      return tokenOrFunction;
    } else {
      return injector.get(tokenOrFunction);
    }
  }
  return result;
}
function getChildRouteGuards(futureNode, currNode, contexts, futurePath, checks = {
  canDeactivateChecks: [],
  canActivateChecks: []
}) {
  const prevChildren = nodeChildrenAsMap(currNode);
  futureNode.children.forEach((c) => {
    getRouteGuards(c, prevChildren[c.value.outlet], contexts, futurePath.concat([c.value]), checks);
    delete prevChildren[c.value.outlet];
  });
  Object.entries(prevChildren).forEach(([k, v]) => deactivateRouteAndItsChildren(v, contexts.getContext(k), checks));
  return checks;
}
function getRouteGuards(futureNode, currNode, parentContexts, futurePath, checks = {
  canDeactivateChecks: [],
  canActivateChecks: []
}) {
  const future = futureNode.value;
  const curr = currNode ? currNode.value : null;
  const context2 = parentContexts ? parentContexts.getContext(futureNode.value.outlet) : null;
  if (curr && future.routeConfig === curr.routeConfig) {
    const shouldRun = shouldRunGuardsAndResolvers(curr, future, future.routeConfig.runGuardsAndResolvers);
    if (shouldRun) {
      checks.canActivateChecks.push(new CanActivate(futurePath));
    } else {
      future.data = curr.data;
      future._resolvedData = curr._resolvedData;
    }
    if (future.component) {
      getChildRouteGuards(futureNode, currNode, context2 ? context2.children : null, futurePath, checks);
    } else {
      getChildRouteGuards(futureNode, currNode, parentContexts, futurePath, checks);
    }
    if (shouldRun && context2 && context2.outlet && context2.outlet.isActivated) {
      checks.canDeactivateChecks.push(new CanDeactivate(context2.outlet.component, curr));
    }
  } else {
    if (curr) {
      deactivateRouteAndItsChildren(currNode, context2, checks);
    }
    checks.canActivateChecks.push(new CanActivate(futurePath));
    if (future.component) {
      getChildRouteGuards(futureNode, null, context2 ? context2.children : null, futurePath, checks);
    } else {
      getChildRouteGuards(futureNode, null, parentContexts, futurePath, checks);
    }
  }
  return checks;
}
function shouldRunGuardsAndResolvers(curr, future, mode) {
  if (typeof mode === "function") {
    return mode(curr, future);
  }
  switch (mode) {
    case "pathParamsChange":
      return !equalPath(curr.url, future.url);
    case "pathParamsOrQueryParamsChange":
      return !equalPath(curr.url, future.url) || !shallowEqual(curr.queryParams, future.queryParams);
    case "always":
      return true;
    case "paramsOrQueryParamsChange":
      return !equalParamsAndUrlSegments(curr, future) || !shallowEqual(curr.queryParams, future.queryParams);
    case "paramsChange":
    default:
      return !equalParamsAndUrlSegments(curr, future);
  }
}
function deactivateRouteAndItsChildren(route, context2, checks) {
  const children = nodeChildrenAsMap(route);
  const r = route.value;
  Object.entries(children).forEach(([childName, node]) => {
    if (!r.component) {
      deactivateRouteAndItsChildren(node, context2, checks);
    } else if (context2) {
      deactivateRouteAndItsChildren(node, context2.children.getContext(childName), checks);
    } else {
      deactivateRouteAndItsChildren(node, null, checks);
    }
  });
  if (!r.component) {
    checks.canDeactivateChecks.push(new CanDeactivate(null, r));
  } else if (context2 && context2.outlet && context2.outlet.isActivated) {
    checks.canDeactivateChecks.push(new CanDeactivate(context2.outlet.component, r));
  } else {
    checks.canDeactivateChecks.push(new CanDeactivate(null, r));
  }
}
function isFunction2(v) {
  return typeof v === "function";
}
function isBoolean(v) {
  return typeof v === "boolean";
}
function isCanLoad(guard) {
  return guard && isFunction2(guard.canLoad);
}
function isCanActivate(guard) {
  return guard && isFunction2(guard.canActivate);
}
function isCanActivateChild(guard) {
  return guard && isFunction2(guard.canActivateChild);
}
function isCanDeactivate(guard) {
  return guard && isFunction2(guard.canDeactivate);
}
function isCanMatch(guard) {
  return guard && isFunction2(guard.canMatch);
}
function isEmptyError(e) {
  return e instanceof EmptyError || e?.name === "EmptyError";
}
var INITIAL_VALUE = /* @__PURE__ */ Symbol("INITIAL_VALUE");
function prioritizedGuardValue() {
  return switchMap((obs) => {
    return combineLatest(obs.map((o) => o.pipe(take(1), startWith(INITIAL_VALUE)))).pipe(map((results) => {
      for (const result of results) {
        if (result === true) {
          continue;
        } else if (result === INITIAL_VALUE) {
          return INITIAL_VALUE;
        } else if (result === false || result instanceof UrlTree) {
          return result;
        }
      }
      return true;
    }), filter((item) => item !== INITIAL_VALUE), take(1));
  });
}
function checkGuards(injector, forwardEvent) {
  return mergeMap((t) => {
    const {
      targetSnapshot,
      currentSnapshot,
      guards: {
        canActivateChecks,
        canDeactivateChecks
      }
    } = t;
    if (canDeactivateChecks.length === 0 && canActivateChecks.length === 0) {
      return of(__spreadProps(__spreadValues({}, t), {
        guardsResult: true
      }));
    }
    return runCanDeactivateChecks(canDeactivateChecks, targetSnapshot, currentSnapshot, injector).pipe(mergeMap((canDeactivate) => {
      return canDeactivate && isBoolean(canDeactivate) ? runCanActivateChecks(targetSnapshot, canActivateChecks, injector, forwardEvent) : of(canDeactivate);
    }), map((guardsResult) => __spreadProps(__spreadValues({}, t), {
      guardsResult
    })));
  });
}
function runCanDeactivateChecks(checks, futureRSS, currRSS, injector) {
  return from(checks).pipe(mergeMap((check) => runCanDeactivate(check.component, check.route, currRSS, futureRSS, injector)), first((result) => {
    return result !== true;
  }, true));
}
function runCanActivateChecks(futureSnapshot, checks, injector, forwardEvent) {
  return from(checks).pipe(concatMap((check) => {
    return concat(fireChildActivationStart(check.route.parent, forwardEvent), fireActivationStart(check.route, forwardEvent), runCanActivateChild(futureSnapshot, check.path, injector), runCanActivate(futureSnapshot, check.route, injector));
  }), first((result) => {
    return result !== true;
  }, true));
}
function fireActivationStart(snapshot, forwardEvent) {
  if (snapshot !== null && forwardEvent) {
    forwardEvent(new ActivationStart(snapshot));
  }
  return of(true);
}
function fireChildActivationStart(snapshot, forwardEvent) {
  if (snapshot !== null && forwardEvent) {
    forwardEvent(new ChildActivationStart(snapshot));
  }
  return of(true);
}
function runCanActivate(futureRSS, futureARS, injector) {
  const canActivate = futureARS.routeConfig ? futureARS.routeConfig.canActivate : null;
  if (!canActivate || canActivate.length === 0)
    return of(true);
  const canActivateObservables = canActivate.map((canActivate2) => {
    return defer(() => {
      const closestInjector = getClosestRouteInjector(futureARS) ?? injector;
      const guard = getTokenOrFunctionIdentity(canActivate2, closestInjector);
      const guardVal = isCanActivate(guard) ? guard.canActivate(futureARS, futureRSS) : runInInjectionContext(closestInjector, () => guard(futureARS, futureRSS));
      return wrapIntoObservable(guardVal).pipe(first());
    });
  });
  return of(canActivateObservables).pipe(prioritizedGuardValue());
}
function runCanActivateChild(futureRSS, path, injector) {
  const futureARS = path[path.length - 1];
  const canActivateChildGuards = path.slice(0, path.length - 1).reverse().map((p) => getCanActivateChild(p)).filter((_) => _ !== null);
  const canActivateChildGuardsMapped = canActivateChildGuards.map((d) => {
    return defer(() => {
      const guardsMapped = d.guards.map((canActivateChild) => {
        const closestInjector = getClosestRouteInjector(d.node) ?? injector;
        const guard = getTokenOrFunctionIdentity(canActivateChild, closestInjector);
        const guardVal = isCanActivateChild(guard) ? guard.canActivateChild(futureARS, futureRSS) : runInInjectionContext(closestInjector, () => guard(futureARS, futureRSS));
        return wrapIntoObservable(guardVal).pipe(first());
      });
      return of(guardsMapped).pipe(prioritizedGuardValue());
    });
  });
  return of(canActivateChildGuardsMapped).pipe(prioritizedGuardValue());
}
function runCanDeactivate(component, currARS, currRSS, futureRSS, injector) {
  const canDeactivate = currARS && currARS.routeConfig ? currARS.routeConfig.canDeactivate : null;
  if (!canDeactivate || canDeactivate.length === 0)
    return of(true);
  const canDeactivateObservables = canDeactivate.map((c) => {
    const closestInjector = getClosestRouteInjector(currARS) ?? injector;
    const guard = getTokenOrFunctionIdentity(c, closestInjector);
    const guardVal = isCanDeactivate(guard) ? guard.canDeactivate(component, currARS, currRSS, futureRSS) : runInInjectionContext(closestInjector, () => guard(component, currARS, currRSS, futureRSS));
    return wrapIntoObservable(guardVal).pipe(first());
  });
  return of(canDeactivateObservables).pipe(prioritizedGuardValue());
}
function runCanLoadGuards(injector, route, segments, urlSerializer) {
  const canLoad = route.canLoad;
  if (canLoad === void 0 || canLoad.length === 0) {
    return of(true);
  }
  const canLoadObservables = canLoad.map((injectionToken) => {
    const guard = getTokenOrFunctionIdentity(injectionToken, injector);
    const guardVal = isCanLoad(guard) ? guard.canLoad(route, segments) : runInInjectionContext(injector, () => guard(route, segments));
    return wrapIntoObservable(guardVal);
  });
  return of(canLoadObservables).pipe(prioritizedGuardValue(), redirectIfUrlTree(urlSerializer));
}
function redirectIfUrlTree(urlSerializer) {
  return pipe(tap((result) => {
    if (!isUrlTree(result))
      return;
    throw redirectingNavigationError(urlSerializer, result);
  }), map((result) => result === true));
}
function runCanMatchGuards(injector, route, segments, urlSerializer) {
  const canMatch = route.canMatch;
  if (!canMatch || canMatch.length === 0)
    return of(true);
  const canMatchObservables = canMatch.map((injectionToken) => {
    const guard = getTokenOrFunctionIdentity(injectionToken, injector);
    const guardVal = isCanMatch(guard) ? guard.canMatch(route, segments) : runInInjectionContext(injector, () => guard(route, segments));
    return wrapIntoObservable(guardVal);
  });
  return of(canMatchObservables).pipe(prioritizedGuardValue(), redirectIfUrlTree(urlSerializer));
}
var NoMatch = class {
  constructor(segmentGroup) {
    this.segmentGroup = segmentGroup || null;
  }
};
var AbsoluteRedirect = class extends Error {
  constructor(urlTree) {
    super();
    this.urlTree = urlTree;
  }
};
function noMatch$1(segmentGroup) {
  return throwError(new NoMatch(segmentGroup));
}
function namedOutletsRedirect(redirectTo) {
  return throwError(new RuntimeError(4e3, (typeof ngDevMode === "undefined" || ngDevMode) && `Only absolute redirects can have named outlets. redirectTo: '${redirectTo}'`));
}
function canLoadFails(route) {
  return throwError(navigationCancelingError(
    (typeof ngDevMode === "undefined" || ngDevMode) && `Cannot load children because the guard of the route "path: '${route.path}'" returned false`,
    3
    /* NavigationCancellationCode.GuardRejected */
  ));
}
var ApplyRedirects = class {
  constructor(urlSerializer, urlTree) {
    this.urlSerializer = urlSerializer;
    this.urlTree = urlTree;
  }
  lineralizeSegments(route, urlTree) {
    let res = [];
    let c = urlTree.root;
    while (true) {
      res = res.concat(c.segments);
      if (c.numberOfChildren === 0) {
        return of(res);
      }
      if (c.numberOfChildren > 1 || !c.children[PRIMARY_OUTLET]) {
        return namedOutletsRedirect(route.redirectTo);
      }
      c = c.children[PRIMARY_OUTLET];
    }
  }
  applyRedirectCommands(segments, redirectTo, posParams) {
    const newTree = this.applyRedirectCreateUrlTree(redirectTo, this.urlSerializer.parse(redirectTo), segments, posParams);
    if (redirectTo.startsWith("/")) {
      throw new AbsoluteRedirect(newTree);
    }
    return newTree;
  }
  applyRedirectCreateUrlTree(redirectTo, urlTree, segments, posParams) {
    const newRoot = this.createSegmentGroup(redirectTo, urlTree.root, segments, posParams);
    return new UrlTree(newRoot, this.createQueryParams(urlTree.queryParams, this.urlTree.queryParams), urlTree.fragment);
  }
  createQueryParams(redirectToParams, actualParams) {
    const res = {};
    Object.entries(redirectToParams).forEach(([k, v]) => {
      const copySourceValue = typeof v === "string" && v.startsWith(":");
      if (copySourceValue) {
        const sourceName = v.substring(1);
        res[k] = actualParams[sourceName];
      } else {
        res[k] = v;
      }
    });
    return res;
  }
  createSegmentGroup(redirectTo, group2, segments, posParams) {
    const updatedSegments = this.createSegments(redirectTo, group2.segments, segments, posParams);
    let children = {};
    Object.entries(group2.children).forEach(([name, child]) => {
      children[name] = this.createSegmentGroup(redirectTo, child, segments, posParams);
    });
    return new UrlSegmentGroup(updatedSegments, children);
  }
  createSegments(redirectTo, redirectToSegments, actualSegments, posParams) {
    return redirectToSegments.map((s) => s.path.startsWith(":") ? this.findPosParam(redirectTo, s, posParams) : this.findOrReturn(s, actualSegments));
  }
  findPosParam(redirectTo, redirectToUrlSegment, posParams) {
    const pos = posParams[redirectToUrlSegment.path.substring(1)];
    if (!pos)
      throw new RuntimeError(4001, (typeof ngDevMode === "undefined" || ngDevMode) && `Cannot redirect to '${redirectTo}'. Cannot find '${redirectToUrlSegment.path}'.`);
    return pos;
  }
  findOrReturn(redirectToUrlSegment, actualSegments) {
    let idx = 0;
    for (const s of actualSegments) {
      if (s.path === redirectToUrlSegment.path) {
        actualSegments.splice(idx);
        return s;
      }
      idx++;
    }
    return redirectToUrlSegment;
  }
};
var noMatch = {
  matched: false,
  consumedSegments: [],
  remainingSegments: [],
  parameters: {},
  positionalParamSegments: {}
};
function matchWithChecks(segmentGroup, route, segments, injector, urlSerializer) {
  const result = match(segmentGroup, route, segments);
  if (!result.matched) {
    return of(result);
  }
  injector = getOrCreateRouteInjectorIfNeeded(route, injector);
  return runCanMatchGuards(injector, route, segments, urlSerializer).pipe(map((v) => v === true ? result : __spreadValues({}, noMatch)));
}
function match(segmentGroup, route, segments) {
  if (route.path === "**") {
    return createWildcardMatchResult(segments);
  }
  if (route.path === "") {
    if (route.pathMatch === "full" && (segmentGroup.hasChildren() || segments.length > 0)) {
      return __spreadValues({}, noMatch);
    }
    return {
      matched: true,
      consumedSegments: [],
      remainingSegments: segments,
      parameters: {},
      positionalParamSegments: {}
    };
  }
  const matcher = route.matcher || defaultUrlMatcher;
  const res = matcher(segments, segmentGroup, route);
  if (!res)
    return __spreadValues({}, noMatch);
  const posParams = {};
  Object.entries(res.posParams ?? {}).forEach(([k, v]) => {
    posParams[k] = v.path;
  });
  const parameters = res.consumed.length > 0 ? __spreadValues(__spreadValues({}, posParams), res.consumed[res.consumed.length - 1].parameters) : posParams;
  return {
    matched: true,
    consumedSegments: res.consumed,
    remainingSegments: segments.slice(res.consumed.length),
    // TODO(atscott): investigate combining parameters and positionalParamSegments
    parameters,
    positionalParamSegments: res.posParams ?? {}
  };
}
function createWildcardMatchResult(segments) {
  return {
    matched: true,
    parameters: segments.length > 0 ? last3(segments).parameters : {},
    consumedSegments: segments,
    remainingSegments: [],
    positionalParamSegments: {}
  };
}
function split(segmentGroup, consumedSegments, slicedSegments, config2) {
  if (slicedSegments.length > 0 && containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, config2)) {
    const s2 = new UrlSegmentGroup(consumedSegments, createChildrenForEmptyPaths(config2, new UrlSegmentGroup(slicedSegments, segmentGroup.children)));
    return {
      segmentGroup: s2,
      slicedSegments: []
    };
  }
  if (slicedSegments.length === 0 && containsEmptyPathMatches(segmentGroup, slicedSegments, config2)) {
    const s2 = new UrlSegmentGroup(segmentGroup.segments, addEmptyPathsToChildrenIfNeeded(segmentGroup, consumedSegments, slicedSegments, config2, segmentGroup.children));
    return {
      segmentGroup: s2,
      slicedSegments
    };
  }
  const s = new UrlSegmentGroup(segmentGroup.segments, segmentGroup.children);
  return {
    segmentGroup: s,
    slicedSegments
  };
}
function addEmptyPathsToChildrenIfNeeded(segmentGroup, consumedSegments, slicedSegments, routes2, children) {
  const res = {};
  for (const r of routes2) {
    if (emptyPathMatch(segmentGroup, slicedSegments, r) && !children[getOutlet(r)]) {
      const s = new UrlSegmentGroup([], {});
      res[getOutlet(r)] = s;
    }
  }
  return __spreadValues(__spreadValues({}, children), res);
}
function createChildrenForEmptyPaths(routes2, primarySegment) {
  const res = {};
  res[PRIMARY_OUTLET] = primarySegment;
  for (const r of routes2) {
    if (r.path === "" && getOutlet(r) !== PRIMARY_OUTLET) {
      const s = new UrlSegmentGroup([], {});
      res[getOutlet(r)] = s;
    }
  }
  return res;
}
function containsEmptyPathMatchesWithNamedOutlets(segmentGroup, slicedSegments, routes2) {
  return routes2.some((r) => emptyPathMatch(segmentGroup, slicedSegments, r) && getOutlet(r) !== PRIMARY_OUTLET);
}
function containsEmptyPathMatches(segmentGroup, slicedSegments, routes2) {
  return routes2.some((r) => emptyPathMatch(segmentGroup, slicedSegments, r));
}
function emptyPathMatch(segmentGroup, slicedSegments, r) {
  if ((segmentGroup.hasChildren() || slicedSegments.length > 0) && r.pathMatch === "full") {
    return false;
  }
  return r.path === "";
}
function isImmediateMatch(route, rawSegment, segments, outlet) {
  if (getOutlet(route) !== outlet && (outlet === PRIMARY_OUTLET || !emptyPathMatch(rawSegment, segments, route))) {
    return false;
  }
  return match(rawSegment, route, segments).matched;
}
function noLeftoversInUrl(segmentGroup, segments, outlet) {
  return segments.length === 0 && !segmentGroup.children[outlet];
}
var NoLeftoversInUrl = class {
};
function recognize$1(injector, configLoader, rootComponentType, config2, urlTree, urlSerializer, paramsInheritanceStrategy = "emptyOnly") {
  return new Recognizer(injector, configLoader, rootComponentType, config2, urlTree, paramsInheritanceStrategy, urlSerializer).recognize();
}
var MAX_ALLOWED_REDIRECTS = 31;
var Recognizer = class {
  constructor(injector, configLoader, rootComponentType, config2, urlTree, paramsInheritanceStrategy, urlSerializer) {
    this.injector = injector;
    this.configLoader = configLoader;
    this.rootComponentType = rootComponentType;
    this.config = config2;
    this.urlTree = urlTree;
    this.paramsInheritanceStrategy = paramsInheritanceStrategy;
    this.urlSerializer = urlSerializer;
    this.applyRedirects = new ApplyRedirects(this.urlSerializer, this.urlTree);
    this.absoluteRedirectCount = 0;
    this.allowRedirects = true;
  }
  noMatchError(e) {
    return new RuntimeError(4002, typeof ngDevMode === "undefined" || ngDevMode ? `Cannot match any routes. URL Segment: '${e.segmentGroup}'` : `'${e.segmentGroup}'`);
  }
  recognize() {
    const rootSegmentGroup = split(this.urlTree.root, [], [], this.config).segmentGroup;
    return this.match(rootSegmentGroup).pipe(map((children) => {
      const root = new ActivatedRouteSnapshot([], Object.freeze({}), Object.freeze(__spreadValues({}, this.urlTree.queryParams)), this.urlTree.fragment, {}, PRIMARY_OUTLET, this.rootComponentType, null, {});
      const rootNode = new TreeNode(root, children);
      const routeState = new RouterStateSnapshot("", rootNode);
      const tree2 = createUrlTreeFromSnapshot(root, [], this.urlTree.queryParams, this.urlTree.fragment);
      tree2.queryParams = this.urlTree.queryParams;
      routeState.url = this.urlSerializer.serialize(tree2);
      this.inheritParamsAndData(routeState._root, null);
      return {
        state: routeState,
        tree: tree2
      };
    }));
  }
  match(rootSegmentGroup) {
    const expanded$ = this.processSegmentGroup(this.injector, this.config, rootSegmentGroup, PRIMARY_OUTLET);
    return expanded$.pipe(catchError((e) => {
      if (e instanceof AbsoluteRedirect) {
        this.urlTree = e.urlTree;
        return this.match(e.urlTree.root);
      }
      if (e instanceof NoMatch) {
        throw this.noMatchError(e);
      }
      throw e;
    }));
  }
  inheritParamsAndData(routeNode, parent) {
    const route = routeNode.value;
    const i = getInherited(route, parent, this.paramsInheritanceStrategy);
    route.params = Object.freeze(i.params);
    route.data = Object.freeze(i.data);
    routeNode.children.forEach((n) => this.inheritParamsAndData(n, route));
  }
  processSegmentGroup(injector, config2, segmentGroup, outlet) {
    if (segmentGroup.segments.length === 0 && segmentGroup.hasChildren()) {
      return this.processChildren(injector, config2, segmentGroup);
    }
    return this.processSegment(injector, config2, segmentGroup, segmentGroup.segments, outlet, true).pipe(map((child) => child instanceof TreeNode ? [child] : []));
  }
  /**
   * Matches every child outlet in the `segmentGroup` to a `Route` in the config. Returns `null` if
   * we cannot find a match for _any_ of the children.
   *
   * @param config - The `Routes` to match against
   * @param segmentGroup - The `UrlSegmentGroup` whose children need to be matched against the
   *     config.
   */
  processChildren(injector, config2, segmentGroup) {
    const childOutlets = [];
    for (const child of Object.keys(segmentGroup.children)) {
      if (child === "primary") {
        childOutlets.unshift(child);
      } else {
        childOutlets.push(child);
      }
    }
    return from(childOutlets).pipe(concatMap((childOutlet) => {
      const child = segmentGroup.children[childOutlet];
      const sortedConfig = sortByMatchingOutlets(config2, childOutlet);
      return this.processSegmentGroup(injector, sortedConfig, child, childOutlet);
    }), scan((children, outletChildren) => {
      children.push(...outletChildren);
      return children;
    }), defaultIfEmpty(null), last2(), mergeMap((children) => {
      if (children === null)
        return noMatch$1(segmentGroup);
      const mergedChildren = mergeEmptyPathMatches(children);
      if (typeof ngDevMode === "undefined" || ngDevMode) {
        checkOutletNameUniqueness(mergedChildren);
      }
      sortActivatedRouteSnapshots(mergedChildren);
      return of(mergedChildren);
    }));
  }
  processSegment(injector, routes2, segmentGroup, segments, outlet, allowRedirects) {
    return from(routes2).pipe(concatMap((r) => {
      return this.processSegmentAgainstRoute(r._injector ?? injector, routes2, r, segmentGroup, segments, outlet, allowRedirects).pipe(catchError((e) => {
        if (e instanceof NoMatch) {
          return of(null);
        }
        throw e;
      }));
    }), first((x) => !!x), catchError((e) => {
      if (isEmptyError(e)) {
        if (noLeftoversInUrl(segmentGroup, segments, outlet)) {
          return of(new NoLeftoversInUrl());
        }
        return noMatch$1(segmentGroup);
      }
      throw e;
    }));
  }
  processSegmentAgainstRoute(injector, routes2, route, rawSegment, segments, outlet, allowRedirects) {
    if (!isImmediateMatch(route, rawSegment, segments, outlet))
      return noMatch$1(rawSegment);
    if (route.redirectTo === void 0) {
      return this.matchSegmentAgainstRoute(injector, rawSegment, route, segments, outlet);
    }
    if (this.allowRedirects && allowRedirects) {
      return this.expandSegmentAgainstRouteUsingRedirect(injector, rawSegment, routes2, route, segments, outlet);
    }
    return noMatch$1(rawSegment);
  }
  expandSegmentAgainstRouteUsingRedirect(injector, segmentGroup, routes2, route, segments, outlet) {
    const {
      matched,
      consumedSegments,
      positionalParamSegments,
      remainingSegments
    } = match(segmentGroup, route, segments);
    if (!matched)
      return noMatch$1(segmentGroup);
    if (route.redirectTo.startsWith("/")) {
      this.absoluteRedirectCount++;
      if (this.absoluteRedirectCount > MAX_ALLOWED_REDIRECTS) {
        if (ngDevMode) {
          throw new RuntimeError(4016, `Detected possible infinite redirect when redirecting from '${this.urlTree}' to '${route.redirectTo}'.
This is currently a dev mode only error but will become a call stack size exceeded error in production in a future major version.`);
        }
        this.allowRedirects = false;
      }
    }
    const newTree = this.applyRedirects.applyRedirectCommands(consumedSegments, route.redirectTo, positionalParamSegments);
    return this.applyRedirects.lineralizeSegments(route, newTree).pipe(mergeMap((newSegments) => {
      return this.processSegment(injector, routes2, segmentGroup, newSegments.concat(remainingSegments), outlet, false);
    }));
  }
  matchSegmentAgainstRoute(injector, rawSegment, route, segments, outlet) {
    const matchResult = matchWithChecks(rawSegment, route, segments, injector, this.urlSerializer);
    if (route.path === "**") {
      rawSegment.children = {};
    }
    return matchResult.pipe(switchMap((result) => {
      if (!result.matched) {
        return noMatch$1(rawSegment);
      }
      injector = route._injector ?? injector;
      return this.getChildConfig(injector, route, segments).pipe(switchMap(({
        routes: childConfig
      }) => {
        const childInjector = route._loadedInjector ?? injector;
        const {
          consumedSegments,
          remainingSegments,
          parameters
        } = result;
        const snapshot = new ActivatedRouteSnapshot(consumedSegments, parameters, Object.freeze(__spreadValues({}, this.urlTree.queryParams)), this.urlTree.fragment, getData(route), getOutlet(route), route.component ?? route._loadedComponent ?? null, route, getResolve(route));
        const {
          segmentGroup,
          slicedSegments
        } = split(rawSegment, consumedSegments, remainingSegments, childConfig);
        if (slicedSegments.length === 0 && segmentGroup.hasChildren()) {
          return this.processChildren(childInjector, childConfig, segmentGroup).pipe(map((children) => {
            if (children === null) {
              return null;
            }
            return new TreeNode(snapshot, children);
          }));
        }
        if (childConfig.length === 0 && slicedSegments.length === 0) {
          return of(new TreeNode(snapshot, []));
        }
        const matchedOnOutlet = getOutlet(route) === outlet;
        return this.processSegment(childInjector, childConfig, segmentGroup, slicedSegments, matchedOnOutlet ? PRIMARY_OUTLET : outlet, true).pipe(map((child) => {
          return new TreeNode(snapshot, child instanceof TreeNode ? [child] : []);
        }));
      }));
    }));
  }
  getChildConfig(injector, route, segments) {
    if (route.children) {
      return of({
        routes: route.children,
        injector
      });
    }
    if (route.loadChildren) {
      if (route._loadedRoutes !== void 0) {
        return of({
          routes: route._loadedRoutes,
          injector: route._loadedInjector
        });
      }
      return runCanLoadGuards(injector, route, segments, this.urlSerializer).pipe(mergeMap((shouldLoadResult) => {
        if (shouldLoadResult) {
          return this.configLoader.loadChildren(injector, route).pipe(tap((cfg) => {
            route._loadedRoutes = cfg.routes;
            route._loadedInjector = cfg.injector;
          }));
        }
        return canLoadFails(route);
      }));
    }
    return of({
      routes: [],
      injector
    });
  }
};
function sortActivatedRouteSnapshots(nodes) {
  nodes.sort((a, b) => {
    if (a.value.outlet === PRIMARY_OUTLET)
      return -1;
    if (b.value.outlet === PRIMARY_OUTLET)
      return 1;
    return a.value.outlet.localeCompare(b.value.outlet);
  });
}
function hasEmptyPathConfig(node) {
  const config2 = node.value.routeConfig;
  return config2 && config2.path === "";
}
function mergeEmptyPathMatches(nodes) {
  const result = [];
  const mergedNodes = /* @__PURE__ */ new Set();
  for (const node of nodes) {
    if (!hasEmptyPathConfig(node)) {
      result.push(node);
      continue;
    }
    const duplicateEmptyPathNode = result.find((resultNode) => node.value.routeConfig === resultNode.value.routeConfig);
    if (duplicateEmptyPathNode !== void 0) {
      duplicateEmptyPathNode.children.push(...node.children);
      mergedNodes.add(duplicateEmptyPathNode);
    } else {
      result.push(node);
    }
  }
  for (const mergedNode of mergedNodes) {
    const mergedChildren = mergeEmptyPathMatches(mergedNode.children);
    result.push(new TreeNode(mergedNode.value, mergedChildren));
  }
  return result.filter((n) => !mergedNodes.has(n));
}
function checkOutletNameUniqueness(nodes) {
  const names = {};
  nodes.forEach((n) => {
    const routeWithSameOutletName = names[n.value.outlet];
    if (routeWithSameOutletName) {
      const p = routeWithSameOutletName.url.map((s) => s.toString()).join("/");
      const c = n.value.url.map((s) => s.toString()).join("/");
      throw new RuntimeError(4006, (typeof ngDevMode === "undefined" || ngDevMode) && `Two segments cannot have the same outlet name: '${p}' and '${c}'.`);
    }
    names[n.value.outlet] = n.value;
  });
}
function getData(route) {
  return route.data || {};
}
function getResolve(route) {
  return route.resolve || {};
}
function recognize(injector, configLoader, rootComponentType, config2, serializer, paramsInheritanceStrategy) {
  return mergeMap((t) => recognize$1(injector, configLoader, rootComponentType, config2, t.extractedUrl, serializer, paramsInheritanceStrategy).pipe(map(({
    state: targetSnapshot,
    tree: urlAfterRedirects
  }) => {
    return __spreadProps(__spreadValues({}, t), {
      targetSnapshot,
      urlAfterRedirects
    });
  })));
}
function resolveData(paramsInheritanceStrategy, injector) {
  return mergeMap((t) => {
    const {
      targetSnapshot,
      guards: {
        canActivateChecks
      }
    } = t;
    if (!canActivateChecks.length) {
      return of(t);
    }
    const routesWithResolversToRun = new Set(canActivateChecks.map((check) => check.route));
    const routesNeedingDataUpdates = /* @__PURE__ */ new Set();
    for (const route of routesWithResolversToRun) {
      if (routesNeedingDataUpdates.has(route)) {
        continue;
      }
      for (const newRoute of flattenRouteTree(route)) {
        routesNeedingDataUpdates.add(newRoute);
      }
    }
    let routesProcessed = 0;
    return from(routesNeedingDataUpdates).pipe(concatMap((route) => {
      if (routesWithResolversToRun.has(route)) {
        return runResolve(route, targetSnapshot, paramsInheritanceStrategy, injector);
      } else {
        route.data = getInherited(route, route.parent, paramsInheritanceStrategy).resolve;
        return of(void 0);
      }
    }), tap(() => routesProcessed++), takeLast(1), mergeMap((_) => routesProcessed === routesNeedingDataUpdates.size ? of(t) : EMPTY));
  });
}
function flattenRouteTree(route) {
  const descendants = route.children.map((child) => flattenRouteTree(child)).flat();
  return [route, ...descendants];
}
function runResolve(futureARS, futureRSS, paramsInheritanceStrategy, injector) {
  const config2 = futureARS.routeConfig;
  const resolve = futureARS._resolve;
  if (config2?.title !== void 0 && !hasStaticTitle(config2)) {
    resolve[RouteTitleKey] = config2.title;
  }
  return resolveNode(resolve, futureARS, futureRSS, injector).pipe(map((resolvedData) => {
    futureARS._resolvedData = resolvedData;
    futureARS.data = getInherited(futureARS, futureARS.parent, paramsInheritanceStrategy).resolve;
    return null;
  }));
}
function resolveNode(resolve, futureARS, futureRSS, injector) {
  const keys = getDataKeys(resolve);
  if (keys.length === 0) {
    return of({});
  }
  const data = {};
  return from(keys).pipe(mergeMap((key) => getResolver(resolve[key], futureARS, futureRSS, injector).pipe(first(), tap((value) => {
    data[key] = value;
  }))), takeLast(1), mapTo(data), catchError((e) => isEmptyError(e) ? EMPTY : throwError(e)));
}
function getResolver(injectionToken, futureARS, futureRSS, injector) {
  const closestInjector = getClosestRouteInjector(futureARS) ?? injector;
  const resolver = getTokenOrFunctionIdentity(injectionToken, closestInjector);
  const resolverValue = resolver.resolve ? resolver.resolve(futureARS, futureRSS) : runInInjectionContext(closestInjector, () => resolver(futureARS, futureRSS));
  return wrapIntoObservable(resolverValue);
}
function switchTap(next) {
  return switchMap((v) => {
    const nextResult = next(v);
    if (nextResult) {
      return from(nextResult).pipe(map(() => v));
    }
    return of(v);
  });
}
var _TitleStrategy = class _TitleStrategy {
  /**
   * @returns The `title` of the deepest primary route.
   */
  buildTitle(snapshot) {
    let pageTitle;
    let route = snapshot.root;
    while (route !== void 0) {
      pageTitle = this.getResolvedTitleForRoute(route) ?? pageTitle;
      route = route.children.find((child) => child.outlet === PRIMARY_OUTLET);
    }
    return pageTitle;
  }
  /**
   * Given an `ActivatedRouteSnapshot`, returns the final value of the
   * `Route.title` property, which can either be a static string or a resolved value.
   */
  getResolvedTitleForRoute(snapshot) {
    return snapshot.data[RouteTitleKey];
  }
};
_TitleStrategy.\u0275fac = function TitleStrategy_Factory(t) {
  return new (t || _TitleStrategy)();
};
_TitleStrategy.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _TitleStrategy,
  factory: () => (() => inject(DefaultTitleStrategy))(),
  providedIn: "root"
});
var TitleStrategy = _TitleStrategy;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(TitleStrategy, [{
    type: Injectable,
    args: [{
      providedIn: "root",
      useFactory: () => inject(DefaultTitleStrategy)
    }]
  }], null, null);
})();
var _DefaultTitleStrategy = class _DefaultTitleStrategy extends TitleStrategy {
  constructor(title) {
    super();
    this.title = title;
  }
  /**
   * Sets the title of the browser to the given value.
   *
   * @param title The `pageTitle` from the deepest primary route.
   */
  updateTitle(snapshot) {
    const title = this.buildTitle(snapshot);
    if (title !== void 0) {
      this.title.setTitle(title);
    }
  }
};
_DefaultTitleStrategy.\u0275fac = function DefaultTitleStrategy_Factory(t) {
  return new (t || _DefaultTitleStrategy)(\u0275\u0275inject(Title));
};
_DefaultTitleStrategy.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _DefaultTitleStrategy,
  factory: _DefaultTitleStrategy.\u0275fac,
  providedIn: "root"
});
var DefaultTitleStrategy = _DefaultTitleStrategy;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DefaultTitleStrategy, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: Title
  }], null);
})();
var ROUTER_CONFIGURATION = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "router config" : "", {
  providedIn: "root",
  factory: () => ({})
});
var ROUTES = new InjectionToken("ROUTES");
var _RouterConfigLoader = class _RouterConfigLoader {
  constructor() {
    this.componentLoaders = /* @__PURE__ */ new WeakMap();
    this.childrenLoaders = /* @__PURE__ */ new WeakMap();
    this.compiler = inject(Compiler);
  }
  loadComponent(route) {
    if (this.componentLoaders.get(route)) {
      return this.componentLoaders.get(route);
    } else if (route._loadedComponent) {
      return of(route._loadedComponent);
    }
    if (this.onLoadStartListener) {
      this.onLoadStartListener(route);
    }
    const loadRunner = wrapIntoObservable(route.loadComponent()).pipe(map(maybeUnwrapDefaultExport), tap((component) => {
      if (this.onLoadEndListener) {
        this.onLoadEndListener(route);
      }
      (typeof ngDevMode === "undefined" || ngDevMode) && assertStandalone(route.path ?? "", component);
      route._loadedComponent = component;
    }), finalize(() => {
      this.componentLoaders.delete(route);
    }));
    const loader = new ConnectableObservable(loadRunner, () => new Subject()).pipe(refCount());
    this.componentLoaders.set(route, loader);
    return loader;
  }
  loadChildren(parentInjector, route) {
    if (this.childrenLoaders.get(route)) {
      return this.childrenLoaders.get(route);
    } else if (route._loadedRoutes) {
      return of({
        routes: route._loadedRoutes,
        injector: route._loadedInjector
      });
    }
    if (this.onLoadStartListener) {
      this.onLoadStartListener(route);
    }
    const moduleFactoryOrRoutes$ = loadChildren(route, this.compiler, parentInjector, this.onLoadEndListener);
    const loadRunner = moduleFactoryOrRoutes$.pipe(finalize(() => {
      this.childrenLoaders.delete(route);
    }));
    const loader = new ConnectableObservable(loadRunner, () => new Subject()).pipe(refCount());
    this.childrenLoaders.set(route, loader);
    return loader;
  }
};
_RouterConfigLoader.\u0275fac = function RouterConfigLoader_Factory(t) {
  return new (t || _RouterConfigLoader)();
};
_RouterConfigLoader.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _RouterConfigLoader,
  factory: _RouterConfigLoader.\u0275fac,
  providedIn: "root"
});
var RouterConfigLoader = _RouterConfigLoader;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RouterConfigLoader, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
function loadChildren(route, compiler, parentInjector, onLoadEndListener) {
  return wrapIntoObservable(route.loadChildren()).pipe(map(maybeUnwrapDefaultExport), mergeMap((t) => {
    if (t instanceof NgModuleFactory$1 || Array.isArray(t)) {
      return of(t);
    } else {
      return from(compiler.compileModuleAsync(t));
    }
  }), map((factoryOrRoutes) => {
    if (onLoadEndListener) {
      onLoadEndListener(route);
    }
    let injector;
    let rawRoutes;
    let requireStandaloneComponents = false;
    if (Array.isArray(factoryOrRoutes)) {
      rawRoutes = factoryOrRoutes;
      requireStandaloneComponents = true;
    } else {
      injector = factoryOrRoutes.create(parentInjector).injector;
      rawRoutes = injector.get(ROUTES, [], {
        optional: true,
        self: true
      }).flat();
    }
    const routes2 = rawRoutes.map(standardizeConfig);
    (typeof ngDevMode === "undefined" || ngDevMode) && validateConfig(routes2, route.path, requireStandaloneComponents);
    return {
      routes: routes2,
      injector
    };
  }));
}
function isWrappedDefaultExport(value) {
  return value && typeof value === "object" && "default" in value;
}
function maybeUnwrapDefaultExport(input) {
  return isWrappedDefaultExport(input) ? input["default"] : input;
}
var _UrlHandlingStrategy = class _UrlHandlingStrategy {
};
_UrlHandlingStrategy.\u0275fac = function UrlHandlingStrategy_Factory(t) {
  return new (t || _UrlHandlingStrategy)();
};
_UrlHandlingStrategy.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _UrlHandlingStrategy,
  factory: () => (() => inject(DefaultUrlHandlingStrategy))(),
  providedIn: "root"
});
var UrlHandlingStrategy = _UrlHandlingStrategy;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(UrlHandlingStrategy, [{
    type: Injectable,
    args: [{
      providedIn: "root",
      useFactory: () => inject(DefaultUrlHandlingStrategy)
    }]
  }], null, null);
})();
var _DefaultUrlHandlingStrategy = class _DefaultUrlHandlingStrategy {
  shouldProcessUrl(url) {
    return true;
  }
  extract(url) {
    return url;
  }
  merge(newUrlPart, wholeUrl) {
    return newUrlPart;
  }
};
_DefaultUrlHandlingStrategy.\u0275fac = function DefaultUrlHandlingStrategy_Factory(t) {
  return new (t || _DefaultUrlHandlingStrategy)();
};
_DefaultUrlHandlingStrategy.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _DefaultUrlHandlingStrategy,
  factory: _DefaultUrlHandlingStrategy.\u0275fac,
  providedIn: "root"
});
var DefaultUrlHandlingStrategy = _DefaultUrlHandlingStrategy;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DefaultUrlHandlingStrategy, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
var CREATE_VIEW_TRANSITION = new InjectionToken(ngDevMode ? "view transition helper" : "");
var VIEW_TRANSITION_OPTIONS = new InjectionToken(ngDevMode ? "view transition options" : "");
function createViewTransition(injector, from2, to) {
  const transitionOptions = injector.get(VIEW_TRANSITION_OPTIONS);
  const document2 = injector.get(DOCUMENT2);
  return injector.get(NgZone).runOutsideAngular(() => {
    if (!document2.startViewTransition || transitionOptions.skipNextTransition) {
      transitionOptions.skipNextTransition = false;
      return Promise.resolve();
    }
    let resolveViewTransitionStarted;
    const viewTransitionStarted = new Promise((resolve) => {
      resolveViewTransitionStarted = resolve;
    });
    const transition2 = document2.startViewTransition(() => {
      resolveViewTransitionStarted();
      return createRenderPromise(injector);
    });
    const {
      onViewTransitionCreated
    } = transitionOptions;
    if (onViewTransitionCreated) {
      runInInjectionContext(injector, () => onViewTransitionCreated({
        transition: transition2,
        from: from2,
        to
      }));
    }
    return viewTransitionStarted;
  });
}
function createRenderPromise(injector) {
  return new Promise((resolve) => {
    afterNextRender(resolve, {
      injector
    });
  });
}
var _NavigationTransitions = class _NavigationTransitions {
  get hasRequestedNavigation() {
    return this.navigationId !== 0;
  }
  constructor() {
    this.currentNavigation = null;
    this.currentTransition = null;
    this.lastSuccessfulNavigation = null;
    this.events = new Subject();
    this.transitionAbortSubject = new Subject();
    this.configLoader = inject(RouterConfigLoader);
    this.environmentInjector = inject(EnvironmentInjector);
    this.urlSerializer = inject(UrlSerializer);
    this.rootContexts = inject(ChildrenOutletContexts);
    this.location = inject(Location);
    this.inputBindingEnabled = inject(INPUT_BINDER, {
      optional: true
    }) !== null;
    this.titleStrategy = inject(TitleStrategy);
    this.options = inject(ROUTER_CONFIGURATION, {
      optional: true
    }) || {};
    this.paramsInheritanceStrategy = this.options.paramsInheritanceStrategy || "emptyOnly";
    this.urlHandlingStrategy = inject(UrlHandlingStrategy);
    this.createViewTransition = inject(CREATE_VIEW_TRANSITION, {
      optional: true
    });
    this.navigationId = 0;
    this.afterPreactivation = () => of(void 0);
    this.rootComponentType = null;
    const onLoadStart = (r) => this.events.next(new RouteConfigLoadStart(r));
    const onLoadEnd = (r) => this.events.next(new RouteConfigLoadEnd(r));
    this.configLoader.onLoadEndListener = onLoadEnd;
    this.configLoader.onLoadStartListener = onLoadStart;
  }
  complete() {
    this.transitions?.complete();
  }
  handleNavigationRequest(request) {
    const id = ++this.navigationId;
    this.transitions?.next(__spreadProps(__spreadValues(__spreadValues({}, this.transitions.value), request), {
      id
    }));
  }
  setupNavigations(router, initialUrlTree, initialRouterState) {
    this.transitions = new BehaviorSubject({
      id: 0,
      currentUrlTree: initialUrlTree,
      currentRawUrl: initialUrlTree,
      extractedUrl: this.urlHandlingStrategy.extract(initialUrlTree),
      urlAfterRedirects: this.urlHandlingStrategy.extract(initialUrlTree),
      rawUrl: initialUrlTree,
      extras: {},
      resolve: null,
      reject: null,
      promise: Promise.resolve(true),
      source: IMPERATIVE_NAVIGATION,
      restoredState: null,
      currentSnapshot: initialRouterState.snapshot,
      targetSnapshot: null,
      currentRouterState: initialRouterState,
      targetRouterState: null,
      guards: {
        canActivateChecks: [],
        canDeactivateChecks: []
      },
      guardsResult: null
    });
    return this.transitions.pipe(
      filter((t) => t.id !== 0),
      // Extract URL
      map((t) => __spreadProps(__spreadValues({}, t), {
        extractedUrl: this.urlHandlingStrategy.extract(t.rawUrl)
      })),
      // Using switchMap so we cancel executing navigations when a new one comes in
      switchMap((overallTransitionState) => {
        this.currentTransition = overallTransitionState;
        let completed = false;
        let errored = false;
        return of(overallTransitionState).pipe(
          // Store the Navigation object
          tap((t) => {
            this.currentNavigation = {
              id: t.id,
              initialUrl: t.rawUrl,
              extractedUrl: t.extractedUrl,
              trigger: t.source,
              extras: t.extras,
              previousNavigation: !this.lastSuccessfulNavigation ? null : __spreadProps(__spreadValues({}, this.lastSuccessfulNavigation), {
                previousNavigation: null
              })
            };
          }),
          switchMap((t) => {
            const urlTransition = !router.navigated || this.isUpdatingInternalState() || this.isUpdatedBrowserUrl();
            const onSameUrlNavigation = t.extras.onSameUrlNavigation ?? router.onSameUrlNavigation;
            if (!urlTransition && onSameUrlNavigation !== "reload") {
              const reason = typeof ngDevMode === "undefined" || ngDevMode ? `Navigation to ${t.rawUrl} was ignored because it is the same as the current Router URL.` : "";
              this.events.next(new NavigationSkipped(
                t.id,
                this.urlSerializer.serialize(t.rawUrl),
                reason,
                0
                /* NavigationSkippedCode.IgnoredSameUrlNavigation */
              ));
              t.resolve(null);
              return EMPTY;
            }
            if (this.urlHandlingStrategy.shouldProcessUrl(t.rawUrl)) {
              return of(t).pipe(
                // Fire NavigationStart event
                switchMap((t2) => {
                  const transition2 = this.transitions?.getValue();
                  this.events.next(new NavigationStart(t2.id, this.urlSerializer.serialize(t2.extractedUrl), t2.source, t2.restoredState));
                  if (transition2 !== this.transitions?.getValue()) {
                    return EMPTY;
                  }
                  return Promise.resolve(t2);
                }),
                // Recognize
                recognize(this.environmentInjector, this.configLoader, this.rootComponentType, router.config, this.urlSerializer, this.paramsInheritanceStrategy),
                // Update URL if in `eager` update mode
                tap((t2) => {
                  overallTransitionState.targetSnapshot = t2.targetSnapshot;
                  overallTransitionState.urlAfterRedirects = t2.urlAfterRedirects;
                  this.currentNavigation = __spreadProps(__spreadValues({}, this.currentNavigation), {
                    finalUrl: t2.urlAfterRedirects
                  });
                  const routesRecognized = new RoutesRecognized(t2.id, this.urlSerializer.serialize(t2.extractedUrl), this.urlSerializer.serialize(t2.urlAfterRedirects), t2.targetSnapshot);
                  this.events.next(routesRecognized);
                })
              );
            } else if (urlTransition && this.urlHandlingStrategy.shouldProcessUrl(t.currentRawUrl)) {
              const {
                id,
                extractedUrl,
                source,
                restoredState,
                extras
              } = t;
              const navStart = new NavigationStart(id, this.urlSerializer.serialize(extractedUrl), source, restoredState);
              this.events.next(navStart);
              const targetSnapshot = createEmptyState(extractedUrl, this.rootComponentType).snapshot;
              this.currentTransition = overallTransitionState = __spreadProps(__spreadValues({}, t), {
                targetSnapshot,
                urlAfterRedirects: extractedUrl,
                extras: __spreadProps(__spreadValues({}, extras), {
                  skipLocationChange: false,
                  replaceUrl: false
                })
              });
              this.currentNavigation.finalUrl = extractedUrl;
              return of(overallTransitionState);
            } else {
              const reason = typeof ngDevMode === "undefined" || ngDevMode ? `Navigation was ignored because the UrlHandlingStrategy indicated neither the current URL ${t.currentRawUrl} nor target URL ${t.rawUrl} should be processed.` : "";
              this.events.next(new NavigationSkipped(
                t.id,
                this.urlSerializer.serialize(t.extractedUrl),
                reason,
                1
                /* NavigationSkippedCode.IgnoredByUrlHandlingStrategy */
              ));
              t.resolve(null);
              return EMPTY;
            }
          }),
          // --- GUARDS ---
          tap((t) => {
            const guardsStart = new GuardsCheckStart(t.id, this.urlSerializer.serialize(t.extractedUrl), this.urlSerializer.serialize(t.urlAfterRedirects), t.targetSnapshot);
            this.events.next(guardsStart);
          }),
          map((t) => {
            this.currentTransition = overallTransitionState = __spreadProps(__spreadValues({}, t), {
              guards: getAllRouteGuards(t.targetSnapshot, t.currentSnapshot, this.rootContexts)
            });
            return overallTransitionState;
          }),
          checkGuards(this.environmentInjector, (evt) => this.events.next(evt)),
          tap((t) => {
            overallTransitionState.guardsResult = t.guardsResult;
            if (isUrlTree(t.guardsResult)) {
              throw redirectingNavigationError(this.urlSerializer, t.guardsResult);
            }
            const guardsEnd = new GuardsCheckEnd(t.id, this.urlSerializer.serialize(t.extractedUrl), this.urlSerializer.serialize(t.urlAfterRedirects), t.targetSnapshot, !!t.guardsResult);
            this.events.next(guardsEnd);
          }),
          filter((t) => {
            if (!t.guardsResult) {
              this.cancelNavigationTransition(
                t,
                "",
                3
                /* NavigationCancellationCode.GuardRejected */
              );
              return false;
            }
            return true;
          }),
          // --- RESOLVE ---
          switchTap((t) => {
            if (t.guards.canActivateChecks.length) {
              return of(t).pipe(tap((t2) => {
                const resolveStart = new ResolveStart(t2.id, this.urlSerializer.serialize(t2.extractedUrl), this.urlSerializer.serialize(t2.urlAfterRedirects), t2.targetSnapshot);
                this.events.next(resolveStart);
              }), switchMap((t2) => {
                let dataResolved = false;
                return of(t2).pipe(resolveData(this.paramsInheritanceStrategy, this.environmentInjector), tap({
                  next: () => dataResolved = true,
                  complete: () => {
                    if (!dataResolved) {
                      this.cancelNavigationTransition(
                        t2,
                        typeof ngDevMode === "undefined" || ngDevMode ? `At least one route resolver didn't emit any value.` : "",
                        2
                        /* NavigationCancellationCode.NoDataFromResolver */
                      );
                    }
                  }
                }));
              }), tap((t2) => {
                const resolveEnd = new ResolveEnd(t2.id, this.urlSerializer.serialize(t2.extractedUrl), this.urlSerializer.serialize(t2.urlAfterRedirects), t2.targetSnapshot);
                this.events.next(resolveEnd);
              }));
            }
            return void 0;
          }),
          // --- LOAD COMPONENTS ---
          switchTap((t) => {
            const loadComponents = (route) => {
              const loaders = [];
              if (route.routeConfig?.loadComponent && !route.routeConfig._loadedComponent) {
                loaders.push(this.configLoader.loadComponent(route.routeConfig).pipe(tap((loadedComponent) => {
                  route.component = loadedComponent;
                }), map(() => void 0)));
              }
              for (const child of route.children) {
                loaders.push(...loadComponents(child));
              }
              return loaders;
            };
            return combineLatest(loadComponents(t.targetSnapshot.root)).pipe(defaultIfEmpty(), take(1));
          }),
          switchTap(() => this.afterPreactivation()),
          switchMap(() => {
            const {
              currentSnapshot,
              targetSnapshot
            } = overallTransitionState;
            const viewTransitionStarted = this.createViewTransition?.(this.environmentInjector, currentSnapshot.root, targetSnapshot.root);
            return viewTransitionStarted ? from(viewTransitionStarted).pipe(map(() => overallTransitionState)) : of(overallTransitionState);
          }),
          map((t) => {
            const targetRouterState = createRouterState(router.routeReuseStrategy, t.targetSnapshot, t.currentRouterState);
            this.currentTransition = overallTransitionState = __spreadProps(__spreadValues({}, t), {
              targetRouterState
            });
            this.currentNavigation.targetRouterState = targetRouterState;
            return overallTransitionState;
          }),
          tap(() => {
            this.events.next(new BeforeActivateRoutes());
          }),
          activateRoutes(this.rootContexts, router.routeReuseStrategy, (evt) => this.events.next(evt), this.inputBindingEnabled),
          // Ensure that if some observable used to drive the transition doesn't
          // complete, the navigation still finalizes This should never happen, but
          // this is done as a safety measure to avoid surfacing this error (#49567).
          take(1),
          tap({
            next: (t) => {
              completed = true;
              this.lastSuccessfulNavigation = this.currentNavigation;
              this.events.next(new NavigationEnd(t.id, this.urlSerializer.serialize(t.extractedUrl), this.urlSerializer.serialize(t.urlAfterRedirects)));
              this.titleStrategy?.updateTitle(t.targetRouterState.snapshot);
              t.resolve(true);
            },
            complete: () => {
              completed = true;
            }
          }),
          // There used to be a lot more logic happening directly within the
          // transition Observable. Some of this logic has been refactored out to
          // other places but there may still be errors that happen there. This gives
          // us a way to cancel the transition from the outside. This may also be
          // required in the future to support something like the abort signal of the
          // Navigation API where the navigation gets aborted from outside the
          // transition.
          takeUntil(this.transitionAbortSubject.pipe(tap((err) => {
            throw err;
          }))),
          finalize(() => {
            if (!completed && !errored) {
              const cancelationReason = typeof ngDevMode === "undefined" || ngDevMode ? `Navigation ID ${overallTransitionState.id} is not equal to the current navigation id ${this.navigationId}` : "";
              this.cancelNavigationTransition(
                overallTransitionState,
                cancelationReason,
                1
                /* NavigationCancellationCode.SupersededByNewNavigation */
              );
            }
            if (this.currentNavigation?.id === overallTransitionState.id) {
              this.currentNavigation = null;
            }
          }),
          catchError((e) => {
            errored = true;
            if (isNavigationCancelingError$1(e)) {
              this.events.next(new NavigationCancel(overallTransitionState.id, this.urlSerializer.serialize(overallTransitionState.extractedUrl), e.message, e.cancellationCode));
              if (!isRedirectingNavigationCancelingError$1(e)) {
                overallTransitionState.resolve(false);
              } else {
                this.events.next(new RedirectRequest(e.url));
              }
            } else {
              this.events.next(new NavigationError(overallTransitionState.id, this.urlSerializer.serialize(overallTransitionState.extractedUrl), e, overallTransitionState.targetSnapshot ?? void 0));
              try {
                overallTransitionState.resolve(router.errorHandler(e));
              } catch (ee) {
                overallTransitionState.reject(ee);
              }
            }
            return EMPTY;
          })
        );
      })
    );
  }
  cancelNavigationTransition(t, reason, code) {
    const navCancel = new NavigationCancel(t.id, this.urlSerializer.serialize(t.extractedUrl), reason, code);
    this.events.next(navCancel);
    t.resolve(false);
  }
  /**
   * @returns Whether we're navigating to somewhere that is not what the Router is
   * currently set to.
   */
  isUpdatingInternalState() {
    return this.currentTransition?.extractedUrl.toString() !== this.currentTransition?.currentUrlTree.toString();
  }
  /**
   * @returns Whether we're updating the browser URL to something new (navigation is going
   * to somewhere not displayed in the URL bar and we will update the URL
   * bar if navigation succeeds).
   */
  isUpdatedBrowserUrl() {
    const extractedBrowserUrl = this.urlHandlingStrategy.extract(this.urlSerializer.parse(this.location.path(true)));
    return extractedBrowserUrl.toString() !== this.currentTransition?.extractedUrl.toString() && !this.currentTransition?.extras.skipLocationChange;
  }
};
_NavigationTransitions.\u0275fac = function NavigationTransitions_Factory(t) {
  return new (t || _NavigationTransitions)();
};
_NavigationTransitions.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _NavigationTransitions,
  factory: _NavigationTransitions.\u0275fac,
  providedIn: "root"
});
var NavigationTransitions = _NavigationTransitions;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NavigationTransitions, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [], null);
})();
function isBrowserTriggeredNavigation(source) {
  return source !== IMPERATIVE_NAVIGATION;
}
var _RouteReuseStrategy = class _RouteReuseStrategy {
};
_RouteReuseStrategy.\u0275fac = function RouteReuseStrategy_Factory(t) {
  return new (t || _RouteReuseStrategy)();
};
_RouteReuseStrategy.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _RouteReuseStrategy,
  factory: () => (() => inject(DefaultRouteReuseStrategy))(),
  providedIn: "root"
});
var RouteReuseStrategy = _RouteReuseStrategy;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RouteReuseStrategy, [{
    type: Injectable,
    args: [{
      providedIn: "root",
      useFactory: () => inject(DefaultRouteReuseStrategy)
    }]
  }], null, null);
})();
var BaseRouteReuseStrategy = class {
  /**
   * Whether the given route should detach for later reuse.
   * Always returns false for `BaseRouteReuseStrategy`.
   * */
  shouldDetach(route) {
    return false;
  }
  /**
   * A no-op; the route is never stored since this strategy never detaches routes for later re-use.
   */
  store(route, detachedTree) {
  }
  /** Returns `false`, meaning the route (and its subtree) is never reattached */
  shouldAttach(route) {
    return false;
  }
  /** Returns `null` because this strategy does not store routes for later re-use. */
  retrieve(route) {
    return null;
  }
  /**
   * Determines if a route should be reused.
   * This strategy returns `true` when the future route config and current route config are
   * identical.
   */
  shouldReuseRoute(future, curr) {
    return future.routeConfig === curr.routeConfig;
  }
};
var _DefaultRouteReuseStrategy = class _DefaultRouteReuseStrategy extends BaseRouteReuseStrategy {
};
_DefaultRouteReuseStrategy.\u0275fac = /* @__PURE__ */ (() => {
  let \u0275DefaultRouteReuseStrategy_BaseFactory;
  return function DefaultRouteReuseStrategy_Factory(t) {
    return (\u0275DefaultRouteReuseStrategy_BaseFactory || (\u0275DefaultRouteReuseStrategy_BaseFactory = \u0275\u0275getInheritedFactory(_DefaultRouteReuseStrategy)))(t || _DefaultRouteReuseStrategy);
  };
})();
_DefaultRouteReuseStrategy.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _DefaultRouteReuseStrategy,
  factory: _DefaultRouteReuseStrategy.\u0275fac,
  providedIn: "root"
});
var DefaultRouteReuseStrategy = _DefaultRouteReuseStrategy;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(DefaultRouteReuseStrategy, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
var _StateManager = class _StateManager {
};
_StateManager.\u0275fac = function StateManager_Factory(t) {
  return new (t || _StateManager)();
};
_StateManager.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _StateManager,
  factory: () => (() => inject(HistoryStateManager))(),
  providedIn: "root"
});
var StateManager = _StateManager;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(StateManager, [{
    type: Injectable,
    args: [{
      providedIn: "root",
      useFactory: () => inject(HistoryStateManager)
    }]
  }], null, null);
})();
var _HistoryStateManager = class _HistoryStateManager extends StateManager {
  constructor() {
    super(...arguments);
    this.location = inject(Location);
    this.urlSerializer = inject(UrlSerializer);
    this.options = inject(ROUTER_CONFIGURATION, {
      optional: true
    }) || {};
    this.canceledNavigationResolution = this.options.canceledNavigationResolution || "replace";
    this.urlHandlingStrategy = inject(UrlHandlingStrategy);
    this.urlUpdateStrategy = this.options.urlUpdateStrategy || "deferred";
    this.currentUrlTree = new UrlTree();
    this.rawUrlTree = this.currentUrlTree;
    this.currentPageId = 0;
    this.lastSuccessfulId = -1;
    this.routerState = createEmptyState(this.currentUrlTree, null);
    this.stateMemento = this.createStateMemento();
  }
  getCurrentUrlTree() {
    return this.currentUrlTree;
  }
  getRawUrlTree() {
    return this.rawUrlTree;
  }
  restoredState() {
    return this.location.getState();
  }
  /**
   * The ɵrouterPageId of whatever page is currently active in the browser history. This is
   * important for computing the target page id for new navigations because we need to ensure each
   * page id in the browser history is 1 more than the previous entry.
   */
  get browserPageId() {
    if (this.canceledNavigationResolution !== "computed") {
      return this.currentPageId;
    }
    return this.restoredState()?.\u0275routerPageId ?? this.currentPageId;
  }
  getRouterState() {
    return this.routerState;
  }
  createStateMemento() {
    return {
      rawUrlTree: this.rawUrlTree,
      currentUrlTree: this.currentUrlTree,
      routerState: this.routerState
    };
  }
  registerNonRouterCurrentEntryChangeListener(listener) {
    return this.location.subscribe((event) => {
      if (event["type"] === "popstate") {
        listener(event["url"], event.state);
      }
    });
  }
  handleRouterEvent(e, currentTransition) {
    if (e instanceof NavigationStart) {
      this.stateMemento = this.createStateMemento();
    } else if (e instanceof NavigationSkipped) {
      this.rawUrlTree = currentTransition.initialUrl;
    } else if (e instanceof RoutesRecognized) {
      if (this.urlUpdateStrategy === "eager") {
        if (!currentTransition.extras.skipLocationChange) {
          const rawUrl = this.urlHandlingStrategy.merge(currentTransition.finalUrl, currentTransition.initialUrl);
          this.setBrowserUrl(rawUrl, currentTransition);
        }
      }
    } else if (e instanceof BeforeActivateRoutes) {
      this.currentUrlTree = currentTransition.finalUrl;
      this.rawUrlTree = this.urlHandlingStrategy.merge(currentTransition.finalUrl, currentTransition.initialUrl);
      this.routerState = currentTransition.targetRouterState;
      if (this.urlUpdateStrategy === "deferred") {
        if (!currentTransition.extras.skipLocationChange) {
          this.setBrowserUrl(this.rawUrlTree, currentTransition);
        }
      }
    } else if (e instanceof NavigationCancel && (e.code === 3 || e.code === 2)) {
      this.restoreHistory(currentTransition);
    } else if (e instanceof NavigationError) {
      this.restoreHistory(currentTransition, true);
    } else if (e instanceof NavigationEnd) {
      this.lastSuccessfulId = e.id;
      this.currentPageId = this.browserPageId;
    }
  }
  setBrowserUrl(url, transition2) {
    const path = this.urlSerializer.serialize(url);
    if (this.location.isCurrentPathEqualTo(path) || !!transition2.extras.replaceUrl) {
      const currentBrowserPageId = this.browserPageId;
      const state2 = __spreadValues(__spreadValues({}, transition2.extras.state), this.generateNgRouterState(transition2.id, currentBrowserPageId));
      this.location.replaceState(path, "", state2);
    } else {
      const state2 = __spreadValues(__spreadValues({}, transition2.extras.state), this.generateNgRouterState(transition2.id, this.browserPageId + 1));
      this.location.go(path, "", state2);
    }
  }
  /**
   * Performs the necessary rollback action to restore the browser URL to the
   * state before the transition.
   */
  restoreHistory(navigation, restoringFromCaughtError = false) {
    if (this.canceledNavigationResolution === "computed") {
      const currentBrowserPageId = this.browserPageId;
      const targetPagePosition = this.currentPageId - currentBrowserPageId;
      if (targetPagePosition !== 0) {
        this.location.historyGo(targetPagePosition);
      } else if (this.currentUrlTree === navigation.finalUrl && targetPagePosition === 0) {
        this.resetState(navigation);
        this.resetUrlToCurrentUrlTree();
      } else {
      }
    } else if (this.canceledNavigationResolution === "replace") {
      if (restoringFromCaughtError) {
        this.resetState(navigation);
      }
      this.resetUrlToCurrentUrlTree();
    }
  }
  resetState(navigation) {
    this.routerState = this.stateMemento.routerState;
    this.currentUrlTree = this.stateMemento.currentUrlTree;
    this.rawUrlTree = this.urlHandlingStrategy.merge(this.currentUrlTree, navigation.finalUrl ?? this.rawUrlTree);
  }
  resetUrlToCurrentUrlTree() {
    this.location.replaceState(this.urlSerializer.serialize(this.rawUrlTree), "", this.generateNgRouterState(this.lastSuccessfulId, this.currentPageId));
  }
  generateNgRouterState(navigationId, routerPageId) {
    if (this.canceledNavigationResolution === "computed") {
      return {
        navigationId,
        \u0275routerPageId: routerPageId
      };
    }
    return {
      navigationId
    };
  }
};
_HistoryStateManager.\u0275fac = /* @__PURE__ */ (() => {
  let \u0275HistoryStateManager_BaseFactory;
  return function HistoryStateManager_Factory(t) {
    return (\u0275HistoryStateManager_BaseFactory || (\u0275HistoryStateManager_BaseFactory = \u0275\u0275getInheritedFactory(_HistoryStateManager)))(t || _HistoryStateManager);
  };
})();
_HistoryStateManager.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _HistoryStateManager,
  factory: _HistoryStateManager.\u0275fac,
  providedIn: "root"
});
var HistoryStateManager = _HistoryStateManager;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(HistoryStateManager, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
var NavigationResult;
(function(NavigationResult2) {
  NavigationResult2[NavigationResult2["COMPLETE"] = 0] = "COMPLETE";
  NavigationResult2[NavigationResult2["FAILED"] = 1] = "FAILED";
  NavigationResult2[NavigationResult2["REDIRECTING"] = 2] = "REDIRECTING";
})(NavigationResult || (NavigationResult = {}));
function afterNextNavigation(router, action) {
  router.events.pipe(filter((e) => e instanceof NavigationEnd || e instanceof NavigationCancel || e instanceof NavigationError || e instanceof NavigationSkipped), map((e) => {
    if (e instanceof NavigationEnd || e instanceof NavigationSkipped) {
      return NavigationResult.COMPLETE;
    }
    const redirecting = e instanceof NavigationCancel ? e.code === 0 || e.code === 1 : false;
    return redirecting ? NavigationResult.REDIRECTING : NavigationResult.FAILED;
  }), filter((result) => result !== NavigationResult.REDIRECTING), take(1)).subscribe(() => {
    action();
  });
}
function defaultErrorHandler2(error) {
  throw error;
}
var exactMatchOptions = {
  paths: "exact",
  fragment: "ignored",
  matrixParams: "ignored",
  queryParams: "exact"
};
var subsetMatchOptions = {
  paths: "subset",
  fragment: "ignored",
  matrixParams: "ignored",
  queryParams: "subset"
};
var _Router = class _Router {
  get currentUrlTree() {
    return this.stateManager.getCurrentUrlTree();
  }
  get rawUrlTree() {
    return this.stateManager.getRawUrlTree();
  }
  /**
   * An event stream for routing events.
   */
  get events() {
    return this._events;
  }
  /**
   * The current state of routing in this NgModule.
   */
  get routerState() {
    return this.stateManager.getRouterState();
  }
  constructor() {
    this.disposed = false;
    this.isNgZoneEnabled = false;
    this.console = inject(Console);
    this.stateManager = inject(StateManager);
    this.options = inject(ROUTER_CONFIGURATION, {
      optional: true
    }) || {};
    this.pendingTasks = inject(InitialRenderPendingTasks);
    this.urlUpdateStrategy = this.options.urlUpdateStrategy || "deferred";
    this.navigationTransitions = inject(NavigationTransitions);
    this.urlSerializer = inject(UrlSerializer);
    this.location = inject(Location);
    this.urlHandlingStrategy = inject(UrlHandlingStrategy);
    this._events = new Subject();
    this.errorHandler = this.options.errorHandler || defaultErrorHandler2;
    this.navigated = false;
    this.routeReuseStrategy = inject(RouteReuseStrategy);
    this.onSameUrlNavigation = this.options.onSameUrlNavigation || "ignore";
    this.config = inject(ROUTES, {
      optional: true
    })?.flat() ?? [];
    this.componentInputBindingEnabled = !!inject(INPUT_BINDER, {
      optional: true
    });
    this.eventsSubscription = new Subscription();
    this.isNgZoneEnabled = inject(NgZone) instanceof NgZone && NgZone.isInAngularZone();
    this.resetConfig(this.config);
    this.navigationTransitions.setupNavigations(this, this.currentUrlTree, this.routerState).subscribe({
      error: (e) => {
        this.console.warn(ngDevMode ? `Unhandled Navigation Error: ${e}` : e);
      }
    });
    this.subscribeToNavigationEvents();
  }
  subscribeToNavigationEvents() {
    const subscription = this.navigationTransitions.events.subscribe((e) => {
      try {
        const currentTransition = this.navigationTransitions.currentTransition;
        const currentNavigation = this.navigationTransitions.currentNavigation;
        if (currentTransition !== null && currentNavigation !== null) {
          this.stateManager.handleRouterEvent(e, currentNavigation);
          if (e instanceof NavigationCancel && e.code !== 0 && e.code !== 1) {
            this.navigated = true;
          } else if (e instanceof NavigationEnd) {
            this.navigated = true;
          } else if (e instanceof RedirectRequest) {
            const mergedTree = this.urlHandlingStrategy.merge(e.url, currentTransition.currentRawUrl);
            const extras = {
              skipLocationChange: currentTransition.extras.skipLocationChange,
              // The URL is already updated at this point if we have 'eager' URL
              // updates or if the navigation was triggered by the browser (back
              // button, URL bar, etc). We want to replace that item in history
              // if the navigation is rejected.
              replaceUrl: this.urlUpdateStrategy === "eager" || isBrowserTriggeredNavigation(currentTransition.source)
            };
            this.scheduleNavigation(mergedTree, IMPERATIVE_NAVIGATION, null, extras, {
              resolve: currentTransition.resolve,
              reject: currentTransition.reject,
              promise: currentTransition.promise
            });
          }
        }
        if (isPublicRouterEvent(e)) {
          this._events.next(e);
        }
      } catch (e2) {
        this.navigationTransitions.transitionAbortSubject.next(e2);
      }
    });
    this.eventsSubscription.add(subscription);
  }
  /** @internal */
  resetRootComponentType(rootComponentType) {
    this.routerState.root.component = rootComponentType;
    this.navigationTransitions.rootComponentType = rootComponentType;
  }
  /**
   * Sets up the location change listener and performs the initial navigation.
   */
  initialNavigation() {
    this.setUpLocationChangeListener();
    if (!this.navigationTransitions.hasRequestedNavigation) {
      this.navigateToSyncWithBrowser(this.location.path(true), IMPERATIVE_NAVIGATION, this.stateManager.restoredState());
    }
  }
  /**
   * Sets up the location change listener. This listener detects navigations triggered from outside
   * the Router (the browser back/forward buttons, for example) and schedules a corresponding Router
   * navigation so that the correct events, guards, etc. are triggered.
   */
  setUpLocationChangeListener() {
    if (!this.nonRouterCurrentEntryChangeSubscription) {
      this.nonRouterCurrentEntryChangeSubscription = this.stateManager.registerNonRouterCurrentEntryChangeListener((url, state2) => {
        setTimeout(() => {
          this.navigateToSyncWithBrowser(url, "popstate", state2);
        }, 0);
      });
    }
  }
  /**
   * Schedules a router navigation to synchronize Router state with the browser state.
   *
   * This is done as a response to a popstate event and the initial navigation. These
   * two scenarios represent times when the browser URL/state has been updated and
   * the Router needs to respond to ensure its internal state matches.
   */
  navigateToSyncWithBrowser(url, source, state2) {
    const extras = {
      replaceUrl: true
    };
    const restoredState = state2?.navigationId ? state2 : null;
    if (state2) {
      const stateCopy = __spreadValues({}, state2);
      delete stateCopy.navigationId;
      delete stateCopy.\u0275routerPageId;
      if (Object.keys(stateCopy).length !== 0) {
        extras.state = stateCopy;
      }
    }
    const urlTree = this.parseUrl(url);
    this.scheduleNavigation(urlTree, source, restoredState, extras);
  }
  /** The current URL. */
  get url() {
    return this.serializeUrl(this.currentUrlTree);
  }
  /**
   * Returns the current `Navigation` object when the router is navigating,
   * and `null` when idle.
   */
  getCurrentNavigation() {
    return this.navigationTransitions.currentNavigation;
  }
  /**
   * The `Navigation` object of the most recent navigation to succeed and `null` if there
   *     has not been a successful navigation yet.
   */
  get lastSuccessfulNavigation() {
    return this.navigationTransitions.lastSuccessfulNavigation;
  }
  /**
   * Resets the route configuration used for navigation and generating links.
   *
   * @param config The route array for the new configuration.
   *
   * @usageNotes
   *
   * ```
   * router.resetConfig([
   *  { path: 'team/:id', component: TeamCmp, children: [
   *    { path: 'simple', component: SimpleCmp },
   *    { path: 'user/:name', component: UserCmp }
   *  ]}
   * ]);
   * ```
   */
  resetConfig(config2) {
    (typeof ngDevMode === "undefined" || ngDevMode) && validateConfig(config2);
    this.config = config2.map(standardizeConfig);
    this.navigated = false;
  }
  /** @nodoc */
  ngOnDestroy() {
    this.dispose();
  }
  /** Disposes of the router. */
  dispose() {
    this.navigationTransitions.complete();
    if (this.nonRouterCurrentEntryChangeSubscription) {
      this.nonRouterCurrentEntryChangeSubscription.unsubscribe();
      this.nonRouterCurrentEntryChangeSubscription = void 0;
    }
    this.disposed = true;
    this.eventsSubscription.unsubscribe();
  }
  /**
   * Appends URL segments to the current URL tree to create a new URL tree.
   *
   * @param commands An array of URL fragments with which to construct the new URL tree.
   * If the path is static, can be the literal URL string. For a dynamic path, pass an array of path
   * segments, followed by the parameters for each segment.
   * The fragments are applied to the current URL tree or the one provided  in the `relativeTo`
   * property of the options object, if supplied.
   * @param navigationExtras Options that control the navigation strategy.
   * @returns The new URL tree.
   *
   * @usageNotes
   *
   * ```
   * // create /team/33/user/11
   * router.createUrlTree(['/team', 33, 'user', 11]);
   *
   * // create /team/33;expand=true/user/11
   * router.createUrlTree(['/team', 33, {expand: true}, 'user', 11]);
   *
   * // you can collapse static segments like this (this works only with the first passed-in value):
   * router.createUrlTree(['/team/33/user', userId]);
   *
   * // If the first segment can contain slashes, and you do not want the router to split it,
   * // you can do the following:
   * router.createUrlTree([{segmentPath: '/one/two'}]);
   *
   * // create /team/33/(user/11//right:chat)
   * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: 'chat'}}]);
   *
   * // remove the right secondary node
   * router.createUrlTree(['/team', 33, {outlets: {primary: 'user/11', right: null}}]);
   *
   * // assuming the current url is `/team/33/user/11` and the route points to `user/11`
   *
   * // navigate to /team/33/user/11/details
   * router.createUrlTree(['details'], {relativeTo: route});
   *
   * // navigate to /team/33/user/22
   * router.createUrlTree(['../22'], {relativeTo: route});
   *
   * // navigate to /team/44/user/22
   * router.createUrlTree(['../../team/44/user/22'], {relativeTo: route});
   *
   * Note that a value of `null` or `undefined` for `relativeTo` indicates that the
   * tree should be created relative to the root.
   * ```
   */
  createUrlTree(commands, navigationExtras = {}) {
    const {
      relativeTo,
      queryParams,
      fragment,
      queryParamsHandling,
      preserveFragment
    } = navigationExtras;
    const f = preserveFragment ? this.currentUrlTree.fragment : fragment;
    let q = null;
    switch (queryParamsHandling) {
      case "merge":
        q = __spreadValues(__spreadValues({}, this.currentUrlTree.queryParams), queryParams);
        break;
      case "preserve":
        q = this.currentUrlTree.queryParams;
        break;
      default:
        q = queryParams || null;
    }
    if (q !== null) {
      q = this.removeEmptyProps(q);
    }
    let relativeToUrlSegmentGroup;
    try {
      const relativeToSnapshot = relativeTo ? relativeTo.snapshot : this.routerState.snapshot.root;
      relativeToUrlSegmentGroup = createSegmentGroupFromRoute(relativeToSnapshot);
    } catch (e) {
      if (typeof commands[0] !== "string" || !commands[0].startsWith("/")) {
        commands = [];
      }
      relativeToUrlSegmentGroup = this.currentUrlTree.root;
    }
    return createUrlTreeFromSegmentGroup(relativeToUrlSegmentGroup, commands, q, f ?? null);
  }
  /**
   * Navigates to a view using an absolute route path.
   *
   * @param url An absolute path for a defined route. The function does not apply any delta to the
   *     current URL.
   * @param extras An object containing properties that modify the navigation strategy.
   *
   * @returns A Promise that resolves to 'true' when navigation succeeds,
   * to 'false' when navigation fails, or is rejected on error.
   *
   * @usageNotes
   *
   * The following calls request navigation to an absolute path.
   *
   * ```
   * router.navigateByUrl("/team/33/user/11");
   *
   * // Navigate without updating the URL
   * router.navigateByUrl("/team/33/user/11", { skipLocationChange: true });
   * ```
   *
   * @see [Routing and Navigation guide](guide/router)
   *
   */
  navigateByUrl(url, extras = {
    skipLocationChange: false
  }) {
    if (typeof ngDevMode === "undefined" || ngDevMode) {
      if (this.isNgZoneEnabled && !NgZone.isInAngularZone()) {
        this.console.warn(`Navigation triggered outside Angular zone, did you forget to call 'ngZone.run()'?`);
      }
    }
    const urlTree = isUrlTree(url) ? url : this.parseUrl(url);
    const mergedTree = this.urlHandlingStrategy.merge(urlTree, this.rawUrlTree);
    return this.scheduleNavigation(mergedTree, IMPERATIVE_NAVIGATION, null, extras);
  }
  /**
   * Navigate based on the provided array of commands and a starting point.
   * If no starting route is provided, the navigation is absolute.
   *
   * @param commands An array of URL fragments with which to construct the target URL.
   * If the path is static, can be the literal URL string. For a dynamic path, pass an array of path
   * segments, followed by the parameters for each segment.
   * The fragments are applied to the current URL or the one provided  in the `relativeTo` property
   * of the options object, if supplied.
   * @param extras An options object that determines how the URL should be constructed or
   *     interpreted.
   *
   * @returns A Promise that resolves to `true` when navigation succeeds, to `false` when navigation
   *     fails,
   * or is rejected on error.
   *
   * @usageNotes
   *
   * The following calls request navigation to a dynamic route path relative to the current URL.
   *
   * ```
   * router.navigate(['team', 33, 'user', 11], {relativeTo: route});
   *
   * // Navigate without updating the URL, overriding the default behavior
   * router.navigate(['team', 33, 'user', 11], {relativeTo: route, skipLocationChange: true});
   * ```
   *
   * @see [Routing and Navigation guide](guide/router)
   *
   */
  navigate(commands, extras = {
    skipLocationChange: false
  }) {
    validateCommands(commands);
    return this.navigateByUrl(this.createUrlTree(commands, extras), extras);
  }
  /** Serializes a `UrlTree` into a string */
  serializeUrl(url) {
    return this.urlSerializer.serialize(url);
  }
  /** Parses a string into a `UrlTree` */
  parseUrl(url) {
    try {
      return this.urlSerializer.parse(url);
    } catch {
      return this.urlSerializer.parse("/");
    }
  }
  isActive(url, matchOptions) {
    let options;
    if (matchOptions === true) {
      options = __spreadValues({}, exactMatchOptions);
    } else if (matchOptions === false) {
      options = __spreadValues({}, subsetMatchOptions);
    } else {
      options = matchOptions;
    }
    if (isUrlTree(url)) {
      return containsTree(this.currentUrlTree, url, options);
    }
    const urlTree = this.parseUrl(url);
    return containsTree(this.currentUrlTree, urlTree, options);
  }
  removeEmptyProps(params) {
    return Object.keys(params).reduce((result, key) => {
      const value = params[key];
      if (value !== null && value !== void 0) {
        result[key] = value;
      }
      return result;
    }, {});
  }
  scheduleNavigation(rawUrl, source, restoredState, extras, priorPromise) {
    if (this.disposed) {
      return Promise.resolve(false);
    }
    let resolve;
    let reject;
    let promise;
    if (priorPromise) {
      resolve = priorPromise.resolve;
      reject = priorPromise.reject;
      promise = priorPromise.promise;
    } else {
      promise = new Promise((res, rej) => {
        resolve = res;
        reject = rej;
      });
    }
    const taskId = this.pendingTasks.add();
    afterNextNavigation(this, () => {
      queueMicrotask(() => this.pendingTasks.remove(taskId));
    });
    this.navigationTransitions.handleNavigationRequest({
      source,
      restoredState,
      currentUrlTree: this.currentUrlTree,
      currentRawUrl: this.currentUrlTree,
      rawUrl,
      extras,
      resolve,
      reject,
      promise,
      currentSnapshot: this.routerState.snapshot,
      currentRouterState: this.routerState
    });
    return promise.catch((e) => {
      return Promise.reject(e);
    });
  }
};
_Router.\u0275fac = function Router_Factory(t) {
  return new (t || _Router)();
};
_Router.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _Router,
  factory: _Router.\u0275fac,
  providedIn: "root"
});
var Router = _Router;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(Router, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [], null);
})();
function validateCommands(commands) {
  for (let i = 0; i < commands.length; i++) {
    const cmd = commands[i];
    if (cmd == null) {
      throw new RuntimeError(4008, (typeof ngDevMode === "undefined" || ngDevMode) && `The requested path contains ${cmd} segment at index ${i}`);
    }
  }
}
function isPublicRouterEvent(e) {
  return !(e instanceof BeforeActivateRoutes) && !(e instanceof RedirectRequest);
}
var _RouterLink = class _RouterLink {
  constructor(router, route, tabIndexAttribute, renderer, el, locationStrategy) {
    this.router = router;
    this.route = route;
    this.tabIndexAttribute = tabIndexAttribute;
    this.renderer = renderer;
    this.el = el;
    this.locationStrategy = locationStrategy;
    this.href = null;
    this.commands = null;
    this.onChanges = new Subject();
    this.preserveFragment = false;
    this.skipLocationChange = false;
    this.replaceUrl = false;
    const tagName = el.nativeElement.tagName?.toLowerCase();
    this.isAnchorElement = tagName === "a" || tagName === "area";
    if (this.isAnchorElement) {
      this.subscription = router.events.subscribe((s) => {
        if (s instanceof NavigationEnd) {
          this.updateHref();
        }
      });
    } else {
      this.setTabIndexIfNotOnNativeEl("0");
    }
  }
  /**
   * Modifies the tab index if there was not a tabindex attribute on the element during
   * instantiation.
   */
  setTabIndexIfNotOnNativeEl(newTabIndex) {
    if (this.tabIndexAttribute != null || this.isAnchorElement) {
      return;
    }
    this.applyAttributeValue("tabindex", newTabIndex);
  }
  /** @nodoc */
  ngOnChanges(changes) {
    if (this.isAnchorElement) {
      this.updateHref();
    }
    this.onChanges.next(this);
  }
  /**
   * Commands to pass to {@link Router#createUrlTree}.
   *   - **array**: commands to pass to {@link Router#createUrlTree}.
   *   - **string**: shorthand for array of commands with just the string, i.e. `['/route']`
   *   - **null|undefined**: effectively disables the `routerLink`
   * @see {@link Router#createUrlTree}
   */
  set routerLink(commands) {
    if (commands != null) {
      this.commands = Array.isArray(commands) ? commands : [commands];
      this.setTabIndexIfNotOnNativeEl("0");
    } else {
      this.commands = null;
      this.setTabIndexIfNotOnNativeEl(null);
    }
  }
  /** @nodoc */
  onClick(button, ctrlKey, shiftKey, altKey, metaKey) {
    if (this.urlTree === null) {
      return true;
    }
    if (this.isAnchorElement) {
      if (button !== 0 || ctrlKey || shiftKey || altKey || metaKey) {
        return true;
      }
      if (typeof this.target === "string" && this.target != "_self") {
        return true;
      }
    }
    const extras = {
      skipLocationChange: this.skipLocationChange,
      replaceUrl: this.replaceUrl,
      state: this.state
    };
    this.router.navigateByUrl(this.urlTree, extras);
    return !this.isAnchorElement;
  }
  /** @nodoc */
  ngOnDestroy() {
    this.subscription?.unsubscribe();
  }
  updateHref() {
    this.href = this.urlTree !== null && this.locationStrategy ? this.locationStrategy?.prepareExternalUrl(this.router.serializeUrl(this.urlTree)) : null;
    const sanitizedValue = this.href === null ? null : (
      // This class represents a directive that can be added to both `<a>` elements,
      // as well as other elements. As a result, we can't define security context at
      // compile time. So the security context is deferred to runtime.
      // The `ɵɵsanitizeUrlOrResourceUrl` selects the necessary sanitizer function
      // based on the tag and property names. The logic mimics the one from
      // `packages/compiler/src/schema/dom_security_schema.ts`, which is used at compile time.
      //
      // Note: we should investigate whether we can switch to using `@HostBinding('attr.href')`
      // instead of applying a value via a renderer, after a final merge of the
      // `RouterLinkWithHref` directive.
      \u0275\u0275sanitizeUrlOrResourceUrl(this.href, this.el.nativeElement.tagName.toLowerCase(), "href")
    );
    this.applyAttributeValue("href", sanitizedValue);
  }
  applyAttributeValue(attrName, attrValue) {
    const renderer = this.renderer;
    const nativeElement = this.el.nativeElement;
    if (attrValue !== null) {
      renderer.setAttribute(nativeElement, attrName, attrValue);
    } else {
      renderer.removeAttribute(nativeElement, attrName);
    }
  }
  get urlTree() {
    if (this.commands === null) {
      return null;
    }
    return this.router.createUrlTree(this.commands, {
      // If the `relativeTo` input is not defined, we want to use `this.route` by default.
      // Otherwise, we should use the value provided by the user in the input.
      relativeTo: this.relativeTo !== void 0 ? this.relativeTo : this.route,
      queryParams: this.queryParams,
      fragment: this.fragment,
      queryParamsHandling: this.queryParamsHandling,
      preserveFragment: this.preserveFragment
    });
  }
};
_RouterLink.\u0275fac = function RouterLink_Factory(t) {
  return new (t || _RouterLink)(\u0275\u0275directiveInject(Router), \u0275\u0275directiveInject(ActivatedRoute), \u0275\u0275injectAttribute("tabindex"), \u0275\u0275directiveInject(Renderer2), \u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(LocationStrategy));
};
_RouterLink.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _RouterLink,
  selectors: [["", "routerLink", ""]],
  hostVars: 1,
  hostBindings: function RouterLink_HostBindings(rf, ctx) {
    if (rf & 1) {
      \u0275\u0275listener("click", function RouterLink_click_HostBindingHandler($event) {
        return ctx.onClick($event.button, $event.ctrlKey, $event.shiftKey, $event.altKey, $event.metaKey);
      });
    }
    if (rf & 2) {
      \u0275\u0275attribute("target", ctx.target);
    }
  },
  inputs: {
    target: "target",
    queryParams: "queryParams",
    fragment: "fragment",
    queryParamsHandling: "queryParamsHandling",
    state: "state",
    relativeTo: "relativeTo",
    preserveFragment: ["preserveFragment", "preserveFragment", booleanAttribute],
    skipLocationChange: ["skipLocationChange", "skipLocationChange", booleanAttribute],
    replaceUrl: ["replaceUrl", "replaceUrl", booleanAttribute],
    routerLink: "routerLink"
  },
  standalone: true,
  features: [\u0275\u0275InputTransformsFeature, \u0275\u0275NgOnChangesFeature]
});
var RouterLink = _RouterLink;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RouterLink, [{
    type: Directive,
    args: [{
      selector: "[routerLink]",
      standalone: true
    }]
  }], () => [{
    type: Router
  }, {
    type: ActivatedRoute
  }, {
    type: void 0,
    decorators: [{
      type: Attribute,
      args: ["tabindex"]
    }]
  }, {
    type: Renderer2
  }, {
    type: ElementRef
  }, {
    type: LocationStrategy
  }], {
    target: [{
      type: HostBinding,
      args: ["attr.target"]
    }, {
      type: Input
    }],
    queryParams: [{
      type: Input
    }],
    fragment: [{
      type: Input
    }],
    queryParamsHandling: [{
      type: Input
    }],
    state: [{
      type: Input
    }],
    relativeTo: [{
      type: Input
    }],
    preserveFragment: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    skipLocationChange: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    replaceUrl: [{
      type: Input,
      args: [{
        transform: booleanAttribute
      }]
    }],
    routerLink: [{
      type: Input
    }],
    onClick: [{
      type: HostListener,
      args: ["click", ["$event.button", "$event.ctrlKey", "$event.shiftKey", "$event.altKey", "$event.metaKey"]]
    }]
  });
})();
var _RouterLinkActive = class _RouterLinkActive {
  get isActive() {
    return this._isActive;
  }
  constructor(router, element, renderer, cdr, link) {
    this.router = router;
    this.element = element;
    this.renderer = renderer;
    this.cdr = cdr;
    this.link = link;
    this.classes = [];
    this._isActive = false;
    this.routerLinkActiveOptions = {
      exact: false
    };
    this.isActiveChange = new EventEmitter();
    this.routerEventsSubscription = router.events.subscribe((s) => {
      if (s instanceof NavigationEnd) {
        this.update();
      }
    });
  }
  /** @nodoc */
  ngAfterContentInit() {
    of(this.links.changes, of(null)).pipe(mergeAll()).subscribe((_) => {
      this.update();
      this.subscribeToEachLinkOnChanges();
    });
  }
  subscribeToEachLinkOnChanges() {
    this.linkInputChangesSubscription?.unsubscribe();
    const allLinkChanges = [...this.links.toArray(), this.link].filter((link) => !!link).map((link) => link.onChanges);
    this.linkInputChangesSubscription = from(allLinkChanges).pipe(mergeAll()).subscribe((link) => {
      if (this._isActive !== this.isLinkActive(this.router)(link)) {
        this.update();
      }
    });
  }
  set routerLinkActive(data) {
    const classes = Array.isArray(data) ? data : data.split(" ");
    this.classes = classes.filter((c) => !!c);
  }
  /** @nodoc */
  ngOnChanges(changes) {
    this.update();
  }
  /** @nodoc */
  ngOnDestroy() {
    this.routerEventsSubscription.unsubscribe();
    this.linkInputChangesSubscription?.unsubscribe();
  }
  update() {
    if (!this.links || !this.router.navigated)
      return;
    queueMicrotask(() => {
      const hasActiveLinks = this.hasActiveLinks();
      if (this._isActive !== hasActiveLinks) {
        this._isActive = hasActiveLinks;
        this.cdr.markForCheck();
        this.classes.forEach((c) => {
          if (hasActiveLinks) {
            this.renderer.addClass(this.element.nativeElement, c);
          } else {
            this.renderer.removeClass(this.element.nativeElement, c);
          }
        });
        if (hasActiveLinks && this.ariaCurrentWhenActive !== void 0) {
          this.renderer.setAttribute(this.element.nativeElement, "aria-current", this.ariaCurrentWhenActive.toString());
        } else {
          this.renderer.removeAttribute(this.element.nativeElement, "aria-current");
        }
        this.isActiveChange.emit(hasActiveLinks);
      }
    });
  }
  isLinkActive(router) {
    const options = isActiveMatchOptions(this.routerLinkActiveOptions) ? this.routerLinkActiveOptions : (
      // While the types should disallow `undefined` here, it's possible without strict inputs
      this.routerLinkActiveOptions.exact || false
    );
    return (link) => link.urlTree ? router.isActive(link.urlTree, options) : false;
  }
  hasActiveLinks() {
    const isActiveCheckFn = this.isLinkActive(this.router);
    return this.link && isActiveCheckFn(this.link) || this.links.some(isActiveCheckFn);
  }
};
_RouterLinkActive.\u0275fac = function RouterLinkActive_Factory(t) {
  return new (t || _RouterLinkActive)(\u0275\u0275directiveInject(Router), \u0275\u0275directiveInject(ElementRef), \u0275\u0275directiveInject(Renderer2), \u0275\u0275directiveInject(ChangeDetectorRef), \u0275\u0275directiveInject(RouterLink, 8));
};
_RouterLinkActive.\u0275dir = /* @__PURE__ */ \u0275\u0275defineDirective({
  type: _RouterLinkActive,
  selectors: [["", "routerLinkActive", ""]],
  contentQueries: function RouterLinkActive_ContentQueries(rf, ctx, dirIndex) {
    if (rf & 1) {
      \u0275\u0275contentQuery(dirIndex, RouterLink, 5);
    }
    if (rf & 2) {
      let _t;
      \u0275\u0275queryRefresh(_t = \u0275\u0275loadQuery()) && (ctx.links = _t);
    }
  },
  inputs: {
    routerLinkActiveOptions: "routerLinkActiveOptions",
    ariaCurrentWhenActive: "ariaCurrentWhenActive",
    routerLinkActive: "routerLinkActive"
  },
  outputs: {
    isActiveChange: "isActiveChange"
  },
  exportAs: ["routerLinkActive"],
  standalone: true,
  features: [\u0275\u0275NgOnChangesFeature]
});
var RouterLinkActive = _RouterLinkActive;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RouterLinkActive, [{
    type: Directive,
    args: [{
      selector: "[routerLinkActive]",
      exportAs: "routerLinkActive",
      standalone: true
    }]
  }], () => [{
    type: Router
  }, {
    type: ElementRef
  }, {
    type: Renderer2
  }, {
    type: ChangeDetectorRef
  }, {
    type: RouterLink,
    decorators: [{
      type: Optional
    }]
  }], {
    links: [{
      type: ContentChildren,
      args: [RouterLink, {
        descendants: true
      }]
    }],
    routerLinkActiveOptions: [{
      type: Input
    }],
    ariaCurrentWhenActive: [{
      type: Input
    }],
    isActiveChange: [{
      type: Output
    }],
    routerLinkActive: [{
      type: Input
    }]
  });
})();
function isActiveMatchOptions(options) {
  return !!options.paths;
}
var PreloadingStrategy = class {
};
var _PreloadAllModules = class _PreloadAllModules {
  preload(route, fn) {
    return fn().pipe(catchError(() => of(null)));
  }
};
_PreloadAllModules.\u0275fac = function PreloadAllModules_Factory(t) {
  return new (t || _PreloadAllModules)();
};
_PreloadAllModules.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _PreloadAllModules,
  factory: _PreloadAllModules.\u0275fac,
  providedIn: "root"
});
var PreloadAllModules = _PreloadAllModules;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(PreloadAllModules, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
var _NoPreloading = class _NoPreloading {
  preload(route, fn) {
    return of(null);
  }
};
_NoPreloading.\u0275fac = function NoPreloading_Factory(t) {
  return new (t || _NoPreloading)();
};
_NoPreloading.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _NoPreloading,
  factory: _NoPreloading.\u0275fac,
  providedIn: "root"
});
var NoPreloading = _NoPreloading;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(NoPreloading, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], null, null);
})();
var _RouterPreloader = class _RouterPreloader {
  constructor(router, compiler, injector, preloadingStrategy, loader) {
    this.router = router;
    this.injector = injector;
    this.preloadingStrategy = preloadingStrategy;
    this.loader = loader;
  }
  setUpPreloading() {
    this.subscription = this.router.events.pipe(filter((e) => e instanceof NavigationEnd), concatMap(() => this.preload())).subscribe(() => {
    });
  }
  preload() {
    return this.processRoutes(this.injector, this.router.config);
  }
  /** @nodoc */
  ngOnDestroy() {
    if (this.subscription) {
      this.subscription.unsubscribe();
    }
  }
  processRoutes(injector, routes2) {
    const res = [];
    for (const route of routes2) {
      if (route.providers && !route._injector) {
        route._injector = createEnvironmentInjector(route.providers, injector, `Route: ${route.path}`);
      }
      const injectorForCurrentRoute = route._injector ?? injector;
      const injectorForChildren = route._loadedInjector ?? injectorForCurrentRoute;
      if (route.loadChildren && !route._loadedRoutes && route.canLoad === void 0 || route.loadComponent && !route._loadedComponent) {
        res.push(this.preloadConfig(injectorForCurrentRoute, route));
      }
      if (route.children || route._loadedRoutes) {
        res.push(this.processRoutes(injectorForChildren, route.children ?? route._loadedRoutes));
      }
    }
    return from(res).pipe(mergeAll());
  }
  preloadConfig(injector, route) {
    return this.preloadingStrategy.preload(route, () => {
      let loadedChildren$;
      if (route.loadChildren && route.canLoad === void 0) {
        loadedChildren$ = this.loader.loadChildren(injector, route);
      } else {
        loadedChildren$ = of(null);
      }
      const recursiveLoadChildren$ = loadedChildren$.pipe(mergeMap((config2) => {
        if (config2 === null) {
          return of(void 0);
        }
        route._loadedRoutes = config2.routes;
        route._loadedInjector = config2.injector;
        return this.processRoutes(config2.injector ?? injector, config2.routes);
      }));
      if (route.loadComponent && !route._loadedComponent) {
        const loadComponent$ = this.loader.loadComponent(route);
        return from([recursiveLoadChildren$, loadComponent$]).pipe(mergeAll());
      } else {
        return recursiveLoadChildren$;
      }
    });
  }
};
_RouterPreloader.\u0275fac = function RouterPreloader_Factory(t) {
  return new (t || _RouterPreloader)(\u0275\u0275inject(Router), \u0275\u0275inject(Compiler), \u0275\u0275inject(EnvironmentInjector), \u0275\u0275inject(PreloadingStrategy), \u0275\u0275inject(RouterConfigLoader));
};
_RouterPreloader.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _RouterPreloader,
  factory: _RouterPreloader.\u0275fac,
  providedIn: "root"
});
var RouterPreloader = _RouterPreloader;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RouterPreloader, [{
    type: Injectable,
    args: [{
      providedIn: "root"
    }]
  }], () => [{
    type: Router
  }, {
    type: Compiler
  }, {
    type: EnvironmentInjector
  }, {
    type: PreloadingStrategy
  }, {
    type: RouterConfigLoader
  }], null);
})();
var ROUTER_SCROLLER = new InjectionToken("");
var _RouterScroller = class _RouterScroller {
  /** @nodoc */
  constructor(urlSerializer, transitions, viewportScroller, zone, options = {}) {
    this.urlSerializer = urlSerializer;
    this.transitions = transitions;
    this.viewportScroller = viewportScroller;
    this.zone = zone;
    this.options = options;
    this.lastId = 0;
    this.lastSource = "imperative";
    this.restoredId = 0;
    this.store = {};
    options.scrollPositionRestoration = options.scrollPositionRestoration || "disabled";
    options.anchorScrolling = options.anchorScrolling || "disabled";
  }
  init() {
    if (this.options.scrollPositionRestoration !== "disabled") {
      this.viewportScroller.setHistoryScrollRestoration("manual");
    }
    this.routerEventsSubscription = this.createScrollEvents();
    this.scrollEventsSubscription = this.consumeScrollEvents();
  }
  createScrollEvents() {
    return this.transitions.events.subscribe((e) => {
      if (e instanceof NavigationStart) {
        this.store[this.lastId] = this.viewportScroller.getScrollPosition();
        this.lastSource = e.navigationTrigger;
        this.restoredId = e.restoredState ? e.restoredState.navigationId : 0;
      } else if (e instanceof NavigationEnd) {
        this.lastId = e.id;
        this.scheduleScrollEvent(e, this.urlSerializer.parse(e.urlAfterRedirects).fragment);
      } else if (e instanceof NavigationSkipped && e.code === 0) {
        this.lastSource = void 0;
        this.restoredId = 0;
        this.scheduleScrollEvent(e, this.urlSerializer.parse(e.url).fragment);
      }
    });
  }
  consumeScrollEvents() {
    return this.transitions.events.subscribe((e) => {
      if (!(e instanceof Scroll))
        return;
      if (e.position) {
        if (this.options.scrollPositionRestoration === "top") {
          this.viewportScroller.scrollToPosition([0, 0]);
        } else if (this.options.scrollPositionRestoration === "enabled") {
          this.viewportScroller.scrollToPosition(e.position);
        }
      } else {
        if (e.anchor && this.options.anchorScrolling === "enabled") {
          this.viewportScroller.scrollToAnchor(e.anchor);
        } else if (this.options.scrollPositionRestoration !== "disabled") {
          this.viewportScroller.scrollToPosition([0, 0]);
        }
      }
    });
  }
  scheduleScrollEvent(routerEvent, anchor) {
    this.zone.runOutsideAngular(() => {
      setTimeout(() => {
        this.zone.run(() => {
          this.transitions.events.next(new Scroll(routerEvent, this.lastSource === "popstate" ? this.store[this.restoredId] : null, anchor));
        });
      }, 0);
    });
  }
  /** @nodoc */
  ngOnDestroy() {
    this.routerEventsSubscription?.unsubscribe();
    this.scrollEventsSubscription?.unsubscribe();
  }
};
_RouterScroller.\u0275fac = function RouterScroller_Factory(t) {
  \u0275\u0275invalidFactory();
};
_RouterScroller.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({
  token: _RouterScroller,
  factory: _RouterScroller.\u0275fac
});
var RouterScroller = _RouterScroller;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RouterScroller, [{
    type: Injectable
  }], () => [{
    type: UrlSerializer
  }, {
    type: NavigationTransitions
  }, {
    type: ViewportScroller
  }, {
    type: NgZone
  }, {
    type: void 0
  }], null);
})();
function rootRoute(router) {
  return router.routerState.root;
}
function routerFeature(kind, providers) {
  return {
    \u0275kind: kind,
    \u0275providers: providers
  };
}
var ROUTER_IS_PROVIDED = new InjectionToken("", {
  providedIn: "root",
  factory: () => false
});
function getBootstrapListener() {
  const injector = inject(Injector);
  return (bootstrappedComponentRef) => {
    const ref = injector.get(ApplicationRef);
    if (bootstrappedComponentRef !== ref.components[0]) {
      return;
    }
    const router = injector.get(Router);
    const bootstrapDone = injector.get(BOOTSTRAP_DONE);
    if (injector.get(INITIAL_NAVIGATION) === 1) {
      router.initialNavigation();
    }
    injector.get(ROUTER_PRELOADER, null, InjectFlags.Optional)?.setUpPreloading();
    injector.get(ROUTER_SCROLLER, null, InjectFlags.Optional)?.init();
    router.resetRootComponentType(ref.componentTypes[0]);
    if (!bootstrapDone.closed) {
      bootstrapDone.next();
      bootstrapDone.complete();
      bootstrapDone.unsubscribe();
    }
  };
}
var BOOTSTRAP_DONE = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "bootstrap done indicator" : "", {
  factory: () => {
    return new Subject();
  }
});
var INITIAL_NAVIGATION = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "initial navigation" : "", {
  providedIn: "root",
  factory: () => 1
  /* InitialNavigation.EnabledNonBlocking */
});
function withEnabledBlockingInitialNavigation() {
  const providers = [{
    provide: INITIAL_NAVIGATION,
    useValue: 0
    /* InitialNavigation.EnabledBlocking */
  }, {
    provide: APP_INITIALIZER,
    multi: true,
    deps: [Injector],
    useFactory: (injector) => {
      const locationInitialized = injector.get(LOCATION_INITIALIZED, Promise.resolve());
      return () => {
        return locationInitialized.then(() => {
          return new Promise((resolve) => {
            const router = injector.get(Router);
            const bootstrapDone = injector.get(BOOTSTRAP_DONE);
            afterNextNavigation(router, () => {
              resolve(true);
            });
            injector.get(NavigationTransitions).afterPreactivation = () => {
              resolve(true);
              return bootstrapDone.closed ? of(void 0) : bootstrapDone;
            };
            router.initialNavigation();
          });
        });
      };
    }
  }];
  return routerFeature(2, providers);
}
function withDisabledInitialNavigation() {
  const providers = [{
    provide: APP_INITIALIZER,
    multi: true,
    useFactory: () => {
      const router = inject(Router);
      return () => {
        router.setUpLocationChangeListener();
      };
    }
  }, {
    provide: INITIAL_NAVIGATION,
    useValue: 2
    /* InitialNavigation.Disabled */
  }];
  return routerFeature(3, providers);
}
function withDebugTracing() {
  let providers = [];
  if (typeof ngDevMode === "undefined" || ngDevMode) {
    providers = [{
      provide: ENVIRONMENT_INITIALIZER,
      multi: true,
      useFactory: () => {
        const router = inject(Router);
        return () => router.events.subscribe((e) => {
          console.group?.(`Router Event: ${e.constructor.name}`);
          console.log(stringifyEvent(e));
          console.log(e);
          console.groupEnd?.();
        });
      }
    }];
  } else {
    providers = [];
  }
  return routerFeature(1, providers);
}
var ROUTER_PRELOADER = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "router preloader" : "");
function withPreloading(preloadingStrategy) {
  const providers = [{
    provide: ROUTER_PRELOADER,
    useExisting: RouterPreloader
  }, {
    provide: PreloadingStrategy,
    useExisting: preloadingStrategy
  }];
  return routerFeature(0, providers);
}
function withComponentInputBinding() {
  const providers = [RoutedComponentInputBinder, {
    provide: INPUT_BINDER,
    useExisting: RoutedComponentInputBinder
  }];
  return routerFeature(8, providers);
}
function withViewTransitions(options) {
  const providers = [{
    provide: CREATE_VIEW_TRANSITION,
    useValue: createViewTransition
  }, {
    provide: VIEW_TRANSITION_OPTIONS,
    useValue: __spreadValues({
      skipNextTransition: !!options?.skipInitialTransition
    }, options)
  }];
  return routerFeature(9, providers);
}
var ROUTER_DIRECTIVES = [RouterOutlet, RouterLink, RouterLinkActive, \u0275EmptyOutletComponent];
var ROUTER_FORROOT_GUARD = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "router duplicate forRoot guard" : "ROUTER_FORROOT_GUARD");
var ROUTER_PROVIDERS = [
  Location,
  {
    provide: UrlSerializer,
    useClass: DefaultUrlSerializer
  },
  Router,
  ChildrenOutletContexts,
  {
    provide: ActivatedRoute,
    useFactory: rootRoute,
    deps: [Router]
  },
  RouterConfigLoader,
  // Only used to warn when `provideRoutes` is used without `RouterModule` or `provideRouter`. Can
  // be removed when `provideRoutes` is removed.
  typeof ngDevMode === "undefined" || ngDevMode ? {
    provide: ROUTER_IS_PROVIDED,
    useValue: true
  } : []
];
var _RouterModule = class _RouterModule {
  constructor(guard) {
  }
  /**
   * Creates and configures a module with all the router providers and directives.
   * Optionally sets up an application listener to perform an initial navigation.
   *
   * When registering the NgModule at the root, import as follows:
   *
   * ```
   * @NgModule({
   *   imports: [RouterModule.forRoot(ROUTES)]
   * })
   * class MyNgModule {}
   * ```
   *
   * @param routes An array of `Route` objects that define the navigation paths for the application.
   * @param config An `ExtraOptions` configuration object that controls how navigation is performed.
   * @return The new `NgModule`.
   *
   */
  static forRoot(routes2, config2) {
    return {
      ngModule: _RouterModule,
      providers: [ROUTER_PROVIDERS, typeof ngDevMode === "undefined" || ngDevMode ? config2?.enableTracing ? withDebugTracing().\u0275providers : [] : [], {
        provide: ROUTES,
        multi: true,
        useValue: routes2
      }, {
        provide: ROUTER_FORROOT_GUARD,
        useFactory: provideForRootGuard,
        deps: [[Router, new Optional(), new SkipSelf()]]
      }, {
        provide: ROUTER_CONFIGURATION,
        useValue: config2 ? config2 : {}
      }, config2?.useHash ? provideHashLocationStrategy() : providePathLocationStrategy(), provideRouterScroller(), config2?.preloadingStrategy ? withPreloading(config2.preloadingStrategy).\u0275providers : [], config2?.initialNavigation ? provideInitialNavigation(config2) : [], config2?.bindToComponentInputs ? withComponentInputBinding().\u0275providers : [], config2?.enableViewTransitions ? withViewTransitions().\u0275providers : [], provideRouterInitializer()]
    };
  }
  /**
   * Creates a module with all the router directives and a provider registering routes,
   * without creating a new Router service.
   * When registering for submodules and lazy-loaded submodules, create the NgModule as follows:
   *
   * ```
   * @NgModule({
   *   imports: [RouterModule.forChild(ROUTES)]
   * })
   * class MyNgModule {}
   * ```
   *
   * @param routes An array of `Route` objects that define the navigation paths for the submodule.
   * @return The new NgModule.
   *
   */
  static forChild(routes2) {
    return {
      ngModule: _RouterModule,
      providers: [{
        provide: ROUTES,
        multi: true,
        useValue: routes2
      }]
    };
  }
};
_RouterModule.\u0275fac = function RouterModule_Factory(t) {
  return new (t || _RouterModule)(\u0275\u0275inject(ROUTER_FORROOT_GUARD, 8));
};
_RouterModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({
  type: _RouterModule
});
_RouterModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({});
var RouterModule = _RouterModule;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && setClassMetadata(RouterModule, [{
    type: NgModule,
    args: [{
      imports: ROUTER_DIRECTIVES,
      exports: ROUTER_DIRECTIVES
    }]
  }], () => [{
    type: void 0,
    decorators: [{
      type: Optional
    }, {
      type: Inject,
      args: [ROUTER_FORROOT_GUARD]
    }]
  }], null);
})();
function provideRouterScroller() {
  return {
    provide: ROUTER_SCROLLER,
    useFactory: () => {
      const viewportScroller = inject(ViewportScroller);
      const zone = inject(NgZone);
      const config2 = inject(ROUTER_CONFIGURATION);
      const transitions = inject(NavigationTransitions);
      const urlSerializer = inject(UrlSerializer);
      if (config2.scrollOffset) {
        viewportScroller.setOffset(config2.scrollOffset);
      }
      return new RouterScroller(urlSerializer, transitions, viewportScroller, zone, config2);
    }
  };
}
function provideHashLocationStrategy() {
  return {
    provide: LocationStrategy,
    useClass: HashLocationStrategy
  };
}
function providePathLocationStrategy() {
  return {
    provide: LocationStrategy,
    useClass: PathLocationStrategy
  };
}
function provideForRootGuard(router) {
  if ((typeof ngDevMode === "undefined" || ngDevMode) && router) {
    throw new RuntimeError(4007, `The Router was provided more than once. This can happen if 'forRoot' is used outside of the root injector. Lazy loaded modules should use RouterModule.forChild() instead.`);
  }
  return "guarded";
}
function provideInitialNavigation(config2) {
  return [config2.initialNavigation === "disabled" ? withDisabledInitialNavigation().\u0275providers : [], config2.initialNavigation === "enabledBlocking" ? withEnabledBlockingInitialNavigation().\u0275providers : []];
}
var ROUTER_INITIALIZER = new InjectionToken(typeof ngDevMode === "undefined" || ngDevMode ? "Router Initializer" : "");
function provideRouterInitializer() {
  return [
    // ROUTER_INITIALIZER token should be removed. It's public API but shouldn't be. We can just
    // have `getBootstrapListener` directly attached to APP_BOOTSTRAP_LISTENER.
    {
      provide: ROUTER_INITIALIZER,
      useFactory: getBootstrapListener
    },
    {
      provide: APP_BOOTSTRAP_LISTENER,
      multi: true,
      useExisting: ROUTER_INITIALIZER
    }
  ];
}
var VERSION6 = new Version("17.0.7");

// src/app/navigation.guard.ts
var navigationGuard = (route, state2) => {
  const router = inject(Router);
  if (router.navigated) {
    return true;
  } else {
    router.navigate(["/"]).then(() => {
      router.navigate(["/"]);
    });
    return false;
  }
  ;
};

// src/app/app.properties.ts
var MESSAGE_URL = {
  "sunlight": "https://docs.google.com/spreadsheets/d/e/2PACX-1vQz6cjguH-7bIjL4nfA6EadHzMWAO6ZLJ9xqZAS8j3TILRNNDZ-JDVAzCz5yTNrsSaktn-L0F7ofoQh/pub?gid=737277178&single=true&output=csv"
};
var MAX_COUNT_PER_PAGE = 50;
var LEVEL_DISPLAY_TEXT = {
  "sunlight": "Layer I : The Sunlight Zone",
  "twilight": "\u{1F512}Layer II : The Twilight Zone",
  "midnight": "\u{1F512}Layer III : The Midnight Zone",
  "abyss": "\u{1F512}Layer IV : The Abyss",
  "trenches": "\u{1F512}Layer V : The Trenches"
};
var PROJECT_LIST = {
  "sunlight": ["fenchanted", "amiore", "whisper-from-the-deep-sea", "more-projects"]
};
var PROJECT_NAME_LIST = {
  "fenchanted": "FEnchanted",
  "amiore": "AMiORE",
  "whisper-from-the-deep-sea": "Whisper From The Deep Sea",
  "more-projects": "More Projects"
};

// src/app/credits/credits.component.ts
var _CreditsComponent = class _CreditsComponent {
  constructor(dialogRef) {
    this.dialogRef = dialogRef;
  }
  onClose() {
    this.dialogRef.close();
  }
};
_CreditsComponent.\u0275fac = function CreditsComponent_Factory(t) {
  return new (t || _CreditsComponent)(\u0275\u0275directiveInject(MatDialogRef));
};
_CreditsComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _CreditsComponent, selectors: [["app-credits"]], decls: 103, vars: 0, consts: [[1, "lightBox"], [1, "closeBtn", 3, "click"], [1, "creditsContainer"], ["href", "https://twitter.com/ytterbunny", "target", "_blank"], ["href", "https://twitter.com/LeafeyeZ", "target", "_blank"], ["href", "https://twitter.com/Redsaturn__n", "target", "_blank"], ["href", "https://twitter.com/FEnchanted0802", "target", "_blank"], ["href", "https://twitter.com/AMiORE0802", "target", "_blank"], ["href", "https://twitter.com/DeepSea_0802", "target", "_blank"], ["href", "https://twitter.com/RODKENFORSND", "target", "_blank"], ["href", "https://twitter.com/jabchaisaimoo", "target", "_blank"], ["href", "https://twitter.com/Real_SweetHoney", "target", "_blank"], ["href", "https://twitter.com/hashtag/WalkingwithSchnei?src=hashtag_click", "target", "_blank"], ["href", "https://codepen.io/Fahrek", "target", "_blank"], ["href", "https://fonts.google.com/specimen/Mitr?subset=thai", "target", "_blank"], ["href", "https://www.f0nt.com/release/dm-twilight/", "target", "_blank"], ["matTooltip", "The most handsome, good-looking, attractive, gorgeous, fine, stunning, elegant, fanciable, well-proportioned, hot, fit, sexy, and lovely man in the universe. a.k.a. Aj. Chai", "matTooltipPosition", "below", "matTooltipShowDelay", "1000"], ["href", "https://twitter.com/Schneider_ARP", "target", "_blank"], [1, "titleTypo"]], template: function CreditsComponent_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 0)(1, "img", 1);
    \u0275\u0275listener("click", function CreditsComponent_Template_img_click_1_listener() {
      return ctx.onClose();
    });
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2, "div", 2)(3, "h1");
    \u0275\u0275text(4, "Credits");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "dl")(6, "dt");
    \u0275\u0275text(7, "Website Design & Implementation");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(8, "dd")(9, "a", 3);
    \u0275\u0275text(10, "Ytterbunny");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(11, "dt");
    \u0275\u0275text(12, "Arts");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(13, "dd")(14, "a", 3);
    \u0275\u0275text(15, "Zany");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(16, "dt");
    \u0275\u0275text(17, "Art Animation");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(18, "dd")(19, "a", 3);
    \u0275\u0275text(20, "Vanda");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(21, "h3");
    \u0275\u0275text(22, "Me, Myself & I");
    \u0275\u0275elementEnd();
    \u0275\u0275element(23, "br");
    \u0275\u0275elementStart(24, "dl")(25, "dt");
    \u0275\u0275text(26, "UX & UI Consultant");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(27, "dd")(28, "a", 4);
    \u0275\u0275text(29, "LeafeyeS");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(30, "dt");
    \u0275\u0275text(31, "Time Line Content");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(32, "dd")(33, "a", 5);
    \u0275\u0275text(34, "Redsaturn");
    \u0275\u0275elementEnd()();
    \u0275\u0275element(35, "dt");
    \u0275\u0275elementStart(36, "dd")(37, "a", 3);
    \u0275\u0275text(38, "Ytterbunny");
    \u0275\u0275elementEnd()();
    \u0275\u0275element(39, "dt");
    \u0275\u0275elementStart(40, "dd")(41, "a", 4);
    \u0275\u0275text(42, "LeafeyeS");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(43, "dt");
    \u0275\u0275text(44, "Letter Form");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(45, "dd")(46, "a", 4);
    \u0275\u0275text(47, "LeafeyeS");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(48, "dt");
    \u0275\u0275text(49, "Birthday Projects");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(50, "dd")(51, "a", 6);
    \u0275\u0275text(52, "FEnchanted");
    \u0275\u0275elementEnd()();
    \u0275\u0275element(53, "dt");
    \u0275\u0275elementStart(54, "dd")(55, "a", 7);
    \u0275\u0275text(56, "AMiORE");
    \u0275\u0275elementEnd()();
    \u0275\u0275element(57, "dt");
    \u0275\u0275elementStart(58, "dd")(59, "a", 8);
    \u0275\u0275text(60, "Whisper From The Deep Sea");
    \u0275\u0275elementEnd()();
    \u0275\u0275element(61, "dt");
    \u0275\u0275elementStart(62, "dd")(63, "a", 9);
    \u0275\u0275text(64, "RODKENFORSND");
    \u0275\u0275elementEnd()();
    \u0275\u0275element(65, "dt");
    \u0275\u0275elementStart(66, "dd")(67, "a", 10);
    \u0275\u0275text(68, "Mum-Mum Na Krub Sud Suay");
    \u0275\u0275elementEnd()();
    \u0275\u0275element(69, "dt");
    \u0275\u0275elementStart(70, "dd")(71, "a", 11);
    \u0275\u0275text(72, "\u0E2A\u0E27\u0E31\u0E2A\u0E14\u0E35\u0E04\u0E48\u0E30 \u0E1E\u0E27\u0E01\u0E40\u0E23\u0E32\u0E41\u0E21\u0E48\u0E19\u0E49\u0E33\u0E1C\u0E36\u0E49\u0E07\u0E15\u0E31\u0E27\u0E08\u0E23\u0E34\u0E07");
    \u0275\u0275elementEnd()();
    \u0275\u0275element(73, "dt");
    \u0275\u0275elementStart(74, "dd")(75, "a", 12);
    \u0275\u0275text(76, "WalkingwithSchnei");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(77, "dt");
    \u0275\u0275text(78, "Time Line Prototype Design");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(79, "dd")(80, "a", 13);
    \u0275\u0275text(81, "Andres");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(82, "dt");
    \u0275\u0275text(83, "Font");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(84, "dd")(85, "a", 14);
    \u0275\u0275text(86, "Mitr");
    \u0275\u0275elementEnd()();
    \u0275\u0275element(87, "dt");
    \u0275\u0275elementStart(88, "dd")(89, "a", 15);
    \u0275\u0275text(90, "DM Twilight");
    \u0275\u0275elementEnd()()();
    \u0275\u0275element(91, "br");
    \u0275\u0275elementStart(92, "span");
    \u0275\u0275text(93, "Non-commercial Use");
    \u0275\u0275elementEnd();
    \u0275\u0275element(94, "br")(95, "br")(96, "br");
    \u0275\u0275elementStart(97, "h3");
    \u0275\u0275text(98, "Special Thanks");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(99, "h1", 16)(100, "a", 17);
    \u0275\u0275text(101, "Star Lord Schneider ARP");
    \u0275\u0275elementEnd()();
    \u0275\u0275element(102, "img", 18);
    \u0275\u0275elementEnd()();
  }
}, dependencies: [MatTooltip], styles: ['\n\n.creditsContainer[_ngcontent-%COMP%] {\n  overflow-y: scroll;\n  padding-top: 10%;\n  padding-bottom: 200px;\n  font-style: italic;\n}\n.titleTypo[_ngcontent-%COMP%] {\n  content: url("./media/typo.PNG");\n  width: 500px;\n  height: auto;\n  margin-top: 5%;\n}\n.closeBtn[_ngcontent-%COMP%] {\n  position: fixed;\n  top: 10px;\n  right: 10px;\n  content: url("./media/close-icon.PNG");\n  z-index: 1;\n  height: 70px;\n  width: auto;\n}\n.closeBtn[_ngcontent-%COMP%]:hover {\n  content: url("./media/close-icon-hover.PNG");\n  height: 70px;\n  width: auto;\n  cursor: pointer;\n  transform: scale(1.1);\n}\ndt[_ngcontent-%COMP%] {\n  display: block;\n  float: left;\n  width: 50%;\n  text-align: right;\n}\ndt[_ngcontent-%COMP%]:after {\n  content: ":";\n  font-style: normal;\n  padding: 5px;\n}\ndd[_ngcontent-%COMP%] {\n  display: block;\n  text-align: left;\n  margin: 2px 0px;\n}\n@media only screen and (max-height: 600px) and (orientation: landscape), only screen and (min-width: 768px) and (max-width: 1024px), only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 1), only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 2), only screen and (min-device-width: 1112px) and (max-device-width: 1112px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 2), only screen and (min-device-width: 1366px) and (max-device-width: 1366px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 2) {\n  .titleTypo[_ngcontent-%COMP%] {\n    width: 400px;\n  }\n  .closeBtn[_ngcontent-%COMP%] {\n    height: 55px;\n  }\n  .closeBtn[_ngcontent-%COMP%]:hover {\n    height: 55px;\n  }\n}\n@media only screen and (min-height: 1100px) and (orientation: landscape) {\n  .titleTypo[_ngcontent-%COMP%] {\n    width: 700px;\n  }\n}\n@media only screen and (max-height: 400px) and (orientation: landscape), only screen and (min-width: 390px) and (max-width: 768px) and (orientation: landscape), only screen and (device-width: 360px) and (device-height: 640px) and (-webkit-device-pixel-ratio: 4) and (orientation: landscape), only screen and (min-device-width: 390px) and (max-device-width: 844px) and (-webkit-min-device-pixel-ratio: 4) and (orientation: landscape), only screen and (min-device-width: 414px) and (max-device-width: 736px) and (-webkit-min-device-pixel-ratio: 3) and (orientation: landscape), only screen and (min-device-width: 375px) and (max-device-width: 812px) and (-webkit-min-device-pixel-ratio: 3) and (orientation: landscape) {\n  .creditsContainer[_ngcontent-%COMP%] {\n    overflow-y: scroll;\n    padding-bottom: 100px;\n  }\n  .titleTypo[_ngcontent-%COMP%] {\n    width: 280px;\n  }\n  .closeBtn[_ngcontent-%COMP%] {\n    height: 40px;\n  }\n  .closeBtn[_ngcontent-%COMP%]:hover {\n    height: 40px;\n  }\n}\n/*# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL2FwcC9jcmVkaXRzL2NyZWRpdHMuY29tcG9uZW50LmNzcyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiXHJcbi5jcmVkaXRzQ29udGFpbmVyIHtcclxuICBvdmVyZmxvdy15OiBzY3JvbGw7XHJcbiAgcGFkZGluZy10b3A6IDEwJTtcclxuICBwYWRkaW5nLWJvdHRvbTogMjAwcHg7XHJcbiAgZm9udC1zdHlsZTogaXRhbGljO1xyXG59XHJcbi50aXRsZVR5cG8ge1xyXG4gIGNvbnRlbnQ6IHVybChcIi4uLy4uL2Fzc2V0cy9pbWFnZXMvdHlwby5QTkdcIik7XHJcbiAgd2lkdGg6IDUwMHB4O1xyXG4gIGhlaWdodDogYXV0bztcclxuICBtYXJnaW4tdG9wOiA1JTtcclxufVxyXG4uY2xvc2VCdG4ge1xyXG4gIHBvc2l0aW9uOiBmaXhlZDtcclxuICB0b3A6IDEwcHg7XHJcbiAgcmlnaHQ6IDEwcHg7XHJcbiAgY29udGVudDp1cmwoXCIuLi8uLi9hc3NldHMvaW1hZ2VzL2Nsb3NlLWljb24uUE5HXCIpO1xyXG4gIHotaW5kZXg6IDE7XHJcbiAgaGVpZ2h0OiA3MHB4O1xyXG4gIHdpZHRoOiBhdXRvO1xyXG59XHJcbi5jbG9zZUJ0bjpob3ZlciB7XHJcbiAgY29udGVudDp1cmwoXCIuLi8uLi9hc3NldHMvaW1hZ2VzL2Nsb3NlLWljb24taG92ZXIuUE5HXCIpO1xyXG4gIGhlaWdodDogNzBweDtcclxuICB3aWR0aDogYXV0bztcclxuICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgdHJhbnNmb3JtOiBzY2FsZSgxLjEpO1xyXG59XHJcblxyXG5kdCB7XHJcbiAgZGlzcGxheTpibG9jaztcclxuICBmbG9hdDpsZWZ0O1xyXG4gIHdpZHRoOjUwJTtcclxuICB0ZXh0LWFsaWduOiByaWdodDtcclxufVxyXG5kdDphZnRlcntcclxuICBjb250ZW50Oic6JztcclxuICBmb250LXN0eWxlOiBub3JtYWw7XHJcbiAgcGFkZGluZzogNXB4O1xyXG59XHJcbmRkIHtcclxuICBkaXNwbGF5OmJsb2NrO1xyXG4gIHRleHQtYWxpZ246IGxlZnQ7XHJcbiAgbWFyZ2luOiAycHggMHB4O1xyXG59XHJcblxyXG5cclxuLyogcGMgc21hbGwgKi9cclxuQG1lZGlhIG9ubHkgc2NyZWVuXHJcbiAgYW5kIChtYXgtaGVpZ2h0OiA2MDBweClcclxuICBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpLFxyXG5vbmx5IHNjcmVlblxyXG4gIGFuZCAobWluLXdpZHRoOiA3NjhweClcclxuICBhbmQgKG1heC13aWR0aDogMTAyNHB4KSxcclxuLyogaVBhZCAqL1xyXG5vbmx5IHNjcmVlblxyXG4gIGFuZCAobWluLWRldmljZS13aWR0aDogNzY4cHgpXHJcbiAgYW5kIChtYXgtZGV2aWNlLXdpZHRoOiAxMDI0cHgpXHJcbiAgYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKVxyXG4gIGFuZCAoLXdlYmtpdC1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAxKSxcclxub25seSBzY3JlZW5cclxuICBhbmQgKG1pbi1kZXZpY2Utd2lkdGg6IDc2OHB4KVxyXG4gIGFuZCAobWF4LWRldmljZS13aWR0aDogMTAyNHB4KVxyXG4gIGFuZCAob3JpZW50YXRpb246IGxhbmRzY2FwZSlcclxuICBhbmQgKC13ZWJraXQtbWluLWRldmljZS1waXhlbC1yYXRpbzogMiksXHJcbm9ubHkgc2NyZWVuXHJcbiAgYW5kIChtaW4tZGV2aWNlLXdpZHRoOiAxMTEycHgpXHJcbiAgYW5kIChtYXgtZGV2aWNlLXdpZHRoOiAxMTEycHgpXHJcbiAgYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKVxyXG4gIGFuZCAoLXdlYmtpdC1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAyKSxcclxub25seSBzY3JlZW5cclxuICBhbmQgKG1pbi1kZXZpY2Utd2lkdGg6IDEzNjZweClcclxuICBhbmQgKG1heC1kZXZpY2Utd2lkdGg6IDEzNjZweClcclxuICBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpXHJcbiAgYW5kICgtd2Via2l0LW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDIpIHtcclxuICAudGl0bGVUeXBvIHtcclxuICAgIHdpZHRoOiA0MDBweDtcclxuICB9XHJcbiAgLmNsb3NlQnRuIHtcclxuICAgICAgaGVpZ2h0OiA1NXB4O1xyXG4gIH1cclxuICAuY2xvc2VCdG46aG92ZXIge1xyXG4gICAgICBoZWlnaHQ6IDU1cHg7XHJcbiAgfVxyXG5cclxuICAvKi5jcmVkaXRzQ29udGFpbmVyIHsgIC8vIHRoaXMgaXMganVzdCBmb3IgdGVzdGluZyB0aGUgQG1lZGlhXHJcbiAgICBjb2xvcjogcmVkO1xyXG4gIH0qL1xyXG59XHJcblxyXG4vKiBwYyBsYXJnZSAqL1xyXG5AbWVkaWEgb25seSBzY3JlZW5cclxuICBhbmQgKG1pbi1oZWlnaHQ6IDExMDBweClcclxuICBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpIHtcclxuICAudGl0bGVUeXBvIHtcclxuICAgIHdpZHRoOiA3MDBweDtcclxuICB9XHJcbn1cclxuXHJcbi8qIHBjIGV4dHJhIHNtYWxsICovXHJcbkBtZWRpYSBvbmx5IHNjcmVlblxyXG4gIGFuZCAobWF4LWhlaWdodDogNDAwcHgpXHJcbiAgYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKSxcclxub25seSBzY3JlZW5cclxuICBhbmQgKG1pbi13aWR0aDogMzkwcHgpXHJcbiAgYW5kIChtYXgtd2lkdGg6IDc2OHB4KVxyXG4gIGFuZCAob3JpZW50YXRpb246IGxhbmRzY2FwZSksXHJcbi8qIFBob25lICovXHJcbm9ubHkgc2NyZWVuXHJcbiAgYW5kIChkZXZpY2Utd2lkdGg6IDM2MHB4KVxyXG4gIGFuZCAoZGV2aWNlLWhlaWdodDogNjQwcHgpXHJcbiAgYW5kICgtd2Via2l0LWRldmljZS1waXhlbC1yYXRpbzogNClcclxuICBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpLFxyXG5vbmx5IHNjcmVlblxyXG4gIGFuZCAobWluLWRldmljZS13aWR0aDogMzkwcHgpXHJcbiAgYW5kIChtYXgtZGV2aWNlLXdpZHRoOiA4NDRweClcclxuICBhbmQgKC13ZWJraXQtbWluLWRldmljZS1waXhlbC1yYXRpbzogNClcclxuICBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpLFxyXG5vbmx5IHNjcmVlblxyXG4gIGFuZCAobWluLWRldmljZS13aWR0aDogNDE0cHgpXHJcbiAgYW5kIChtYXgtZGV2aWNlLXdpZHRoOiA3MzZweClcclxuICBhbmQgKC13ZWJraXQtbWluLWRldmljZS1waXhlbC1yYXRpbzogMylcclxuICBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpLFxyXG5vbmx5IHNjcmVlblxyXG4gIGFuZCAobWluLWRldmljZS13aWR0aDogMzc1cHgpXHJcbiAgYW5kIChtYXgtZGV2aWNlLXdpZHRoOiA4MTJweClcclxuICBhbmQgKC13ZWJraXQtbWluLWRldmljZS1waXhlbC1yYXRpbzogMylcclxuICBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpIHtcclxuICAuY3JlZGl0c0NvbnRhaW5lciB7XHJcbiAgICBvdmVyZmxvdy15OiBzY3JvbGw7XHJcbiAgICBwYWRkaW5nLWJvdHRvbTogMTAwcHg7XHJcbiAgfVxyXG4gIC50aXRsZVR5cG8ge1xyXG4gICAgd2lkdGg6IDI4MHB4O1xyXG4gIH1cclxuICAuY2xvc2VCdG4ge1xyXG4gICAgaGVpZ2h0OiA0MHB4O1xyXG4gIH1cclxuICAuY2xvc2VCdG46aG92ZXIge1xyXG4gICAgaGVpZ2h0OiA0MHB4O1xyXG4gIH1cclxuICAvKi5jcmVkaXRzQ29udGFpbmVyIHtcclxuICAgIGNvbG9yOiBibHVlOyAgLy8gdGVzdFxyXG4gIH0qL1xyXG59XHJcbiJdLAogICJtYXBwaW5ncyI6ICI7QUFDQSxDQUFDO0FBQ0MsY0FBWTtBQUNaLGVBQWE7QUFDYixrQkFBZ0I7QUFDaEIsY0FBWTtBQUNkO0FBQ0EsQ0FBQztBQUNDLFdBQVM7QUFDVCxTQUFPO0FBQ1AsVUFBUTtBQUNSLGNBQVk7QUFDZDtBQUNBLENBQUM7QUFDQyxZQUFVO0FBQ1YsT0FBSztBQUNMLFNBQU87QUFDUCxXQUFRO0FBQ1IsV0FBUztBQUNULFVBQVE7QUFDUixTQUFPO0FBQ1Q7QUFDQSxDQVRDLFFBU1E7QUFDUCxXQUFRO0FBQ1IsVUFBUTtBQUNSLFNBQU87QUFDUCxVQUFRO0FBQ1IsYUFBVyxNQUFNO0FBQ25CO0FBRUE7QUFDRSxXQUFRO0FBQ1IsU0FBTTtBQUNOLFNBQU07QUFDTixjQUFZO0FBQ2Q7QUFDQSxFQUFFO0FBQ0EsV0FBUTtBQUNSLGNBQVk7QUFDWixXQUFTO0FBQ1g7QUFDQTtBQUNFLFdBQVE7QUFDUixjQUFZO0FBQ1osVUFBUSxJQUFJO0FBQ2Q7QUFJQSxPQUFPLEtBQUssT0FDVixJQUFJLENBQUMsVUFBVSxFQUFFLE9BQ2pCLElBQUksQ0FBQyxXQUFXLEVBQUUsVUFBVSxFQUM5QixLQUFLLE9BQ0gsSUFBSSxDQUFDLFNBQVMsRUFBRSxPQUNoQixJQUFJLENBQUMsU0FBUyxFQUFFLE9BQU8sRUFFekIsS0FBSyxPQUNILElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxPQUN2QixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsUUFDdkIsSUFBSSxDQUFDLFdBQVcsRUFBRSxXQUNsQixJQUFJLENBQUMsOEJBQThCLEVBQUUsRUFBRSxFQUN6QyxLQUFLLE9BQ0gsSUFBSSxDQUFDLGdCQUFnQixFQUFFLE9BQ3ZCLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxRQUN2QixJQUFJLENBQUMsV0FBVyxFQUFFLFdBQ2xCLElBQUksQ0FBQyw4QkFBOEIsRUFBRSxFQUFFLEVBQ3pDLEtBQUssT0FDSCxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsUUFDdkIsSUFBSSxDQUFDLGdCQUFnQixFQUFFLFFBQ3ZCLElBQUksQ0FBQyxXQUFXLEVBQUUsV0FDbEIsSUFBSSxDQUFDLDhCQUE4QixFQUFFLEVBQUUsRUFDekMsS0FBSyxPQUNILElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxRQUN2QixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsUUFDdkIsSUFBSSxDQUFDLFdBQVcsRUFBRSxXQUNsQixJQUFJLENBQUMsOEJBQThCLEVBQUU7QUFDckMsR0FyRUQ7QUFzRUcsV0FBTztBQUNUO0FBQ0EsR0FsRUQ7QUFtRUssWUFBUTtBQUNaO0FBQ0EsR0FyRUQsUUFxRVU7QUFDTCxZQUFRO0FBQ1o7QUFLRjtBQUdBLE9BQU8sS0FBSyxPQUNWLElBQUksQ0FBQyxVQUFVLEVBQUUsUUFDakIsSUFBSSxDQUFDLFdBQVcsRUFBRTtBQUNsQixHQXhGRDtBQXlGRyxXQUFPO0FBQ1Q7QUFDRjtBQUdBLE9BQU8sS0FBSyxPQUNWLElBQUksQ0FBQyxVQUFVLEVBQUUsT0FDakIsSUFBSSxDQUFDLFdBQVcsRUFBRSxVQUFVLEVBQzlCLEtBQUssT0FDSCxJQUFJLENBQUMsU0FBUyxFQUFFLE9BQ2hCLElBQUksQ0FBQyxTQUFTLEVBQUUsT0FDaEIsSUFBSSxDQUFDLFdBQVcsRUFBRSxVQUFVLEVBRTlCLEtBQUssT0FDSCxJQUFJLENBQUMsWUFBWSxFQUFFLE9BQ25CLElBQUksQ0FBQyxhQUFhLEVBQUUsT0FDcEIsSUFBSSxDQUFDLDBCQUEwQixFQUFFLEdBQ2pDLElBQUksQ0FBQyxXQUFXLEVBQUUsVUFBVSxFQUM5QixLQUFLLE9BQ0gsSUFBSSxDQUFDLGdCQUFnQixFQUFFLE9BQ3ZCLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxPQUN2QixJQUFJLENBQUMsOEJBQThCLEVBQUUsR0FDckMsSUFBSSxDQUFDLFdBQVcsRUFBRSxVQUFVLEVBQzlCLEtBQUssT0FDSCxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsT0FDdkIsSUFBSSxDQUFDLGdCQUFnQixFQUFFLE9BQ3ZCLElBQUksQ0FBQyw4QkFBOEIsRUFBRSxHQUNyQyxJQUFJLENBQUMsV0FBVyxFQUFFLFVBQVUsRUFDOUIsS0FBSyxPQUNILElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxPQUN2QixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsT0FDdkIsSUFBSSxDQUFDLDhCQUE4QixFQUFFLEdBQ3JDLElBQUksQ0FBQyxXQUFXLEVBQUU7QUFDbEIsR0FoSUQ7QUFpSUcsZ0JBQVk7QUFDWixvQkFBZ0I7QUFDbEI7QUFDQSxHQTlIRDtBQStIRyxXQUFPO0FBQ1Q7QUFDQSxHQTNIRDtBQTRIRyxZQUFRO0FBQ1Y7QUFDQSxHQTlIRCxRQThIVTtBQUNQLFlBQVE7QUFDVjtBQUlGOyIsCiAgIm5hbWVzIjogW10KfQo= */'] });
var CreditsComponent = _CreditsComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(CreditsComponent, { className: "CreditsComponent", filePath: "src\\app\\credits\\credits.component.ts", lineNumber: 10 });
})();

// src/app/tool-bar/tool-bar.component.ts
function ToolBarComponent_a_2_Template(rf, ctx) {
  if (rf & 1) {
    const _r4 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "a", 6);
    \u0275\u0275listener("click", function ToolBarComponent_a_2_Template_a_click_0_listener() {
      \u0275\u0275restoreView(_r4);
      const ctx_r3 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r3.onBackToTopSelect());
    });
    \u0275\u0275element(1, "img", 7);
    \u0275\u0275elementEnd();
  }
}
function ToolBarComponent_img_3_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "img", 8);
    \u0275\u0275listener("click", function ToolBarComponent_img_3_Template_img_click_0_listener() {
      \u0275\u0275restoreView(_r6);
      const ctx_r5 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r5.goBack());
    });
    \u0275\u0275elementEnd();
  }
}
function ToolBarComponent_div_4_span_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "span", 11);
    \u0275\u0275text(1, "\xA0\u2726\xA0");
    \u0275\u0275elementEnd();
  }
}
function ToolBarComponent_div_4_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 9)(1, "h3");
    \u0275\u0275text(2);
    \u0275\u0275template(3, ToolBarComponent_div_4_span_3_Template, 2, 0, "span", 10);
    \u0275\u0275text(4);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate1(" ", ctx_r2.level ? ctx_r2.levelDisplayText[ctx_r2.level] : "The Unknown", " ");
    \u0275\u0275advance(1);
    \u0275\u0275property("ngIf", ctx_r2.sublevel);
    \u0275\u0275advance(1);
    \u0275\u0275textInterpolate1(" ", ctx_r2.sublevel ? ctx_r2.sublevel : "", " ");
  }
}
var _ToolBarComponent = class _ToolBarComponent {
  constructor(location2, dialog) {
    this.location = location2;
    this.dialog = dialog;
    this.sublevel = "";
    this.showBackToTop = true;
    this.showBack = true;
    this.levelDisplayText = LEVEL_DISPLAY_TEXT;
  }
  goBack() {
    this.location.back();
  }
  onBackToTopSelect() {
    document.getElementById("oceanBaseBg")?.scrollIntoView({
      behavior: "smooth",
      block: "start",
      inline: "nearest"
    });
  }
  onOpenCredits() {
    const dialogRef = this.dialog.open(CreditsComponent, {
      height: "calc(100%)",
      maxHeight: "calc(100%)",
      width: "calc(100%)",
      maxWidth: "calc(100%)",
      autoFocus: false
    });
  }
};
_ToolBarComponent.\u0275fac = function ToolBarComponent_Factory(t) {
  return new (t || _ToolBarComponent)(\u0275\u0275directiveInject(Location), \u0275\u0275directiveInject(MatDialog));
};
_ToolBarComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ToolBarComponent, selectors: [["app-tool-bar"]], inputs: { level: "level", sublevel: "sublevel", showBackToTop: "showBackToTop", showBack: "showBack" }, decls: 6, vars: 5, consts: [[1, "toolBar"], [1, "backButtons", "toolBarIcon"], ["routerLink", "/", "matTooltip", "Back to Surface", "matTooltipPosition", "below", "matTooltipShowDelay", "1000", 3, "click", 4, "ngIf"], ["class", "backBtn", "type", "button", "matTooltip", "Back", "matTooltipPosition", "below", "matTooltipShowDelay", "1000", 3, "click", 4, "ngIf"], ["class", "levelDisplay", 4, "ngIf"], ["matTooltip", "Credits", "matTooltipPosition", "below", "matTooltipShowDelay", "1000", 1, "creditsBtn", "toolBarIcon", 3, "click"], ["routerLink", "/", "matTooltip", "Back to Surface", "matTooltipPosition", "below", "matTooltipShowDelay", "1000", 3, "click"], [1, "homeBtn"], ["type", "button", "matTooltip", "Back", "matTooltipPosition", "below", "matTooltipShowDelay", "1000", 1, "backBtn", 3, "click"], [1, "levelDisplay"], ["class", "separator", 4, "ngIf"], [1, "separator"]], template: function ToolBarComponent_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 0)(1, "div", 1);
    \u0275\u0275template(2, ToolBarComponent_a_2_Template, 2, 0, "a", 2)(3, ToolBarComponent_img_3_Template, 1, 0, "img", 3);
    \u0275\u0275elementEnd();
    \u0275\u0275template(4, ToolBarComponent_div_4_Template, 5, 3, "div", 4);
    \u0275\u0275elementStart(5, "img", 5);
    \u0275\u0275listener("click", function ToolBarComponent_Template_img_click_5_listener() {
      return ctx.onOpenCredits();
    });
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275classProp("toolBarWithShadow", ctx.showBack || ctx.showBackToTop);
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", ctx.showBackToTop);
    \u0275\u0275advance(1);
    \u0275\u0275property("ngIf", ctx.showBack);
    \u0275\u0275advance(1);
    \u0275\u0275property("ngIf", ctx.showBack || ctx.showBackToTop);
  }
}, dependencies: [NgIf, RouterLink, MatTooltip], styles: ['\n\n.toolBar[_ngcontent-%COMP%] {\n  display: block;\n  width: 100%;\n  height: 50px;\n}\n.toolBarWithShadow[_ngcontent-%COMP%] {\n  background-image: linear-gradient(to right, rgba(0, 0, 0, 0), rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0));\n}\n.backButtons[_ngcontent-%COMP%] {\n  position: absolute;\n  left: 20px;\n  top: 25px;\n  transform: translateY(-50%);\n}\n.toolBarIcon[_ngcontent-%COMP%] {\n  height: 45px;\n}\n.levelDisplay[_ngcontent-%COMP%] {\n  position: absolute;\n  left: 50%;\n  top: 20px;\n  transform: translate(-50%, -50%);\n}\n.levelDisplay[_ngcontent-%COMP%]    > h3[_ngcontent-%COMP%] {\n  font-family:\n    Twilight,\n    Mitr,\n    san-serif;\n  font-size: 1.8rem;\n}\n.levelDisplay[_ngcontent-%COMP%]   .separator[_ngcontent-%COMP%] {\n  font-size: 1rem;\n}\n.homeBtn[_ngcontent-%COMP%] {\n  content: url("./media/home-icon.PNG");\n  height: 100%;\n  width: auto;\n}\n.homeBtn[_ngcontent-%COMP%]:hover {\n  content: url("./media/home-icon-hover.PNG");\n  transform: scale(1.1);\n}\n.backBtn[_ngcontent-%COMP%] {\n  content: url("./media/back-icon.PNG");\n  height: 100%;\n  width: auto;\n}\n.backBtn[_ngcontent-%COMP%]:hover {\n  content: url("./media/back-icon-hover.PNG");\n  cursor: pointer;\n  transform: scale(1.1);\n}\n.creditsBtn[_ngcontent-%COMP%] {\n  position: absolute;\n  right: 5px;\n  top: 25px;\n  transform: translateY(-50%);\n  content: url("./media/credit-icon.PNG");\n  width: auto;\n}\n.creditsBtn[_ngcontent-%COMP%]:hover {\n  content: url("./media/credit-icon-hover.PNG");\n  cursor: pointer;\n  transform: scale(1.1) translateY(-50%);\n}\n@media only screen and (max-height: 400px) and (orientation: landscape), only screen and (min-width: 390px) and (max-width: 768px) and (orientation: landscape), only screen and (device-width: 360px) and (device-height: 640px) and (-webkit-device-pixel-ratio: 4) and (orientation: landscape), only screen and (min-device-width: 390px) and (max-device-width: 844px) and (-webkit-min-device-pixel-ratio: 4) and (orientation: landscape), only screen and (min-device-width: 414px) and (max-device-width: 736px) and (-webkit-min-device-pixel-ratio: 3) and (orientation: landscape), only screen and (min-device-width: 375px) and (max-device-width: 812px) and (-webkit-min-device-pixel-ratio: 3) and (orientation: landscape) {\n  .toolBar[_ngcontent-%COMP%] {\n    height: 35px;\n  }\n  .backButtons[_ngcontent-%COMP%] {\n    top: 18px;\n  }\n  .creditsBtn[_ngcontent-%COMP%] {\n    top: 18px;\n  }\n  .levelDisplay[_ngcontent-%COMP%] {\n    top: 13px;\n  }\n  .toolBarIcon[_ngcontent-%COMP%] {\n    height: 30px;\n  }\n  .levelDisplay[_ngcontent-%COMP%]    > h3[_ngcontent-%COMP%] {\n    font-size: 1.3rem;\n  }\n  .levelDisplay[_ngcontent-%COMP%]   .separator[_ngcontent-%COMP%] {\n    font-size: 0.8rem;\n  }\n}\n/*# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL2FwcC90b29sLWJhci90b29sLWJhci5jb21wb25lbnQuY3NzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyIudG9vbEJhciB7XHJcbiAgZGlzcGxheTogYmxvY2s7XHJcbiAgd2lkdGg6IDEwMCU7XHJcbiAgaGVpZ2h0OiA1MHB4O1xyXG59XHJcbi50b29sQmFyV2l0aFNoYWRvdyB7XHJcbiAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KFxyXG4gICAgdG8gcmlnaHQsXHJcbiAgICByZ2JhKDAsIDAsIDAsIDApLFxyXG4gICAgcmdiYSgwLCAwLCAwLCAwLjQpLFxyXG4gICAgcmdiYSgwLCAwLCAwLCAwKSk7XHJcbn1cclxuLmJhY2tCdXR0b25zIHtcclxuICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgbGVmdDogMjBweDtcclxuICB0b3A6IDI1cHg7XHJcbiAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpO1xyXG59XHJcbi50b29sQmFySWNvbiB7XHJcbiAgaGVpZ2h0OiA0NXB4O1xyXG59XHJcbi5sZXZlbERpc3BsYXkge1xyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICBsZWZ0OiA1MCU7XHJcbiAgdG9wOiAyMHB4O1xyXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xyXG59XHJcbi5sZXZlbERpc3BsYXkgPiBoMyB7XHJcbiAgZm9udC1mYW1pbHk6IFR3aWxpZ2h0LCBNaXRyLCBzYW4tc2VyaWY7XHJcbiAgZm9udC1zaXplOiAxLjhyZW07XHJcbn1cclxuLmxldmVsRGlzcGxheSAuc2VwYXJhdG9yIHtcclxuICBmb250LXNpemU6IDFyZW07XHJcbn1cclxuXHJcbi5ob21lQnRuIHtcclxuICBjb250ZW50OnVybChcIi4uLy4uL2Fzc2V0cy9pbWFnZXMvaG9tZS1pY29uLlBOR1wiKTtcclxuICBoZWlnaHQ6IDEwMCU7XHJcbiAgd2lkdGg6IGF1dG87XHJcbn1cclxuLmhvbWVCdG46aG92ZXIge1xyXG4gIGNvbnRlbnQ6dXJsKFwiLi4vLi4vYXNzZXRzL2ltYWdlcy9ob21lLWljb24taG92ZXIuUE5HXCIpO1xyXG4gIHRyYW5zZm9ybTogc2NhbGUoMS4xKTtcclxufVxyXG5cclxuLmJhY2tCdG4ge1xyXG4gIGNvbnRlbnQ6dXJsKFwiLi4vLi4vYXNzZXRzL2ltYWdlcy9iYWNrLWljb24uUE5HXCIpO1xyXG4gIGhlaWdodDogMTAwJTtcclxuICB3aWR0aDogYXV0bztcclxufVxyXG4uYmFja0J0bjpob3ZlciB7XHJcbiAgY29udGVudDp1cmwoXCIuLi8uLi9hc3NldHMvaW1hZ2VzL2JhY2staWNvbi1ob3Zlci5QTkdcIik7XHJcbiAgY3Vyc29yOiBwb2ludGVyO1xyXG4gIHRyYW5zZm9ybTogc2NhbGUoMS4xKTtcclxufVxyXG5cclxuLmNyZWRpdHNCdG4ge1xyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICByaWdodDogNXB4O1xyXG4gIHRvcDogMjVweDtcclxuICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XHJcbiAgY29udGVudDp1cmwoXCIuLi8uLi9hc3NldHMvaW1hZ2VzL2NyZWRpdC1pY29uLlBOR1wiKTtcclxuICB3aWR0aDogYXV0bztcclxufVxyXG4uY3JlZGl0c0J0bjpob3ZlciB7XHJcbiAgY29udGVudDp1cmwoXCIuLi8uLi9hc3NldHMvaW1hZ2VzL2NyZWRpdC1pY29uLWhvdmVyLlBOR1wiKTtcclxuICBjdXJzb3I6IHBvaW50ZXI7XHJcbiAgdHJhbnNmb3JtOiBzY2FsZSgxLjEpIHRyYW5zbGF0ZVkoLTUwJSk7XHJcbn1cclxuXHJcblxyXG4vKiBwYyBleHRyYSBzbWFsbCAqL1xyXG5AbWVkaWEgb25seSBzY3JlZW5cclxuICBhbmQgKG1heC1oZWlnaHQ6IDQwMHB4KVxyXG4gIGFuZCAob3JpZW50YXRpb246IGxhbmRzY2FwZSksXHJcbm9ubHkgc2NyZWVuXHJcbiAgYW5kIChtaW4td2lkdGg6IDM5MHB4KVxyXG4gIGFuZCAobWF4LXdpZHRoOiA3NjhweClcclxuICBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpLFxyXG4vKiBQaG9uZSAqL1xyXG5vbmx5IHNjcmVlblxyXG4gIGFuZCAoZGV2aWNlLXdpZHRoOiAzNjBweClcclxuICBhbmQgKGRldmljZS1oZWlnaHQ6IDY0MHB4KVxyXG4gIGFuZCAoLXdlYmtpdC1kZXZpY2UtcGl4ZWwtcmF0aW86IDQpXHJcbiAgYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKSxcclxub25seSBzY3JlZW5cclxuICBhbmQgKG1pbi1kZXZpY2Utd2lkdGg6IDM5MHB4KVxyXG4gIGFuZCAobWF4LWRldmljZS13aWR0aDogODQ0cHgpXHJcbiAgYW5kICgtd2Via2l0LW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDQpXHJcbiAgYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKSxcclxub25seSBzY3JlZW5cclxuICBhbmQgKG1pbi1kZXZpY2Utd2lkdGg6IDQxNHB4KVxyXG4gIGFuZCAobWF4LWRldmljZS13aWR0aDogNzM2cHgpXHJcbiAgYW5kICgtd2Via2l0LW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDMpXHJcbiAgYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKSxcclxub25seSBzY3JlZW5cclxuICBhbmQgKG1pbi1kZXZpY2Utd2lkdGg6IDM3NXB4KVxyXG4gIGFuZCAobWF4LWRldmljZS13aWR0aDogODEycHgpXHJcbiAgYW5kICgtd2Via2l0LW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDMpXHJcbiAgYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKSB7XHJcbiAgLnRvb2xCYXIge1xyXG4gICAgaGVpZ2h0OiAzNXB4O1xyXG4gIH1cclxuICAuYmFja0J1dHRvbnMge1xyXG4gICAgdG9wOiAxOHB4O1xyXG4gIH1cclxuICAuY3JlZGl0c0J0biB7XHJcbiAgICB0b3A6IDE4cHg7XHJcbiAgfVxyXG4gIC5sZXZlbERpc3BsYXkge1xyXG4gICAgdG9wOiAxM3B4O1xyXG4gIH1cclxuICAudG9vbEJhckljb24ge1xyXG4gICAgaGVpZ2h0OiAzMHB4O1xyXG4gIH1cclxuICAubGV2ZWxEaXNwbGF5ID4gaDMge1xyXG4gICAgZm9udC1zaXplOiAxLjNyZW07XHJcbiAgfVxyXG4gIC5sZXZlbERpc3BsYXkgLnNlcGFyYXRvciB7XHJcbiAgICBmb250LXNpemU6IDAuOHJlbTtcclxuICB9XHJcbn1cclxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUFBLENBQUM7QUFDQyxXQUFTO0FBQ1QsU0FBTztBQUNQLFVBQVE7QUFDVjtBQUNBLENBQUM7QUFDQyxvQkFBa0IsZ0JBQ2hCLEdBQUcsS0FBSyxFQUNSLEtBQUssQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUNoQixLQUFLLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFDbEIsS0FBSyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtBQUNsQjtBQUNBLENBQUM7QUFDQyxZQUFVO0FBQ1YsUUFBTTtBQUNOLE9BQUs7QUFDTCxhQUFXLFdBQVc7QUFDeEI7QUFDQSxDQUFDO0FBQ0MsVUFBUTtBQUNWO0FBQ0EsQ0FBQztBQUNDLFlBQVU7QUFDVixRQUFNO0FBQ04sT0FBSztBQUNMLGFBQVcsVUFBVSxJQUFJLEVBQUU7QUFDN0I7QUFDQSxDQU5DLGFBTWEsRUFBRTtBQUNkO0FBQUEsSUFBYSxRQUFRO0FBQUEsSUFBRSxJQUFJO0FBQUEsSUFBRTtBQUM3QixhQUFXO0FBQ2I7QUFDQSxDQVZDLGFBVWEsQ0FBQztBQUNiLGFBQVc7QUFDYjtBQUVBLENBQUM7QUFDQyxXQUFRO0FBQ1IsVUFBUTtBQUNSLFNBQU87QUFDVDtBQUNBLENBTEMsT0FLTztBQUNOLFdBQVE7QUFDUixhQUFXLE1BQU07QUFDbkI7QUFFQSxDQUFDO0FBQ0MsV0FBUTtBQUNSLFVBQVE7QUFDUixTQUFPO0FBQ1Q7QUFDQSxDQUxDLE9BS087QUFDTixXQUFRO0FBQ1IsVUFBUTtBQUNSLGFBQVcsTUFBTTtBQUNuQjtBQUVBLENBQUM7QUFDQyxZQUFVO0FBQ1YsU0FBTztBQUNQLE9BQUs7QUFDTCxhQUFXLFdBQVc7QUFDdEIsV0FBUTtBQUNSLFNBQU87QUFDVDtBQUNBLENBUkMsVUFRVTtBQUNULFdBQVE7QUFDUixVQUFRO0FBQ1IsYUFBVyxNQUFNLEtBQUssV0FBVztBQUNuQztBQUlBLE9BQU8sS0FBSyxPQUNWLElBQUksQ0FBQyxVQUFVLEVBQUUsT0FDakIsSUFBSSxDQUFDLFdBQVcsRUFBRSxVQUFVLEVBQzlCLEtBQUssT0FDSCxJQUFJLENBQUMsU0FBUyxFQUFFLE9BQ2hCLElBQUksQ0FBQyxTQUFTLEVBQUUsT0FDaEIsSUFBSSxDQUFDLFdBQVcsRUFBRSxVQUFVLEVBRTlCLEtBQUssT0FDSCxJQUFJLENBQUMsWUFBWSxFQUFFLE9BQ25CLElBQUksQ0FBQyxhQUFhLEVBQUUsT0FDcEIsSUFBSSxDQUFDLDBCQUEwQixFQUFFLEdBQ2pDLElBQUksQ0FBQyxXQUFXLEVBQUUsVUFBVSxFQUM5QixLQUFLLE9BQ0gsSUFBSSxDQUFDLGdCQUFnQixFQUFFLE9BQ3ZCLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxPQUN2QixJQUFJLENBQUMsOEJBQThCLEVBQUUsR0FDckMsSUFBSSxDQUFDLFdBQVcsRUFBRSxVQUFVLEVBQzlCLEtBQUssT0FDSCxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsT0FDdkIsSUFBSSxDQUFDLGdCQUFnQixFQUFFLE9BQ3ZCLElBQUksQ0FBQyw4QkFBOEIsRUFBRSxHQUNyQyxJQUFJLENBQUMsV0FBVyxFQUFFLFVBQVUsRUFDOUIsS0FBSyxPQUNILElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxPQUN2QixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsT0FDdkIsSUFBSSxDQUFDLDhCQUE4QixFQUFFLEdBQ3JDLElBQUksQ0FBQyxXQUFXLEVBQUU7QUFDbEIsR0FwR0Q7QUFxR0csWUFBUTtBQUNWO0FBQ0EsR0EzRkQ7QUE0RkcsU0FBSztBQUNQO0FBQ0EsR0FsREQ7QUFtREcsU0FBSztBQUNQO0FBQ0EsR0F4RkQ7QUF5RkcsU0FBSztBQUNQO0FBQ0EsR0E5RkQ7QUErRkcsWUFBUTtBQUNWO0FBQ0EsR0E5RkQsYUE4RmUsRUFBRTtBQUNkLGVBQVc7QUFDYjtBQUNBLEdBakdELGFBaUdlLENBdkZEO0FBd0ZYLGVBQVc7QUFDYjtBQUNGOyIsCiAgIm5hbWVzIjogW10KfQo= */'] });
var ToolBarComponent = _ToolBarComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ToolBarComponent, { className: "ToolBarComponent", filePath: "src\\app\\tool-bar\\tool-bar.component.ts", lineNumber: 13 });
})();

// src/app/bubbles/bubbles.component.ts
var _BubblesComponent = class _BubblesComponent {
};
_BubblesComponent.\u0275fac = function BubblesComponent_Factory(t) {
  return new (t || _BubblesComponent)();
};
_BubblesComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _BubblesComponent, selectors: [["app-bubbles"]], decls: 3, vars: 0, consts: [[1, "bubbles-animation"], ["id", "bubbles"], ["id", "bubbles2"]], template: function BubblesComponent_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 0);
    \u0275\u0275element(1, "div", 1)(2, "div", 2);
    \u0275\u0275elementEnd();
  }
}, styles: ['\n\n.full-wh[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  bottom: 0px;\n  width: 100%;\n}\n.bubbles-animation[_ngcontent-%COMP%] {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  opacity: 0;\n  animation: _ngcontent-%COMP%_delayShow 1s linear;\n  animation-delay: 2s;\n  animation-fill-mode: forwards;\n}\n@keyframes _ngcontent-%COMP%_delayShow {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n#bubbles[_ngcontent-%COMP%] {\n  width: 1px;\n  height: 1px;\n  background: transparent;\n  box-shadow:\n    117px 1613px #ffffff,\n    1488px 635px #ffffff,\n    944px 914px #ffffff,\n    647px 277px #ffffff,\n    1792px 1205px #ffffff,\n    656px 1517px #ffffff,\n    820px 1839px #ffffff,\n    1153px 1400px #ffffff,\n    870px 13px #ffffff,\n    550px 702px #ffffff,\n    1155px 1056px #ffffff,\n    88px 1709px #ffffff,\n    1450px 1090px #ffffff,\n    1929px 457px #ffffff,\n    1390px 905px #ffffff,\n    1771px 269px #ffffff,\n    1741px 669px #ffffff,\n    432px 64px #ffffff,\n    563px 996px #ffffff,\n    1918px 1873px #ffffff,\n    1845px 1211px #ffffff,\n    231px 1503px #ffffff,\n    37px 220px #ffffff,\n    1970px 495px #ffffff,\n    1812px 925px #ffffff,\n    67px 1398px #ffffff,\n    535px 279px #ffffff,\n    1837px 829px #ffffff,\n    1945px 685px #ffffff,\n    1677px 1817px #ffffff,\n    1317px 1415px #ffffff,\n    1785px 905px #ffffff,\n    1787px 1554px #ffffff,\n    802px 1296px #ffffff,\n    512px 1101px #ffffff,\n    583px 1364px #ffffff,\n    336px 558px #ffffff,\n    979px 334px #ffffff,\n    106px 792px #ffffff,\n    204px 34px #ffffff,\n    1845px 1763px #ffffff,\n    445px 1599px #ffffff,\n    386px 453px #ffffff,\n    471px 952px #ffffff,\n    1466px 1676px #ffffff,\n    1885px 303px #ffffff,\n    51px 1717px #ffffff,\n    1211px 299px #ffffff,\n    1546px 1887px #ffffff,\n    1067px 33px #ffffff,\n    1088px 1326px #ffffff,\n    1938px 760px #ffffff,\n    470px 648px #ffffff,\n    1213px 269px #ffffff,\n    1767px 78px #ffffff,\n    977px 976px #ffffff,\n    1926px 175px #ffffff,\n    722px 1512px #ffffff,\n    945px 227px #ffffff,\n    1811px 99px #ffffff,\n    1912px 1406px #ffffff,\n    1602px 1243px #ffffff,\n    610px 449px #ffffff,\n    654px 1393px #ffffff,\n    1930px 1193px #ffffff,\n    258px 1184px #ffffff,\n    89px 265px #ffffff,\n    824px 1494px #ffffff,\n    1506px 1435px #ffffff,\n    1027px 753px #ffffff,\n    1px 1197px #ffffff,\n    530px 1161px #ffffff,\n    864px 1555px #ffffff,\n    1610px 1604px #ffffff,\n    1035px 1114px #ffffff,\n    1456px 133px #ffffff,\n    1196px 1253px #ffffff,\n    361px 1037px #ffffff,\n    834px 351px #ffffff,\n    436px 1676px #ffffff,\n    1194px 1007px #ffffff,\n    1141px 647px #ffffff,\n    319px 454px #ffffff,\n    937px 1769px #ffffff,\n    1872px 1013px #ffffff,\n    733px 643px #ffffff,\n    1250px 511px #ffffff,\n    189px 296px #ffffff,\n    1639px 163px #ffffff,\n    1584px 336px #ffffff,\n    1912px 1343px #ffffff,\n    1298px 1307px #ffffff,\n    1750px 902px #ffffff,\n    1129px 845px #ffffff,\n    1899px 1470px #ffffff,\n    1427px 232px #ffffff,\n    1391px 838px #ffffff,\n    1225px 1819px #ffffff,\n    190px 1366px #ffffff,\n    1865px 518px #ffffff,\n    203px 1383px #ffffff,\n    1455px 614px #ffffff,\n    423px 354px #ffffff,\n    1678px 1790px #ffffff,\n    241px 608px #ffffff,\n    1089px 730px #ffffff,\n    1342px 38px #ffffff,\n    1848px 249px #ffffff,\n    1874px 1785px #ffffff,\n    1040px 1837px #ffffff,\n    751px 261px #ffffff,\n    510px 1975px #ffffff,\n    52px 795px #ffffff,\n    1786px 1310px #ffffff,\n    498px 712px #ffffff,\n    190px 375px #ffffff,\n    1341px 722px #ffffff,\n    43px 1394px #ffffff,\n    1821px 1687px #ffffff,\n    106px 130px #ffffff,\n    1717px 1978px #ffffff,\n    168px 151px #ffffff,\n    183px 740px #ffffff,\n    945px 1381px #ffffff,\n    669px 1170px #ffffff,\n    1285px 1816px #ffffff,\n    110px 1217px #ffffff,\n    1623px 813px #ffffff,\n    869px 647px #ffffff,\n    867px 582px #ffffff,\n    735px 1240px #ffffff,\n    519px 1896px #ffffff,\n    132px 156px #ffffff,\n    1649px 193px #ffffff,\n    241px 1109px #ffffff,\n    643px 484px #ffffff,\n    574px 1282px #ffffff,\n    1952px 564px #ffffff,\n    1978px 145px #ffffff,\n    329px 903px #ffffff,\n    1674px 617px #ffffff,\n    1978px 558px #ffffff,\n    1808px 1715px #ffffff,\n    1526px 1238px #ffffff,\n    475px 1330px #ffffff,\n    810px 425px #ffffff,\n    1709px 634px #ffffff,\n    1658px 336px #ffffff,\n    425px 194px #ffffff,\n    352px 96px #ffffff,\n    148px 180px #ffffff,\n    1139px 1046px #ffffff,\n    1809px 1233px #ffffff,\n    1669px 171px #ffffff,\n    263px 1394px #ffffff,\n    534px 715px #ffffff,\n    396px 1008px #ffffff,\n    589px 1445px #ffffff,\n    1190px 381px #ffffff,\n    1709px 279px #ffffff,\n    520px 891px #ffffff,\n    1136px 1867px #ffffff,\n    1280px 1233px #ffffff,\n    836px 296px #ffffff,\n    1348px 646px #ffffff,\n    1539px 913px #ffffff,\n    423px 781px #ffffff,\n    1271px 1805px #ffffff,\n    696px 564px #ffffff,\n    1549px 804px #ffffff,\n    303px 1555px #ffffff,\n    1449px 1903px #ffffff,\n    66px 687px #ffffff,\n    1164px 856px #ffffff,\n    1958px 1326px #ffffff,\n    125px 157px #ffffff,\n    508px 1669px #ffffff,\n    465px 725px #ffffff,\n    1925px 1440px #ffffff,\n    405px 793px #ffffff,\n    278px 110px #ffffff,\n    1084px 1065px #ffffff,\n    1077px 705px #ffffff,\n    663px 1844px #ffffff,\n    734px 263px #ffffff,\n    870px 1761px #ffffff,\n    103px 1169px #ffffff,\n    1506px 1295px #ffffff,\n    1883px 926px #ffffff,\n    335px 1361px #ffffff,\n    1126px 1284px #ffffff,\n    257px 1165px #ffffff,\n    837px 580px #ffffff,\n    1211px 1362px #ffffff,\n    1137px 1380px #ffffff,\n    135px 632px #ffffff,\n    1491px 1965px #ffffff,\n    1098px 195px #ffffff,\n    506px 417px #ffffff,\n    693px 1243px #ffffff,\n    622px 1862px #ffffff,\n    1412px 1343px #ffffff,\n    948px 1894px #ffffff,\n    1315px 1363px #ffffff,\n    754px 1098px #ffffff,\n    1931px 930px #ffffff,\n    1831px 342px #ffffff,\n    1751px 1839px #ffffff,\n    84px 775px #ffffff,\n    1662px 1488px #ffffff,\n    617px 1769px #ffffff,\n    1869px 1292px #ffffff,\n    963px 432px #ffffff,\n    371px 1114px #ffffff,\n    37px 642px #ffffff,\n    21px 1184px #ffffff,\n    602px 366px #ffffff,\n    414px 524px #ffffff,\n    282px 244px #ffffff,\n    1689px 868px #ffffff,\n    943px 681px #ffffff,\n    898px 679px #ffffff,\n    449px 1774px #ffffff,\n    1678px 1313px #ffffff,\n    475px 1811px #ffffff,\n    1146px 1509px #ffffff,\n    1151px 1863px #ffffff,\n    1617px 846px #ffffff,\n    82px 1077px #ffffff,\n    324px 1317px #ffffff,\n    1516px 885px #ffffff,\n    1706px 1526px #ffffff,\n    1925px 1180px #ffffff,\n    553px 967px #ffffff,\n    1072px 536px #ffffff,\n    1715px 1816px #ffffff,\n    185px 286px #ffffff,\n    1362px 1600px #ffffff,\n    628px 1938px #ffffff,\n    1187px 412px #ffffff,\n    569px 211px #ffffff,\n    1959px 1356px #ffffff,\n    1571px 105px #ffffff,\n    319px 1111px #ffffff,\n    36px 1364px #ffffff,\n    502px 1788px #ffffff,\n    1051px 1993px #ffffff,\n    1617px 773px #ffffff,\n    424px 1507px #ffffff,\n    1623px 1955px #ffffff,\n    307px 662px #ffffff,\n    183px 1048px #ffffff,\n    1919px 1453px #ffffff,\n    1006px 1817px #ffffff,\n    468px 673px #ffffff,\n    1142px 1375px #ffffff,\n    1228px 443px #ffffff,\n    1734px 552px #ffffff,\n    20px 1041px #ffffff,\n    1783px 334px #ffffff,\n    98px 1237px #ffffff,\n    1356px 1940px #ffffff,\n    853px 1779px #ffffff,\n    1910px 560px #ffffff,\n    1174px 1656px #ffffff,\n    110px 1724px #ffffff,\n    542px 1771px #ffffff,\n    1758px 1931px #ffffff,\n    1463px 1401px #ffffff,\n    1155px 84px #ffffff,\n    1504px 835px #ffffff,\n    750px 322px #ffffff,\n    407px 1900px #ffffff,\n    1600px 1141px #ffffff,\n    657px 886px #ffffff,\n    526px 714px #ffffff,\n    18px 836px #ffffff,\n    1546px 1548px #ffffff,\n    22px 469px #ffffff,\n    594px 1466px #ffffff,\n    1160px 1078px #ffffff,\n    627px 1055px #ffffff,\n    195px 699px #ffffff,\n    1099px 684px #ffffff,\n    530px 551px #ffffff,\n    1160px 1325px #ffffff,\n    894px 727px #ffffff,\n    1157px 98px #ffffff,\n    136px 1483px #ffffff,\n    1875px 1975px #ffffff,\n    1803px 566px #ffffff,\n    318px 1073px #ffffff,\n    1866px 1656px #ffffff,\n    543px 414px #ffffff,\n    719px 474px #ffffff,\n    1115px 738px #ffffff,\n    353px 875px #ffffff,\n    184px 1938px #ffffff,\n    1854px 1534px #ffffff,\n    420px 1698px #ffffff,\n    1480px 1550px #ffffff,\n    522px 203px #ffffff,\n    1897px 1904px #ffffff,\n    975px 1708px #ffffff,\n    1774px 602px #ffffff,\n    1908px 274px #ffffff,\n    61px 715px #ffffff,\n    983px 1156px #ffffff,\n    326px 1013px #ffffff,\n    641px 290px #ffffff,\n    1522px 120px #ffffff,\n    405px 1637px #ffffff,\n    1021px 1099px #ffffff,\n    631px 1145px #ffffff,\n    982px 1967px #ffffff,\n    200px 651px #ffffff,\n    795px 351px #ffffff,\n    790px 1082px #ffffff,\n    144px 1572px #ffffff,\n    1542px 901px #ffffff,\n    158px 1524px #ffffff,\n    849px 1843px #ffffff,\n    1807px 203px #ffffff,\n    1747px 45px #ffffff,\n    1603px 1738px #ffffff,\n    617px 1966px #ffffff,\n    342px 748px #ffffff,\n    1779px 1173px #ffffff,\n    1428px 152px #ffffff,\n    589px 1998px #ffffff,\n    1940px 1838px #ffffff,\n    115px 272px #ffffff,\n    1217px 1395px #ffffff,\n    1402px 1491px #ffffff,\n    1833px 1814px #ffffff,\n    243px 966px #ffffff,\n    319px 578px #ffffff,\n    813px 364px #ffffff,\n    669px 882px #ffffff,\n    551px 134px #ffffff,\n    1819px 920px #ffffff,\n    740px 1826px #ffffff,\n    1021px 952px #ffffff,\n    1575px 453px #ffffff,\n    324px 419px #ffffff,\n    929px 417px #ffffff,\n    885px 1112px #ffffff,\n    503px 187px #ffffff,\n    1908px 362px #ffffff,\n    1063px 1601px #ffffff,\n    169px 1792px #ffffff,\n    789px 963px #ffffff,\n    1697px 948px #ffffff,\n    1761px 1810px #ffffff,\n    1844px 1591px #ffffff,\n    1709px 949px #ffffff,\n    1402px 1396px #ffffff,\n    1037px 225px #ffffff,\n    1832px 518px #ffffff,\n    1728px 1782px #ffffff,\n    194px 1421px #ffffff,\n    1395px 742px #ffffff,\n    1478px 1325px #ffffff,\n    40px 593px #ffffff,\n    1732px 117px #ffffff,\n    51px 158px #ffffff,\n    1598px 1672px #ffffff,\n    701px 849px #ffffff,\n    1403px 1979px #ffffff,\n    145px 1414px #ffffff,\n    550px 906px #ffffff,\n    1366px 460px #ffffff,\n    142px 1379px #ffffff,\n    34px 1864px #ffffff,\n    1346px 308px #ffffff,\n    293px 998px #ffffff,\n    21px 1868px #ffffff,\n    540px 1033px #ffffff,\n    60px 746px #ffffff,\n    1602px 1476px #ffffff,\n    180px 804px #ffffff,\n    345px 1982px #ffffff,\n    1439px 640px #ffffff,\n    939px 1834px #ffffff,\n    20px 432px #ffffff,\n    492px 1549px #ffffff,\n    109px 1579px #ffffff,\n    1796px 1403px #ffffff,\n    1079px 519px #ffffff,\n    1664px 389px #ffffff,\n    1627px 1061px #ffffff,\n    823px 419px #ffffff,\n    1399px 1882px #ffffff,\n    1906px 344px #ffffff,\n    1189px 848px #ffffff,\n    117px 882px #ffffff,\n    1262px 33px #ffffff,\n    1048px 434px #ffffff,\n    1208px 1309px #ffffff,\n    1616px 408px #ffffff,\n    1833px 853px #ffffff,\n    1433px 1656px #ffffff,\n    811px 1861px #ffffff,\n    439px 1672px #ffffff,\n    1105px 248px #ffffff,\n    328px 1652px #ffffff,\n    13px 1658px #ffffff,\n    685px 987px #ffffff,\n    985px 403px #ffffff,\n    1664px 1206px #ffffff,\n    1993px 1925px #ffffff,\n    440px 917px #ffffff,\n    1835px 319px #ffffff,\n    1404px 1907px #ffffff,\n    624px 1443px #ffffff,\n    843px 954px #ffffff,\n    478px 1567px #ffffff,\n    895px 1602px #ffffff,\n    1231px 871px #ffffff,\n    1267px 1646px #ffffff,\n    475px 334px #ffffff,\n    784px 796px #ffffff,\n    1294px 199px #ffffff,\n    109px 702px #ffffff,\n    1978px 362px #ffffff,\n    291px 940px #ffffff,\n    971px 1343px #ffffff,\n    74px 719px #ffffff,\n    36px 715px #ffffff,\n    1007px 1423px #ffffff,\n    860px 314px #ffffff,\n    631px 177px #ffffff,\n    1900px 1590px #ffffff,\n    1239px 1348px #ffffff,\n    1346px 1270px #ffffff,\n    1934px 1475px #ffffff,\n    1553px 559px #ffffff,\n    588px 1969px #ffffff,\n    670px 1269px #ffffff,\n    1484px 376px #ffffff,\n    20px 1424px #ffffff,\n    1396px 8px #ffffff,\n    969px 244px #ffffff,\n    1807px 538px #ffffff,\n    1873px 891px #ffffff,\n    636px 1142px #ffffff,\n    1474px 1562px #ffffff,\n    763px 350px #ffffff,\n    663px 700px #ffffff,\n    500px 1469px #ffffff,\n    1302px 722px #ffffff,\n    181px 291px #ffffff,\n    266px 893px #ffffff,\n    1403px 654px #ffffff,\n    492px 460px #ffffff,\n    1503px 1369px #ffffff,\n    23px 1662px #ffffff,\n    349px 333px #ffffff,\n    1435px 1017px #ffffff,\n    1441px 705px #ffffff,\n    1708px 1446px #ffffff,\n    1041px 911px #ffffff,\n    1063px 780px #ffffff,\n    1158px 1356px #ffffff,\n    767px 1454px #ffffff,\n    1912px 797px #ffffff,\n    1731px 1759px #ffffff,\n    1378px 1390px #ffffff,\n    1815px 1364px #ffffff,\n    960px 270px #ffffff,\n    1343px 427px #ffffff,\n    275px 203px #ffffff,\n    1319px 1092px #ffffff,\n    1455px 770px #ffffff,\n    283px 1503px #ffffff,\n    1505px 901px #ffffff,\n    1738px 1561px #ffffff,\n    1526px 1935px #ffffff,\n    1757px 669px #ffffff,\n    1640px 620px #ffffff,\n    1750px 722px #ffffff,\n    748px 66px #ffffff,\n    1149px 540px #ffffff,\n    159px 953px #ffffff,\n    200px 1426px #ffffff,\n    515px 1110px #ffffff,\n    1552px 737px #ffffff,\n    1094px 1459px #ffffff,\n    778px 799px #ffffff,\n    1031px 523px #ffffff,\n    743px 1825px #ffffff,\n    1100px 882px #ffffff,\n    1088px 1836px #ffffff,\n    255px 599px #ffffff,\n    67px 1361px #ffffff,\n    247px 1721px #ffffff,\n    1722px 346px #ffffff,\n    1822px 155px #ffffff,\n    452px 1973px #ffffff,\n    415px 1960px #ffffff,\n    1109px 57px #ffffff,\n    273px 1392px #ffffff,\n    404px 1071px #ffffff,\n    1212px 353px #ffffff,\n    370px 460px #ffffff,\n    795px 1523px #ffffff,\n    1932px 340px #ffffff,\n    51px 1473px #ffffff,\n    1268px 364px #ffffff,\n    1512px 1862px #ffffff,\n    1678px 1801px #ffffff,\n    1796px 579px #ffffff,\n    254px 251px #ffffff,\n    1466px 1717px #ffffff,\n    893px 379px #ffffff,\n    1153px 923px #ffffff,\n    913px 1808px #ffffff,\n    791px 789px #ffffff,\n    417px 1924px #ffffff,\n    1336px 1599px #ffffff,\n    1695px 908px #ffffff,\n    1120px 114px #ffffff,\n    493px 1949px #ffffff,\n    68px 1905px #ffffff,\n    969px 481px #ffffff,\n    1420px 1095px #ffffff,\n    800px 1117px #ffffff,\n    390px 234px #ffffff,\n    356px 1644px #ffffff,\n    1098px 1486px #ffffff,\n    1360px 521px #ffffff,\n    149px 1198px #ffffff,\n    354px 747px #ffffff,\n    1749px 487px #ffffff,\n    470px 76px #ffffff,\n    1672px 289px #ffffff,\n    1731px 545px #ffffff,\n    1547px 1590px #ffffff,\n    498px 692px #ffffff,\n    398px 1592px #ffffff,\n    1846px 1237px #ffffff,\n    1537px 1474px #ffffff,\n    1726px 1374px #ffffff,\n    1922px 858px #ffffff,\n    376px 321px #ffffff,\n    985px 227px #ffffff,\n    234px 1421px #ffffff,\n    760px 745px #ffffff,\n    1990px 1132px #ffffff,\n    1560px 1597px #ffffff,\n    338px 1310px #ffffff,\n    1924px 1664px #ffffff,\n    547px 1747px #ffffff,\n    1639px 1282px #ffffff,\n    1202px 337px #ffffff,\n    1985px 779px #ffffff,\n    737px 456px #ffffff,\n    89px 501px #ffffff,\n    963px 792px #ffffff,\n    655px 1447px #ffffff,\n    1492px 1994px #ffffff,\n    1171px 254px #ffffff,\n    892px 827px #ffffff,\n    1735px 442px #ffffff,\n    1474px 1187px #ffffff,\n    846px 1518px #ffffff,\n    557px 1805px #ffffff,\n    738px 945px #ffffff,\n    795px 68px #ffffff,\n    663px 1956px #ffffff,\n    1607px 290px #ffffff,\n    1524px 15px #ffffff,\n    1097px 1911px #ffffff,\n    157px 1939px #ffffff,\n    935px 1065px #ffffff,\n    1809px 1708px #ffffff,\n    164px 1157px #ffffff,\n    83px 855px #ffffff,\n    625px 501px #ffffff,\n    814px 398px #ffffff,\n    552px 695px #ffffff,\n    597px 1546px #ffffff,\n    1237px 1417px #ffffff,\n    628px 284px #ffffff,\n    866px 767px #ffffff,\n    1403px 1394px #ffffff,\n    765px 1563px #ffffff,\n    1648px 109px #ffffff,\n    1205px 1659px #ffffff,\n    921px 1313px #ffffff,\n    1319px 243px #ffffff,\n    18px 125px #ffffff,\n    7px 777px #ffffff,\n    181px 418px #ffffff,\n    1062px 1892px #ffffff,\n    382px 106px #ffffff,\n    994px 751px #ffffff,\n    964px 234px #ffffff,\n    40px 118px #ffffff,\n    278px 706px #ffffff,\n    1540px 1978px #ffffff,\n    425px 1661px #ffffff,\n    1050px 321px #ffffff,\n    735px 1729px #ffffff,\n    1438px 260px #ffffff,\n    1229px 1109px #ffffff,\n    186px 1041px #ffffff,\n    244px 1184px #ffffff,\n    392px 1472px #ffffff,\n    670px 1249px #ffffff,\n    1260px 1443px #ffffff,\n    1977px 1511px #ffffff,\n    1240px 773px #ffffff,\n    303px 513px #ffffff,\n    63px 1530px #ffffff,\n    610px 792px #ffffff,\n    1987px 1647px #ffffff,\n    676px 1597px #ffffff,\n    1740px 1244px #ffffff,\n    816px 1661px #ffffff,\n    351px 802px #ffffff,\n    252px 1082px #ffffff,\n    31px 365px #ffffff,\n    1453px 984px #ffffff,\n    667px 1233px #ffffff,\n    1247px 1800px #ffffff,\n    839px 270px #ffffff,\n    775px 913px #ffffff,\n    1966px 1398px #ffffff,\n    499px 813px #ffffff,\n    922px 1982px #ffffff,\n    1409px 1902px #ffffff,\n    1499px 1766px #ffffff,\n    721px 899px #ffffff,\n    788px 807px #ffffff,\n    989px 1355px #ffffff,\n    1248px 1274px #ffffff,\n    849px 1091px #ffffff,\n    1799px 1036px #ffffff,\n    1486px 700px #ffffff,\n    170px 1989px #ffffff,\n    1275px 799px #ffffff,\n    772px 2000px #ffffff,\n    1642px 362px #ffffff,\n    216px 940px #ffffff,\n    1893px 281px #ffffff,\n    1944px 1298px #ffffff,\n    1294px 400px #ffffff,\n    1523px 441px #ffffff,\n    1829px 340px #ffffff,\n    468px 170px #ffffff,\n    1099px 967px #ffffff,\n    1331px 665px #ffffff,\n    1174px 1553px #ffffff,\n    1567px 325px #ffffff,\n    1028px 1399px #ffffff,\n    781px 1451px #ffffff,\n    1912px 1954px #ffffff,\n    874px 873px #ffffff,\n    1298px 1722px #ffffff,\n    1879px 706px #ffffff,\n    57px 1221px #ffffff,\n    1116px 1432px #ffffff,\n    48px 811px #ffffff,\n    101px 916px #ffffff,\n    677px 304px #ffffff,\n    1203px 639px #ffffff,\n    1391px 199px #ffffff,\n    1895px 1988px #ffffff,\n    1462px 1023px #ffffff,\n    1216px 1751px #ffffff,\n    1261px 663px #ffffff,\n    1290px 1119px #ffffff,\n    137px 1793px #ffffff,\n    1052px 1470px #ffffff,\n    1561px 226px #ffffff,\n    1156px 402px #ffffff,\n    709px 693px #ffffff,\n    1040px 1911px #ffffff,\n    1624px 1115px #ffffff,\n    551px 475px #ffffff,\n    416px 1090px #ffffff,\n    1183px 451px #ffffff,\n    58px 765px #ffffff,\n    743px 1016px #ffffff,\n    198px 369px #ffffff,\n    1645px 1503px #ffffff,\n    997px 22px #ffffff,\n    1447px 1323px #ffffff,\n    379px 883px #ffffff,\n    1171px 1195px #ffffff,\n    919px 133px #ffffff,\n    1400px 517px #ffffff,\n    725px 804px #ffffff,\n    1600px 699px #ffffff,\n    357px 581px #ffffff,\n    266px 1713px #ffffff,\n    848px 1749px #ffffff,\n    1963px 1045px #ffffff,\n    119px 1136px #ffffff;\n  animation: _ngcontent-%COMP%_animBubbles 100s linear infinite;\n  opacity: 0.5;\n}\n#bubbles[_ngcontent-%COMP%]:after {\n  content: " ";\n  position: absolute;\n  top: 2000px;\n  width: 1px;\n  height: 1px;\n  background: transparent;\n  box-shadow:\n    117px 1613px #ffffff,\n    1488px 635px #ffffff,\n    944px 914px #ffffff,\n    647px 277px #ffffff,\n    1792px 1205px #ffffff,\n    656px 1517px #ffffff,\n    820px 1839px #ffffff,\n    1153px 1400px #ffffff,\n    870px 13px #ffffff,\n    550px 702px #ffffff,\n    1155px 1056px #ffffff,\n    88px 1709px #ffffff,\n    1450px 1090px #ffffff,\n    1929px 457px #ffffff,\n    1390px 905px #ffffff,\n    1771px 269px #ffffff,\n    1741px 669px #ffffff,\n    432px 64px #ffffff,\n    563px 996px #ffffff,\n    1918px 1873px #ffffff,\n    1845px 1211px #ffffff,\n    231px 1503px #ffffff,\n    37px 220px #ffffff,\n    1970px 495px #ffffff,\n    1812px 925px #ffffff,\n    67px 1398px #ffffff,\n    535px 279px #ffffff,\n    1837px 829px #ffffff,\n    1945px 685px #ffffff,\n    1677px 1817px #ffffff,\n    1317px 1415px #ffffff,\n    1785px 905px #ffffff,\n    1787px 1554px #ffffff,\n    802px 1296px #ffffff,\n    512px 1101px #ffffff,\n    583px 1364px #ffffff,\n    336px 558px #ffffff,\n    979px 334px #ffffff,\n    106px 792px #ffffff,\n    204px 34px #ffffff,\n    1845px 1763px #ffffff,\n    445px 1599px #ffffff,\n    386px 453px #ffffff,\n    471px 952px #ffffff,\n    1466px 1676px #ffffff,\n    1885px 303px #ffffff,\n    51px 1717px #ffffff,\n    1211px 299px #ffffff,\n    1546px 1887px #ffffff,\n    1067px 33px #ffffff,\n    1088px 1326px #ffffff,\n    1938px 760px #ffffff,\n    470px 648px #ffffff,\n    1213px 269px #ffffff,\n    1767px 78px #ffffff,\n    977px 976px #ffffff,\n    1926px 175px #ffffff,\n    722px 1512px #ffffff,\n    945px 227px #ffffff,\n    1811px 99px #ffffff,\n    1912px 1406px #ffffff,\n    1602px 1243px #ffffff,\n    610px 449px #ffffff,\n    654px 1393px #ffffff,\n    1930px 1193px #ffffff,\n    258px 1184px #ffffff,\n    89px 265px #ffffff,\n    824px 1494px #ffffff,\n    1506px 1435px #ffffff,\n    1027px 753px #ffffff,\n    1px 1197px #ffffff,\n    530px 1161px #ffffff,\n    864px 1555px #ffffff,\n    1610px 1604px #ffffff,\n    1035px 1114px #ffffff,\n    1456px 133px #ffffff,\n    1196px 1253px #ffffff,\n    361px 1037px #ffffff,\n    834px 351px #ffffff,\n    436px 1676px #ffffff,\n    1194px 1007px #ffffff,\n    1141px 647px #ffffff,\n    319px 454px #ffffff,\n    937px 1769px #ffffff,\n    1872px 1013px #ffffff,\n    733px 643px #ffffff,\n    1250px 511px #ffffff,\n    189px 296px #ffffff,\n    1639px 163px #ffffff,\n    1584px 336px #ffffff,\n    1912px 1343px #ffffff,\n    1298px 1307px #ffffff,\n    1750px 902px #ffffff,\n    1129px 845px #ffffff,\n    1899px 1470px #ffffff,\n    1427px 232px #ffffff,\n    1391px 838px #ffffff,\n    1225px 1819px #ffffff,\n    190px 1366px #ffffff,\n    1865px 518px #ffffff,\n    203px 1383px #ffffff,\n    1455px 614px #ffffff,\n    423px 354px #ffffff,\n    1678px 1790px #ffffff,\n    241px 608px #ffffff,\n    1089px 730px #ffffff,\n    1342px 38px #ffffff,\n    1848px 249px #ffffff,\n    1874px 1785px #ffffff,\n    1040px 1837px #ffffff,\n    751px 261px #ffffff,\n    510px 1975px #ffffff,\n    52px 795px #ffffff,\n    1786px 1310px #ffffff,\n    498px 712px #ffffff,\n    190px 375px #ffffff,\n    1341px 722px #ffffff,\n    43px 1394px #ffffff,\n    1821px 1687px #ffffff,\n    106px 130px #ffffff,\n    1717px 1978px #ffffff,\n    168px 151px #ffffff,\n    183px 740px #ffffff,\n    945px 1381px #ffffff,\n    669px 1170px #ffffff,\n    1285px 1816px #ffffff,\n    110px 1217px #ffffff,\n    1623px 813px #ffffff,\n    869px 647px #ffffff,\n    867px 582px #ffffff,\n    735px 1240px #ffffff,\n    519px 1896px #ffffff,\n    132px 156px #ffffff,\n    1649px 193px #ffffff,\n    241px 1109px #ffffff,\n    643px 484px #ffffff,\n    574px 1282px #ffffff,\n    1952px 564px #ffffff,\n    1978px 145px #ffffff,\n    329px 903px #ffffff,\n    1674px 617px #ffffff,\n    1978px 558px #ffffff,\n    1808px 1715px #ffffff,\n    1526px 1238px #ffffff,\n    475px 1330px #ffffff,\n    810px 425px #ffffff,\n    1709px 634px #ffffff,\n    1658px 336px #ffffff,\n    425px 194px #ffffff,\n    352px 96px #ffffff,\n    148px 180px #ffffff,\n    1139px 1046px #ffffff,\n    1809px 1233px #ffffff,\n    1669px 171px #ffffff,\n    263px 1394px #ffffff,\n    534px 715px #ffffff,\n    396px 1008px #ffffff,\n    589px 1445px #ffffff,\n    1190px 381px #ffffff,\n    1709px 279px #ffffff,\n    520px 891px #ffffff,\n    1136px 1867px #ffffff,\n    1280px 1233px #ffffff,\n    836px 296px #ffffff,\n    1348px 646px #ffffff,\n    1539px 913px #ffffff,\n    423px 781px #ffffff,\n    1271px 1805px #ffffff,\n    696px 564px #ffffff,\n    1549px 804px #ffffff,\n    303px 1555px #ffffff,\n    1449px 1903px #ffffff,\n    66px 687px #ffffff,\n    1164px 856px #ffffff,\n    1958px 1326px #ffffff,\n    125px 157px #ffffff,\n    508px 1669px #ffffff,\n    465px 725px #ffffff,\n    1925px 1440px #ffffff,\n    405px 793px #ffffff,\n    278px 110px #ffffff,\n    1084px 1065px #ffffff,\n    1077px 705px #ffffff,\n    663px 1844px #ffffff,\n    734px 263px #ffffff,\n    870px 1761px #ffffff,\n    103px 1169px #ffffff,\n    1506px 1295px #ffffff,\n    1883px 926px #ffffff,\n    335px 1361px #ffffff,\n    1126px 1284px #ffffff,\n    257px 1165px #ffffff,\n    837px 580px #ffffff,\n    1211px 1362px #ffffff,\n    1137px 1380px #ffffff,\n    135px 632px #ffffff,\n    1491px 1965px #ffffff,\n    1098px 195px #ffffff,\n    506px 417px #ffffff,\n    693px 1243px #ffffff,\n    622px 1862px #ffffff,\n    1412px 1343px #ffffff,\n    948px 1894px #ffffff,\n    1315px 1363px #ffffff,\n    754px 1098px #ffffff,\n    1931px 930px #ffffff,\n    1831px 342px #ffffff,\n    1751px 1839px #ffffff,\n    84px 775px #ffffff,\n    1662px 1488px #ffffff,\n    617px 1769px #ffffff,\n    1869px 1292px #ffffff,\n    963px 432px #ffffff,\n    371px 1114px #ffffff,\n    37px 642px #ffffff,\n    21px 1184px #ffffff,\n    602px 366px #ffffff,\n    414px 524px #ffffff,\n    282px 244px #ffffff,\n    1689px 868px #ffffff,\n    943px 681px #ffffff,\n    898px 679px #ffffff,\n    449px 1774px #ffffff,\n    1678px 1313px #ffffff,\n    475px 1811px #ffffff,\n    1146px 1509px #ffffff,\n    1151px 1863px #ffffff,\n    1617px 846px #ffffff,\n    82px 1077px #ffffff,\n    324px 1317px #ffffff,\n    1516px 885px #ffffff,\n    1706px 1526px #ffffff,\n    1925px 1180px #ffffff,\n    553px 967px #ffffff,\n    1072px 536px #ffffff,\n    1715px 1816px #ffffff,\n    185px 286px #ffffff,\n    1362px 1600px #ffffff,\n    628px 1938px #ffffff,\n    1187px 412px #ffffff,\n    569px 211px #ffffff,\n    1959px 1356px #ffffff,\n    1571px 105px #ffffff,\n    319px 1111px #ffffff,\n    36px 1364px #ffffff,\n    502px 1788px #ffffff,\n    1051px 1993px #ffffff,\n    1617px 773px #ffffff,\n    424px 1507px #ffffff,\n    1623px 1955px #ffffff,\n    307px 662px #ffffff,\n    183px 1048px #ffffff,\n    1919px 1453px #ffffff,\n    1006px 1817px #ffffff,\n    468px 673px #ffffff,\n    1142px 1375px #ffffff,\n    1228px 443px #ffffff,\n    1734px 552px #ffffff,\n    20px 1041px #ffffff,\n    1783px 334px #ffffff,\n    98px 1237px #ffffff,\n    1356px 1940px #ffffff,\n    853px 1779px #ffffff,\n    1910px 560px #ffffff,\n    1174px 1656px #ffffff,\n    110px 1724px #ffffff,\n    542px 1771px #ffffff,\n    1758px 1931px #ffffff,\n    1463px 1401px #ffffff,\n    1155px 84px #ffffff,\n    1504px 835px #ffffff,\n    750px 322px #ffffff,\n    407px 1900px #ffffff,\n    1600px 1141px #ffffff,\n    657px 886px #ffffff,\n    526px 714px #ffffff,\n    18px 836px #ffffff,\n    1546px 1548px #ffffff,\n    22px 469px #ffffff,\n    594px 1466px #ffffff,\n    1160px 1078px #ffffff,\n    627px 1055px #ffffff,\n    195px 699px #ffffff,\n    1099px 684px #ffffff,\n    530px 551px #ffffff,\n    1160px 1325px #ffffff,\n    894px 727px #ffffff,\n    1157px 98px #ffffff,\n    136px 1483px #ffffff,\n    1875px 1975px #ffffff,\n    1803px 566px #ffffff,\n    318px 1073px #ffffff,\n    1866px 1656px #ffffff,\n    543px 414px #ffffff,\n    719px 474px #ffffff,\n    1115px 738px #ffffff,\n    353px 875px #ffffff,\n    184px 1938px #ffffff,\n    1854px 1534px #ffffff,\n    420px 1698px #ffffff,\n    1480px 1550px #ffffff,\n    522px 203px #ffffff,\n    1897px 1904px #ffffff,\n    975px 1708px #ffffff,\n    1774px 602px #ffffff,\n    1908px 274px #ffffff,\n    61px 715px #ffffff,\n    983px 1156px #ffffff,\n    326px 1013px #ffffff,\n    641px 290px #ffffff,\n    1522px 120px #ffffff,\n    405px 1637px #ffffff,\n    1021px 1099px #ffffff,\n    631px 1145px #ffffff,\n    982px 1967px #ffffff,\n    200px 651px #ffffff,\n    795px 351px #ffffff,\n    790px 1082px #ffffff,\n    144px 1572px #ffffff,\n    1542px 901px #ffffff,\n    158px 1524px #ffffff,\n    849px 1843px #ffffff,\n    1807px 203px #ffffff,\n    1747px 45px #ffffff,\n    1603px 1738px #ffffff,\n    617px 1966px #ffffff,\n    342px 748px #ffffff,\n    1779px 1173px #ffffff,\n    1428px 152px #ffffff,\n    589px 1998px #ffffff,\n    1940px 1838px #ffffff,\n    115px 272px #ffffff,\n    1217px 1395px #ffffff,\n    1402px 1491px #ffffff,\n    1833px 1814px #ffffff,\n    243px 966px #ffffff,\n    319px 578px #ffffff,\n    813px 364px #ffffff,\n    669px 882px #ffffff,\n    551px 134px #ffffff,\n    1819px 920px #ffffff,\n    740px 1826px #ffffff,\n    1021px 952px #ffffff,\n    1575px 453px #ffffff,\n    324px 419px #ffffff,\n    929px 417px #ffffff,\n    885px 1112px #ffffff,\n    503px 187px #ffffff,\n    1908px 362px #ffffff,\n    1063px 1601px #ffffff,\n    169px 1792px #ffffff,\n    789px 963px #ffffff,\n    1697px 948px #ffffff,\n    1761px 1810px #ffffff,\n    1844px 1591px #ffffff,\n    1709px 949px #ffffff,\n    1402px 1396px #ffffff,\n    1037px 225px #ffffff,\n    1832px 518px #ffffff,\n    1728px 1782px #ffffff,\n    194px 1421px #ffffff,\n    1395px 742px #ffffff,\n    1478px 1325px #ffffff,\n    40px 593px #ffffff,\n    1732px 117px #ffffff,\n    51px 158px #ffffff,\n    1598px 1672px #ffffff,\n    701px 849px #ffffff,\n    1403px 1979px #ffffff,\n    145px 1414px #ffffff,\n    550px 906px #ffffff,\n    1366px 460px #ffffff,\n    142px 1379px #ffffff,\n    34px 1864px #ffffff,\n    1346px 308px #ffffff,\n    293px 998px #ffffff,\n    21px 1868px #ffffff,\n    540px 1033px #ffffff,\n    60px 746px #ffffff,\n    1602px 1476px #ffffff,\n    180px 804px #ffffff,\n    345px 1982px #ffffff,\n    1439px 640px #ffffff,\n    939px 1834px #ffffff,\n    20px 432px #ffffff,\n    492px 1549px #ffffff,\n    109px 1579px #ffffff,\n    1796px 1403px #ffffff,\n    1079px 519px #ffffff,\n    1664px 389px #ffffff,\n    1627px 1061px #ffffff,\n    823px 419px #ffffff,\n    1399px 1882px #ffffff,\n    1906px 344px #ffffff,\n    1189px 848px #ffffff,\n    117px 882px #ffffff,\n    1262px 33px #ffffff,\n    1048px 434px #ffffff,\n    1208px 1309px #ffffff,\n    1616px 408px #ffffff,\n    1833px 853px #ffffff,\n    1433px 1656px #ffffff,\n    811px 1861px #ffffff,\n    439px 1672px #ffffff,\n    1105px 248px #ffffff,\n    328px 1652px #ffffff,\n    13px 1658px #ffffff,\n    685px 987px #ffffff,\n    985px 403px #ffffff,\n    1664px 1206px #ffffff,\n    1993px 1925px #ffffff,\n    440px 917px #ffffff,\n    1835px 319px #ffffff,\n    1404px 1907px #ffffff,\n    624px 1443px #ffffff,\n    843px 954px #ffffff,\n    478px 1567px #ffffff,\n    895px 1602px #ffffff,\n    1231px 871px #ffffff,\n    1267px 1646px #ffffff,\n    475px 334px #ffffff,\n    784px 796px #ffffff,\n    1294px 199px #ffffff,\n    109px 702px #ffffff,\n    1978px 362px #ffffff,\n    291px 940px #ffffff,\n    971px 1343px #ffffff,\n    74px 719px #ffffff,\n    36px 715px #ffffff,\n    1007px 1423px #ffffff,\n    860px 314px #ffffff,\n    631px 177px #ffffff,\n    1900px 1590px #ffffff,\n    1239px 1348px #ffffff,\n    1346px 1270px #ffffff,\n    1934px 1475px #ffffff,\n    1553px 559px #ffffff,\n    588px 1969px #ffffff,\n    670px 1269px #ffffff,\n    1484px 376px #ffffff,\n    20px 1424px #ffffff,\n    1396px 8px #ffffff,\n    969px 244px #ffffff,\n    1807px 538px #ffffff,\n    1873px 891px #ffffff,\n    636px 1142px #ffffff,\n    1474px 1562px #ffffff,\n    763px 350px #ffffff,\n    663px 700px #ffffff,\n    500px 1469px #ffffff,\n    1302px 722px #ffffff,\n    181px 291px #ffffff,\n    266px 893px #ffffff,\n    1403px 654px #ffffff,\n    492px 460px #ffffff,\n    1503px 1369px #ffffff,\n    23px 1662px #ffffff,\n    349px 333px #ffffff,\n    1435px 1017px #ffffff,\n    1441px 705px #ffffff,\n    1708px 1446px #ffffff,\n    1041px 911px #ffffff,\n    1063px 780px #ffffff,\n    1158px 1356px #ffffff,\n    767px 1454px #ffffff,\n    1912px 797px #ffffff,\n    1731px 1759px #ffffff,\n    1378px 1390px #ffffff,\n    1815px 1364px #ffffff,\n    960px 270px #ffffff,\n    1343px 427px #ffffff,\n    275px 203px #ffffff,\n    1319px 1092px #ffffff,\n    1455px 770px #ffffff,\n    283px 1503px #ffffff,\n    1505px 901px #ffffff,\n    1738px 1561px #ffffff,\n    1526px 1935px #ffffff,\n    1757px 669px #ffffff,\n    1640px 620px #ffffff,\n    1750px 722px #ffffff,\n    748px 66px #ffffff,\n    1149px 540px #ffffff,\n    159px 953px #ffffff,\n    200px 1426px #ffffff,\n    515px 1110px #ffffff,\n    1552px 737px #ffffff,\n    1094px 1459px #ffffff,\n    778px 799px #ffffff,\n    1031px 523px #ffffff,\n    743px 1825px #ffffff,\n    1100px 882px #ffffff,\n    1088px 1836px #ffffff,\n    255px 599px #ffffff,\n    67px 1361px #ffffff,\n    247px 1721px #ffffff,\n    1722px 346px #ffffff,\n    1822px 155px #ffffff,\n    452px 1973px #ffffff,\n    415px 1960px #ffffff,\n    1109px 57px #ffffff,\n    273px 1392px #ffffff,\n    404px 1071px #ffffff,\n    1212px 353px #ffffff,\n    370px 460px #ffffff,\n    795px 1523px #ffffff,\n    1932px 340px #ffffff,\n    51px 1473px #ffffff,\n    1268px 364px #ffffff,\n    1512px 1862px #ffffff,\n    1678px 1801px #ffffff,\n    1796px 579px #ffffff,\n    254px 251px #ffffff,\n    1466px 1717px #ffffff,\n    893px 379px #ffffff,\n    1153px 923px #ffffff,\n    913px 1808px #ffffff,\n    791px 789px #ffffff,\n    417px 1924px #ffffff,\n    1336px 1599px #ffffff,\n    1695px 908px #ffffff,\n    1120px 114px #ffffff,\n    493px 1949px #ffffff,\n    68px 1905px #ffffff,\n    969px 481px #ffffff,\n    1420px 1095px #ffffff,\n    800px 1117px #ffffff,\n    390px 234px #ffffff,\n    356px 1644px #ffffff,\n    1098px 1486px #ffffff,\n    1360px 521px #ffffff,\n    149px 1198px #ffffff,\n    354px 747px #ffffff,\n    1749px 487px #ffffff,\n    470px 76px #ffffff,\n    1672px 289px #ffffff,\n    1731px 545px #ffffff,\n    1547px 1590px #ffffff,\n    498px 692px #ffffff,\n    398px 1592px #ffffff,\n    1846px 1237px #ffffff,\n    1537px 1474px #ffffff,\n    1726px 1374px #ffffff,\n    1922px 858px #ffffff,\n    376px 321px #ffffff,\n    985px 227px #ffffff,\n    234px 1421px #ffffff,\n    760px 745px #ffffff,\n    1990px 1132px #ffffff,\n    1560px 1597px #ffffff,\n    338px 1310px #ffffff,\n    1924px 1664px #ffffff,\n    547px 1747px #ffffff,\n    1639px 1282px #ffffff,\n    1202px 337px #ffffff,\n    1985px 779px #ffffff,\n    737px 456px #ffffff,\n    89px 501px #ffffff,\n    963px 792px #ffffff,\n    655px 1447px #ffffff,\n    1492px 1994px #ffffff,\n    1171px 254px #ffffff,\n    892px 827px #ffffff,\n    1735px 442px #ffffff,\n    1474px 1187px #ffffff,\n    846px 1518px #ffffff,\n    557px 1805px #ffffff,\n    738px 945px #ffffff,\n    795px 68px #ffffff,\n    663px 1956px #ffffff,\n    1607px 290px #ffffff,\n    1524px 15px #ffffff,\n    1097px 1911px #ffffff,\n    157px 1939px #ffffff,\n    935px 1065px #ffffff,\n    1809px 1708px #ffffff,\n    164px 1157px #ffffff,\n    83px 855px #ffffff,\n    625px 501px #ffffff,\n    814px 398px #ffffff,\n    552px 695px #ffffff,\n    597px 1546px #ffffff,\n    1237px 1417px #ffffff,\n    628px 284px #ffffff,\n    866px 767px #ffffff,\n    1403px 1394px #ffffff,\n    765px 1563px #ffffff,\n    1648px 109px #ffffff,\n    1205px 1659px #ffffff,\n    921px 1313px #ffffff,\n    1319px 243px #ffffff,\n    18px 125px #ffffff,\n    7px 777px #ffffff,\n    181px 418px #ffffff,\n    1062px 1892px #ffffff,\n    382px 106px #ffffff,\n    994px 751px #ffffff,\n    964px 234px #ffffff,\n    40px 118px #ffffff,\n    278px 706px #ffffff,\n    1540px 1978px #ffffff,\n    425px 1661px #ffffff,\n    1050px 321px #ffffff,\n    735px 1729px #ffffff,\n    1438px 260px #ffffff,\n    1229px 1109px #ffffff,\n    186px 1041px #ffffff,\n    244px 1184px #ffffff,\n    392px 1472px #ffffff,\n    670px 1249px #ffffff,\n    1260px 1443px #ffffff,\n    1977px 1511px #ffffff,\n    1240px 773px #ffffff,\n    303px 513px #ffffff,\n    63px 1530px #ffffff,\n    610px 792px #ffffff,\n    1987px 1647px #ffffff,\n    676px 1597px #ffffff,\n    1740px 1244px #ffffff,\n    816px 1661px #ffffff,\n    351px 802px #ffffff,\n    252px 1082px #ffffff,\n    31px 365px #ffffff,\n    1453px 984px #ffffff,\n    667px 1233px #ffffff,\n    1247px 1800px #ffffff,\n    839px 270px #ffffff,\n    775px 913px #ffffff,\n    1966px 1398px #ffffff,\n    499px 813px #ffffff,\n    922px 1982px #ffffff,\n    1409px 1902px #ffffff,\n    1499px 1766px #ffffff,\n    721px 899px #ffffff,\n    788px 807px #ffffff,\n    989px 1355px #ffffff,\n    1248px 1274px #ffffff,\n    849px 1091px #ffffff,\n    1799px 1036px #ffffff,\n    1486px 700px #ffffff,\n    170px 1989px #ffffff,\n    1275px 799px #ffffff,\n    772px 2000px #ffffff,\n    1642px 362px #ffffff,\n    216px 940px #ffffff,\n    1893px 281px #ffffff,\n    1944px 1298px #ffffff,\n    1294px 400px #ffffff,\n    1523px 441px #ffffff,\n    1829px 340px #ffffff,\n    468px 170px #ffffff,\n    1099px 967px #ffffff,\n    1331px 665px #ffffff,\n    1174px 1553px #ffffff,\n    1567px 325px #ffffff,\n    1028px 1399px #ffffff,\n    781px 1451px #ffffff,\n    1912px 1954px #ffffff,\n    874px 873px #ffffff,\n    1298px 1722px #ffffff,\n    1879px 706px #ffffff,\n    57px 1221px #ffffff,\n    1116px 1432px #ffffff,\n    48px 811px #ffffff,\n    101px 916px #ffffff,\n    677px 304px #ffffff,\n    1203px 639px #ffffff,\n    1391px 199px #ffffff,\n    1895px 1988px #ffffff,\n    1462px 1023px #ffffff,\n    1216px 1751px #ffffff,\n    1261px 663px #ffffff,\n    1290px 1119px #ffffff,\n    137px 1793px #ffffff,\n    1052px 1470px #ffffff,\n    1561px 226px #ffffff,\n    1156px 402px #ffffff,\n    709px 693px #ffffff,\n    1040px 1911px #ffffff,\n    1624px 1115px #ffffff,\n    551px 475px #ffffff,\n    416px 1090px #ffffff,\n    1183px 451px #ffffff,\n    58px 765px #ffffff,\n    743px 1016px #ffffff,\n    198px 369px #ffffff,\n    1645px 1503px #ffffff,\n    997px 22px #ffffff,\n    1447px 1323px #ffffff,\n    379px 883px #ffffff,\n    1171px 1195px #ffffff,\n    919px 133px #ffffff,\n    1400px 517px #ffffff,\n    725px 804px #ffffff,\n    1600px 699px #ffffff,\n    357px 581px #ffffff,\n    266px 1713px #ffffff,\n    848px 1749px #ffffff,\n    1963px 1045px #ffffff,\n    119px 1136px #ffffff;\n}\n#bubbles2[_ngcontent-%COMP%] {\n  width: 2px;\n  height: 2px;\n  background: transparent;\n  box-shadow:\n    1117px 1306px #ffffff,\n    1078px 1783px #ffffff,\n    1179px 1085px #ffffff,\n    1145px 920px #ffffff,\n    422px 1233px #ffffff,\n    387px 98px #ffffff,\n    1153px 637px #ffffff,\n    1084px 782px #ffffff,\n    476px 453px #ffffff,\n    926px 1306px #ffffff,\n    60px 1086px #ffffff,\n    753px 1575px #ffffff,\n    272px 1684px #ffffff,\n    1285px 750px #ffffff,\n    1416px 1327px #ffffff,\n    1931px 473px #ffffff,\n    736px 1395px #ffffff,\n    1816px 763px #ffffff,\n    438px 879px #ffffff,\n    665px 1902px #ffffff,\n    1341px 677px #ffffff,\n    1404px 1073px #ffffff,\n    100px 597px #ffffff,\n    357px 1689px #ffffff,\n    1044px 1342px #ffffff,\n    1954px 502px #ffffff,\n    1192px 1308px #ffffff,\n    540px 1239px #ffffff,\n    1360px 552px #ffffff,\n    89px 752px #ffffff,\n    659px 1253px #ffffff,\n    62px 517px #ffffff,\n    1375px 1705px #ffffff,\n    1343px 1511px #ffffff,\n    1659px 1922px #ffffff,\n    1560px 289px #ffffff,\n    1362px 1799px #ffffff,\n    1886px 1480px #ffffff,\n    1718px 1885px #ffffff,\n    824px 738px #ffffff,\n    1060px 1370px #ffffff,\n    1781px 1171px #ffffff,\n    255px 273px #ffffff,\n    1197px 120px #ffffff,\n    213px 7px #ffffff,\n    1226px 1920px #ffffff,\n    1844px 207px #ffffff,\n    1675px 970px #ffffff,\n    1435px 1283px #ffffff,\n    37px 353px #ffffff,\n    59px 417px #ffffff,\n    921px 1602px #ffffff,\n    1549px 1490px #ffffff,\n    638px 1845px #ffffff,\n    1328px 198px #ffffff,\n    1050px 1149px #ffffff,\n    1884px 711px #ffffff,\n    333px 263px #ffffff,\n    342px 1508px #ffffff,\n    1388px 1810px #ffffff,\n    1377px 1558px #ffffff,\n    890px 487px #ffffff,\n    1081px 759px #ffffff,\n    890px 1515px #ffffff,\n    911px 1284px #ffffff,\n    335px 735px #ffffff,\n    1140px 549px #ffffff,\n    1239px 1064px #ffffff,\n    226px 71px #ffffff,\n    1100px 1278px #ffffff,\n    1851px 1805px #ffffff,\n    1370px 1999px #ffffff,\n    1008px 1122px #ffffff,\n    785px 813px #ffffff,\n    1358px 601px #ffffff,\n    1833px 1305px #ffffff,\n    1768px 1304px #ffffff,\n    1303px 532px #ffffff,\n    860px 598px #ffffff,\n    1329px 593px #ffffff,\n    1038px 1088px #ffffff,\n    408px 405px #ffffff,\n    965px 82px #ffffff,\n    1483px 1438px #ffffff,\n    310px 1479px #ffffff,\n    1786px 1500px #ffffff,\n    1866px 852px #ffffff,\n    18px 1757px #ffffff,\n    1473px 1004px #ffffff,\n    1542px 1933px #ffffff,\n    633px 1970px #ffffff,\n    1334px 1713px #ffffff,\n    175px 28px #ffffff,\n    592px 894px #ffffff,\n    121px 1162px #ffffff,\n    1601px 1567px #ffffff,\n    1095px 657px #ffffff,\n    640px 1233px #ffffff,\n    1073px 1255px #ffffff,\n    840px 1087px #ffffff,\n    718px 250px #ffffff,\n    967px 709px #ffffff,\n    731px 239px #ffffff,\n    1623px 593px #ffffff,\n    1058px 1820px #ffffff,\n    516px 1898px #ffffff,\n    666px 12px #ffffff,\n    1997px 1382px #ffffff,\n    112px 1690px #ffffff,\n    687px 1309px #ffffff,\n    63px 539px #ffffff,\n    185px 1897px #ffffff,\n    1055px 1691px #ffffff,\n    435px 1517px #ffffff,\n    1175px 1119px #ffffff,\n    1721px 133px #ffffff,\n    1212px 47px #ffffff,\n    166px 18px #ffffff,\n    1416px 1652px #ffffff,\n    1409px 1745px #ffffff,\n    1357px 1232px #ffffff,\n    1677px 1998px #ffffff,\n    448px 1415px #ffffff,\n    705px 1736px #ffffff,\n    1031px 1466px #ffffff,\n    543px 1651px #ffffff,\n    1592px 1888px #ffffff,\n    1749px 1175px #ffffff,\n    639px 1114px #ffffff,\n    1591px 508px #ffffff,\n    759px 1244px #ffffff,\n    824px 380px #ffffff,\n    942px 955px #ffffff,\n    723px 732px #ffffff,\n    113px 1369px #ffffff,\n    203px 1739px #ffffff,\n    868px 733px #ffffff,\n    713px 971px #ffffff,\n    341px 833px #ffffff,\n    762px 824px #ffffff,\n    1359px 310px #ffffff,\n    1858px 1349px #ffffff,\n    1531px 692px #ffffff,\n    1075px 1512px #ffffff,\n    1677px 142px #ffffff,\n    1912px 1478px #ffffff,\n    1810px 1078px #ffffff,\n    426px 844px #ffffff,\n    1426px 588px #ffffff,\n    1909px 654px #ffffff,\n    1107px 295px #ffffff,\n    1351px 527px #ffffff,\n    1393px 599px #ffffff,\n    1379px 1068px #ffffff,\n    228px 1846px #ffffff,\n    1271px 374px #ffffff,\n    1348px 612px #ffffff,\n    7px 1301px #ffffff,\n    1501px 1782px #ffffff,\n    1795px 423px #ffffff,\n    1475px 1918px #ffffff,\n    1328px 1861px #ffffff,\n    1624px 51px #ffffff,\n    1791px 672px #ffffff,\n    1594px 1467px #ffffff,\n    1655px 1603px #ffffff,\n    919px 850px #ffffff,\n    523px 609px #ffffff,\n    1196px 207px #ffffff,\n    753px 410px #ffffff,\n    686px 1097px #ffffff,\n    1570px 133px #ffffff,\n    1996px 1137px #ffffff,\n    361px 116px #ffffff,\n    1015px 462px #ffffff,\n    76px 1143px #ffffff,\n    491px 1818px #ffffff,\n    1563px 795px #ffffff,\n    982px 1721px #ffffff,\n    831px 1204px #ffffff,\n    1737px 589px #ffffff,\n    861px 1579px #ffffff,\n    1666px 130px #ffffff,\n    698px 1799px #ffffff,\n    726px 1519px #ffffff,\n    109px 1208px #ffffff,\n    1184px 1057px #ffffff,\n    835px 451px #ffffff,\n    896px 594px #ffffff,\n    35px 893px #ffffff,\n    895px 542px #ffffff,\n    706px 225px #ffffff,\n    56px 1040px #ffffff,\n    1954px 108px #ffffff,\n    1439px 1423px #ffffff,\n    26px 1881px #ffffff,\n    802px 1564px #ffffff,\n    273px 708px #ffffff,\n    40px 31px #ffffff,\n    859px 108px #ffffff;\n  animation: _ngcontent-%COMP%_animBubbles 200s linear infinite;\n  opacity: 0.8;\n}\n#bubbles2[_ngcontent-%COMP%]:after {\n  content: " ";\n  position: absolute;\n  top: 2000px;\n  width: 2px;\n  height: 2px;\n  background: transparent;\n  box-shadow:\n    1117px 1306px #ffffff,\n    1078px 1783px #ffffff,\n    1179px 1085px #ffffff,\n    1145px 920px #ffffff,\n    422px 1233px #ffffff,\n    387px 98px #ffffff,\n    1153px 637px #ffffff,\n    1084px 782px #ffffff,\n    476px 453px #ffffff,\n    926px 1306px #ffffff,\n    60px 1086px #ffffff,\n    753px 1575px #ffffff,\n    272px 1684px #ffffff,\n    1285px 750px #ffffff,\n    1416px 1327px #ffffff,\n    1931px 473px #ffffff,\n    736px 1395px #ffffff,\n    1816px 763px #ffffff,\n    438px 879px #ffffff,\n    665px 1902px #ffffff,\n    1341px 677px #ffffff,\n    1404px 1073px #ffffff,\n    100px 597px #ffffff,\n    357px 1689px #ffffff,\n    1044px 1342px #ffffff,\n    1954px 502px #ffffff,\n    1192px 1308px #ffffff,\n    540px 1239px #ffffff,\n    1360px 552px #ffffff,\n    89px 752px #ffffff,\n    659px 1253px #ffffff,\n    62px 517px #ffffff,\n    1375px 1705px #ffffff,\n    1343px 1511px #ffffff,\n    1659px 1922px #ffffff,\n    1560px 289px #ffffff,\n    1362px 1799px #ffffff,\n    1886px 1480px #ffffff,\n    1718px 1885px #ffffff,\n    824px 738px #ffffff,\n    1060px 1370px #ffffff,\n    1781px 1171px #ffffff,\n    255px 273px #ffffff,\n    1197px 120px #ffffff,\n    213px 7px #ffffff,\n    1226px 1920px #ffffff,\n    1844px 207px #ffffff,\n    1675px 970px #ffffff,\n    1435px 1283px #ffffff,\n    37px 353px #ffffff,\n    59px 417px #ffffff,\n    921px 1602px #ffffff,\n    1549px 1490px #ffffff,\n    638px 1845px #ffffff,\n    1328px 198px #ffffff,\n    1050px 1149px #ffffff,\n    1884px 711px #ffffff,\n    333px 263px #ffffff,\n    342px 1508px #ffffff,\n    1388px 1810px #ffffff,\n    1377px 1558px #ffffff,\n    890px 487px #ffffff,\n    1081px 759px #ffffff,\n    890px 1515px #ffffff,\n    911px 1284px #ffffff,\n    335px 735px #ffffff,\n    1140px 549px #ffffff,\n    1239px 1064px #ffffff,\n    226px 71px #ffffff,\n    1100px 1278px #ffffff,\n    1851px 1805px #ffffff,\n    1370px 1999px #ffffff,\n    1008px 1122px #ffffff,\n    785px 813px #ffffff,\n    1358px 601px #ffffff,\n    1833px 1305px #ffffff,\n    1768px 1304px #ffffff,\n    1303px 532px #ffffff,\n    860px 598px #ffffff,\n    1329px 593px #ffffff,\n    1038px 1088px #ffffff,\n    408px 405px #ffffff,\n    965px 82px #ffffff,\n    1483px 1438px #ffffff,\n    310px 1479px #ffffff,\n    1786px 1500px #ffffff,\n    1866px 852px #ffffff,\n    18px 1757px #ffffff,\n    1473px 1004px #ffffff,\n    1542px 1933px #ffffff,\n    633px 1970px #ffffff,\n    1334px 1713px #ffffff,\n    175px 28px #ffffff,\n    592px 894px #ffffff,\n    121px 1162px #ffffff,\n    1601px 1567px #ffffff,\n    1095px 657px #ffffff,\n    640px 1233px #ffffff,\n    1073px 1255px #ffffff,\n    840px 1087px #ffffff,\n    718px 250px #ffffff,\n    967px 709px #ffffff,\n    731px 239px #ffffff,\n    1623px 593px #ffffff,\n    1058px 1820px #ffffff,\n    516px 1898px #ffffff,\n    666px 12px #ffffff,\n    1997px 1382px #ffffff,\n    112px 1690px #ffffff,\n    687px 1309px #ffffff,\n    63px 539px #ffffff,\n    185px 1897px #ffffff,\n    1055px 1691px #ffffff,\n    435px 1517px #ffffff,\n    1175px 1119px #ffffff,\n    1721px 133px #ffffff,\n    1212px 47px #ffffff,\n    166px 18px #ffffff,\n    1416px 1652px #ffffff,\n    1409px 1745px #ffffff,\n    1357px 1232px #ffffff,\n    1677px 1998px #ffffff,\n    448px 1415px #ffffff,\n    705px 1736px #ffffff,\n    1031px 1466px #ffffff,\n    543px 1651px #ffffff,\n    1592px 1888px #ffffff,\n    1749px 1175px #ffffff,\n    639px 1114px #ffffff,\n    1591px 508px #ffffff,\n    759px 1244px #ffffff,\n    824px 380px #ffffff,\n    942px 955px #ffffff,\n    723px 732px #ffffff,\n    113px 1369px #ffffff,\n    203px 1739px #ffffff,\n    868px 733px #ffffff,\n    713px 971px #ffffff,\n    341px 833px #ffffff,\n    762px 824px #ffffff,\n    1359px 310px #ffffff,\n    1858px 1349px #ffffff,\n    1531px 692px #ffffff,\n    1075px 1512px #ffffff,\n    1677px 142px #ffffff,\n    1912px 1478px #ffffff,\n    1810px 1078px #ffffff,\n    426px 844px #ffffff,\n    1426px 588px #ffffff,\n    1909px 654px #ffffff,\n    1107px 295px #ffffff,\n    1351px 527px #ffffff,\n    1393px 599px #ffffff,\n    1379px 1068px #ffffff,\n    228px 1846px #ffffff,\n    1271px 374px #ffffff,\n    1348px 612px #ffffff,\n    7px 1301px #ffffff,\n    1501px 1782px #ffffff,\n    1795px 423px #ffffff,\n    1475px 1918px #ffffff,\n    1328px 1861px #ffffff,\n    1624px 51px #ffffff,\n    1791px 672px #ffffff,\n    1594px 1467px #ffffff,\n    1655px 1603px #ffffff,\n    919px 850px #ffffff,\n    523px 609px #ffffff,\n    1196px 207px #ffffff,\n    753px 410px #ffffff,\n    686px 1097px #ffffff,\n    1570px 133px #ffffff,\n    1996px 1137px #ffffff,\n    361px 116px #ffffff,\n    1015px 462px #ffffff,\n    76px 1143px #ffffff,\n    491px 1818px #ffffff,\n    1563px 795px #ffffff,\n    982px 1721px #ffffff,\n    831px 1204px #ffffff,\n    1737px 589px #ffffff,\n    861px 1579px #ffffff,\n    1666px 130px #ffffff,\n    698px 1799px #ffffff,\n    726px 1519px #ffffff,\n    109px 1208px #ffffff,\n    1184px 1057px #ffffff,\n    835px 451px #ffffff,\n    896px 594px #ffffff,\n    35px 893px #ffffff,\n    895px 542px #ffffff,\n    706px 225px #ffffff,\n    56px 1040px #ffffff,\n    1954px 108px #ffffff,\n    1439px 1423px #ffffff,\n    26px 1881px #ffffff,\n    802px 1564px #ffffff,\n    273px 708px #ffffff,\n    40px 31px #ffffff,\n    859px 108px #ffffff;\n}\n@keyframes _ngcontent-%COMP%_animBubbles {\n  from {\n    transform: translateY(0px);\n  }\n  to {\n    transform: translateY(-2000px);\n  }\n}\n/*# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL2FwcC9idWJibGVzL2J1YmJsZXMuY29tcG9uZW50LmNzcyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiLmZ1bGwtd2gge1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdG9wOiAwcHg7XHJcbiAgICBsZWZ0OiAwcHg7XHJcbiAgICBib3R0b206IDBweDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG59XHJcblxyXG4uYnViYmxlcy1hbmltYXRpb24ge1xyXG4gICAgcG9zaXRpb246IGZpeGVkO1xyXG4gICAgdG9wOiAwO1xyXG4gICAgbGVmdDogMDtcclxuICAgIHdpZHRoOiAxMDAlO1xyXG4gICAgaGVpZ2h0OiAxMDAlO1xyXG4gICAgb3BhY2l0eTogMDtcclxuICAgIGFuaW1hdGlvbjogZGVsYXlTaG93IDFzIGxpbmVhcjtcclxuICAgIGFuaW1hdGlvbi1kZWxheTogMnM7XHJcbiAgICBhbmltYXRpb24tZmlsbC1tb2RlOiBmb3J3YXJkcztcclxufVxyXG5cclxuQGtleWZyYW1lcyBkZWxheVNob3cge1xyXG4gICBmcm9tIHtvcGFjaXR5OiAwO31cclxuICAgdG8ge29wYWNpdHk6IDE7fVxyXG4gfVxyXG5cclxuI2J1YmJsZXMge1xyXG4gICAgd2lkdGg6IDFweDtcclxuICAgIGhlaWdodDogMXB4O1xyXG4gICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XHJcbiAgICBib3gtc2hhZG93OiAxMTdweCAxNjEzcHggI2ZmZmZmZiwgMTQ4OHB4IDYzNXB4ICNmZmZmZmYsIDk0NHB4IDkxNHB4ICNmZmZmZmYsIDY0N3B4IDI3N3B4ICNmZmZmZmYsIDE3OTJweCAxMjA1cHggI2ZmZmZmZiwgNjU2cHggMTUxN3B4ICNmZmZmZmYsIDgyMHB4IDE4MzlweCAjZmZmZmZmLCAxMTUzcHggMTQwMHB4ICNmZmZmZmYsIDg3MHB4IDEzcHggI2ZmZmZmZiwgNTUwcHggNzAycHggI2ZmZmZmZiwgMTE1NXB4IDEwNTZweCAjZmZmZmZmLCA4OHB4IDE3MDlweCAjZmZmZmZmLCAxNDUwcHggMTA5MHB4ICNmZmZmZmYsIDE5MjlweCA0NTdweCAjZmZmZmZmLCAxMzkwcHggOTA1cHggI2ZmZmZmZiwgMTc3MXB4IDI2OXB4ICNmZmZmZmYsIDE3NDFweCA2NjlweCAjZmZmZmZmLCA0MzJweCA2NHB4ICNmZmZmZmYsIDU2M3B4IDk5NnB4ICNmZmZmZmYsIDE5MThweCAxODczcHggI2ZmZmZmZiwgMTg0NXB4IDEyMTFweCAjZmZmZmZmLCAyMzFweCAxNTAzcHggI2ZmZmZmZiwgMzdweCAyMjBweCAjZmZmZmZmLCAxOTcwcHggNDk1cHggI2ZmZmZmZiwgMTgxMnB4IDkyNXB4ICNmZmZmZmYsIDY3cHggMTM5OHB4ICNmZmZmZmYsIDUzNXB4IDI3OXB4ICNmZmZmZmYsIDE4MzdweCA4MjlweCAjZmZmZmZmLCAxOTQ1cHggNjg1cHggI2ZmZmZmZiwgMTY3N3B4IDE4MTdweCAjZmZmZmZmLCAxMzE3cHggMTQxNXB4ICNmZmZmZmYsIDE3ODVweCA5MDVweCAjZmZmZmZmLCAxNzg3cHggMTU1NHB4ICNmZmZmZmYsIDgwMnB4IDEyOTZweCAjZmZmZmZmLCA1MTJweCAxMTAxcHggI2ZmZmZmZiwgNTgzcHggMTM2NHB4ICNmZmZmZmYsIDMzNnB4IDU1OHB4ICNmZmZmZmYsIDk3OXB4IDMzNHB4ICNmZmZmZmYsIDEwNnB4IDc5MnB4ICNmZmZmZmYsIDIwNHB4IDM0cHggI2ZmZmZmZiwgMTg0NXB4IDE3NjNweCAjZmZmZmZmLCA0NDVweCAxNTk5cHggI2ZmZmZmZiwgMzg2cHggNDUzcHggI2ZmZmZmZiwgNDcxcHggOTUycHggI2ZmZmZmZiwgMTQ2NnB4IDE2NzZweCAjZmZmZmZmLCAxODg1cHggMzAzcHggI2ZmZmZmZiwgNTFweCAxNzE3cHggI2ZmZmZmZiwgMTIxMXB4IDI5OXB4ICNmZmZmZmYsIDE1NDZweCAxODg3cHggI2ZmZmZmZiwgMTA2N3B4IDMzcHggI2ZmZmZmZiwgMTA4OHB4IDEzMjZweCAjZmZmZmZmLCAxOTM4cHggNzYwcHggI2ZmZmZmZiwgNDcwcHggNjQ4cHggI2ZmZmZmZiwgMTIxM3B4IDI2OXB4ICNmZmZmZmYsIDE3NjdweCA3OHB4ICNmZmZmZmYsIDk3N3B4IDk3NnB4ICNmZmZmZmYsIDE5MjZweCAxNzVweCAjZmZmZmZmLCA3MjJweCAxNTEycHggI2ZmZmZmZiwgOTQ1cHggMjI3cHggI2ZmZmZmZiwgMTgxMXB4IDk5cHggI2ZmZmZmZiwgMTkxMnB4IDE0MDZweCAjZmZmZmZmLCAxNjAycHggMTI0M3B4ICNmZmZmZmYsIDYxMHB4IDQ0OXB4ICNmZmZmZmYsIDY1NHB4IDEzOTNweCAjZmZmZmZmLCAxOTMwcHggMTE5M3B4ICNmZmZmZmYsIDI1OHB4IDExODRweCAjZmZmZmZmLCA4OXB4IDI2NXB4ICNmZmZmZmYsIDgyNHB4IDE0OTRweCAjZmZmZmZmLCAxNTA2cHggMTQzNXB4ICNmZmZmZmYsIDEwMjdweCA3NTNweCAjZmZmZmZmLCAxcHggMTE5N3B4ICNmZmZmZmYsIDUzMHB4IDExNjFweCAjZmZmZmZmLCA4NjRweCAxNTU1cHggI2ZmZmZmZiwgMTYxMHB4IDE2MDRweCAjZmZmZmZmLCAxMDM1cHggMTExNHB4ICNmZmZmZmYsIDE0NTZweCAxMzNweCAjZmZmZmZmLCAxMTk2cHggMTI1M3B4ICNmZmZmZmYsIDM2MXB4IDEwMzdweCAjZmZmZmZmLCA4MzRweCAzNTFweCAjZmZmZmZmLCA0MzZweCAxNjc2cHggI2ZmZmZmZiwgMTE5NHB4IDEwMDdweCAjZmZmZmZmLCAxMTQxcHggNjQ3cHggI2ZmZmZmZiwgMzE5cHggNDU0cHggI2ZmZmZmZiwgOTM3cHggMTc2OXB4ICNmZmZmZmYsIDE4NzJweCAxMDEzcHggI2ZmZmZmZiwgNzMzcHggNjQzcHggI2ZmZmZmZiwgMTI1MHB4IDUxMXB4ICNmZmZmZmYsIDE4OXB4IDI5NnB4ICNmZmZmZmYsIDE2MzlweCAxNjNweCAjZmZmZmZmLCAxNTg0cHggMzM2cHggI2ZmZmZmZiwgMTkxMnB4IDEzNDNweCAjZmZmZmZmLCAxMjk4cHggMTMwN3B4ICNmZmZmZmYsIDE3NTBweCA5MDJweCAjZmZmZmZmLCAxMTI5cHggODQ1cHggI2ZmZmZmZiwgMTg5OXB4IDE0NzBweCAjZmZmZmZmLCAxNDI3cHggMjMycHggI2ZmZmZmZiwgMTM5MXB4IDgzOHB4ICNmZmZmZmYsIDEyMjVweCAxODE5cHggI2ZmZmZmZiwgMTkwcHggMTM2NnB4ICNmZmZmZmYsIDE4NjVweCA1MThweCAjZmZmZmZmLCAyMDNweCAxMzgzcHggI2ZmZmZmZiwgMTQ1NXB4IDYxNHB4ICNmZmZmZmYsIDQyM3B4IDM1NHB4ICNmZmZmZmYsIDE2NzhweCAxNzkwcHggI2ZmZmZmZiwgMjQxcHggNjA4cHggI2ZmZmZmZiwgMTA4OXB4IDczMHB4ICNmZmZmZmYsIDEzNDJweCAzOHB4ICNmZmZmZmYsIDE4NDhweCAyNDlweCAjZmZmZmZmLCAxODc0cHggMTc4NXB4ICNmZmZmZmYsIDEwNDBweCAxODM3cHggI2ZmZmZmZiwgNzUxcHggMjYxcHggI2ZmZmZmZiwgNTEwcHggMTk3NXB4ICNmZmZmZmYsIDUycHggNzk1cHggI2ZmZmZmZiwgMTc4NnB4IDEzMTBweCAjZmZmZmZmLCA0OThweCA3MTJweCAjZmZmZmZmLCAxOTBweCAzNzVweCAjZmZmZmZmLCAxMzQxcHggNzIycHggI2ZmZmZmZiwgNDNweCAxMzk0cHggI2ZmZmZmZiwgMTgyMXB4IDE2ODdweCAjZmZmZmZmLCAxMDZweCAxMzBweCAjZmZmZmZmLCAxNzE3cHggMTk3OHB4ICNmZmZmZmYsIDE2OHB4IDE1MXB4ICNmZmZmZmYsIDE4M3B4IDc0MHB4ICNmZmZmZmYsIDk0NXB4IDEzODFweCAjZmZmZmZmLCA2NjlweCAxMTcwcHggI2ZmZmZmZiwgMTI4NXB4IDE4MTZweCAjZmZmZmZmLCAxMTBweCAxMjE3cHggI2ZmZmZmZiwgMTYyM3B4IDgxM3B4ICNmZmZmZmYsIDg2OXB4IDY0N3B4ICNmZmZmZmYsIDg2N3B4IDU4MnB4ICNmZmZmZmYsIDczNXB4IDEyNDBweCAjZmZmZmZmLCA1MTlweCAxODk2cHggI2ZmZmZmZiwgMTMycHggMTU2cHggI2ZmZmZmZiwgMTY0OXB4IDE5M3B4ICNmZmZmZmYsIDI0MXB4IDExMDlweCAjZmZmZmZmLCA2NDNweCA0ODRweCAjZmZmZmZmLCA1NzRweCAxMjgycHggI2ZmZmZmZiwgMTk1MnB4IDU2NHB4ICNmZmZmZmYsIDE5NzhweCAxNDVweCAjZmZmZmZmLCAzMjlweCA5MDNweCAjZmZmZmZmLCAxNjc0cHggNjE3cHggI2ZmZmZmZiwgMTk3OHB4IDU1OHB4ICNmZmZmZmYsIDE4MDhweCAxNzE1cHggI2ZmZmZmZiwgMTUyNnB4IDEyMzhweCAjZmZmZmZmLCA0NzVweCAxMzMwcHggI2ZmZmZmZiwgODEwcHggNDI1cHggI2ZmZmZmZiwgMTcwOXB4IDYzNHB4ICNmZmZmZmYsIDE2NThweCAzMzZweCAjZmZmZmZmLCA0MjVweCAxOTRweCAjZmZmZmZmLCAzNTJweCA5NnB4ICNmZmZmZmYsIDE0OHB4IDE4MHB4ICNmZmZmZmYsIDExMzlweCAxMDQ2cHggI2ZmZmZmZiwgMTgwOXB4IDEyMzNweCAjZmZmZmZmLCAxNjY5cHggMTcxcHggI2ZmZmZmZiwgMjYzcHggMTM5NHB4ICNmZmZmZmYsIDUzNHB4IDcxNXB4ICNmZmZmZmYsIDM5NnB4IDEwMDhweCAjZmZmZmZmLCA1ODlweCAxNDQ1cHggI2ZmZmZmZiwgMTE5MHB4IDM4MXB4ICNmZmZmZmYsIDE3MDlweCAyNzlweCAjZmZmZmZmLCA1MjBweCA4OTFweCAjZmZmZmZmLCAxMTM2cHggMTg2N3B4ICNmZmZmZmYsIDEyODBweCAxMjMzcHggI2ZmZmZmZiwgODM2cHggMjk2cHggI2ZmZmZmZiwgMTM0OHB4IDY0NnB4ICNmZmZmZmYsIDE1MzlweCA5MTNweCAjZmZmZmZmLCA0MjNweCA3ODFweCAjZmZmZmZmLCAxMjcxcHggMTgwNXB4ICNmZmZmZmYsIDY5NnB4IDU2NHB4ICNmZmZmZmYsIDE1NDlweCA4MDRweCAjZmZmZmZmLCAzMDNweCAxNTU1cHggI2ZmZmZmZiwgMTQ0OXB4IDE5MDNweCAjZmZmZmZmLCA2NnB4IDY4N3B4ICNmZmZmZmYsIDExNjRweCA4NTZweCAjZmZmZmZmLCAxOTU4cHggMTMyNnB4ICNmZmZmZmYsIDEyNXB4IDE1N3B4ICNmZmZmZmYsIDUwOHB4IDE2NjlweCAjZmZmZmZmLCA0NjVweCA3MjVweCAjZmZmZmZmLCAxOTI1cHggMTQ0MHB4ICNmZmZmZmYsIDQwNXB4IDc5M3B4ICNmZmZmZmYsIDI3OHB4IDExMHB4ICNmZmZmZmYsIDEwODRweCAxMDY1cHggI2ZmZmZmZiwgMTA3N3B4IDcwNXB4ICNmZmZmZmYsIDY2M3B4IDE4NDRweCAjZmZmZmZmLCA3MzRweCAyNjNweCAjZmZmZmZmLCA4NzBweCAxNzYxcHggI2ZmZmZmZiwgMTAzcHggMTE2OXB4ICNmZmZmZmYsIDE1MDZweCAxMjk1cHggI2ZmZmZmZiwgMTg4M3B4IDkyNnB4ICNmZmZmZmYsIDMzNXB4IDEzNjFweCAjZmZmZmZmLCAxMTI2cHggMTI4NHB4ICNmZmZmZmYsIDI1N3B4IDExNjVweCAjZmZmZmZmLCA4MzdweCA1ODBweCAjZmZmZmZmLCAxMjExcHggMTM2MnB4ICNmZmZmZmYsIDExMzdweCAxMzgwcHggI2ZmZmZmZiwgMTM1cHggNjMycHggI2ZmZmZmZiwgMTQ5MXB4IDE5NjVweCAjZmZmZmZmLCAxMDk4cHggMTk1cHggI2ZmZmZmZiwgNTA2cHggNDE3cHggI2ZmZmZmZiwgNjkzcHggMTI0M3B4ICNmZmZmZmYsIDYyMnB4IDE4NjJweCAjZmZmZmZmLCAxNDEycHggMTM0M3B4ICNmZmZmZmYsIDk0OHB4IDE4OTRweCAjZmZmZmZmLCAxMzE1cHggMTM2M3B4ICNmZmZmZmYsIDc1NHB4IDEwOThweCAjZmZmZmZmLCAxOTMxcHggOTMwcHggI2ZmZmZmZiwgMTgzMXB4IDM0MnB4ICNmZmZmZmYsIDE3NTFweCAxODM5cHggI2ZmZmZmZiwgODRweCA3NzVweCAjZmZmZmZmLCAxNjYycHggMTQ4OHB4ICNmZmZmZmYsIDYxN3B4IDE3NjlweCAjZmZmZmZmLCAxODY5cHggMTI5MnB4ICNmZmZmZmYsIDk2M3B4IDQzMnB4ICNmZmZmZmYsIDM3MXB4IDExMTRweCAjZmZmZmZmLCAzN3B4IDY0MnB4ICNmZmZmZmYsIDIxcHggMTE4NHB4ICNmZmZmZmYsIDYwMnB4IDM2NnB4ICNmZmZmZmYsIDQxNHB4IDUyNHB4ICNmZmZmZmYsIDI4MnB4IDI0NHB4ICNmZmZmZmYsIDE2ODlweCA4NjhweCAjZmZmZmZmLCA5NDNweCA2ODFweCAjZmZmZmZmLCA4OThweCA2NzlweCAjZmZmZmZmLCA0NDlweCAxNzc0cHggI2ZmZmZmZiwgMTY3OHB4IDEzMTNweCAjZmZmZmZmLCA0NzVweCAxODExcHggI2ZmZmZmZiwgMTE0NnB4IDE1MDlweCAjZmZmZmZmLCAxMTUxcHggMTg2M3B4ICNmZmZmZmYsIDE2MTdweCA4NDZweCAjZmZmZmZmLCA4MnB4IDEwNzdweCAjZmZmZmZmLCAzMjRweCAxMzE3cHggI2ZmZmZmZiwgMTUxNnB4IDg4NXB4ICNmZmZmZmYsIDE3MDZweCAxNTI2cHggI2ZmZmZmZiwgMTkyNXB4IDExODBweCAjZmZmZmZmLCA1NTNweCA5NjdweCAjZmZmZmZmLCAxMDcycHggNTM2cHggI2ZmZmZmZiwgMTcxNXB4IDE4MTZweCAjZmZmZmZmLCAxODVweCAyODZweCAjZmZmZmZmLCAxMzYycHggMTYwMHB4ICNmZmZmZmYsIDYyOHB4IDE5MzhweCAjZmZmZmZmLCAxMTg3cHggNDEycHggI2ZmZmZmZiwgNTY5cHggMjExcHggI2ZmZmZmZiwgMTk1OXB4IDEzNTZweCAjZmZmZmZmLCAxNTcxcHggMTA1cHggI2ZmZmZmZiwgMzE5cHggMTExMXB4ICNmZmZmZmYsIDM2cHggMTM2NHB4ICNmZmZmZmYsIDUwMnB4IDE3ODhweCAjZmZmZmZmLCAxMDUxcHggMTk5M3B4ICNmZmZmZmYsIDE2MTdweCA3NzNweCAjZmZmZmZmLCA0MjRweCAxNTA3cHggI2ZmZmZmZiwgMTYyM3B4IDE5NTVweCAjZmZmZmZmLCAzMDdweCA2NjJweCAjZmZmZmZmLCAxODNweCAxMDQ4cHggI2ZmZmZmZiwgMTkxOXB4IDE0NTNweCAjZmZmZmZmLCAxMDA2cHggMTgxN3B4ICNmZmZmZmYsIDQ2OHB4IDY3M3B4ICNmZmZmZmYsIDExNDJweCAxMzc1cHggI2ZmZmZmZiwgMTIyOHB4IDQ0M3B4ICNmZmZmZmYsIDE3MzRweCA1NTJweCAjZmZmZmZmLCAyMHB4IDEwNDFweCAjZmZmZmZmLCAxNzgzcHggMzM0cHggI2ZmZmZmZiwgOThweCAxMjM3cHggI2ZmZmZmZiwgMTM1NnB4IDE5NDBweCAjZmZmZmZmLCA4NTNweCAxNzc5cHggI2ZmZmZmZiwgMTkxMHB4IDU2MHB4ICNmZmZmZmYsIDExNzRweCAxNjU2cHggI2ZmZmZmZiwgMTEwcHggMTcyNHB4ICNmZmZmZmYsIDU0MnB4IDE3NzFweCAjZmZmZmZmLCAxNzU4cHggMTkzMXB4ICNmZmZmZmYsIDE0NjNweCAxNDAxcHggI2ZmZmZmZiwgMTE1NXB4IDg0cHggI2ZmZmZmZiwgMTUwNHB4IDgzNXB4ICNmZmZmZmYsIDc1MHB4IDMyMnB4ICNmZmZmZmYsIDQwN3B4IDE5MDBweCAjZmZmZmZmLCAxNjAwcHggMTE0MXB4ICNmZmZmZmYsIDY1N3B4IDg4NnB4ICNmZmZmZmYsIDUyNnB4IDcxNHB4ICNmZmZmZmYsIDE4cHggODM2cHggI2ZmZmZmZiwgMTU0NnB4IDE1NDhweCAjZmZmZmZmLCAyMnB4IDQ2OXB4ICNmZmZmZmYsIDU5NHB4IDE0NjZweCAjZmZmZmZmLCAxMTYwcHggMTA3OHB4ICNmZmZmZmYsIDYyN3B4IDEwNTVweCAjZmZmZmZmLCAxOTVweCA2OTlweCAjZmZmZmZmLCAxMDk5cHggNjg0cHggI2ZmZmZmZiwgNTMwcHggNTUxcHggI2ZmZmZmZiwgMTE2MHB4IDEzMjVweCAjZmZmZmZmLCA4OTRweCA3MjdweCAjZmZmZmZmLCAxMTU3cHggOThweCAjZmZmZmZmLCAxMzZweCAxNDgzcHggI2ZmZmZmZiwgMTg3NXB4IDE5NzVweCAjZmZmZmZmLCAxODAzcHggNTY2cHggI2ZmZmZmZiwgMzE4cHggMTA3M3B4ICNmZmZmZmYsIDE4NjZweCAxNjU2cHggI2ZmZmZmZiwgNTQzcHggNDE0cHggI2ZmZmZmZiwgNzE5cHggNDc0cHggI2ZmZmZmZiwgMTExNXB4IDczOHB4ICNmZmZmZmYsIDM1M3B4IDg3NXB4ICNmZmZmZmYsIDE4NHB4IDE5MzhweCAjZmZmZmZmLCAxODU0cHggMTUzNHB4ICNmZmZmZmYsIDQyMHB4IDE2OThweCAjZmZmZmZmLCAxNDgwcHggMTU1MHB4ICNmZmZmZmYsIDUyMnB4IDIwM3B4ICNmZmZmZmYsIDE4OTdweCAxOTA0cHggI2ZmZmZmZiwgOTc1cHggMTcwOHB4ICNmZmZmZmYsIDE3NzRweCA2MDJweCAjZmZmZmZmLCAxOTA4cHggMjc0cHggI2ZmZmZmZiwgNjFweCA3MTVweCAjZmZmZmZmLCA5ODNweCAxMTU2cHggI2ZmZmZmZiwgMzI2cHggMTAxM3B4ICNmZmZmZmYsIDY0MXB4IDI5MHB4ICNmZmZmZmYsIDE1MjJweCAxMjBweCAjZmZmZmZmLCA0MDVweCAxNjM3cHggI2ZmZmZmZiwgMTAyMXB4IDEwOTlweCAjZmZmZmZmLCA2MzFweCAxMTQ1cHggI2ZmZmZmZiwgOTgycHggMTk2N3B4ICNmZmZmZmYsIDIwMHB4IDY1MXB4ICNmZmZmZmYsIDc5NXB4IDM1MXB4ICNmZmZmZmYsIDc5MHB4IDEwODJweCAjZmZmZmZmLCAxNDRweCAxNTcycHggI2ZmZmZmZiwgMTU0MnB4IDkwMXB4ICNmZmZmZmYsIDE1OHB4IDE1MjRweCAjZmZmZmZmLCA4NDlweCAxODQzcHggI2ZmZmZmZiwgMTgwN3B4IDIwM3B4ICNmZmZmZmYsIDE3NDdweCA0NXB4ICNmZmZmZmYsIDE2MDNweCAxNzM4cHggI2ZmZmZmZiwgNjE3cHggMTk2NnB4ICNmZmZmZmYsIDM0MnB4IDc0OHB4ICNmZmZmZmYsIDE3NzlweCAxMTczcHggI2ZmZmZmZiwgMTQyOHB4IDE1MnB4ICNmZmZmZmYsIDU4OXB4IDE5OThweCAjZmZmZmZmLCAxOTQwcHggMTgzOHB4ICNmZmZmZmYsIDExNXB4IDI3MnB4ICNmZmZmZmYsIDEyMTdweCAxMzk1cHggI2ZmZmZmZiwgMTQwMnB4IDE0OTFweCAjZmZmZmZmLCAxODMzcHggMTgxNHB4ICNmZmZmZmYsIDI0M3B4IDk2NnB4ICNmZmZmZmYsIDMxOXB4IDU3OHB4ICNmZmZmZmYsIDgxM3B4IDM2NHB4ICNmZmZmZmYsIDY2OXB4IDg4MnB4ICNmZmZmZmYsIDU1MXB4IDEzNHB4ICNmZmZmZmYsIDE4MTlweCA5MjBweCAjZmZmZmZmLCA3NDBweCAxODI2cHggI2ZmZmZmZiwgMTAyMXB4IDk1MnB4ICNmZmZmZmYsIDE1NzVweCA0NTNweCAjZmZmZmZmLCAzMjRweCA0MTlweCAjZmZmZmZmLCA5MjlweCA0MTdweCAjZmZmZmZmLCA4ODVweCAxMTEycHggI2ZmZmZmZiwgNTAzcHggMTg3cHggI2ZmZmZmZiwgMTkwOHB4IDM2MnB4ICNmZmZmZmYsIDEwNjNweCAxNjAxcHggI2ZmZmZmZiwgMTY5cHggMTc5MnB4ICNmZmZmZmYsIDc4OXB4IDk2M3B4ICNmZmZmZmYsIDE2OTdweCA5NDhweCAjZmZmZmZmLCAxNzYxcHggMTgxMHB4ICNmZmZmZmYsIDE4NDRweCAxNTkxcHggI2ZmZmZmZiwgMTcwOXB4IDk0OXB4ICNmZmZmZmYsIDE0MDJweCAxMzk2cHggI2ZmZmZmZiwgMTAzN3B4IDIyNXB4ICNmZmZmZmYsIDE4MzJweCA1MThweCAjZmZmZmZmLCAxNzI4cHggMTc4MnB4ICNmZmZmZmYsIDE5NHB4IDE0MjFweCAjZmZmZmZmLCAxMzk1cHggNzQycHggI2ZmZmZmZiwgMTQ3OHB4IDEzMjVweCAjZmZmZmZmLCA0MHB4IDU5M3B4ICNmZmZmZmYsIDE3MzJweCAxMTdweCAjZmZmZmZmLCA1MXB4IDE1OHB4ICNmZmZmZmYsIDE1OThweCAxNjcycHggI2ZmZmZmZiwgNzAxcHggODQ5cHggI2ZmZmZmZiwgMTQwM3B4IDE5NzlweCAjZmZmZmZmLCAxNDVweCAxNDE0cHggI2ZmZmZmZiwgNTUwcHggOTA2cHggI2ZmZmZmZiwgMTM2NnB4IDQ2MHB4ICNmZmZmZmYsIDE0MnB4IDEzNzlweCAjZmZmZmZmLCAzNHB4IDE4NjRweCAjZmZmZmZmLCAxMzQ2cHggMzA4cHggI2ZmZmZmZiwgMjkzcHggOTk4cHggI2ZmZmZmZiwgMjFweCAxODY4cHggI2ZmZmZmZiwgNTQwcHggMTAzM3B4ICNmZmZmZmYsIDYwcHggNzQ2cHggI2ZmZmZmZiwgMTYwMnB4IDE0NzZweCAjZmZmZmZmLCAxODBweCA4MDRweCAjZmZmZmZmLCAzNDVweCAxOTgycHggI2ZmZmZmZiwgMTQzOXB4IDY0MHB4ICNmZmZmZmYsIDkzOXB4IDE4MzRweCAjZmZmZmZmLCAyMHB4IDQzMnB4ICNmZmZmZmYsIDQ5MnB4IDE1NDlweCAjZmZmZmZmLCAxMDlweCAxNTc5cHggI2ZmZmZmZiwgMTc5NnB4IDE0MDNweCAjZmZmZmZmLCAxMDc5cHggNTE5cHggI2ZmZmZmZiwgMTY2NHB4IDM4OXB4ICNmZmZmZmYsIDE2MjdweCAxMDYxcHggI2ZmZmZmZiwgODIzcHggNDE5cHggI2ZmZmZmZiwgMTM5OXB4IDE4ODJweCAjZmZmZmZmLCAxOTA2cHggMzQ0cHggI2ZmZmZmZiwgMTE4OXB4IDg0OHB4ICNmZmZmZmYsIDExN3B4IDg4MnB4ICNmZmZmZmYsIDEyNjJweCAzM3B4ICNmZmZmZmYsIDEwNDhweCA0MzRweCAjZmZmZmZmLCAxMjA4cHggMTMwOXB4ICNmZmZmZmYsIDE2MTZweCA0MDhweCAjZmZmZmZmLCAxODMzcHggODUzcHggI2ZmZmZmZiwgMTQzM3B4IDE2NTZweCAjZmZmZmZmLCA4MTFweCAxODYxcHggI2ZmZmZmZiwgNDM5cHggMTY3MnB4ICNmZmZmZmYsIDExMDVweCAyNDhweCAjZmZmZmZmLCAzMjhweCAxNjUycHggI2ZmZmZmZiwgMTNweCAxNjU4cHggI2ZmZmZmZiwgNjg1cHggOTg3cHggI2ZmZmZmZiwgOTg1cHggNDAzcHggI2ZmZmZmZiwgMTY2NHB4IDEyMDZweCAjZmZmZmZmLCAxOTkzcHggMTkyNXB4ICNmZmZmZmYsIDQ0MHB4IDkxN3B4ICNmZmZmZmYsIDE4MzVweCAzMTlweCAjZmZmZmZmLCAxNDA0cHggMTkwN3B4ICNmZmZmZmYsIDYyNHB4IDE0NDNweCAjZmZmZmZmLCA4NDNweCA5NTRweCAjZmZmZmZmLCA0NzhweCAxNTY3cHggI2ZmZmZmZiwgODk1cHggMTYwMnB4ICNmZmZmZmYsIDEyMzFweCA4NzFweCAjZmZmZmZmLCAxMjY3cHggMTY0NnB4ICNmZmZmZmYsIDQ3NXB4IDMzNHB4ICNmZmZmZmYsIDc4NHB4IDc5NnB4ICNmZmZmZmYsIDEyOTRweCAxOTlweCAjZmZmZmZmLCAxMDlweCA3MDJweCAjZmZmZmZmLCAxOTc4cHggMzYycHggI2ZmZmZmZiwgMjkxcHggOTQwcHggI2ZmZmZmZiwgOTcxcHggMTM0M3B4ICNmZmZmZmYsIDc0cHggNzE5cHggI2ZmZmZmZiwgMzZweCA3MTVweCAjZmZmZmZmLCAxMDA3cHggMTQyM3B4ICNmZmZmZmYsIDg2MHB4IDMxNHB4ICNmZmZmZmYsIDYzMXB4IDE3N3B4ICNmZmZmZmYsIDE5MDBweCAxNTkwcHggI2ZmZmZmZiwgMTIzOXB4IDEzNDhweCAjZmZmZmZmLCAxMzQ2cHggMTI3MHB4ICNmZmZmZmYsIDE5MzRweCAxNDc1cHggI2ZmZmZmZiwgMTU1M3B4IDU1OXB4ICNmZmZmZmYsIDU4OHB4IDE5NjlweCAjZmZmZmZmLCA2NzBweCAxMjY5cHggI2ZmZmZmZiwgMTQ4NHB4IDM3NnB4ICNmZmZmZmYsIDIwcHggMTQyNHB4ICNmZmZmZmYsIDEzOTZweCA4cHggI2ZmZmZmZiwgOTY5cHggMjQ0cHggI2ZmZmZmZiwgMTgwN3B4IDUzOHB4ICNmZmZmZmYsIDE4NzNweCA4OTFweCAjZmZmZmZmLCA2MzZweCAxMTQycHggI2ZmZmZmZiwgMTQ3NHB4IDE1NjJweCAjZmZmZmZmLCA3NjNweCAzNTBweCAjZmZmZmZmLCA2NjNweCA3MDBweCAjZmZmZmZmLCA1MDBweCAxNDY5cHggI2ZmZmZmZiwgMTMwMnB4IDcyMnB4ICNmZmZmZmYsIDE4MXB4IDI5MXB4ICNmZmZmZmYsIDI2NnB4IDg5M3B4ICNmZmZmZmYsIDE0MDNweCA2NTRweCAjZmZmZmZmLCA0OTJweCA0NjBweCAjZmZmZmZmLCAxNTAzcHggMTM2OXB4ICNmZmZmZmYsIDIzcHggMTY2MnB4ICNmZmZmZmYsIDM0OXB4IDMzM3B4ICNmZmZmZmYsIDE0MzVweCAxMDE3cHggI2ZmZmZmZiwgMTQ0MXB4IDcwNXB4ICNmZmZmZmYsIDE3MDhweCAxNDQ2cHggI2ZmZmZmZiwgMTA0MXB4IDkxMXB4ICNmZmZmZmYsIDEwNjNweCA3ODBweCAjZmZmZmZmLCAxMTU4cHggMTM1NnB4ICNmZmZmZmYsIDc2N3B4IDE0NTRweCAjZmZmZmZmLCAxOTEycHggNzk3cHggI2ZmZmZmZiwgMTczMXB4IDE3NTlweCAjZmZmZmZmLCAxMzc4cHggMTM5MHB4ICNmZmZmZmYsIDE4MTVweCAxMzY0cHggI2ZmZmZmZiwgOTYwcHggMjcwcHggI2ZmZmZmZiwgMTM0M3B4IDQyN3B4ICNmZmZmZmYsIDI3NXB4IDIwM3B4ICNmZmZmZmYsIDEzMTlweCAxMDkycHggI2ZmZmZmZiwgMTQ1NXB4IDc3MHB4ICNmZmZmZmYsIDI4M3B4IDE1MDNweCAjZmZmZmZmLCAxNTA1cHggOTAxcHggI2ZmZmZmZiwgMTczOHB4IDE1NjFweCAjZmZmZmZmLCAxNTI2cHggMTkzNXB4ICNmZmZmZmYsIDE3NTdweCA2NjlweCAjZmZmZmZmLCAxNjQwcHggNjIwcHggI2ZmZmZmZiwgMTc1MHB4IDcyMnB4ICNmZmZmZmYsIDc0OHB4IDY2cHggI2ZmZmZmZiwgMTE0OXB4IDU0MHB4ICNmZmZmZmYsIDE1OXB4IDk1M3B4ICNmZmZmZmYsIDIwMHB4IDE0MjZweCAjZmZmZmZmLCA1MTVweCAxMTEwcHggI2ZmZmZmZiwgMTU1MnB4IDczN3B4ICNmZmZmZmYsIDEwOTRweCAxNDU5cHggI2ZmZmZmZiwgNzc4cHggNzk5cHggI2ZmZmZmZiwgMTAzMXB4IDUyM3B4ICNmZmZmZmYsIDc0M3B4IDE4MjVweCAjZmZmZmZmLCAxMTAwcHggODgycHggI2ZmZmZmZiwgMTA4OHB4IDE4MzZweCAjZmZmZmZmLCAyNTVweCA1OTlweCAjZmZmZmZmLCA2N3B4IDEzNjFweCAjZmZmZmZmLCAyNDdweCAxNzIxcHggI2ZmZmZmZiwgMTcyMnB4IDM0NnB4ICNmZmZmZmYsIDE4MjJweCAxNTVweCAjZmZmZmZmLCA0NTJweCAxOTczcHggI2ZmZmZmZiwgNDE1cHggMTk2MHB4ICNmZmZmZmYsIDExMDlweCA1N3B4ICNmZmZmZmYsIDI3M3B4IDEzOTJweCAjZmZmZmZmLCA0MDRweCAxMDcxcHggI2ZmZmZmZiwgMTIxMnB4IDM1M3B4ICNmZmZmZmYsIDM3MHB4IDQ2MHB4ICNmZmZmZmYsIDc5NXB4IDE1MjNweCAjZmZmZmZmLCAxOTMycHggMzQwcHggI2ZmZmZmZiwgNTFweCAxNDczcHggI2ZmZmZmZiwgMTI2OHB4IDM2NHB4ICNmZmZmZmYsIDE1MTJweCAxODYycHggI2ZmZmZmZiwgMTY3OHB4IDE4MDFweCAjZmZmZmZmLCAxNzk2cHggNTc5cHggI2ZmZmZmZiwgMjU0cHggMjUxcHggI2ZmZmZmZiwgMTQ2NnB4IDE3MTdweCAjZmZmZmZmLCA4OTNweCAzNzlweCAjZmZmZmZmLCAxMTUzcHggOTIzcHggI2ZmZmZmZiwgOTEzcHggMTgwOHB4ICNmZmZmZmYsIDc5MXB4IDc4OXB4ICNmZmZmZmYsIDQxN3B4IDE5MjRweCAjZmZmZmZmLCAxMzM2cHggMTU5OXB4ICNmZmZmZmYsIDE2OTVweCA5MDhweCAjZmZmZmZmLCAxMTIwcHggMTE0cHggI2ZmZmZmZiwgNDkzcHggMTk0OXB4ICNmZmZmZmYsIDY4cHggMTkwNXB4ICNmZmZmZmYsIDk2OXB4IDQ4MXB4ICNmZmZmZmYsIDE0MjBweCAxMDk1cHggI2ZmZmZmZiwgODAwcHggMTExN3B4ICNmZmZmZmYsIDM5MHB4IDIzNHB4ICNmZmZmZmYsIDM1NnB4IDE2NDRweCAjZmZmZmZmLCAxMDk4cHggMTQ4NnB4ICNmZmZmZmYsIDEzNjBweCA1MjFweCAjZmZmZmZmLCAxNDlweCAxMTk4cHggI2ZmZmZmZiwgMzU0cHggNzQ3cHggI2ZmZmZmZiwgMTc0OXB4IDQ4N3B4ICNmZmZmZmYsIDQ3MHB4IDc2cHggI2ZmZmZmZiwgMTY3MnB4IDI4OXB4ICNmZmZmZmYsIDE3MzFweCA1NDVweCAjZmZmZmZmLCAxNTQ3cHggMTU5MHB4ICNmZmZmZmYsIDQ5OHB4IDY5MnB4ICNmZmZmZmYsIDM5OHB4IDE1OTJweCAjZmZmZmZmLCAxODQ2cHggMTIzN3B4ICNmZmZmZmYsIDE1MzdweCAxNDc0cHggI2ZmZmZmZiwgMTcyNnB4IDEzNzRweCAjZmZmZmZmLCAxOTIycHggODU4cHggI2ZmZmZmZiwgMzc2cHggMzIxcHggI2ZmZmZmZiwgOTg1cHggMjI3cHggI2ZmZmZmZiwgMjM0cHggMTQyMXB4ICNmZmZmZmYsIDc2MHB4IDc0NXB4ICNmZmZmZmYsIDE5OTBweCAxMTMycHggI2ZmZmZmZiwgMTU2MHB4IDE1OTdweCAjZmZmZmZmLCAzMzhweCAxMzEwcHggI2ZmZmZmZiwgMTkyNHB4IDE2NjRweCAjZmZmZmZmLCA1NDdweCAxNzQ3cHggI2ZmZmZmZiwgMTYzOXB4IDEyODJweCAjZmZmZmZmLCAxMjAycHggMzM3cHggI2ZmZmZmZiwgMTk4NXB4IDc3OXB4ICNmZmZmZmYsIDczN3B4IDQ1NnB4ICNmZmZmZmYsIDg5cHggNTAxcHggI2ZmZmZmZiwgOTYzcHggNzkycHggI2ZmZmZmZiwgNjU1cHggMTQ0N3B4ICNmZmZmZmYsIDE0OTJweCAxOTk0cHggI2ZmZmZmZiwgMTE3MXB4IDI1NHB4ICNmZmZmZmYsIDg5MnB4IDgyN3B4ICNmZmZmZmYsIDE3MzVweCA0NDJweCAjZmZmZmZmLCAxNDc0cHggMTE4N3B4ICNmZmZmZmYsIDg0NnB4IDE1MThweCAjZmZmZmZmLCA1NTdweCAxODA1cHggI2ZmZmZmZiwgNzM4cHggOTQ1cHggI2ZmZmZmZiwgNzk1cHggNjhweCAjZmZmZmZmLCA2NjNweCAxOTU2cHggI2ZmZmZmZiwgMTYwN3B4IDI5MHB4ICNmZmZmZmYsIDE1MjRweCAxNXB4ICNmZmZmZmYsIDEwOTdweCAxOTExcHggI2ZmZmZmZiwgMTU3cHggMTkzOXB4ICNmZmZmZmYsIDkzNXB4IDEwNjVweCAjZmZmZmZmLCAxODA5cHggMTcwOHB4ICNmZmZmZmYsIDE2NHB4IDExNTdweCAjZmZmZmZmLCA4M3B4IDg1NXB4ICNmZmZmZmYsIDYyNXB4IDUwMXB4ICNmZmZmZmYsIDgxNHB4IDM5OHB4ICNmZmZmZmYsIDU1MnB4IDY5NXB4ICNmZmZmZmYsIDU5N3B4IDE1NDZweCAjZmZmZmZmLCAxMjM3cHggMTQxN3B4ICNmZmZmZmYsIDYyOHB4IDI4NHB4ICNmZmZmZmYsIDg2NnB4IDc2N3B4ICNmZmZmZmYsIDE0MDNweCAxMzk0cHggI2ZmZmZmZiwgNzY1cHggMTU2M3B4ICNmZmZmZmYsIDE2NDhweCAxMDlweCAjZmZmZmZmLCAxMjA1cHggMTY1OXB4ICNmZmZmZmYsIDkyMXB4IDEzMTNweCAjZmZmZmZmLCAxMzE5cHggMjQzcHggI2ZmZmZmZiwgMThweCAxMjVweCAjZmZmZmZmLCA3cHggNzc3cHggI2ZmZmZmZiwgMTgxcHggNDE4cHggI2ZmZmZmZiwgMTA2MnB4IDE4OTJweCAjZmZmZmZmLCAzODJweCAxMDZweCAjZmZmZmZmLCA5OTRweCA3NTFweCAjZmZmZmZmLCA5NjRweCAyMzRweCAjZmZmZmZmLCA0MHB4IDExOHB4ICNmZmZmZmYsIDI3OHB4IDcwNnB4ICNmZmZmZmYsIDE1NDBweCAxOTc4cHggI2ZmZmZmZiwgNDI1cHggMTY2MXB4ICNmZmZmZmYsIDEwNTBweCAzMjFweCAjZmZmZmZmLCA3MzVweCAxNzI5cHggI2ZmZmZmZiwgMTQzOHB4IDI2MHB4ICNmZmZmZmYsIDEyMjlweCAxMTA5cHggI2ZmZmZmZiwgMTg2cHggMTA0MXB4ICNmZmZmZmYsIDI0NHB4IDExODRweCAjZmZmZmZmLCAzOTJweCAxNDcycHggI2ZmZmZmZiwgNjcwcHggMTI0OXB4ICNmZmZmZmYsIDEyNjBweCAxNDQzcHggI2ZmZmZmZiwgMTk3N3B4IDE1MTFweCAjZmZmZmZmLCAxMjQwcHggNzczcHggI2ZmZmZmZiwgMzAzcHggNTEzcHggI2ZmZmZmZiwgNjNweCAxNTMwcHggI2ZmZmZmZiwgNjEwcHggNzkycHggI2ZmZmZmZiwgMTk4N3B4IDE2NDdweCAjZmZmZmZmLCA2NzZweCAxNTk3cHggI2ZmZmZmZiwgMTc0MHB4IDEyNDRweCAjZmZmZmZmLCA4MTZweCAxNjYxcHggI2ZmZmZmZiwgMzUxcHggODAycHggI2ZmZmZmZiwgMjUycHggMTA4MnB4ICNmZmZmZmYsIDMxcHggMzY1cHggI2ZmZmZmZiwgMTQ1M3B4IDk4NHB4ICNmZmZmZmYsIDY2N3B4IDEyMzNweCAjZmZmZmZmLCAxMjQ3cHggMTgwMHB4ICNmZmZmZmYsIDgzOXB4IDI3MHB4ICNmZmZmZmYsIDc3NXB4IDkxM3B4ICNmZmZmZmYsIDE5NjZweCAxMzk4cHggI2ZmZmZmZiwgNDk5cHggODEzcHggI2ZmZmZmZiwgOTIycHggMTk4MnB4ICNmZmZmZmYsIDE0MDlweCAxOTAycHggI2ZmZmZmZiwgMTQ5OXB4IDE3NjZweCAjZmZmZmZmLCA3MjFweCA4OTlweCAjZmZmZmZmLCA3ODhweCA4MDdweCAjZmZmZmZmLCA5ODlweCAxMzU1cHggI2ZmZmZmZiwgMTI0OHB4IDEyNzRweCAjZmZmZmZmLCA4NDlweCAxMDkxcHggI2ZmZmZmZiwgMTc5OXB4IDEwMzZweCAjZmZmZmZmLCAxNDg2cHggNzAwcHggI2ZmZmZmZiwgMTcwcHggMTk4OXB4ICNmZmZmZmYsIDEyNzVweCA3OTlweCAjZmZmZmZmLCA3NzJweCAyMDAwcHggI2ZmZmZmZiwgMTY0MnB4IDM2MnB4ICNmZmZmZmYsIDIxNnB4IDk0MHB4ICNmZmZmZmYsIDE4OTNweCAyODFweCAjZmZmZmZmLCAxOTQ0cHggMTI5OHB4ICNmZmZmZmYsIDEyOTRweCA0MDBweCAjZmZmZmZmLCAxNTIzcHggNDQxcHggI2ZmZmZmZiwgMTgyOXB4IDM0MHB4ICNmZmZmZmYsIDQ2OHB4IDE3MHB4ICNmZmZmZmYsIDEwOTlweCA5NjdweCAjZmZmZmZmLCAxMzMxcHggNjY1cHggI2ZmZmZmZiwgMTE3NHB4IDE1NTNweCAjZmZmZmZmLCAxNTY3cHggMzI1cHggI2ZmZmZmZiwgMTAyOHB4IDEzOTlweCAjZmZmZmZmLCA3ODFweCAxNDUxcHggI2ZmZmZmZiwgMTkxMnB4IDE5NTRweCAjZmZmZmZmLCA4NzRweCA4NzNweCAjZmZmZmZmLCAxMjk4cHggMTcyMnB4ICNmZmZmZmYsIDE4NzlweCA3MDZweCAjZmZmZmZmLCA1N3B4IDEyMjFweCAjZmZmZmZmLCAxMTE2cHggMTQzMnB4ICNmZmZmZmYsIDQ4cHggODExcHggI2ZmZmZmZiwgMTAxcHggOTE2cHggI2ZmZmZmZiwgNjc3cHggMzA0cHggI2ZmZmZmZiwgMTIwM3B4IDYzOXB4ICNmZmZmZmYsIDEzOTFweCAxOTlweCAjZmZmZmZmLCAxODk1cHggMTk4OHB4ICNmZmZmZmYsIDE0NjJweCAxMDIzcHggI2ZmZmZmZiwgMTIxNnB4IDE3NTFweCAjZmZmZmZmLCAxMjYxcHggNjYzcHggI2ZmZmZmZiwgMTI5MHB4IDExMTlweCAjZmZmZmZmLCAxMzdweCAxNzkzcHggI2ZmZmZmZiwgMTA1MnB4IDE0NzBweCAjZmZmZmZmLCAxNTYxcHggMjI2cHggI2ZmZmZmZiwgMTE1NnB4IDQwMnB4ICNmZmZmZmYsIDcwOXB4IDY5M3B4ICNmZmZmZmYsIDEwNDBweCAxOTExcHggI2ZmZmZmZiwgMTYyNHB4IDExMTVweCAjZmZmZmZmLCA1NTFweCA0NzVweCAjZmZmZmZmLCA0MTZweCAxMDkwcHggI2ZmZmZmZiwgMTE4M3B4IDQ1MXB4ICNmZmZmZmYsIDU4cHggNzY1cHggI2ZmZmZmZiwgNzQzcHggMTAxNnB4ICNmZmZmZmYsIDE5OHB4IDM2OXB4ICNmZmZmZmYsIDE2NDVweCAxNTAzcHggI2ZmZmZmZiwgOTk3cHggMjJweCAjZmZmZmZmLCAxNDQ3cHggMTMyM3B4ICNmZmZmZmYsIDM3OXB4IDg4M3B4ICNmZmZmZmYsIDExNzFweCAxMTk1cHggI2ZmZmZmZiwgOTE5cHggMTMzcHggI2ZmZmZmZiwgMTQwMHB4IDUxN3B4ICNmZmZmZmYsIDcyNXB4IDgwNHB4ICNmZmZmZmYsIDE2MDBweCA2OTlweCAjZmZmZmZmLCAzNTdweCA1ODFweCAjZmZmZmZmLCAyNjZweCAxNzEzcHggI2ZmZmZmZiwgODQ4cHggMTc0OXB4ICNmZmZmZmYsIDE5NjNweCAxMDQ1cHggI2ZmZmZmZiwgMTE5cHggMTEzNnB4ICNmZmZmZmY7XHJcbiAgICBhbmltYXRpb246IGFuaW1CdWJibGVzIDEwMHMgbGluZWFyIGluZmluaXRlO1xyXG4gICAgb3BhY2l0eTogMC41O1xyXG59XHJcblxyXG4jYnViYmxlczphZnRlciB7XHJcbiAgICBjb250ZW50OiBcIiBcIjtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHRvcDogMjAwMHB4O1xyXG4gICAgd2lkdGg6IDFweDtcclxuICAgIGhlaWdodDogMXB4O1xyXG4gICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XHJcbiAgICBib3gtc2hhZG93OiAxMTdweCAxNjEzcHggI2ZmZmZmZiwgMTQ4OHB4IDYzNXB4ICNmZmZmZmYsIDk0NHB4IDkxNHB4ICNmZmZmZmYsIDY0N3B4IDI3N3B4ICNmZmZmZmYsIDE3OTJweCAxMjA1cHggI2ZmZmZmZiwgNjU2cHggMTUxN3B4ICNmZmZmZmYsIDgyMHB4IDE4MzlweCAjZmZmZmZmLCAxMTUzcHggMTQwMHB4ICNmZmZmZmYsIDg3MHB4IDEzcHggI2ZmZmZmZiwgNTUwcHggNzAycHggI2ZmZmZmZiwgMTE1NXB4IDEwNTZweCAjZmZmZmZmLCA4OHB4IDE3MDlweCAjZmZmZmZmLCAxNDUwcHggMTA5MHB4ICNmZmZmZmYsIDE5MjlweCA0NTdweCAjZmZmZmZmLCAxMzkwcHggOTA1cHggI2ZmZmZmZiwgMTc3MXB4IDI2OXB4ICNmZmZmZmYsIDE3NDFweCA2NjlweCAjZmZmZmZmLCA0MzJweCA2NHB4ICNmZmZmZmYsIDU2M3B4IDk5NnB4ICNmZmZmZmYsIDE5MThweCAxODczcHggI2ZmZmZmZiwgMTg0NXB4IDEyMTFweCAjZmZmZmZmLCAyMzFweCAxNTAzcHggI2ZmZmZmZiwgMzdweCAyMjBweCAjZmZmZmZmLCAxOTcwcHggNDk1cHggI2ZmZmZmZiwgMTgxMnB4IDkyNXB4ICNmZmZmZmYsIDY3cHggMTM5OHB4ICNmZmZmZmYsIDUzNXB4IDI3OXB4ICNmZmZmZmYsIDE4MzdweCA4MjlweCAjZmZmZmZmLCAxOTQ1cHggNjg1cHggI2ZmZmZmZiwgMTY3N3B4IDE4MTdweCAjZmZmZmZmLCAxMzE3cHggMTQxNXB4ICNmZmZmZmYsIDE3ODVweCA5MDVweCAjZmZmZmZmLCAxNzg3cHggMTU1NHB4ICNmZmZmZmYsIDgwMnB4IDEyOTZweCAjZmZmZmZmLCA1MTJweCAxMTAxcHggI2ZmZmZmZiwgNTgzcHggMTM2NHB4ICNmZmZmZmYsIDMzNnB4IDU1OHB4ICNmZmZmZmYsIDk3OXB4IDMzNHB4ICNmZmZmZmYsIDEwNnB4IDc5MnB4ICNmZmZmZmYsIDIwNHB4IDM0cHggI2ZmZmZmZiwgMTg0NXB4IDE3NjNweCAjZmZmZmZmLCA0NDVweCAxNTk5cHggI2ZmZmZmZiwgMzg2cHggNDUzcHggI2ZmZmZmZiwgNDcxcHggOTUycHggI2ZmZmZmZiwgMTQ2NnB4IDE2NzZweCAjZmZmZmZmLCAxODg1cHggMzAzcHggI2ZmZmZmZiwgNTFweCAxNzE3cHggI2ZmZmZmZiwgMTIxMXB4IDI5OXB4ICNmZmZmZmYsIDE1NDZweCAxODg3cHggI2ZmZmZmZiwgMTA2N3B4IDMzcHggI2ZmZmZmZiwgMTA4OHB4IDEzMjZweCAjZmZmZmZmLCAxOTM4cHggNzYwcHggI2ZmZmZmZiwgNDcwcHggNjQ4cHggI2ZmZmZmZiwgMTIxM3B4IDI2OXB4ICNmZmZmZmYsIDE3NjdweCA3OHB4ICNmZmZmZmYsIDk3N3B4IDk3NnB4ICNmZmZmZmYsIDE5MjZweCAxNzVweCAjZmZmZmZmLCA3MjJweCAxNTEycHggI2ZmZmZmZiwgOTQ1cHggMjI3cHggI2ZmZmZmZiwgMTgxMXB4IDk5cHggI2ZmZmZmZiwgMTkxMnB4IDE0MDZweCAjZmZmZmZmLCAxNjAycHggMTI0M3B4ICNmZmZmZmYsIDYxMHB4IDQ0OXB4ICNmZmZmZmYsIDY1NHB4IDEzOTNweCAjZmZmZmZmLCAxOTMwcHggMTE5M3B4ICNmZmZmZmYsIDI1OHB4IDExODRweCAjZmZmZmZmLCA4OXB4IDI2NXB4ICNmZmZmZmYsIDgyNHB4IDE0OTRweCAjZmZmZmZmLCAxNTA2cHggMTQzNXB4ICNmZmZmZmYsIDEwMjdweCA3NTNweCAjZmZmZmZmLCAxcHggMTE5N3B4ICNmZmZmZmYsIDUzMHB4IDExNjFweCAjZmZmZmZmLCA4NjRweCAxNTU1cHggI2ZmZmZmZiwgMTYxMHB4IDE2MDRweCAjZmZmZmZmLCAxMDM1cHggMTExNHB4ICNmZmZmZmYsIDE0NTZweCAxMzNweCAjZmZmZmZmLCAxMTk2cHggMTI1M3B4ICNmZmZmZmYsIDM2MXB4IDEwMzdweCAjZmZmZmZmLCA4MzRweCAzNTFweCAjZmZmZmZmLCA0MzZweCAxNjc2cHggI2ZmZmZmZiwgMTE5NHB4IDEwMDdweCAjZmZmZmZmLCAxMTQxcHggNjQ3cHggI2ZmZmZmZiwgMzE5cHggNDU0cHggI2ZmZmZmZiwgOTM3cHggMTc2OXB4ICNmZmZmZmYsIDE4NzJweCAxMDEzcHggI2ZmZmZmZiwgNzMzcHggNjQzcHggI2ZmZmZmZiwgMTI1MHB4IDUxMXB4ICNmZmZmZmYsIDE4OXB4IDI5NnB4ICNmZmZmZmYsIDE2MzlweCAxNjNweCAjZmZmZmZmLCAxNTg0cHggMzM2cHggI2ZmZmZmZiwgMTkxMnB4IDEzNDNweCAjZmZmZmZmLCAxMjk4cHggMTMwN3B4ICNmZmZmZmYsIDE3NTBweCA5MDJweCAjZmZmZmZmLCAxMTI5cHggODQ1cHggI2ZmZmZmZiwgMTg5OXB4IDE0NzBweCAjZmZmZmZmLCAxNDI3cHggMjMycHggI2ZmZmZmZiwgMTM5MXB4IDgzOHB4ICNmZmZmZmYsIDEyMjVweCAxODE5cHggI2ZmZmZmZiwgMTkwcHggMTM2NnB4ICNmZmZmZmYsIDE4NjVweCA1MThweCAjZmZmZmZmLCAyMDNweCAxMzgzcHggI2ZmZmZmZiwgMTQ1NXB4IDYxNHB4ICNmZmZmZmYsIDQyM3B4IDM1NHB4ICNmZmZmZmYsIDE2NzhweCAxNzkwcHggI2ZmZmZmZiwgMjQxcHggNjA4cHggI2ZmZmZmZiwgMTA4OXB4IDczMHB4ICNmZmZmZmYsIDEzNDJweCAzOHB4ICNmZmZmZmYsIDE4NDhweCAyNDlweCAjZmZmZmZmLCAxODc0cHggMTc4NXB4ICNmZmZmZmYsIDEwNDBweCAxODM3cHggI2ZmZmZmZiwgNzUxcHggMjYxcHggI2ZmZmZmZiwgNTEwcHggMTk3NXB4ICNmZmZmZmYsIDUycHggNzk1cHggI2ZmZmZmZiwgMTc4NnB4IDEzMTBweCAjZmZmZmZmLCA0OThweCA3MTJweCAjZmZmZmZmLCAxOTBweCAzNzVweCAjZmZmZmZmLCAxMzQxcHggNzIycHggI2ZmZmZmZiwgNDNweCAxMzk0cHggI2ZmZmZmZiwgMTgyMXB4IDE2ODdweCAjZmZmZmZmLCAxMDZweCAxMzBweCAjZmZmZmZmLCAxNzE3cHggMTk3OHB4ICNmZmZmZmYsIDE2OHB4IDE1MXB4ICNmZmZmZmYsIDE4M3B4IDc0MHB4ICNmZmZmZmYsIDk0NXB4IDEzODFweCAjZmZmZmZmLCA2NjlweCAxMTcwcHggI2ZmZmZmZiwgMTI4NXB4IDE4MTZweCAjZmZmZmZmLCAxMTBweCAxMjE3cHggI2ZmZmZmZiwgMTYyM3B4IDgxM3B4ICNmZmZmZmYsIDg2OXB4IDY0N3B4ICNmZmZmZmYsIDg2N3B4IDU4MnB4ICNmZmZmZmYsIDczNXB4IDEyNDBweCAjZmZmZmZmLCA1MTlweCAxODk2cHggI2ZmZmZmZiwgMTMycHggMTU2cHggI2ZmZmZmZiwgMTY0OXB4IDE5M3B4ICNmZmZmZmYsIDI0MXB4IDExMDlweCAjZmZmZmZmLCA2NDNweCA0ODRweCAjZmZmZmZmLCA1NzRweCAxMjgycHggI2ZmZmZmZiwgMTk1MnB4IDU2NHB4ICNmZmZmZmYsIDE5NzhweCAxNDVweCAjZmZmZmZmLCAzMjlweCA5MDNweCAjZmZmZmZmLCAxNjc0cHggNjE3cHggI2ZmZmZmZiwgMTk3OHB4IDU1OHB4ICNmZmZmZmYsIDE4MDhweCAxNzE1cHggI2ZmZmZmZiwgMTUyNnB4IDEyMzhweCAjZmZmZmZmLCA0NzVweCAxMzMwcHggI2ZmZmZmZiwgODEwcHggNDI1cHggI2ZmZmZmZiwgMTcwOXB4IDYzNHB4ICNmZmZmZmYsIDE2NThweCAzMzZweCAjZmZmZmZmLCA0MjVweCAxOTRweCAjZmZmZmZmLCAzNTJweCA5NnB4ICNmZmZmZmYsIDE0OHB4IDE4MHB4ICNmZmZmZmYsIDExMzlweCAxMDQ2cHggI2ZmZmZmZiwgMTgwOXB4IDEyMzNweCAjZmZmZmZmLCAxNjY5cHggMTcxcHggI2ZmZmZmZiwgMjYzcHggMTM5NHB4ICNmZmZmZmYsIDUzNHB4IDcxNXB4ICNmZmZmZmYsIDM5NnB4IDEwMDhweCAjZmZmZmZmLCA1ODlweCAxNDQ1cHggI2ZmZmZmZiwgMTE5MHB4IDM4MXB4ICNmZmZmZmYsIDE3MDlweCAyNzlweCAjZmZmZmZmLCA1MjBweCA4OTFweCAjZmZmZmZmLCAxMTM2cHggMTg2N3B4ICNmZmZmZmYsIDEyODBweCAxMjMzcHggI2ZmZmZmZiwgODM2cHggMjk2cHggI2ZmZmZmZiwgMTM0OHB4IDY0NnB4ICNmZmZmZmYsIDE1MzlweCA5MTNweCAjZmZmZmZmLCA0MjNweCA3ODFweCAjZmZmZmZmLCAxMjcxcHggMTgwNXB4ICNmZmZmZmYsIDY5NnB4IDU2NHB4ICNmZmZmZmYsIDE1NDlweCA4MDRweCAjZmZmZmZmLCAzMDNweCAxNTU1cHggI2ZmZmZmZiwgMTQ0OXB4IDE5MDNweCAjZmZmZmZmLCA2NnB4IDY4N3B4ICNmZmZmZmYsIDExNjRweCA4NTZweCAjZmZmZmZmLCAxOTU4cHggMTMyNnB4ICNmZmZmZmYsIDEyNXB4IDE1N3B4ICNmZmZmZmYsIDUwOHB4IDE2NjlweCAjZmZmZmZmLCA0NjVweCA3MjVweCAjZmZmZmZmLCAxOTI1cHggMTQ0MHB4ICNmZmZmZmYsIDQwNXB4IDc5M3B4ICNmZmZmZmYsIDI3OHB4IDExMHB4ICNmZmZmZmYsIDEwODRweCAxMDY1cHggI2ZmZmZmZiwgMTA3N3B4IDcwNXB4ICNmZmZmZmYsIDY2M3B4IDE4NDRweCAjZmZmZmZmLCA3MzRweCAyNjNweCAjZmZmZmZmLCA4NzBweCAxNzYxcHggI2ZmZmZmZiwgMTAzcHggMTE2OXB4ICNmZmZmZmYsIDE1MDZweCAxMjk1cHggI2ZmZmZmZiwgMTg4M3B4IDkyNnB4ICNmZmZmZmYsIDMzNXB4IDEzNjFweCAjZmZmZmZmLCAxMTI2cHggMTI4NHB4ICNmZmZmZmYsIDI1N3B4IDExNjVweCAjZmZmZmZmLCA4MzdweCA1ODBweCAjZmZmZmZmLCAxMjExcHggMTM2MnB4ICNmZmZmZmYsIDExMzdweCAxMzgwcHggI2ZmZmZmZiwgMTM1cHggNjMycHggI2ZmZmZmZiwgMTQ5MXB4IDE5NjVweCAjZmZmZmZmLCAxMDk4cHggMTk1cHggI2ZmZmZmZiwgNTA2cHggNDE3cHggI2ZmZmZmZiwgNjkzcHggMTI0M3B4ICNmZmZmZmYsIDYyMnB4IDE4NjJweCAjZmZmZmZmLCAxNDEycHggMTM0M3B4ICNmZmZmZmYsIDk0OHB4IDE4OTRweCAjZmZmZmZmLCAxMzE1cHggMTM2M3B4ICNmZmZmZmYsIDc1NHB4IDEwOThweCAjZmZmZmZmLCAxOTMxcHggOTMwcHggI2ZmZmZmZiwgMTgzMXB4IDM0MnB4ICNmZmZmZmYsIDE3NTFweCAxODM5cHggI2ZmZmZmZiwgODRweCA3NzVweCAjZmZmZmZmLCAxNjYycHggMTQ4OHB4ICNmZmZmZmYsIDYxN3B4IDE3NjlweCAjZmZmZmZmLCAxODY5cHggMTI5MnB4ICNmZmZmZmYsIDk2M3B4IDQzMnB4ICNmZmZmZmYsIDM3MXB4IDExMTRweCAjZmZmZmZmLCAzN3B4IDY0MnB4ICNmZmZmZmYsIDIxcHggMTE4NHB4ICNmZmZmZmYsIDYwMnB4IDM2NnB4ICNmZmZmZmYsIDQxNHB4IDUyNHB4ICNmZmZmZmYsIDI4MnB4IDI0NHB4ICNmZmZmZmYsIDE2ODlweCA4NjhweCAjZmZmZmZmLCA5NDNweCA2ODFweCAjZmZmZmZmLCA4OThweCA2NzlweCAjZmZmZmZmLCA0NDlweCAxNzc0cHggI2ZmZmZmZiwgMTY3OHB4IDEzMTNweCAjZmZmZmZmLCA0NzVweCAxODExcHggI2ZmZmZmZiwgMTE0NnB4IDE1MDlweCAjZmZmZmZmLCAxMTUxcHggMTg2M3B4ICNmZmZmZmYsIDE2MTdweCA4NDZweCAjZmZmZmZmLCA4MnB4IDEwNzdweCAjZmZmZmZmLCAzMjRweCAxMzE3cHggI2ZmZmZmZiwgMTUxNnB4IDg4NXB4ICNmZmZmZmYsIDE3MDZweCAxNTI2cHggI2ZmZmZmZiwgMTkyNXB4IDExODBweCAjZmZmZmZmLCA1NTNweCA5NjdweCAjZmZmZmZmLCAxMDcycHggNTM2cHggI2ZmZmZmZiwgMTcxNXB4IDE4MTZweCAjZmZmZmZmLCAxODVweCAyODZweCAjZmZmZmZmLCAxMzYycHggMTYwMHB4ICNmZmZmZmYsIDYyOHB4IDE5MzhweCAjZmZmZmZmLCAxMTg3cHggNDEycHggI2ZmZmZmZiwgNTY5cHggMjExcHggI2ZmZmZmZiwgMTk1OXB4IDEzNTZweCAjZmZmZmZmLCAxNTcxcHggMTA1cHggI2ZmZmZmZiwgMzE5cHggMTExMXB4ICNmZmZmZmYsIDM2cHggMTM2NHB4ICNmZmZmZmYsIDUwMnB4IDE3ODhweCAjZmZmZmZmLCAxMDUxcHggMTk5M3B4ICNmZmZmZmYsIDE2MTdweCA3NzNweCAjZmZmZmZmLCA0MjRweCAxNTA3cHggI2ZmZmZmZiwgMTYyM3B4IDE5NTVweCAjZmZmZmZmLCAzMDdweCA2NjJweCAjZmZmZmZmLCAxODNweCAxMDQ4cHggI2ZmZmZmZiwgMTkxOXB4IDE0NTNweCAjZmZmZmZmLCAxMDA2cHggMTgxN3B4ICNmZmZmZmYsIDQ2OHB4IDY3M3B4ICNmZmZmZmYsIDExNDJweCAxMzc1cHggI2ZmZmZmZiwgMTIyOHB4IDQ0M3B4ICNmZmZmZmYsIDE3MzRweCA1NTJweCAjZmZmZmZmLCAyMHB4IDEwNDFweCAjZmZmZmZmLCAxNzgzcHggMzM0cHggI2ZmZmZmZiwgOThweCAxMjM3cHggI2ZmZmZmZiwgMTM1NnB4IDE5NDBweCAjZmZmZmZmLCA4NTNweCAxNzc5cHggI2ZmZmZmZiwgMTkxMHB4IDU2MHB4ICNmZmZmZmYsIDExNzRweCAxNjU2cHggI2ZmZmZmZiwgMTEwcHggMTcyNHB4ICNmZmZmZmYsIDU0MnB4IDE3NzFweCAjZmZmZmZmLCAxNzU4cHggMTkzMXB4ICNmZmZmZmYsIDE0NjNweCAxNDAxcHggI2ZmZmZmZiwgMTE1NXB4IDg0cHggI2ZmZmZmZiwgMTUwNHB4IDgzNXB4ICNmZmZmZmYsIDc1MHB4IDMyMnB4ICNmZmZmZmYsIDQwN3B4IDE5MDBweCAjZmZmZmZmLCAxNjAwcHggMTE0MXB4ICNmZmZmZmYsIDY1N3B4IDg4NnB4ICNmZmZmZmYsIDUyNnB4IDcxNHB4ICNmZmZmZmYsIDE4cHggODM2cHggI2ZmZmZmZiwgMTU0NnB4IDE1NDhweCAjZmZmZmZmLCAyMnB4IDQ2OXB4ICNmZmZmZmYsIDU5NHB4IDE0NjZweCAjZmZmZmZmLCAxMTYwcHggMTA3OHB4ICNmZmZmZmYsIDYyN3B4IDEwNTVweCAjZmZmZmZmLCAxOTVweCA2OTlweCAjZmZmZmZmLCAxMDk5cHggNjg0cHggI2ZmZmZmZiwgNTMwcHggNTUxcHggI2ZmZmZmZiwgMTE2MHB4IDEzMjVweCAjZmZmZmZmLCA4OTRweCA3MjdweCAjZmZmZmZmLCAxMTU3cHggOThweCAjZmZmZmZmLCAxMzZweCAxNDgzcHggI2ZmZmZmZiwgMTg3NXB4IDE5NzVweCAjZmZmZmZmLCAxODAzcHggNTY2cHggI2ZmZmZmZiwgMzE4cHggMTA3M3B4ICNmZmZmZmYsIDE4NjZweCAxNjU2cHggI2ZmZmZmZiwgNTQzcHggNDE0cHggI2ZmZmZmZiwgNzE5cHggNDc0cHggI2ZmZmZmZiwgMTExNXB4IDczOHB4ICNmZmZmZmYsIDM1M3B4IDg3NXB4ICNmZmZmZmYsIDE4NHB4IDE5MzhweCAjZmZmZmZmLCAxODU0cHggMTUzNHB4ICNmZmZmZmYsIDQyMHB4IDE2OThweCAjZmZmZmZmLCAxNDgwcHggMTU1MHB4ICNmZmZmZmYsIDUyMnB4IDIwM3B4ICNmZmZmZmYsIDE4OTdweCAxOTA0cHggI2ZmZmZmZiwgOTc1cHggMTcwOHB4ICNmZmZmZmYsIDE3NzRweCA2MDJweCAjZmZmZmZmLCAxOTA4cHggMjc0cHggI2ZmZmZmZiwgNjFweCA3MTVweCAjZmZmZmZmLCA5ODNweCAxMTU2cHggI2ZmZmZmZiwgMzI2cHggMTAxM3B4ICNmZmZmZmYsIDY0MXB4IDI5MHB4ICNmZmZmZmYsIDE1MjJweCAxMjBweCAjZmZmZmZmLCA0MDVweCAxNjM3cHggI2ZmZmZmZiwgMTAyMXB4IDEwOTlweCAjZmZmZmZmLCA2MzFweCAxMTQ1cHggI2ZmZmZmZiwgOTgycHggMTk2N3B4ICNmZmZmZmYsIDIwMHB4IDY1MXB4ICNmZmZmZmYsIDc5NXB4IDM1MXB4ICNmZmZmZmYsIDc5MHB4IDEwODJweCAjZmZmZmZmLCAxNDRweCAxNTcycHggI2ZmZmZmZiwgMTU0MnB4IDkwMXB4ICNmZmZmZmYsIDE1OHB4IDE1MjRweCAjZmZmZmZmLCA4NDlweCAxODQzcHggI2ZmZmZmZiwgMTgwN3B4IDIwM3B4ICNmZmZmZmYsIDE3NDdweCA0NXB4ICNmZmZmZmYsIDE2MDNweCAxNzM4cHggI2ZmZmZmZiwgNjE3cHggMTk2NnB4ICNmZmZmZmYsIDM0MnB4IDc0OHB4ICNmZmZmZmYsIDE3NzlweCAxMTczcHggI2ZmZmZmZiwgMTQyOHB4IDE1MnB4ICNmZmZmZmYsIDU4OXB4IDE5OThweCAjZmZmZmZmLCAxOTQwcHggMTgzOHB4ICNmZmZmZmYsIDExNXB4IDI3MnB4ICNmZmZmZmYsIDEyMTdweCAxMzk1cHggI2ZmZmZmZiwgMTQwMnB4IDE0OTFweCAjZmZmZmZmLCAxODMzcHggMTgxNHB4ICNmZmZmZmYsIDI0M3B4IDk2NnB4ICNmZmZmZmYsIDMxOXB4IDU3OHB4ICNmZmZmZmYsIDgxM3B4IDM2NHB4ICNmZmZmZmYsIDY2OXB4IDg4MnB4ICNmZmZmZmYsIDU1MXB4IDEzNHB4ICNmZmZmZmYsIDE4MTlweCA5MjBweCAjZmZmZmZmLCA3NDBweCAxODI2cHggI2ZmZmZmZiwgMTAyMXB4IDk1MnB4ICNmZmZmZmYsIDE1NzVweCA0NTNweCAjZmZmZmZmLCAzMjRweCA0MTlweCAjZmZmZmZmLCA5MjlweCA0MTdweCAjZmZmZmZmLCA4ODVweCAxMTEycHggI2ZmZmZmZiwgNTAzcHggMTg3cHggI2ZmZmZmZiwgMTkwOHB4IDM2MnB4ICNmZmZmZmYsIDEwNjNweCAxNjAxcHggI2ZmZmZmZiwgMTY5cHggMTc5MnB4ICNmZmZmZmYsIDc4OXB4IDk2M3B4ICNmZmZmZmYsIDE2OTdweCA5NDhweCAjZmZmZmZmLCAxNzYxcHggMTgxMHB4ICNmZmZmZmYsIDE4NDRweCAxNTkxcHggI2ZmZmZmZiwgMTcwOXB4IDk0OXB4ICNmZmZmZmYsIDE0MDJweCAxMzk2cHggI2ZmZmZmZiwgMTAzN3B4IDIyNXB4ICNmZmZmZmYsIDE4MzJweCA1MThweCAjZmZmZmZmLCAxNzI4cHggMTc4MnB4ICNmZmZmZmYsIDE5NHB4IDE0MjFweCAjZmZmZmZmLCAxMzk1cHggNzQycHggI2ZmZmZmZiwgMTQ3OHB4IDEzMjVweCAjZmZmZmZmLCA0MHB4IDU5M3B4ICNmZmZmZmYsIDE3MzJweCAxMTdweCAjZmZmZmZmLCA1MXB4IDE1OHB4ICNmZmZmZmYsIDE1OThweCAxNjcycHggI2ZmZmZmZiwgNzAxcHggODQ5cHggI2ZmZmZmZiwgMTQwM3B4IDE5NzlweCAjZmZmZmZmLCAxNDVweCAxNDE0cHggI2ZmZmZmZiwgNTUwcHggOTA2cHggI2ZmZmZmZiwgMTM2NnB4IDQ2MHB4ICNmZmZmZmYsIDE0MnB4IDEzNzlweCAjZmZmZmZmLCAzNHB4IDE4NjRweCAjZmZmZmZmLCAxMzQ2cHggMzA4cHggI2ZmZmZmZiwgMjkzcHggOTk4cHggI2ZmZmZmZiwgMjFweCAxODY4cHggI2ZmZmZmZiwgNTQwcHggMTAzM3B4ICNmZmZmZmYsIDYwcHggNzQ2cHggI2ZmZmZmZiwgMTYwMnB4IDE0NzZweCAjZmZmZmZmLCAxODBweCA4MDRweCAjZmZmZmZmLCAzNDVweCAxOTgycHggI2ZmZmZmZiwgMTQzOXB4IDY0MHB4ICNmZmZmZmYsIDkzOXB4IDE4MzRweCAjZmZmZmZmLCAyMHB4IDQzMnB4ICNmZmZmZmYsIDQ5MnB4IDE1NDlweCAjZmZmZmZmLCAxMDlweCAxNTc5cHggI2ZmZmZmZiwgMTc5NnB4IDE0MDNweCAjZmZmZmZmLCAxMDc5cHggNTE5cHggI2ZmZmZmZiwgMTY2NHB4IDM4OXB4ICNmZmZmZmYsIDE2MjdweCAxMDYxcHggI2ZmZmZmZiwgODIzcHggNDE5cHggI2ZmZmZmZiwgMTM5OXB4IDE4ODJweCAjZmZmZmZmLCAxOTA2cHggMzQ0cHggI2ZmZmZmZiwgMTE4OXB4IDg0OHB4ICNmZmZmZmYsIDExN3B4IDg4MnB4ICNmZmZmZmYsIDEyNjJweCAzM3B4ICNmZmZmZmYsIDEwNDhweCA0MzRweCAjZmZmZmZmLCAxMjA4cHggMTMwOXB4ICNmZmZmZmYsIDE2MTZweCA0MDhweCAjZmZmZmZmLCAxODMzcHggODUzcHggI2ZmZmZmZiwgMTQzM3B4IDE2NTZweCAjZmZmZmZmLCA4MTFweCAxODYxcHggI2ZmZmZmZiwgNDM5cHggMTY3MnB4ICNmZmZmZmYsIDExMDVweCAyNDhweCAjZmZmZmZmLCAzMjhweCAxNjUycHggI2ZmZmZmZiwgMTNweCAxNjU4cHggI2ZmZmZmZiwgNjg1cHggOTg3cHggI2ZmZmZmZiwgOTg1cHggNDAzcHggI2ZmZmZmZiwgMTY2NHB4IDEyMDZweCAjZmZmZmZmLCAxOTkzcHggMTkyNXB4ICNmZmZmZmYsIDQ0MHB4IDkxN3B4ICNmZmZmZmYsIDE4MzVweCAzMTlweCAjZmZmZmZmLCAxNDA0cHggMTkwN3B4ICNmZmZmZmYsIDYyNHB4IDE0NDNweCAjZmZmZmZmLCA4NDNweCA5NTRweCAjZmZmZmZmLCA0NzhweCAxNTY3cHggI2ZmZmZmZiwgODk1cHggMTYwMnB4ICNmZmZmZmYsIDEyMzFweCA4NzFweCAjZmZmZmZmLCAxMjY3cHggMTY0NnB4ICNmZmZmZmYsIDQ3NXB4IDMzNHB4ICNmZmZmZmYsIDc4NHB4IDc5NnB4ICNmZmZmZmYsIDEyOTRweCAxOTlweCAjZmZmZmZmLCAxMDlweCA3MDJweCAjZmZmZmZmLCAxOTc4cHggMzYycHggI2ZmZmZmZiwgMjkxcHggOTQwcHggI2ZmZmZmZiwgOTcxcHggMTM0M3B4ICNmZmZmZmYsIDc0cHggNzE5cHggI2ZmZmZmZiwgMzZweCA3MTVweCAjZmZmZmZmLCAxMDA3cHggMTQyM3B4ICNmZmZmZmYsIDg2MHB4IDMxNHB4ICNmZmZmZmYsIDYzMXB4IDE3N3B4ICNmZmZmZmYsIDE5MDBweCAxNTkwcHggI2ZmZmZmZiwgMTIzOXB4IDEzNDhweCAjZmZmZmZmLCAxMzQ2cHggMTI3MHB4ICNmZmZmZmYsIDE5MzRweCAxNDc1cHggI2ZmZmZmZiwgMTU1M3B4IDU1OXB4ICNmZmZmZmYsIDU4OHB4IDE5NjlweCAjZmZmZmZmLCA2NzBweCAxMjY5cHggI2ZmZmZmZiwgMTQ4NHB4IDM3NnB4ICNmZmZmZmYsIDIwcHggMTQyNHB4ICNmZmZmZmYsIDEzOTZweCA4cHggI2ZmZmZmZiwgOTY5cHggMjQ0cHggI2ZmZmZmZiwgMTgwN3B4IDUzOHB4ICNmZmZmZmYsIDE4NzNweCA4OTFweCAjZmZmZmZmLCA2MzZweCAxMTQycHggI2ZmZmZmZiwgMTQ3NHB4IDE1NjJweCAjZmZmZmZmLCA3NjNweCAzNTBweCAjZmZmZmZmLCA2NjNweCA3MDBweCAjZmZmZmZmLCA1MDBweCAxNDY5cHggI2ZmZmZmZiwgMTMwMnB4IDcyMnB4ICNmZmZmZmYsIDE4MXB4IDI5MXB4ICNmZmZmZmYsIDI2NnB4IDg5M3B4ICNmZmZmZmYsIDE0MDNweCA2NTRweCAjZmZmZmZmLCA0OTJweCA0NjBweCAjZmZmZmZmLCAxNTAzcHggMTM2OXB4ICNmZmZmZmYsIDIzcHggMTY2MnB4ICNmZmZmZmYsIDM0OXB4IDMzM3B4ICNmZmZmZmYsIDE0MzVweCAxMDE3cHggI2ZmZmZmZiwgMTQ0MXB4IDcwNXB4ICNmZmZmZmYsIDE3MDhweCAxNDQ2cHggI2ZmZmZmZiwgMTA0MXB4IDkxMXB4ICNmZmZmZmYsIDEwNjNweCA3ODBweCAjZmZmZmZmLCAxMTU4cHggMTM1NnB4ICNmZmZmZmYsIDc2N3B4IDE0NTRweCAjZmZmZmZmLCAxOTEycHggNzk3cHggI2ZmZmZmZiwgMTczMXB4IDE3NTlweCAjZmZmZmZmLCAxMzc4cHggMTM5MHB4ICNmZmZmZmYsIDE4MTVweCAxMzY0cHggI2ZmZmZmZiwgOTYwcHggMjcwcHggI2ZmZmZmZiwgMTM0M3B4IDQyN3B4ICNmZmZmZmYsIDI3NXB4IDIwM3B4ICNmZmZmZmYsIDEzMTlweCAxMDkycHggI2ZmZmZmZiwgMTQ1NXB4IDc3MHB4ICNmZmZmZmYsIDI4M3B4IDE1MDNweCAjZmZmZmZmLCAxNTA1cHggOTAxcHggI2ZmZmZmZiwgMTczOHB4IDE1NjFweCAjZmZmZmZmLCAxNTI2cHggMTkzNXB4ICNmZmZmZmYsIDE3NTdweCA2NjlweCAjZmZmZmZmLCAxNjQwcHggNjIwcHggI2ZmZmZmZiwgMTc1MHB4IDcyMnB4ICNmZmZmZmYsIDc0OHB4IDY2cHggI2ZmZmZmZiwgMTE0OXB4IDU0MHB4ICNmZmZmZmYsIDE1OXB4IDk1M3B4ICNmZmZmZmYsIDIwMHB4IDE0MjZweCAjZmZmZmZmLCA1MTVweCAxMTEwcHggI2ZmZmZmZiwgMTU1MnB4IDczN3B4ICNmZmZmZmYsIDEwOTRweCAxNDU5cHggI2ZmZmZmZiwgNzc4cHggNzk5cHggI2ZmZmZmZiwgMTAzMXB4IDUyM3B4ICNmZmZmZmYsIDc0M3B4IDE4MjVweCAjZmZmZmZmLCAxMTAwcHggODgycHggI2ZmZmZmZiwgMTA4OHB4IDE4MzZweCAjZmZmZmZmLCAyNTVweCA1OTlweCAjZmZmZmZmLCA2N3B4IDEzNjFweCAjZmZmZmZmLCAyNDdweCAxNzIxcHggI2ZmZmZmZiwgMTcyMnB4IDM0NnB4ICNmZmZmZmYsIDE4MjJweCAxNTVweCAjZmZmZmZmLCA0NTJweCAxOTczcHggI2ZmZmZmZiwgNDE1cHggMTk2MHB4ICNmZmZmZmYsIDExMDlweCA1N3B4ICNmZmZmZmYsIDI3M3B4IDEzOTJweCAjZmZmZmZmLCA0MDRweCAxMDcxcHggI2ZmZmZmZiwgMTIxMnB4IDM1M3B4ICNmZmZmZmYsIDM3MHB4IDQ2MHB4ICNmZmZmZmYsIDc5NXB4IDE1MjNweCAjZmZmZmZmLCAxOTMycHggMzQwcHggI2ZmZmZmZiwgNTFweCAxNDczcHggI2ZmZmZmZiwgMTI2OHB4IDM2NHB4ICNmZmZmZmYsIDE1MTJweCAxODYycHggI2ZmZmZmZiwgMTY3OHB4IDE4MDFweCAjZmZmZmZmLCAxNzk2cHggNTc5cHggI2ZmZmZmZiwgMjU0cHggMjUxcHggI2ZmZmZmZiwgMTQ2NnB4IDE3MTdweCAjZmZmZmZmLCA4OTNweCAzNzlweCAjZmZmZmZmLCAxMTUzcHggOTIzcHggI2ZmZmZmZiwgOTEzcHggMTgwOHB4ICNmZmZmZmYsIDc5MXB4IDc4OXB4ICNmZmZmZmYsIDQxN3B4IDE5MjRweCAjZmZmZmZmLCAxMzM2cHggMTU5OXB4ICNmZmZmZmYsIDE2OTVweCA5MDhweCAjZmZmZmZmLCAxMTIwcHggMTE0cHggI2ZmZmZmZiwgNDkzcHggMTk0OXB4ICNmZmZmZmYsIDY4cHggMTkwNXB4ICNmZmZmZmYsIDk2OXB4IDQ4MXB4ICNmZmZmZmYsIDE0MjBweCAxMDk1cHggI2ZmZmZmZiwgODAwcHggMTExN3B4ICNmZmZmZmYsIDM5MHB4IDIzNHB4ICNmZmZmZmYsIDM1NnB4IDE2NDRweCAjZmZmZmZmLCAxMDk4cHggMTQ4NnB4ICNmZmZmZmYsIDEzNjBweCA1MjFweCAjZmZmZmZmLCAxNDlweCAxMTk4cHggI2ZmZmZmZiwgMzU0cHggNzQ3cHggI2ZmZmZmZiwgMTc0OXB4IDQ4N3B4ICNmZmZmZmYsIDQ3MHB4IDc2cHggI2ZmZmZmZiwgMTY3MnB4IDI4OXB4ICNmZmZmZmYsIDE3MzFweCA1NDVweCAjZmZmZmZmLCAxNTQ3cHggMTU5MHB4ICNmZmZmZmYsIDQ5OHB4IDY5MnB4ICNmZmZmZmYsIDM5OHB4IDE1OTJweCAjZmZmZmZmLCAxODQ2cHggMTIzN3B4ICNmZmZmZmYsIDE1MzdweCAxNDc0cHggI2ZmZmZmZiwgMTcyNnB4IDEzNzRweCAjZmZmZmZmLCAxOTIycHggODU4cHggI2ZmZmZmZiwgMzc2cHggMzIxcHggI2ZmZmZmZiwgOTg1cHggMjI3cHggI2ZmZmZmZiwgMjM0cHggMTQyMXB4ICNmZmZmZmYsIDc2MHB4IDc0NXB4ICNmZmZmZmYsIDE5OTBweCAxMTMycHggI2ZmZmZmZiwgMTU2MHB4IDE1OTdweCAjZmZmZmZmLCAzMzhweCAxMzEwcHggI2ZmZmZmZiwgMTkyNHB4IDE2NjRweCAjZmZmZmZmLCA1NDdweCAxNzQ3cHggI2ZmZmZmZiwgMTYzOXB4IDEyODJweCAjZmZmZmZmLCAxMjAycHggMzM3cHggI2ZmZmZmZiwgMTk4NXB4IDc3OXB4ICNmZmZmZmYsIDczN3B4IDQ1NnB4ICNmZmZmZmYsIDg5cHggNTAxcHggI2ZmZmZmZiwgOTYzcHggNzkycHggI2ZmZmZmZiwgNjU1cHggMTQ0N3B4ICNmZmZmZmYsIDE0OTJweCAxOTk0cHggI2ZmZmZmZiwgMTE3MXB4IDI1NHB4ICNmZmZmZmYsIDg5MnB4IDgyN3B4ICNmZmZmZmYsIDE3MzVweCA0NDJweCAjZmZmZmZmLCAxNDc0cHggMTE4N3B4ICNmZmZmZmYsIDg0NnB4IDE1MThweCAjZmZmZmZmLCA1NTdweCAxODA1cHggI2ZmZmZmZiwgNzM4cHggOTQ1cHggI2ZmZmZmZiwgNzk1cHggNjhweCAjZmZmZmZmLCA2NjNweCAxOTU2cHggI2ZmZmZmZiwgMTYwN3B4IDI5MHB4ICNmZmZmZmYsIDE1MjRweCAxNXB4ICNmZmZmZmYsIDEwOTdweCAxOTExcHggI2ZmZmZmZiwgMTU3cHggMTkzOXB4ICNmZmZmZmYsIDkzNXB4IDEwNjVweCAjZmZmZmZmLCAxODA5cHggMTcwOHB4ICNmZmZmZmYsIDE2NHB4IDExNTdweCAjZmZmZmZmLCA4M3B4IDg1NXB4ICNmZmZmZmYsIDYyNXB4IDUwMXB4ICNmZmZmZmYsIDgxNHB4IDM5OHB4ICNmZmZmZmYsIDU1MnB4IDY5NXB4ICNmZmZmZmYsIDU5N3B4IDE1NDZweCAjZmZmZmZmLCAxMjM3cHggMTQxN3B4ICNmZmZmZmYsIDYyOHB4IDI4NHB4ICNmZmZmZmYsIDg2NnB4IDc2N3B4ICNmZmZmZmYsIDE0MDNweCAxMzk0cHggI2ZmZmZmZiwgNzY1cHggMTU2M3B4ICNmZmZmZmYsIDE2NDhweCAxMDlweCAjZmZmZmZmLCAxMjA1cHggMTY1OXB4ICNmZmZmZmYsIDkyMXB4IDEzMTNweCAjZmZmZmZmLCAxMzE5cHggMjQzcHggI2ZmZmZmZiwgMThweCAxMjVweCAjZmZmZmZmLCA3cHggNzc3cHggI2ZmZmZmZiwgMTgxcHggNDE4cHggI2ZmZmZmZiwgMTA2MnB4IDE4OTJweCAjZmZmZmZmLCAzODJweCAxMDZweCAjZmZmZmZmLCA5OTRweCA3NTFweCAjZmZmZmZmLCA5NjRweCAyMzRweCAjZmZmZmZmLCA0MHB4IDExOHB4ICNmZmZmZmYsIDI3OHB4IDcwNnB4ICNmZmZmZmYsIDE1NDBweCAxOTc4cHggI2ZmZmZmZiwgNDI1cHggMTY2MXB4ICNmZmZmZmYsIDEwNTBweCAzMjFweCAjZmZmZmZmLCA3MzVweCAxNzI5cHggI2ZmZmZmZiwgMTQzOHB4IDI2MHB4ICNmZmZmZmYsIDEyMjlweCAxMTA5cHggI2ZmZmZmZiwgMTg2cHggMTA0MXB4ICNmZmZmZmYsIDI0NHB4IDExODRweCAjZmZmZmZmLCAzOTJweCAxNDcycHggI2ZmZmZmZiwgNjcwcHggMTI0OXB4ICNmZmZmZmYsIDEyNjBweCAxNDQzcHggI2ZmZmZmZiwgMTk3N3B4IDE1MTFweCAjZmZmZmZmLCAxMjQwcHggNzczcHggI2ZmZmZmZiwgMzAzcHggNTEzcHggI2ZmZmZmZiwgNjNweCAxNTMwcHggI2ZmZmZmZiwgNjEwcHggNzkycHggI2ZmZmZmZiwgMTk4N3B4IDE2NDdweCAjZmZmZmZmLCA2NzZweCAxNTk3cHggI2ZmZmZmZiwgMTc0MHB4IDEyNDRweCAjZmZmZmZmLCA4MTZweCAxNjYxcHggI2ZmZmZmZiwgMzUxcHggODAycHggI2ZmZmZmZiwgMjUycHggMTA4MnB4ICNmZmZmZmYsIDMxcHggMzY1cHggI2ZmZmZmZiwgMTQ1M3B4IDk4NHB4ICNmZmZmZmYsIDY2N3B4IDEyMzNweCAjZmZmZmZmLCAxMjQ3cHggMTgwMHB4ICNmZmZmZmYsIDgzOXB4IDI3MHB4ICNmZmZmZmYsIDc3NXB4IDkxM3B4ICNmZmZmZmYsIDE5NjZweCAxMzk4cHggI2ZmZmZmZiwgNDk5cHggODEzcHggI2ZmZmZmZiwgOTIycHggMTk4MnB4ICNmZmZmZmYsIDE0MDlweCAxOTAycHggI2ZmZmZmZiwgMTQ5OXB4IDE3NjZweCAjZmZmZmZmLCA3MjFweCA4OTlweCAjZmZmZmZmLCA3ODhweCA4MDdweCAjZmZmZmZmLCA5ODlweCAxMzU1cHggI2ZmZmZmZiwgMTI0OHB4IDEyNzRweCAjZmZmZmZmLCA4NDlweCAxMDkxcHggI2ZmZmZmZiwgMTc5OXB4IDEwMzZweCAjZmZmZmZmLCAxNDg2cHggNzAwcHggI2ZmZmZmZiwgMTcwcHggMTk4OXB4ICNmZmZmZmYsIDEyNzVweCA3OTlweCAjZmZmZmZmLCA3NzJweCAyMDAwcHggI2ZmZmZmZiwgMTY0MnB4IDM2MnB4ICNmZmZmZmYsIDIxNnB4IDk0MHB4ICNmZmZmZmYsIDE4OTNweCAyODFweCAjZmZmZmZmLCAxOTQ0cHggMTI5OHB4ICNmZmZmZmYsIDEyOTRweCA0MDBweCAjZmZmZmZmLCAxNTIzcHggNDQxcHggI2ZmZmZmZiwgMTgyOXB4IDM0MHB4ICNmZmZmZmYsIDQ2OHB4IDE3MHB4ICNmZmZmZmYsIDEwOTlweCA5NjdweCAjZmZmZmZmLCAxMzMxcHggNjY1cHggI2ZmZmZmZiwgMTE3NHB4IDE1NTNweCAjZmZmZmZmLCAxNTY3cHggMzI1cHggI2ZmZmZmZiwgMTAyOHB4IDEzOTlweCAjZmZmZmZmLCA3ODFweCAxNDUxcHggI2ZmZmZmZiwgMTkxMnB4IDE5NTRweCAjZmZmZmZmLCA4NzRweCA4NzNweCAjZmZmZmZmLCAxMjk4cHggMTcyMnB4ICNmZmZmZmYsIDE4NzlweCA3MDZweCAjZmZmZmZmLCA1N3B4IDEyMjFweCAjZmZmZmZmLCAxMTE2cHggMTQzMnB4ICNmZmZmZmYsIDQ4cHggODExcHggI2ZmZmZmZiwgMTAxcHggOTE2cHggI2ZmZmZmZiwgNjc3cHggMzA0cHggI2ZmZmZmZiwgMTIwM3B4IDYzOXB4ICNmZmZmZmYsIDEzOTFweCAxOTlweCAjZmZmZmZmLCAxODk1cHggMTk4OHB4ICNmZmZmZmYsIDE0NjJweCAxMDIzcHggI2ZmZmZmZiwgMTIxNnB4IDE3NTFweCAjZmZmZmZmLCAxMjYxcHggNjYzcHggI2ZmZmZmZiwgMTI5MHB4IDExMTlweCAjZmZmZmZmLCAxMzdweCAxNzkzcHggI2ZmZmZmZiwgMTA1MnB4IDE0NzBweCAjZmZmZmZmLCAxNTYxcHggMjI2cHggI2ZmZmZmZiwgMTE1NnB4IDQwMnB4ICNmZmZmZmYsIDcwOXB4IDY5M3B4ICNmZmZmZmYsIDEwNDBweCAxOTExcHggI2ZmZmZmZiwgMTYyNHB4IDExMTVweCAjZmZmZmZmLCA1NTFweCA0NzVweCAjZmZmZmZmLCA0MTZweCAxMDkwcHggI2ZmZmZmZiwgMTE4M3B4IDQ1MXB4ICNmZmZmZmYsIDU4cHggNzY1cHggI2ZmZmZmZiwgNzQzcHggMTAxNnB4ICNmZmZmZmYsIDE5OHB4IDM2OXB4ICNmZmZmZmYsIDE2NDVweCAxNTAzcHggI2ZmZmZmZiwgOTk3cHggMjJweCAjZmZmZmZmLCAxNDQ3cHggMTMyM3B4ICNmZmZmZmYsIDM3OXB4IDg4M3B4ICNmZmZmZmYsIDExNzFweCAxMTk1cHggI2ZmZmZmZiwgOTE5cHggMTMzcHggI2ZmZmZmZiwgMTQwMHB4IDUxN3B4ICNmZmZmZmYsIDcyNXB4IDgwNHB4ICNmZmZmZmYsIDE2MDBweCA2OTlweCAjZmZmZmZmLCAzNTdweCA1ODFweCAjZmZmZmZmLCAyNjZweCAxNzEzcHggI2ZmZmZmZiwgODQ4cHggMTc0OXB4ICNmZmZmZmYsIDE5NjNweCAxMDQ1cHggI2ZmZmZmZiwgMTE5cHggMTEzNnB4ICNmZmZmZmY7XHJcbn1cclxuXHJcbiNidWJibGVzMiB7XHJcbiAgICB3aWR0aDogMnB4O1xyXG4gICAgaGVpZ2h0OiAycHg7XHJcbiAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcclxuICAgIGJveC1zaGFkb3c6IDExMTdweCAxMzA2cHggI2ZmZmZmZiwgMTA3OHB4IDE3ODNweCAjZmZmZmZmLCAxMTc5cHggMTA4NXB4ICNmZmZmZmYsIDExNDVweCA5MjBweCAjZmZmZmZmLCA0MjJweCAxMjMzcHggI2ZmZmZmZiwgMzg3cHggOThweCAjZmZmZmZmLCAxMTUzcHggNjM3cHggI2ZmZmZmZiwgMTA4NHB4IDc4MnB4ICNmZmZmZmYsIDQ3NnB4IDQ1M3B4ICNmZmZmZmYsIDkyNnB4IDEzMDZweCAjZmZmZmZmLCA2MHB4IDEwODZweCAjZmZmZmZmLCA3NTNweCAxNTc1cHggI2ZmZmZmZiwgMjcycHggMTY4NHB4ICNmZmZmZmYsIDEyODVweCA3NTBweCAjZmZmZmZmLCAxNDE2cHggMTMyN3B4ICNmZmZmZmYsIDE5MzFweCA0NzNweCAjZmZmZmZmLCA3MzZweCAxMzk1cHggI2ZmZmZmZiwgMTgxNnB4IDc2M3B4ICNmZmZmZmYsIDQzOHB4IDg3OXB4ICNmZmZmZmYsIDY2NXB4IDE5MDJweCAjZmZmZmZmLCAxMzQxcHggNjc3cHggI2ZmZmZmZiwgMTQwNHB4IDEwNzNweCAjZmZmZmZmLCAxMDBweCA1OTdweCAjZmZmZmZmLCAzNTdweCAxNjg5cHggI2ZmZmZmZiwgMTA0NHB4IDEzNDJweCAjZmZmZmZmLCAxOTU0cHggNTAycHggI2ZmZmZmZiwgMTE5MnB4IDEzMDhweCAjZmZmZmZmLCA1NDBweCAxMjM5cHggI2ZmZmZmZiwgMTM2MHB4IDU1MnB4ICNmZmZmZmYsIDg5cHggNzUycHggI2ZmZmZmZiwgNjU5cHggMTI1M3B4ICNmZmZmZmYsIDYycHggNTE3cHggI2ZmZmZmZiwgMTM3NXB4IDE3MDVweCAjZmZmZmZmLCAxMzQzcHggMTUxMXB4ICNmZmZmZmYsIDE2NTlweCAxOTIycHggI2ZmZmZmZiwgMTU2MHB4IDI4OXB4ICNmZmZmZmYsIDEzNjJweCAxNzk5cHggI2ZmZmZmZiwgMTg4NnB4IDE0ODBweCAjZmZmZmZmLCAxNzE4cHggMTg4NXB4ICNmZmZmZmYsIDgyNHB4IDczOHB4ICNmZmZmZmYsIDEwNjBweCAxMzcwcHggI2ZmZmZmZiwgMTc4MXB4IDExNzFweCAjZmZmZmZmLCAyNTVweCAyNzNweCAjZmZmZmZmLCAxMTk3cHggMTIwcHggI2ZmZmZmZiwgMjEzcHggN3B4ICNmZmZmZmYsIDEyMjZweCAxOTIwcHggI2ZmZmZmZiwgMTg0NHB4IDIwN3B4ICNmZmZmZmYsIDE2NzVweCA5NzBweCAjZmZmZmZmLCAxNDM1cHggMTI4M3B4ICNmZmZmZmYsIDM3cHggMzUzcHggI2ZmZmZmZiwgNTlweCA0MTdweCAjZmZmZmZmLCA5MjFweCAxNjAycHggI2ZmZmZmZiwgMTU0OXB4IDE0OTBweCAjZmZmZmZmLCA2MzhweCAxODQ1cHggI2ZmZmZmZiwgMTMyOHB4IDE5OHB4ICNmZmZmZmYsIDEwNTBweCAxMTQ5cHggI2ZmZmZmZiwgMTg4NHB4IDcxMXB4ICNmZmZmZmYsIDMzM3B4IDI2M3B4ICNmZmZmZmYsIDM0MnB4IDE1MDhweCAjZmZmZmZmLCAxMzg4cHggMTgxMHB4ICNmZmZmZmYsIDEzNzdweCAxNTU4cHggI2ZmZmZmZiwgODkwcHggNDg3cHggI2ZmZmZmZiwgMTA4MXB4IDc1OXB4ICNmZmZmZmYsIDg5MHB4IDE1MTVweCAjZmZmZmZmLCA5MTFweCAxMjg0cHggI2ZmZmZmZiwgMzM1cHggNzM1cHggI2ZmZmZmZiwgMTE0MHB4IDU0OXB4ICNmZmZmZmYsIDEyMzlweCAxMDY0cHggI2ZmZmZmZiwgMjI2cHggNzFweCAjZmZmZmZmLCAxMTAwcHggMTI3OHB4ICNmZmZmZmYsIDE4NTFweCAxODA1cHggI2ZmZmZmZiwgMTM3MHB4IDE5OTlweCAjZmZmZmZmLCAxMDA4cHggMTEyMnB4ICNmZmZmZmYsIDc4NXB4IDgxM3B4ICNmZmZmZmYsIDEzNThweCA2MDFweCAjZmZmZmZmLCAxODMzcHggMTMwNXB4ICNmZmZmZmYsIDE3NjhweCAxMzA0cHggI2ZmZmZmZiwgMTMwM3B4IDUzMnB4ICNmZmZmZmYsIDg2MHB4IDU5OHB4ICNmZmZmZmYsIDEzMjlweCA1OTNweCAjZmZmZmZmLCAxMDM4cHggMTA4OHB4ICNmZmZmZmYsIDQwOHB4IDQwNXB4ICNmZmZmZmYsIDk2NXB4IDgycHggI2ZmZmZmZiwgMTQ4M3B4IDE0MzhweCAjZmZmZmZmLCAzMTBweCAxNDc5cHggI2ZmZmZmZiwgMTc4NnB4IDE1MDBweCAjZmZmZmZmLCAxODY2cHggODUycHggI2ZmZmZmZiwgMThweCAxNzU3cHggI2ZmZmZmZiwgMTQ3M3B4IDEwMDRweCAjZmZmZmZmLCAxNTQycHggMTkzM3B4ICNmZmZmZmYsIDYzM3B4IDE5NzBweCAjZmZmZmZmLCAxMzM0cHggMTcxM3B4ICNmZmZmZmYsIDE3NXB4IDI4cHggI2ZmZmZmZiwgNTkycHggODk0cHggI2ZmZmZmZiwgMTIxcHggMTE2MnB4ICNmZmZmZmYsIDE2MDFweCAxNTY3cHggI2ZmZmZmZiwgMTA5NXB4IDY1N3B4ICNmZmZmZmYsIDY0MHB4IDEyMzNweCAjZmZmZmZmLCAxMDczcHggMTI1NXB4ICNmZmZmZmYsIDg0MHB4IDEwODdweCAjZmZmZmZmLCA3MThweCAyNTBweCAjZmZmZmZmLCA5NjdweCA3MDlweCAjZmZmZmZmLCA3MzFweCAyMzlweCAjZmZmZmZmLCAxNjIzcHggNTkzcHggI2ZmZmZmZiwgMTA1OHB4IDE4MjBweCAjZmZmZmZmLCA1MTZweCAxODk4cHggI2ZmZmZmZiwgNjY2cHggMTJweCAjZmZmZmZmLCAxOTk3cHggMTM4MnB4ICNmZmZmZmYsIDExMnB4IDE2OTBweCAjZmZmZmZmLCA2ODdweCAxMzA5cHggI2ZmZmZmZiwgNjNweCA1MzlweCAjZmZmZmZmLCAxODVweCAxODk3cHggI2ZmZmZmZiwgMTA1NXB4IDE2OTFweCAjZmZmZmZmLCA0MzVweCAxNTE3cHggI2ZmZmZmZiwgMTE3NXB4IDExMTlweCAjZmZmZmZmLCAxNzIxcHggMTMzcHggI2ZmZmZmZiwgMTIxMnB4IDQ3cHggI2ZmZmZmZiwgMTY2cHggMThweCAjZmZmZmZmLCAxNDE2cHggMTY1MnB4ICNmZmZmZmYsIDE0MDlweCAxNzQ1cHggI2ZmZmZmZiwgMTM1N3B4IDEyMzJweCAjZmZmZmZmLCAxNjc3cHggMTk5OHB4ICNmZmZmZmYsIDQ0OHB4IDE0MTVweCAjZmZmZmZmLCA3MDVweCAxNzM2cHggI2ZmZmZmZiwgMTAzMXB4IDE0NjZweCAjZmZmZmZmLCA1NDNweCAxNjUxcHggI2ZmZmZmZiwgMTU5MnB4IDE4ODhweCAjZmZmZmZmLCAxNzQ5cHggMTE3NXB4ICNmZmZmZmYsIDYzOXB4IDExMTRweCAjZmZmZmZmLCAxNTkxcHggNTA4cHggI2ZmZmZmZiwgNzU5cHggMTI0NHB4ICNmZmZmZmYsIDgyNHB4IDM4MHB4ICNmZmZmZmYsIDk0MnB4IDk1NXB4ICNmZmZmZmYsIDcyM3B4IDczMnB4ICNmZmZmZmYsIDExM3B4IDEzNjlweCAjZmZmZmZmLCAyMDNweCAxNzM5cHggI2ZmZmZmZiwgODY4cHggNzMzcHggI2ZmZmZmZiwgNzEzcHggOTcxcHggI2ZmZmZmZiwgMzQxcHggODMzcHggI2ZmZmZmZiwgNzYycHggODI0cHggI2ZmZmZmZiwgMTM1OXB4IDMxMHB4ICNmZmZmZmYsIDE4NThweCAxMzQ5cHggI2ZmZmZmZiwgMTUzMXB4IDY5MnB4ICNmZmZmZmYsIDEwNzVweCAxNTEycHggI2ZmZmZmZiwgMTY3N3B4IDE0MnB4ICNmZmZmZmYsIDE5MTJweCAxNDc4cHggI2ZmZmZmZiwgMTgxMHB4IDEwNzhweCAjZmZmZmZmLCA0MjZweCA4NDRweCAjZmZmZmZmLCAxNDI2cHggNTg4cHggI2ZmZmZmZiwgMTkwOXB4IDY1NHB4ICNmZmZmZmYsIDExMDdweCAyOTVweCAjZmZmZmZmLCAxMzUxcHggNTI3cHggI2ZmZmZmZiwgMTM5M3B4IDU5OXB4ICNmZmZmZmYsIDEzNzlweCAxMDY4cHggI2ZmZmZmZiwgMjI4cHggMTg0NnB4ICNmZmZmZmYsIDEyNzFweCAzNzRweCAjZmZmZmZmLCAxMzQ4cHggNjEycHggI2ZmZmZmZiwgN3B4IDEzMDFweCAjZmZmZmZmLCAxNTAxcHggMTc4MnB4ICNmZmZmZmYsIDE3OTVweCA0MjNweCAjZmZmZmZmLCAxNDc1cHggMTkxOHB4ICNmZmZmZmYsIDEzMjhweCAxODYxcHggI2ZmZmZmZiwgMTYyNHB4IDUxcHggI2ZmZmZmZiwgMTc5MXB4IDY3MnB4ICNmZmZmZmYsIDE1OTRweCAxNDY3cHggI2ZmZmZmZiwgMTY1NXB4IDE2MDNweCAjZmZmZmZmLCA5MTlweCA4NTBweCAjZmZmZmZmLCA1MjNweCA2MDlweCAjZmZmZmZmLCAxMTk2cHggMjA3cHggI2ZmZmZmZiwgNzUzcHggNDEwcHggI2ZmZmZmZiwgNjg2cHggMTA5N3B4ICNmZmZmZmYsIDE1NzBweCAxMzNweCAjZmZmZmZmLCAxOTk2cHggMTEzN3B4ICNmZmZmZmYsIDM2MXB4IDExNnB4ICNmZmZmZmYsIDEwMTVweCA0NjJweCAjZmZmZmZmLCA3NnB4IDExNDNweCAjZmZmZmZmLCA0OTFweCAxODE4cHggI2ZmZmZmZiwgMTU2M3B4IDc5NXB4ICNmZmZmZmYsIDk4MnB4IDE3MjFweCAjZmZmZmZmLCA4MzFweCAxMjA0cHggI2ZmZmZmZiwgMTczN3B4IDU4OXB4ICNmZmZmZmYsIDg2MXB4IDE1NzlweCAjZmZmZmZmLCAxNjY2cHggMTMwcHggI2ZmZmZmZiwgNjk4cHggMTc5OXB4ICNmZmZmZmYsIDcyNnB4IDE1MTlweCAjZmZmZmZmLCAxMDlweCAxMjA4cHggI2ZmZmZmZiwgMTE4NHB4IDEwNTdweCAjZmZmZmZmLCA4MzVweCA0NTFweCAjZmZmZmZmLCA4OTZweCA1OTRweCAjZmZmZmZmLCAzNXB4IDg5M3B4ICNmZmZmZmYsIDg5NXB4IDU0MnB4ICNmZmZmZmYsIDcwNnB4IDIyNXB4ICNmZmZmZmYsIDU2cHggMTA0MHB4ICNmZmZmZmYsIDE5NTRweCAxMDhweCAjZmZmZmZmLCAxNDM5cHggMTQyM3B4ICNmZmZmZmYsIDI2cHggMTg4MXB4ICNmZmZmZmYsIDgwMnB4IDE1NjRweCAjZmZmZmZmLCAyNzNweCA3MDhweCAjZmZmZmZmLCA0MHB4IDMxcHggI2ZmZmZmZiwgODU5cHggMTA4cHggI2ZmZmZmZjtcclxuICAgIGFuaW1hdGlvbjogYW5pbUJ1YmJsZXMgMjAwcyBsaW5lYXIgaW5maW5pdGU7XHJcbiAgICBvcGFjaXR5OiAwLjg7XHJcbn1cclxuXHJcbiNidWJibGVzMjphZnRlciB7XHJcbiAgICBjb250ZW50OiBcIiBcIjtcclxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICAgIHRvcDogMjAwMHB4O1xyXG4gICAgd2lkdGg6IDJweDtcclxuICAgIGhlaWdodDogMnB4O1xyXG4gICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XHJcbiAgICBib3gtc2hhZG93OiAxMTE3cHggMTMwNnB4ICNmZmZmZmYsIDEwNzhweCAxNzgzcHggI2ZmZmZmZiwgMTE3OXB4IDEwODVweCAjZmZmZmZmLCAxMTQ1cHggOTIwcHggI2ZmZmZmZiwgNDIycHggMTIzM3B4ICNmZmZmZmYsIDM4N3B4IDk4cHggI2ZmZmZmZiwgMTE1M3B4IDYzN3B4ICNmZmZmZmYsIDEwODRweCA3ODJweCAjZmZmZmZmLCA0NzZweCA0NTNweCAjZmZmZmZmLCA5MjZweCAxMzA2cHggI2ZmZmZmZiwgNjBweCAxMDg2cHggI2ZmZmZmZiwgNzUzcHggMTU3NXB4ICNmZmZmZmYsIDI3MnB4IDE2ODRweCAjZmZmZmZmLCAxMjg1cHggNzUwcHggI2ZmZmZmZiwgMTQxNnB4IDEzMjdweCAjZmZmZmZmLCAxOTMxcHggNDczcHggI2ZmZmZmZiwgNzM2cHggMTM5NXB4ICNmZmZmZmYsIDE4MTZweCA3NjNweCAjZmZmZmZmLCA0MzhweCA4NzlweCAjZmZmZmZmLCA2NjVweCAxOTAycHggI2ZmZmZmZiwgMTM0MXB4IDY3N3B4ICNmZmZmZmYsIDE0MDRweCAxMDczcHggI2ZmZmZmZiwgMTAwcHggNTk3cHggI2ZmZmZmZiwgMzU3cHggMTY4OXB4ICNmZmZmZmYsIDEwNDRweCAxMzQycHggI2ZmZmZmZiwgMTk1NHB4IDUwMnB4ICNmZmZmZmYsIDExOTJweCAxMzA4cHggI2ZmZmZmZiwgNTQwcHggMTIzOXB4ICNmZmZmZmYsIDEzNjBweCA1NTJweCAjZmZmZmZmLCA4OXB4IDc1MnB4ICNmZmZmZmYsIDY1OXB4IDEyNTNweCAjZmZmZmZmLCA2MnB4IDUxN3B4ICNmZmZmZmYsIDEzNzVweCAxNzA1cHggI2ZmZmZmZiwgMTM0M3B4IDE1MTFweCAjZmZmZmZmLCAxNjU5cHggMTkyMnB4ICNmZmZmZmYsIDE1NjBweCAyODlweCAjZmZmZmZmLCAxMzYycHggMTc5OXB4ICNmZmZmZmYsIDE4ODZweCAxNDgwcHggI2ZmZmZmZiwgMTcxOHB4IDE4ODVweCAjZmZmZmZmLCA4MjRweCA3MzhweCAjZmZmZmZmLCAxMDYwcHggMTM3MHB4ICNmZmZmZmYsIDE3ODFweCAxMTcxcHggI2ZmZmZmZiwgMjU1cHggMjczcHggI2ZmZmZmZiwgMTE5N3B4IDEyMHB4ICNmZmZmZmYsIDIxM3B4IDdweCAjZmZmZmZmLCAxMjI2cHggMTkyMHB4ICNmZmZmZmYsIDE4NDRweCAyMDdweCAjZmZmZmZmLCAxNjc1cHggOTcwcHggI2ZmZmZmZiwgMTQzNXB4IDEyODNweCAjZmZmZmZmLCAzN3B4IDM1M3B4ICNmZmZmZmYsIDU5cHggNDE3cHggI2ZmZmZmZiwgOTIxcHggMTYwMnB4ICNmZmZmZmYsIDE1NDlweCAxNDkwcHggI2ZmZmZmZiwgNjM4cHggMTg0NXB4ICNmZmZmZmYsIDEzMjhweCAxOThweCAjZmZmZmZmLCAxMDUwcHggMTE0OXB4ICNmZmZmZmYsIDE4ODRweCA3MTFweCAjZmZmZmZmLCAzMzNweCAyNjNweCAjZmZmZmZmLCAzNDJweCAxNTA4cHggI2ZmZmZmZiwgMTM4OHB4IDE4MTBweCAjZmZmZmZmLCAxMzc3cHggMTU1OHB4ICNmZmZmZmYsIDg5MHB4IDQ4N3B4ICNmZmZmZmYsIDEwODFweCA3NTlweCAjZmZmZmZmLCA4OTBweCAxNTE1cHggI2ZmZmZmZiwgOTExcHggMTI4NHB4ICNmZmZmZmYsIDMzNXB4IDczNXB4ICNmZmZmZmYsIDExNDBweCA1NDlweCAjZmZmZmZmLCAxMjM5cHggMTA2NHB4ICNmZmZmZmYsIDIyNnB4IDcxcHggI2ZmZmZmZiwgMTEwMHB4IDEyNzhweCAjZmZmZmZmLCAxODUxcHggMTgwNXB4ICNmZmZmZmYsIDEzNzBweCAxOTk5cHggI2ZmZmZmZiwgMTAwOHB4IDExMjJweCAjZmZmZmZmLCA3ODVweCA4MTNweCAjZmZmZmZmLCAxMzU4cHggNjAxcHggI2ZmZmZmZiwgMTgzM3B4IDEzMDVweCAjZmZmZmZmLCAxNzY4cHggMTMwNHB4ICNmZmZmZmYsIDEzMDNweCA1MzJweCAjZmZmZmZmLCA4NjBweCA1OThweCAjZmZmZmZmLCAxMzI5cHggNTkzcHggI2ZmZmZmZiwgMTAzOHB4IDEwODhweCAjZmZmZmZmLCA0MDhweCA0MDVweCAjZmZmZmZmLCA5NjVweCA4MnB4ICNmZmZmZmYsIDE0ODNweCAxNDM4cHggI2ZmZmZmZiwgMzEwcHggMTQ3OXB4ICNmZmZmZmYsIDE3ODZweCAxNTAwcHggI2ZmZmZmZiwgMTg2NnB4IDg1MnB4ICNmZmZmZmYsIDE4cHggMTc1N3B4ICNmZmZmZmYsIDE0NzNweCAxMDA0cHggI2ZmZmZmZiwgMTU0MnB4IDE5MzNweCAjZmZmZmZmLCA2MzNweCAxOTcwcHggI2ZmZmZmZiwgMTMzNHB4IDE3MTNweCAjZmZmZmZmLCAxNzVweCAyOHB4ICNmZmZmZmYsIDU5MnB4IDg5NHB4ICNmZmZmZmYsIDEyMXB4IDExNjJweCAjZmZmZmZmLCAxNjAxcHggMTU2N3B4ICNmZmZmZmYsIDEwOTVweCA2NTdweCAjZmZmZmZmLCA2NDBweCAxMjMzcHggI2ZmZmZmZiwgMTA3M3B4IDEyNTVweCAjZmZmZmZmLCA4NDBweCAxMDg3cHggI2ZmZmZmZiwgNzE4cHggMjUwcHggI2ZmZmZmZiwgOTY3cHggNzA5cHggI2ZmZmZmZiwgNzMxcHggMjM5cHggI2ZmZmZmZiwgMTYyM3B4IDU5M3B4ICNmZmZmZmYsIDEwNThweCAxODIwcHggI2ZmZmZmZiwgNTE2cHggMTg5OHB4ICNmZmZmZmYsIDY2NnB4IDEycHggI2ZmZmZmZiwgMTk5N3B4IDEzODJweCAjZmZmZmZmLCAxMTJweCAxNjkwcHggI2ZmZmZmZiwgNjg3cHggMTMwOXB4ICNmZmZmZmYsIDYzcHggNTM5cHggI2ZmZmZmZiwgMTg1cHggMTg5N3B4ICNmZmZmZmYsIDEwNTVweCAxNjkxcHggI2ZmZmZmZiwgNDM1cHggMTUxN3B4ICNmZmZmZmYsIDExNzVweCAxMTE5cHggI2ZmZmZmZiwgMTcyMXB4IDEzM3B4ICNmZmZmZmYsIDEyMTJweCA0N3B4ICNmZmZmZmYsIDE2NnB4IDE4cHggI2ZmZmZmZiwgMTQxNnB4IDE2NTJweCAjZmZmZmZmLCAxNDA5cHggMTc0NXB4ICNmZmZmZmYsIDEzNTdweCAxMjMycHggI2ZmZmZmZiwgMTY3N3B4IDE5OThweCAjZmZmZmZmLCA0NDhweCAxNDE1cHggI2ZmZmZmZiwgNzA1cHggMTczNnB4ICNmZmZmZmYsIDEwMzFweCAxNDY2cHggI2ZmZmZmZiwgNTQzcHggMTY1MXB4ICNmZmZmZmYsIDE1OTJweCAxODg4cHggI2ZmZmZmZiwgMTc0OXB4IDExNzVweCAjZmZmZmZmLCA2MzlweCAxMTE0cHggI2ZmZmZmZiwgMTU5MXB4IDUwOHB4ICNmZmZmZmYsIDc1OXB4IDEyNDRweCAjZmZmZmZmLCA4MjRweCAzODBweCAjZmZmZmZmLCA5NDJweCA5NTVweCAjZmZmZmZmLCA3MjNweCA3MzJweCAjZmZmZmZmLCAxMTNweCAxMzY5cHggI2ZmZmZmZiwgMjAzcHggMTczOXB4ICNmZmZmZmYsIDg2OHB4IDczM3B4ICNmZmZmZmYsIDcxM3B4IDk3MXB4ICNmZmZmZmYsIDM0MXB4IDgzM3B4ICNmZmZmZmYsIDc2MnB4IDgyNHB4ICNmZmZmZmYsIDEzNTlweCAzMTBweCAjZmZmZmZmLCAxODU4cHggMTM0OXB4ICNmZmZmZmYsIDE1MzFweCA2OTJweCAjZmZmZmZmLCAxMDc1cHggMTUxMnB4ICNmZmZmZmYsIDE2NzdweCAxNDJweCAjZmZmZmZmLCAxOTEycHggMTQ3OHB4ICNmZmZmZmYsIDE4MTBweCAxMDc4cHggI2ZmZmZmZiwgNDI2cHggODQ0cHggI2ZmZmZmZiwgMTQyNnB4IDU4OHB4ICNmZmZmZmYsIDE5MDlweCA2NTRweCAjZmZmZmZmLCAxMTA3cHggMjk1cHggI2ZmZmZmZiwgMTM1MXB4IDUyN3B4ICNmZmZmZmYsIDEzOTNweCA1OTlweCAjZmZmZmZmLCAxMzc5cHggMTA2OHB4ICNmZmZmZmYsIDIyOHB4IDE4NDZweCAjZmZmZmZmLCAxMjcxcHggMzc0cHggI2ZmZmZmZiwgMTM0OHB4IDYxMnB4ICNmZmZmZmYsIDdweCAxMzAxcHggI2ZmZmZmZiwgMTUwMXB4IDE3ODJweCAjZmZmZmZmLCAxNzk1cHggNDIzcHggI2ZmZmZmZiwgMTQ3NXB4IDE5MThweCAjZmZmZmZmLCAxMzI4cHggMTg2MXB4ICNmZmZmZmYsIDE2MjRweCA1MXB4ICNmZmZmZmYsIDE3OTFweCA2NzJweCAjZmZmZmZmLCAxNTk0cHggMTQ2N3B4ICNmZmZmZmYsIDE2NTVweCAxNjAzcHggI2ZmZmZmZiwgOTE5cHggODUwcHggI2ZmZmZmZiwgNTIzcHggNjA5cHggI2ZmZmZmZiwgMTE5NnB4IDIwN3B4ICNmZmZmZmYsIDc1M3B4IDQxMHB4ICNmZmZmZmYsIDY4NnB4IDEwOTdweCAjZmZmZmZmLCAxNTcwcHggMTMzcHggI2ZmZmZmZiwgMTk5NnB4IDExMzdweCAjZmZmZmZmLCAzNjFweCAxMTZweCAjZmZmZmZmLCAxMDE1cHggNDYycHggI2ZmZmZmZiwgNzZweCAxMTQzcHggI2ZmZmZmZiwgNDkxcHggMTgxOHB4ICNmZmZmZmYsIDE1NjNweCA3OTVweCAjZmZmZmZmLCA5ODJweCAxNzIxcHggI2ZmZmZmZiwgODMxcHggMTIwNHB4ICNmZmZmZmYsIDE3MzdweCA1ODlweCAjZmZmZmZmLCA4NjFweCAxNTc5cHggI2ZmZmZmZiwgMTY2NnB4IDEzMHB4ICNmZmZmZmYsIDY5OHB4IDE3OTlweCAjZmZmZmZmLCA3MjZweCAxNTE5cHggI2ZmZmZmZiwgMTA5cHggMTIwOHB4ICNmZmZmZmYsIDExODRweCAxMDU3cHggI2ZmZmZmZiwgODM1cHggNDUxcHggI2ZmZmZmZiwgODk2cHggNTk0cHggI2ZmZmZmZiwgMzVweCA4OTNweCAjZmZmZmZmLCA4OTVweCA1NDJweCAjZmZmZmZmLCA3MDZweCAyMjVweCAjZmZmZmZmLCA1NnB4IDEwNDBweCAjZmZmZmZmLCAxOTU0cHggMTA4cHggI2ZmZmZmZiwgMTQzOXB4IDE0MjNweCAjZmZmZmZmLCAyNnB4IDE4ODFweCAjZmZmZmZmLCA4MDJweCAxNTY0cHggI2ZmZmZmZiwgMjczcHggNzA4cHggI2ZmZmZmZiwgNDBweCAzMXB4ICNmZmZmZmYsIDg1OXB4IDEwOHB4ICNmZmZmZmY7XHJcbn1cclxuLypcclxuI2J1YmJsZXMzIHtcclxuICAgIHdpZHRoOiAzcHg7XHJcbiAgICBoZWlnaHQ6IDNweDtcclxuICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xyXG4gICAgYm94LXNoYWRvdzogOTQwcHggMTM2MHB4ICNmZmZmZmYsIDEwNzFweCA1MzlweCAjZmZmZmZmLCAxNzEwcHggMTQxNHB4ICNmZmZmZmYsIDgzNnB4IDI5OXB4ICNmZmZmZmYsIDE5NDRweCAxNDIwcHggI2ZmZmZmZiwgMjUzcHggMTQ0OXB4ICNmZmZmZmYsIDEyNTdweCAxMjUwcHggI2ZmZmZmZiwgMTU4OHB4IDE4MzBweCAjZmZmZmZmLCAxMDc3cHggMTIwNHB4ICNmZmZmZmYsIDI3M3B4IDEwODFweCAjZmZmZmZmLCAxOTkzcHggNzY2cHggI2ZmZmZmZiwgMTgwOHB4IDQ3OXB4ICNmZmZmZmYsIDkxN3B4IDI2M3B4ICNmZmZmZmYsIDY2M3B4IDE4MjBweCAjZmZmZmZmLCAzNDJweCAxOTg4cHggI2ZmZmZmZiwgNzI3cHggMTI1MHB4ICNmZmZmZmYsIDYzNnB4IDE2NjZweCAjZmZmZmZmLCA2OTJweCAxMTEycHggI2ZmZmZmZiwgMjQ4cHggMTIxMXB4ICNmZmZmZmYsIDE0MjJweCAxMTIxcHggI2ZmZmZmZiwgODgxcHggNDZweCAjZmZmZmZmLCAxNTMxcHggMTk3N3B4ICNmZmZmZmYsIDE2NDNweCAxMDIzcHggI2ZmZmZmZiwgNjg0cHggMTA3MXB4ICNmZmZmZmYsIDExNDJweCAxODczcHggI2ZmZmZmZiwgMjkycHggMTMxM3B4ICNmZmZmZmYsIDI1NnB4IDEyMzdweCAjZmZmZmZmLCA4OXB4IDkxMnB4ICNmZmZmZmYsIDk2NHB4IDE3ODNweCAjZmZmZmZmLCA4NzdweCA3NjBweCAjZmZmZmZmLCAxNjQxcHggMTQ3NHB4ICNmZmZmZmYsIDE0OTJweCAyNHB4ICNmZmZmZmYsIDE3NzZweCAxNjQycHggI2ZmZmZmZiwgMTgzcHggNjAycHggI2ZmZmZmZiwgMTk5OHB4IDYycHggI2ZmZmZmZiwgMTU2MHB4IDM2N3B4ICNmZmZmZmYsIDEzMzNweCA5OTVweCAjZmZmZmZmLCA3MDRweCAxODE1cHggI2ZmZmZmZiwgMTgwOXB4IDcxMnB4ICNmZmZmZmYsIDE1MDNweCAyODhweCAjZmZmZmZmLCA2MzBweCA1NTZweCAjZmZmZmZmLCAxNzE1cHggMTI1cHggI2ZmZmZmZiwgMzUzcHggMTg3OHB4ICNmZmZmZmYsIDk3NXB4IDMzM3B4ICNmZmZmZmYsIDE3NDBweCAxNDA5cHggI2ZmZmZmZiwgMTM0MXB4IDE4NzFweCAjZmZmZmZmLCAxMjc5cHggMTA2NHB4ICNmZmZmZmYsIDE2OXB4IDg3NHB4ICNmZmZmZmYsIDE2MXB4IDUyOHB4ICNmZmZmZmYsIDE2NzFweCAxNjY5cHggI2ZmZmZmZiwgMTY5cHggNjMycHggI2ZmZmZmZiwgNTQ3cHggMTcyNHB4ICNmZmZmZmYsIDE5MDRweCAxMTBweCAjZmZmZmZmLCA2NzlweCAxNjcwcHggI2ZmZmZmZiwgMTk2cHggMTIzcHggI2ZmZmZmZiwgNzg2cHggODcxcHggI2ZmZmZmZiwgMTg0MHB4IDMyNHB4ICNmZmZmZmYsIDM1NnB4IDk2N3B4ICNmZmZmZmYsIDYxcHggNTQ5cHggI2ZmZmZmZiwgOTlweCA2NzdweCAjZmZmZmZmLCAxNzE5cHggODdweCAjZmZmZmZmLCAxNzEzcHggMTk5MHB4ICNmZmZmZmYsIDE3MTdweCAxMzU4cHggI2ZmZmZmZiwgMTA4cHggMTE4N3B4ICNmZmZmZmYsIDUxcHggODY5cHggI2ZmZmZmZiwgMTQ2MXB4IDkwMnB4ICNmZmZmZmYsIDEwMzRweCA4OTFweCAjZmZmZmZmLCA5NjJweCAxODgxcHggI2ZmZmZmZiwgMTcyM3B4IDU5NXB4ICNmZmZmZmYsIDQ3OXB4IDkwMXB4ICNmZmZmZmYsIDE1NDZweCAxODIzcHggI2ZmZmZmZiwgMjg1cHggMTIwOHB4ICNmZmZmZmYsIDEwNTZweCAzNDdweCAjZmZmZmZmLCAyNjFweCA5ODhweCAjZmZmZmZmLCA0NjZweCA5OTBweCAjZmZmZmZmLCAxNjU3cHggNjQ4cHggI2ZmZmZmZiwgMTI0OXB4IDkzM3B4ICNmZmZmZmYsIDE1NTJweCAxNTU1cHggI2ZmZmZmZiwgMTQ3cHggNjJweCAjZmZmZmZmLCAyOTJweCAxMTU3cHggI2ZmZmZmZiwgMTgxNnB4IDQyM3B4ICNmZmZmZmYsIDE3MTRweCA3NTdweCAjZmZmZmZmLCAxMDM2cHggOTYxcHggI2ZmZmZmZiwgMTk1NXB4IDcxMHB4ICNmZmZmZmYsIDE4NDJweCA1MTZweCAjZmZmZmZmLCA0NzlweCAxODcwcHggI2ZmZmZmZiwgMTU3OXB4IDE0NDVweCAjZmZmZmZmLCAxMjI1cHggMTMwOXB4ICNmZmZmZmYsIDE5NjVweCA1NjZweCAjZmZmZmZmLCAxNTc1cHggMTA3MnB4ICNmZmZmZmYsIDkyM3B4IDMyOXB4ICNmZmZmZmYsIDY1MXB4IDE1MTRweCAjZmZmZmZmLCA4NjVweCAxMTAwcHggI2ZmZmZmZiwgNzgycHggMTg3M3B4ICNmZmZmZmYsIDExNXB4IDI5OXB4ICNmZmZmZmYsIDE0cHggMTY2OHB4ICNmZmZmZmYsIDE2NjZweCAxODE3cHggI2ZmZmZmZiwgMTA5NnB4IDEwNjhweCAjZmZmZmZmLCAxNDYycHggNzQycHggI2ZmZmZmZiwgMTM4NHB4IDE3NTBweCAjZmZmZmZmO1xyXG4gICAgYW5pbWF0aW9uOiBhbmltQnViYmxlcyAxNTBzIGxpbmVhciBpbmZpbml0ZTtcclxufVxyXG5cclxuI2J1YmJsZXMzOmFmdGVyIHtcclxuICAgIGNvbnRlbnQ6IFwiIFwiO1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdG9wOiAyMDAwcHg7XHJcbiAgICB3aWR0aDogM3B4O1xyXG4gICAgaGVpZ2h0OiAzcHg7XHJcbiAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcclxuICAgIGJveC1zaGFkb3c6IDk0MHB4IDEzNjBweCAjZmZmZmZmLCAxMDcxcHggNTM5cHggI2ZmZmZmZiwgMTcxMHB4IDE0MTRweCAjZmZmZmZmLCA4MzZweCAyOTlweCAjZmZmZmZmLCAxOTQ0cHggMTQyMHB4ICNmZmZmZmYsIDI1M3B4IDE0NDlweCAjZmZmZmZmLCAxMjU3cHggMTI1MHB4ICNmZmZmZmYsIDE1ODhweCAxODMwcHggI2ZmZmZmZiwgMTA3N3B4IDEyMDRweCAjZmZmZmZmLCAyNzNweCAxMDgxcHggI2ZmZmZmZiwgMTk5M3B4IDc2NnB4ICNmZmZmZmYsIDE4MDhweCA0NzlweCAjZmZmZmZmLCA5MTdweCAyNjNweCAjZmZmZmZmLCA2NjNweCAxODIwcHggI2ZmZmZmZiwgMzQycHggMTk4OHB4ICNmZmZmZmYsIDcyN3B4IDEyNTBweCAjZmZmZmZmLCA2MzZweCAxNjY2cHggI2ZmZmZmZiwgNjkycHggMTExMnB4ICNmZmZmZmYsIDI0OHB4IDEyMTFweCAjZmZmZmZmLCAxNDIycHggMTEyMXB4ICNmZmZmZmYsIDg4MXB4IDQ2cHggI2ZmZmZmZiwgMTUzMXB4IDE5NzdweCAjZmZmZmZmLCAxNjQzcHggMTAyM3B4ICNmZmZmZmYsIDY4NHB4IDEwNzFweCAjZmZmZmZmLCAxMTQycHggMTg3M3B4ICNmZmZmZmYsIDI5MnB4IDEzMTNweCAjZmZmZmZmLCAyNTZweCAxMjM3cHggI2ZmZmZmZiwgODlweCA5MTJweCAjZmZmZmZmLCA5NjRweCAxNzgzcHggI2ZmZmZmZiwgODc3cHggNzYwcHggI2ZmZmZmZiwgMTY0MXB4IDE0NzRweCAjZmZmZmZmLCAxNDkycHggMjRweCAjZmZmZmZmLCAxNzc2cHggMTY0MnB4ICNmZmZmZmYsIDE4M3B4IDYwMnB4ICNmZmZmZmYsIDE5OThweCA2MnB4ICNmZmZmZmYsIDE1NjBweCAzNjdweCAjZmZmZmZmLCAxMzMzcHggOTk1cHggI2ZmZmZmZiwgNzA0cHggMTgxNXB4ICNmZmZmZmYsIDE4MDlweCA3MTJweCAjZmZmZmZmLCAxNTAzcHggMjg4cHggI2ZmZmZmZiwgNjMwcHggNTU2cHggI2ZmZmZmZiwgMTcxNXB4IDEyNXB4ICNmZmZmZmYsIDM1M3B4IDE4NzhweCAjZmZmZmZmLCA5NzVweCAzMzNweCAjZmZmZmZmLCAxNzQwcHggMTQwOXB4ICNmZmZmZmYsIDEzNDFweCAxODcxcHggI2ZmZmZmZiwgMTI3OXB4IDEwNjRweCAjZmZmZmZmLCAxNjlweCA4NzRweCAjZmZmZmZmLCAxNjFweCA1MjhweCAjZmZmZmZmLCAxNjcxcHggMTY2OXB4ICNmZmZmZmYsIDE2OXB4IDYzMnB4ICNmZmZmZmYsIDU0N3B4IDE3MjRweCAjZmZmZmZmLCAxOTA0cHggMTEwcHggI2ZmZmZmZiwgNjc5cHggMTY3MHB4ICNmZmZmZmYsIDE5NnB4IDEyM3B4ICNmZmZmZmYsIDc4NnB4IDg3MXB4ICNmZmZmZmYsIDE4NDBweCAzMjRweCAjZmZmZmZmLCAzNTZweCA5NjdweCAjZmZmZmZmLCA2MXB4IDU0OXB4ICNmZmZmZmYsIDk5cHggNjc3cHggI2ZmZmZmZiwgMTcxOXB4IDg3cHggI2ZmZmZmZiwgMTcxM3B4IDE5OTBweCAjZmZmZmZmLCAxNzE3cHggMTM1OHB4ICNmZmZmZmYsIDEwOHB4IDExODdweCAjZmZmZmZmLCA1MXB4IDg2OXB4ICNmZmZmZmYsIDE0NjFweCA5MDJweCAjZmZmZmZmLCAxMDM0cHggODkxcHggI2ZmZmZmZiwgOTYycHggMTg4MXB4ICNmZmZmZmYsIDE3MjNweCA1OTVweCAjZmZmZmZmLCA0NzlweCA5MDFweCAjZmZmZmZmLCAxNTQ2cHggMTgyM3B4ICNmZmZmZmYsIDI4NXB4IDEyMDhweCAjZmZmZmZmLCAxMDU2cHggMzQ3cHggI2ZmZmZmZiwgMjYxcHggOTg4cHggI2ZmZmZmZiwgNDY2cHggOTkwcHggI2ZmZmZmZiwgMTY1N3B4IDY0OHB4ICNmZmZmZmYsIDEyNDlweCA5MzNweCAjZmZmZmZmLCAxNTUycHggMTU1NXB4ICNmZmZmZmYsIDE0N3B4IDYycHggI2ZmZmZmZiwgMjkycHggMTE1N3B4ICNmZmZmZmYsIDE4MTZweCA0MjNweCAjZmZmZmZmLCAxNzE0cHggNzU3cHggI2ZmZmZmZiwgMTAzNnB4IDk2MXB4ICNmZmZmZmYsIDE5NTVweCA3MTBweCAjZmZmZmZmLCAxODQycHggNTE2cHggI2ZmZmZmZiwgNDc5cHggMTg3MHB4ICNmZmZmZmYsIDE1NzlweCAxNDQ1cHggI2ZmZmZmZiwgMTIyNXB4IDEzMDlweCAjZmZmZmZmLCAxOTY1cHggNTY2cHggI2ZmZmZmZiwgMTU3NXB4IDEwNzJweCAjZmZmZmZmLCA5MjNweCAzMjlweCAjZmZmZmZmLCA2NTFweCAxNTE0cHggI2ZmZmZmZiwgODY1cHggMTEwMHB4ICNmZmZmZmYsIDc4MnB4IDE4NzNweCAjZmZmZmZmLCAxMTVweCAyOTlweCAjZmZmZmZmLCAxNHB4IDE2NjhweCAjZmZmZmZmLCAxNjY2cHggMTgxN3B4ICNmZmZmZmYsIDEwOTZweCAxMDY4cHggI2ZmZmZmZiwgMTQ2MnB4IDc0MnB4ICNmZmZmZmYsIDEzODRweCAxNzUwcHggI2ZmZmZmZjtcclxufVxyXG5cclxuI2J1YmJsZXM0IHtcclxuICAgIHdpZHRoOiAxcHg7XHJcbiAgICBoZWlnaHQ6IDFweDtcclxuICAgIGJhY2tncm91bmQ6IHRyYW5zcGFyZW50O1xyXG4gICAgYm94LXNoYWRvdzogMjMzcHggMTk3NnB4ICNmZmZmZmYsIDExOTZweCAxMTE5cHggI2ZmZmZmZiwgNjQ2cHggNzQwcHggI2ZmZmZmZiwgMzM1cHggNjQ1cHggI2ZmZmZmZiwgMTExOXB4IDE0NTJweCAjZmZmZmZmLCAxNzZweCAxODcwcHggI2ZmZmZmZiwgNjM5cHggMTcxMXB4ICNmZmZmZmYsIDY0N3B4IDEzODhweCAjZmZmZmZmLCAxNTE2cHggMTEwOHB4ICNmZmZmZmYsIDQ2NHB4IDY2cHggI2ZmZmZmZiwgMzMxcHggMzQ0cHggI2ZmZmZmZiwgNzcycHggMTE4OXB4ICNmZmZmZmYsIDE1MTZweCAxODUwcHggI2ZmZmZmZiwgMTUwMHB4IDE0NjNweCAjZmZmZmZmLCAxMjc1cHggODc2cHggI2ZmZmZmZiwgMTEwN3B4IDY0NXB4ICNmZmZmZmYsIDk3N3B4IDQ3OHB4ICNmZmZmZmYsIDU4M3B4IDExNzlweCAjZmZmZmZmLCAyODRweCAzOTVweCAjZmZmZmZmLCAxMjIwcHggNDYxcHggI2ZmZmZmZiwgMTE2MHB4IDI0OXB4ICNmZmZmZmYsIDE5NnB4IDg2NXB4ICNmZmZmZmYsIDY3MHB4IDE5MTVweCAjZmZmZmZmLCAxNDQ5cHggMzgycHggI2ZmZmZmZiwgMTE5MXB4IDU0NnB4ICNmZmZmZmYsIDEzMjlweCA2MDVweCAjZmZmZmZmLCAxOTQ1cHggNDU4cHggI2ZmZmZmZiwgOTk1cHggNzQ5cHggI2ZmZmZmZiwgMTQ5NXB4IDg2MXB4ICNmZmZmZmYsIDcwOHB4IDE3MzFweCAjZmZmZmZmLCAzNDhweCA2NTNweCAjZmZmZmZmLCA1NDhweCAxMjk4cHggI2ZmZmZmZiwgMTYwNnB4IDk5MHB4ICNmZmZmZmYsIDEwNDlweCAxMjA0cHggI2ZmZmZmZiwgMjUzcHggMTUwMXB4ICNmZmZmZmYsIDExNTRweCAxNjZweCAjZmZmZmZmLCAxMDg3cHggMTA0cHggI2ZmZmZmZiwgMTAzNHB4IDExNjFweCAjZmZmZmZmLCAxNjgxcHggNDYycHggI2ZmZmZmZiwgNTc3cHggMTg5N3B4ICNmZmZmZmYsIDE5M3B4IDE5MDFweCAjZmZmZmZmLCAxNzAxcHggMTc1NXB4ICNmZmZmZmYsIDg2NHB4IDEyOTdweCAjZmZmZmZmLCA4MDBweCAxMjg5cHggI2ZmZmZmZiwgNjc2cHggMjhweCAjZmZmZmZmLCAxODVweCAxMzQxcHggI2ZmZmZmZiwgMzc5cHggMTE1MXB4ICNmZmZmZmYsIDEyMjRweCAxNzI1cHggI2ZmZmZmZiwgMjgwcHggNTQxcHggI2ZmZmZmZiwgNDczcHggMTE5NnB4ICNmZmZmZmYsIDkyMXB4IDE2MjhweCAjZmZmZmZmLCA5NjlweCA0MzJweCAjZmZmZmZmLCAxNDc1cHggNzU4cHggI2ZmZmZmZiwgMTE5NXB4IDk5M3B4ICNmZmZmZmYsIDg3NnB4IDE4NDBweCAjZmZmZmZmLCAxMjc0cHggMTY4OXB4ICNmZmZmZmYsIDE5NzdweCAxMTAxcHggI2ZmZmZmZiwgODM3cHggNTI3cHggI2ZmZmZmZiwgMTc4NXB4IDE2MTBweCAjZmZmZmZmLCAxNjUwcHggMTg0M3B4ICNmZmZmZmYsIDExMjdweCAxNTA4cHggI2ZmZmZmZiwgNDAxcHggMTA1MHB4ICNmZmZmZmYsIDUxcHggMTEwNXB4ICNmZmZmZmYsIDU0NXB4IDg4MHB4ICNmZmZmZmYsIDE3ODZweCAxNjcycHggI2ZmZmZmZiwgMzE4cHggMjYwcHggI2ZmZmZmZiwgNTY4cHggMjU0cHggI2ZmZmZmZiwgMTAyNnB4IDE1MjdweCAjZmZmZmZmLCAxMjQycHggODUycHggI2ZmZmZmZiwgMTc4NXB4IDk4MnB4ICNmZmZmZmYsIDEzMThweCAxMDcxcHggI2ZmZmZmZiwgMzk4cHggMTA2MXB4ICNmZmZmZmYsIDE1MDlweCAyNTdweCAjZmZmZmZmLCA1OTlweCA5MjhweCAjZmZmZmZmLCAxMTk1cHggMTgwMHB4ICNmZmZmZmYsIDEyNTRweCA5MDZweCAjZmZmZmZmLCAxNDFweCAyNnB4ICNmZmZmZmYsIDEzODRweCAxNTAycHggI2ZmZmZmZiwgNDc2cHggNzY3cHggI2ZmZmZmZiwgMTk3M3B4IDcyMnB4ICNmZmZmZmYsIDEzMzlweCAxMDMxcHggI2ZmZmZmZiwgNzc4cHggODE4cHggI2ZmZmZmZiwgMjEzcHggMTMyMHB4ICNmZmZmZmYsIDE4NHB4IDIyMXB4ICNmZmZmZmYsIDk4M3B4IDE5MTFweCAjZmZmZmZmLCA5MjNweCAxNDM5cHggI2ZmZmZmZiwgMTkzNnB4IDU4MXB4ICNmZmZmZmYsIDExMDVweCA2MjVweCAjZmZmZmZmLCAzMjVweCA3MjlweCAjZmZmZmZmLCAxNDc1cHggMjA0cHggI2ZmZmZmZiwgMTQ4M3B4IDE1NjRweCAjZmZmZmZmLCAxMzI3cHggMTI3MnB4ICNmZmZmZmYsIDExODdweCAxOTQ0cHggI2ZmZmZmZiwgMTk0NXB4IDE0NzFweCAjZmZmZmZmLCAxMTZweCA5NjBweCAjZmZmZmZmLCAxNjYwcHggMTYxMHB4ICNmZmZmZmYsIDQxMnB4IDEwMjJweCAjZmZmZmZmLCAxNTUycHggMTUxNnB4ICNmZmZmZmYsIDE1MTdweCAxODkycHggI2ZmZmZmZiwgMzA2cHggODI5cHggI2ZmZmZmZiwgMTQxNnB4IDQ2MnB4ICNmZmZmZmYsIDE1NzVweCAxNDYwcHggI2ZmZmZmZiwgNDI0cHggMTUwMHB4ICNmZmZmZmYsIDE1MzBweCAxMTY5cHggI2ZmZmZmZiwgMTM4OHB4IDE2MDhweCAjZmZmZmZmLCAxODVweCA0MTZweCAjZmZmZmZmLCA2MzRweCAxNDQ2cHggI2ZmZmZmZiwgNzY3cHggNDc5cHggI2ZmZmZmZiwgNzFweCA0MjZweCAjZmZmZmZmLCAxOTM3cHggMTQ1cHggI2ZmZmZmZiwgMTk1NXB4IDEzMTJweCAjZmZmZmZmLCAxODExcHggNjExcHggI2ZmZmZmZiwgMTE0NXB4IDU2OXB4ICNmZmZmZmYsIDE0NjBweCA2NzZweCAjZmZmZmZmLCAxMzFweCAxODU4cHggI2ZmZmZmZiwgMTU1N3B4IDQ3M3B4ICNmZmZmZmYsIDczNXB4IDEzMHB4ICNmZmZmZmYsIDExMnB4IDE1MzFweCAjZmZmZmZmLCAxMzEycHggMzA1cHggI2ZmZmZmZiwgNDA5cHggMTAzMnB4ICNmZmZmZmYsIDE0OXB4IDE5NjRweCAjZmZmZmZmLCA1MzVweCAxMjE1cHggI2ZmZmZmZiwgMTM4MnB4IDYzMHB4ICNmZmZmZmYsIDE0MzdweCAxMzY4cHggI2ZmZmZmZiwgMzYycHggMTE4MXB4ICNmZmZmZmYsIDM4OHB4IDE4MXB4ICNmZmZmZmYsIDI3NHB4IDEyODdweCAjZmZmZmZmLCAxODU4cHggMTQxNHB4ICNmZmZmZmYsIDY2MXB4IDE5MzVweCAjZmZmZmZmLCA2NzVweCAxMjA1cHggI2ZmZmZmZiwgMTgyOXB4IDE3MjVweCAjZmZmZmZmLCAxOTM3cHggMTE0NXB4ICNmZmZmZmYsIDIzN3B4IDkwOHB4ICNmZmZmZmYsIDEwNTlweCAxMTg1cHggI2ZmZmZmZiwgODI0cHggMTI0OHB4ICNmZmZmZmYsIDExNjdweCAxNzMwcHggI2ZmZmZmZiwgMTgwcHggMTk2MXB4ICNmZmZmZmYsIDE2NjNweCAyMDNweCAjZmZmZmZmLCAzNzRweCAyMjFweCAjZmZmZmZmLCA3MjRweCAxODgzcHggI2ZmZmZmZiwgOTcwcHggMTM2MnB4ICNmZmZmZmYsIDgzMnB4IDUwNXB4ICNmZmZmZmYsIDMxM3B4IDIzM3B4ICNmZmZmZmYsIDE5MDlweCA1OTdweCAjZmZmZmZmLCA0MzRweCAyMDFweCAjZmZmZmZmLCA1ODdweCA5OTVweCAjZmZmZmZmLCAxODMzcHggNjIzcHggI2ZmZmZmZiwgMTQ2NHB4IDU2MXB4ICNmZmZmZmYsIDIzMXB4IDU5M3B4ICNmZmZmZmYsIDE1NThweCAxNDMzcHggI2ZmZmZmZiwgMTk4NnB4IDE3NjdweCAjZmZmZmZmLCAxNzUzcHggMTcyOHB4ICNmZmZmZmYsIDExNTNweCAxNjIzcHggI2ZmZmZmZiwgMjQ5cHggMjI5cHggI2ZmZmZmZiwgMTUwM3B4IDExODZweCAjZmZmZmZmLCAxNzg0cHggMTM3cHggI2ZmZmZmZiwgODQxcHggNDAzcHggI2ZmZmZmZiwgMTQwMHB4IDM1NHB4ICNmZmZmZmYsIDE5N3B4IDQ5OXB4ICNmZmZmZmYsIDExODhweCA2ODFweCAjZmZmZmZmLCAxNThweCAzOTFweCAjZmZmZmZmLCA0NDNweCAxMDk5cHggI2ZmZmZmZiwgNzIzcHggMTQ0NXB4ICNmZmZmZmYsIDE0MDhweCAxMjM1cHggI2ZmZmZmZiwgMTkwOHB4IDE5NXB4ICNmZmZmZmYsIDI3MXB4IDg5MXB4ICNmZmZmZmYsIDQ2OXB4IDE2OTNweCAjZmZmZmZmLCA1ODBweCAxMXB4ICNmZmZmZmYsIDE1MzNweCA3MHB4ICNmZmZmZmYsIDg1OXB4IDc2MXB4ICNmZmZmZmYsIDE1MTBweCAxODQ0cHggI2ZmZmZmZiwgNDIxcHggNTU4cHggI2ZmZmZmZiwgMTEzMnB4IDE0NTNweCAjZmZmZmZmLCA3NTdweCAxOTg3cHggI2ZmZmZmZiwgMjEycHggMjkzcHggI2ZmZmZmZiwgNTY5cHggMzIzcHggI2ZmZmZmZiwgMTQwNHB4IDEzOTRweCAjZmZmZmZmLCAyNTJweCAxMzg2cHggI2ZmZmZmZiwgMTY2OHB4IDE4NTdweCAjZmZmZmZmLCAxMjNweCAxNjg0cHggI2ZmZmZmZiwgMTA1cHggNDkwcHggI2ZmZmZmZiwgMTA4M3B4IDE3NjlweCAjZmZmZmZmLCAxMDcxcHggMTk1M3B4ICNmZmZmZmYsIDEyNzFweCAxMTU5cHggI2ZmZmZmZiwgNjk5cHggMTQ5MXB4ICNmZmZmZmYsIDE3NDRweCAxOTk3cHggI2ZmZmZmZiwgMTg2OHB4IDE5NzNweCAjZmZmZmZmLCAxNDM4cHggMTQ0OXB4ICNmZmZmZmYsIDEyMjJweCAxOTIxcHggI2ZmZmZmZiwgMTMyOHB4IDEyMTBweCAjZmZmZmZmLCA0MzhweCA4NzNweCAjZmZmZmZmLCA4MDlweCA3ODBweCAjZmZmZmZmLCA0OTFweCAxNTI0cHggI2ZmZmZmZiwgNDQ3cHggMTgzMHB4ICNmZmZmZmYsIDkyN3B4IDE5MzZweCAjZmZmZmZmLCA1NjRweCA2OTFweCAjZmZmZmZmLCAxNzg0cHggMTc0N3B4ICNmZmZmZmYsIDE5NzhweCAxNzIycHggI2ZmZmZmZiwgMTU5OXB4IDE0ODBweCAjZmZmZmZmLCAxMjc2cHggNzI5cHggI2ZmZmZmZiwgNzMxcHggMTE3NHB4ICNmZmZmZmYsIDE1ODZweCAxNzExcHggI2ZmZmZmZiwgNDUxcHggMTM0MHB4ICNmZmZmZmYsIDEwNzVweCAxODk5cHggI2ZmZmZmZiwgMTNweCA1NzVweCAjZmZmZmZmLCAzMDlweCAxMzQwcHggI2ZmZmZmZiwgOTgxcHggMTgzcHggI2ZmZmZmZiwgMjQ4cHggMTMxNXB4ICNmZmZmZmYsIDg0OXB4IDgwcHggI2ZmZmZmZiwgMTc1NHB4IDE1NDBweCAjZmZmZmZmLCA3M3B4IDE0MzJweCAjZmZmZmZmLCAxMjA4cHggMTgyOHB4ICNmZmZmZmYsIDY1cHggNTc1cHggI2ZmZmZmZiwgMTA5OHB4IDczMHB4ICNmZmZmZmYsIDEyN3B4IDEzNThweCAjZmZmZmZmLCAxODVweCAxOXB4ICNmZmZmZmYsIDEyMjJweCAxNjc5cHggI2ZmZmZmZiwgMTEyMnB4IDMxNXB4ICNmZmZmZmYsIDE5MDZweCA0NTJweCAjZmZmZmZmLCA3NjFweCAyODRweCAjZmZmZmZmLCA4MTNweCA0OTJweCAjZmZmZmZmLCAxMzQ0cHggODQzcHggI2ZmZmZmZiwgMTE4cHggMTgzNHB4ICNmZmZmZmYsIDE2MjBweCAzNTlweCAjZmZmZmZmLCAxNzU1cHggMTI0NnB4ICNmZmZmZmYsIDI5OXB4IDEwNzZweCAjZmZmZmZmLCAxNzQ2cHggMTU4cHggI2ZmZmZmZiwgNnB4IDE2MzVweCAjZmZmZmZmLCAxNDNweCAxOTBweCAjZmZmZmZmLCAxMDFweCA0NjhweCAjZmZmZmZmLCAxMzdweCA5NzFweCAjZmZmZmZmLCAxMjIxcHggMTkyOXB4ICNmZmZmZmYsIDE3NTJweCA2NTBweCAjZmZmZmZmLCAxNjM1cHggMTc2MXB4ICNmZmZmZmYsIDE1MjJweCA4MzNweCAjZmZmZmZmLCA5MDhweCAxNTNweCAjZmZmZmZmLCAxMDQ0cHggMzUwcHggI2ZmZmZmZiwgMTE1MXB4IDE5NDBweCAjZmZmZmZmLCA4MjJweCAyMTBweCAjZmZmZmZmLCAxNzc0cHggMzEwcHggI2ZmZmZmZiwgNzk2cHggMTQ0N3B4ICNmZmZmZmYsIDEwNjlweCAxOTAzcHggI2ZmZmZmZiwgMjE3cHggNTY1cHggI2ZmZmZmZiwgNjYycHggMTM3MHB4ICNmZmZmZmYsIDE4NzZweCAxNTcwcHggI2ZmZmZmZiwgODQ3cHggNDZweCAjZmZmZmZmLCAxMDQycHggMTY4OXB4ICNmZmZmZmYsIDE1ODRweCAxNDM0cHggI2ZmZmZmZiwgMTc5MXB4IDkwOHB4ICNmZmZmZmYsIDk3M3B4IDkwOHB4ICNmZmZmZmYsIDc5M3B4IDc0N3B4ICNmZmZmZmYsIDEyMnB4IDQ4M3B4ICNmZmZmZmYsIDExMzdweCAxMzc0cHggI2ZmZmZmZiwgMTc1N3B4IDE3OTFweCAjZmZmZmZmLCA1MTNweCAyMjVweCAjZmZmZmZmLCA2M3B4IDczMXB4ICNmZmZmZmYsIDExNzlweCAxOTI2cHggI2ZmZmZmZiwgMzQ2cHggMThweCAjZmZmZmZmLCA1ODlweCAxNzVweCAjZmZmZmZmLCA4N3B4IDMwMnB4ICNmZmZmZmYsIDM4MHB4IDEyOTVweCAjZmZmZmZmLCA0NTBweCA5MjFweCAjZmZmZmZmLCAxNjY3cHggMTk3M3B4ICNmZmZmZmYsIDE0OTVweCAxMzczcHggI2ZmZmZmZiwgMTQ2MnB4IDE4NTBweCAjZmZmZmZmLCA1NDBweCAyODhweCAjZmZmZmZmLCAxMjA4cHggMTA1MXB4ICNmZmZmZmYsIDE1NTRweCAxMDk1cHggI2ZmZmZmZiwgMTAwOXB4IDE1MTZweCAjZmZmZmZmLCAxODFweCA1NzJweCAjZmZmZmZmLCAxNjVweCAzODdweCAjZmZmZmZmLCA1NDlweCAxODM1cHggI2ZmZmZmZiwgOTYwcHggMTZweCAjZmZmZmZmLCAxMzYwcHggNDAzcHggI2ZmZmZmZiwgMTI1MXB4IDQzcHggI2ZmZmZmZiwgMTkwNXB4IDE4MTNweCAjZmZmZmZmLCAxMTA2cHggODY2cHggI2ZmZmZmZiwgMTgwOXB4IDI3N3B4ICNmZmZmZmYsIDE4MjhweCAxNzIwcHggI2ZmZmZmZiwgMjk1cHggMTYxMHB4ICNmZmZmZmYsIDUyM3B4IDE2NnB4ICNmZmZmZmYsIDEwNjlweCA2OTJweCAjZmZmZmZmLCAxMjkycHggMjE3cHggI2ZmZmZmZiwgMTFweCAxNzIxcHggI2ZmZmZmZiwgOTlweCAxMDQ1cHggI2ZmZmZmZiwgNTFweCAxNTg0cHggI2ZmZmZmZiwgMTA1M3B4IDI2NnB4ICNmZmZmZmYsIDEyODdweCAxMjM1cHggI2ZmZmZmZiwgNzQ3cHggMTcyMnB4ICNmZmZmZmYsIDE1NDJweCA3MzZweCAjZmZmZmZmLCAxMjU2cHggMThweCAjZmZmZmZmLCAxMDJweCA2MDlweCAjZmZmZmZmLCA1ODZweCAxMzM5cHggI2ZmZmZmZiwgMTg0M3B4IDE2OTdweCAjZmZmZmZmLCA4MjRweCAxNjg3cHggI2ZmZmZmZiwgMTEyNHB4IDg4MnB4ICNmZmZmZmYsIDM5NXB4IDUwMXB4ICNmZmZmZmYsIDE0NTZweCA2NzJweCAjZmZmZmZmLCAxNDcycHggMTY0OHB4ICNmZmZmZmYsIDEzMjZweCAxMTY0cHggI2ZmZmZmZiwgNzc3cHggMTY3MnB4ICNmZmZmZmYsIDgxcHggMzQ1cHggI2ZmZmZmZiwgOTFweCAzODZweCAjZmZmZmZmLCAyNDNweCA0MTFweCAjZmZmZmZmLCAxNTYwcHggOTBweCAjZmZmZmZmLCA2cHggMTc3MXB4ICNmZmZmZmYsIDE2MDFweCA2MTZweCAjZmZmZmZmLCAxMjIwcHggMTgwOHB4ICNmZmZmZmYsIDExNjBweCA4MzZweCAjZmZmZmZmLCAyNDZweCAxNzc3cHggI2ZmZmZmZiwgNDU2cHggODYzcHggI2ZmZmZmZiwgOTdweCAxMTM4cHggI2ZmZmZmZiwgMTgxMXB4IDk0MnB4ICNmZmZmZmYsIDIxM3B4IDQxNHB4ICNmZmZmZmYsIDg5MXB4IDM5MnB4ICNmZmZmZmYsIDEwNDRweCA5MjdweCAjZmZmZmZmLCAxODU2cHggMjE2cHggI2ZmZmZmZiwgOTU3cHggMzQ3cHggI2ZmZmZmZiwgMTQ4NnB4IDQwNnB4ICNmZmZmZmYsIDgzOHB4IDkxMnB4ICNmZmZmZmYsIDgwM3B4IDM2MXB4ICNmZmZmZmYsIDU2NHB4IDgyNnB4ICNmZmZmZmYsIDE1OTdweCA5NDlweCAjZmZmZmZmLCAxMjA2cHggMjg5cHggI2ZmZmZmZiwgMzNweCAxMDM1cHggI2ZmZmZmZiwgMTc2MnB4IDEzNzdweCAjZmZmZmZmLCA3ODlweCAxODE1cHggI2ZmZmZmZiwgMTU5NHB4IDEzNDJweCAjZmZmZmZmLCAxNjY4cHggODgwcHggI2ZmZmZmZiwgMTUzOXB4IDE1ODFweCAjZmZmZmZmLCAxNTQ3cHggNTNweCAjZmZmZmZmLCA4NjFweCAxNDMzcHggI2ZmZmZmZiwgNjkzcHggMTYxOHB4ICNmZmZmZmYsIDE3NjJweCA3ODJweCAjZmZmZmZmLCAxNTY4cHggNjgycHggI2ZmZmZmZiwgMTEyNnB4IDE3NjJweCAjZmZmZmZmLCAxMjQycHggMTM0cHggI2ZmZmZmZiwgNDk1cHggOTU5cHggI2ZmZmZmZiwgMTYwNnB4IDIxOXB4ICNmZmZmZmYsIDE4NzhweCAxNDE1cHggI2ZmZmZmZiwgMTY1MnB4IDc5N3B4ICNmZmZmZmYsIDc4MnB4IDE5MDNweCAjZmZmZmZmLCAxNzc0cHggMTEzM3B4ICNmZmZmZmYsIDE0MzBweCA0MDhweCAjZmZmZmZmLCAyNjVweCAzOTRweCAjZmZmZmZmLCA4OTBweCAzMzZweCAjZmZmZmZmLCAxMDUxcHggMzExcHggI2ZmZmZmZiwgNDYxcHggMTU1OXB4ICNmZmZmZmYsIDE5MzFweCA5MXB4ICNmZmZmZmYsIDExNjBweCAzODBweCAjZmZmZmZmLCAxNDQycHggMTA1OHB4ICNmZmZmZmYsIDExNTdweCAzNjRweCAjZmZmZmZmLCA1ODZweCAyMjdweCAjZmZmZmZmLCAxMzY1cHggNzE1cHggI2ZmZmZmZiwgMTY1OHB4IDE2NTVweCAjZmZmZmZmLCAxOTIzcHggMTY2NHB4ICNmZmZmZmYsIDEwMjNweCAxODQ0cHggI2ZmZmZmZiwgMTkzOXB4IDEzNjdweCAjZmZmZmZmLCAxMjAzcHggMTMwNXB4ICNmZmZmZmYsIDM1OXB4IDY0MnB4ICNmZmZmZmYsIDEwNTZweCA0MjVweCAjZmZmZmZmLCA3ODdweCAyMDJweCAjZmZmZmZmLCAxNjA5cHggMTg1MHB4ICNmZmZmZmYsIDE5NjRweCAyMDBweCAjZmZmZmZmLCAxNTM3cHggNTg2cHggI2ZmZmZmZiwgMTU4OXB4IDkwM3B4ICNmZmZmZmYsIDEwNjNweCAxNjk0cHggI2ZmZmZmZiwgNzYwcHggMTE4NXB4ICNmZmZmZmYsIDU5N3B4IDEzOTZweCAjZmZmZmZmLCAyOTRweCA0NTJweCAjZmZmZmZmLCA0MzNweCA4MThweCAjZmZmZmZmLCAxOTlweCA4NDBweCAjZmZmZmZmLCAxMzMycHggMTkzN3B4ICNmZmZmZmYsIDE2OXB4IDE5MDdweCAjZmZmZmZmLCA1OTFweCA4MzRweCAjZmZmZmZmLCAxNzE2cHggMTAzMnB4ICNmZmZmZmYsIDQ1cHggMTg3OXB4ICNmZmZmZmYsIDY4NnB4IDE0NjlweCAjZmZmZmZmLCAxNTIwcHggNDc1cHggI2ZmZmZmZiwgMTEyMnB4IDg1OXB4ICNmZmZmZmYsIDk3M3B4IDE1NDFweCAjZmZmZmZmLCAyNjlweCA0NzdweCAjZmZmZmZmLCAxMzkwcHggNzE2cHggI2ZmZmZmZiwgMTc5MXB4IDc4M3B4ICNmZmZmZmYsIDgyNHB4IDIwMDBweCAjZmZmZmZmLCAxMjExcHggMTcxN3B4ICNmZmZmZmYsIDEwMDhweCAxNTg3cHggI2ZmZmZmZiwgMTQyMnB4IDIwNHB4ICNmZmZmZmYsIDIzNHB4IDU1NnB4ICNmZmZmZmYsIDUwNnB4IDU1MHB4ICNmZmZmZmYsIDk0MnB4IDE2NzBweCAjZmZmZmZmLCAzOTdweCA4NTNweCAjZmZmZmZmLCA1OTlweCA3OTVweCAjZmZmZmZmLCA3NjJweCAxOTI2cHggI2ZmZmZmZiwgMTIwMnB4IDE0MjRweCAjZmZmZmZmLCAxMzVweCAxMzE2cHggI2ZmZmZmZiwgMTQ0MnB4IDE2OTJweCAjZmZmZmZmLCA5NzdweCA2NTJweCAjZmZmZmZmLCA1NjRweCAxNjQ4cHggI2ZmZmZmZiwgOTk3cHggMTQ3NHB4ICNmZmZmZmYsIDY3cHggMTM2NnB4ICNmZmZmZmYsIDE4NjBweCAxNDUxcHggI2ZmZmZmZiwgMTEwNXB4IDc3MnB4ICNmZmZmZmYsIDE4ODZweCAxMzk2cHggI2ZmZmZmZiwgMTUxMHB4IDY1OHB4ICNmZmZmZmYsIDk3NnB4IDE1NDRweCAjZmZmZmZmLCA4OTRweCA1NDNweCAjZmZmZmZmLCAxMDk4cHggMTE4OXB4ICNmZmZmZmYsIDY5MHB4IDc3cHggI2ZmZmZmZiwgNzcwcHggNzMzcHggI2ZmZmZmZiwgNTU3cHggMTQwM3B4ICNmZmZmZmYsIDE3NThweCAxNjIzcHggI2ZmZmZmZiwgMTM0MXB4IDgxMnB4ICNmZmZmZmYsIDY5OXB4IDk2N3B4ICNmZmZmZmYsIDI3N3B4IDg2NnB4ICNmZmZmZmYsIDE1MjZweCAxODI4cHggI2ZmZmZmZiwgOHB4IDk3N3B4ICNmZmZmZmYsIDE3MDdweCA5NTJweCAjZmZmZmZmLCAxMnB4IDE5MDBweCAjZmZmZmZmLCA3MnB4IDkyMXB4ICNmZmZmZmYsIDQ5NnB4IDEwNjdweCAjZmZmZmZmLCAxMjg4cHggMTc0OXB4ICNmZmZmZmYsIDI3M3B4IDk4NHB4ICNmZmZmZmYsIDExOTdweCAxOTkxcHggI2ZmZmZmZiwgMjQycHggNzg5cHggI2ZmZmZmZiwgOTAzcHggMTAzNXB4ICNmZmZmZmYsIDQ4MHB4IDE0OTJweCAjZmZmZmZmLCAxMDJweCAxMzMxcHggI2ZmZmZmZiwgNzM4cHggMTM0M3B4ICNmZmZmZmYsIDU2MHB4IDE0NzVweCAjZmZmZmZmLCAzNjdweCA4NDZweCAjZmZmZmZmLCAxNDIwcHggOTYycHggI2ZmZmZmZiwgMTk3NnB4IDg5MnB4ICNmZmZmZmYsIDE5MTFweCAxNzYzcHggI2ZmZmZmZiwgMTYzOXB4IDEwMDJweCAjZmZmZmZmLCA0MzdweCAxNTIycHggI2ZmZmZmZiwgMTkwNnB4IDEwMjVweCAjZmZmZmZmLCA3MzBweCAxMzY0cHggI2ZmZmZmZiwgMTEyN3B4IDUyMXB4ICNmZmZmZmYsIDE0MDFweCAxNzkycHggI2ZmZmZmZiwgMTk1NHB4IDEwNjZweCAjZmZmZmZmLCAyMzJweCAyNTBweCAjZmZmZmZmLCAxNjg1cHggNjYwcHggI2ZmZmZmZiwgMTAxMXB4IDk5OXB4ICNmZmZmZmYsIDE5NzBweCA3OTBweCAjZmZmZmZmLCA3NTBweCA0OTlweCAjZmZmZmZmLCAxNzM4cHggNjYwcHggI2ZmZmZmZiwgMTYyMXB4IDE4NDlweCAjZmZmZmZmLCA0NDZweCA1MnB4ICNmZmZmZmYsIDEwNTVweCAxMzk2cHggI2ZmZmZmZiwgMTE2NXB4IDE0OTdweCAjZmZmZmZmLCAxNzQwcHggMTQyNXB4ICNmZmZmZmYsIDEwMTJweCAxOTIwcHggI2ZmZmZmZiwgMTI1OHB4IDE1NjBweCAjZmZmZmZmLCAxMDIwcHggMTE1MnB4ICNmZmZmZmYsIDM2MnB4IDY3M3B4ICNmZmZmZmYsIDEwNjVweCA5NzVweCAjZmZmZmZmLCA1ODJweCA3NTVweCAjZmZmZmZmLCAxMjcxcHggMTQ3OXB4ICNmZmZmZmYsIDcxOXB4IDU0OHB4ICNmZmZmZmYsIDE2MDJweCA4NzlweCAjZmZmZmZmLCA1OTBweCA0OTlweCAjZmZmZmZmLCA3MjFweCAxNDEycHggI2ZmZmZmZiwgMTE4MHB4IDExM3B4ICNmZmZmZmYsIDE4MDFweCAxOTYxcHggI2ZmZmZmZiwgNTg5cHggOTQxcHggI2ZmZmZmZiwgODgzcHggNDc2cHggI2ZmZmZmZiwgMjE0cHggODkwcHggI2ZmZmZmZiwgMTAyOHB4IDg5MnB4ICNmZmZmZmYsIDExMDdweCAxODMycHggI2ZmZmZmZiwgOTQ0cHggMzYxcHggI2ZmZmZmZiwgNDgwcHggMTQ1M3B4ICNmZmZmZmYsIDE0NjZweCA2ODNweCAjZmZmZmZmLCA5ODFweCA3NDVweCAjZmZmZmZmLCAxOTY4cHggODI4cHggI2ZmZmZmZiwgNjU3cHggMTgzMHB4ICNmZmZmZmYsIDExcHggMTMzOHB4ICNmZmZmZmYsIDE3OXB4IDczMHB4ICNmZmZmZmYsIDE3MTNweCAxOTdweCAjZmZmZmZmLCA1MXB4IDk1NXB4ICNmZmZmZmYsIDEyNDNweCAzMTlweCAjZmZmZmZmLCAxMTc1cHggNjI0cHggI2ZmZmZmZiwgNDQ2cHggNDZweCAjZmZmZmZmLCA1cHggMTE1OHB4ICNmZmZmZmYsIDgycHggMTM1MnB4ICNmZmZmZmYsIDE4NzdweCA0MDJweCAjZmZmZmZmLCA3MDhweCAxNzc4cHggI2ZmZmZmZiwgOTAzcHggMTYyNXB4ICNmZmZmZmYsIDE4MjRweCAzNTJweCAjZmZmZmZmLCAxMjI5cHggMTQwcHggI2ZmZmZmZiwgMTUxOHB4IDI0cHggI2ZmZmZmZiwgMTAxN3B4IDUxMnB4ICNmZmZmZmYsIDUxNXB4IDY5OXB4ICNmZmZmZmYsIDI5NXB4IDI2NXB4ICNmZmZmZmYsIDY5cHggMTc3M3B4ICNmZmZmZmYsIDE2NDBweCAxMTYzcHggI2ZmZmZmZiwgNTM2cHggMzQycHggI2ZmZmZmZiwgOTcwcHggMTc2NnB4ICNmZmZmZmYsIDU2MHB4IDE0MTZweCAjZmZmZmZmLCA1NzdweCAxOTNweCAjZmZmZmZmLCA0NjlweCA5cHggI2ZmZmZmZiwgNDY2cHggMjc2cHggI2ZmZmZmZiwgNzExcHggODUzcHggI2ZmZmZmZiwgNDAxcHggNjg1cHggI2ZmZmZmZiwgODVweCA1MDZweCAjZmZmZmZmLCA4NjVweCA1NThweCAjZmZmZmZmLCA2MzFweCAxMDVweCAjZmZmZmZmLCA4ODdweCA4NjZweCAjZmZmZmZmLCAxNzA0cHggMTAwMXB4ICNmZmZmZmYsIDEwNTFweCAxMTk5cHggI2ZmZmZmZiwgMjc1cHggMTkwOXB4ICNmZmZmZmYsIDE0NjJweCA4MjlweCAjZmZmZmZmLCAzNzVweCAxMDU3cHggI2ZmZmZmZiwgMTUzMXB4IDE1MDFweCAjZmZmZmZmLCAyMDVweCA0MDNweCAjZmZmZmZmLCAzM3B4IDE4NjlweCAjZmZmZmZmLCA5NjdweCAxMTc2cHggI2ZmZmZmZiwgMzc2cHggODYzcHggI2ZmZmZmZiwgMTc2OXB4IDE1NDVweCAjZmZmZmZmLCA1MzVweCA1MXB4ICNmZmZmZmYsIDE5NzJweCAxNTY5cHggI2ZmZmZmZiwgMTc3M3B4IDk2MHB4ICNmZmZmZmYsIDQ4N3B4IDYyMHB4ICNmZmZmZmYsIDE2NjBweCA2ODdweCAjZmZmZmZmLCAxNjMycHggOTcycHggI2ZmZmZmZiwgMTM2MnB4IDQycHggI2ZmZmZmZiwgNDc5cHggMTY1NXB4ICNmZmZmZmYsIDE1MzFweCAxODA4cHggI2ZmZmZmZiwgMTQ1MHB4IDE0MTJweCAjZmZmZmZmLCAxNTQ5cHggMTcwcHggI2ZmZmZmZiwgMTkwNHB4IDEzMDVweCAjZmZmZmZmLCAxMjA5cHggNDhweCAjZmZmZmZmLCAxOTMzcHggODIwcHggI2ZmZmZmZiwgMTYyM3B4IDU5NXB4ICNmZmZmZmYsIDQ4cHggNjQzcHggI2ZmZmZmZiwgMTc5cHggMTc1NHB4ICNmZmZmZmYsIDU4OXB4IDEwMzJweCAjZmZmZmZmLCAxMTk5cHggMzU2cHggI2ZmZmZmZiwgMTc1NXB4IDE0MThweCAjZmZmZmZmLCA3ODBweCAxMTc0cHggI2ZmZmZmZiwgMTkwNXB4IDc1OHB4ICNmZmZmZmYsIDE1NjdweCA3MTNweCAjZmZmZmZmLCAxMzcycHggNzA1cHggI2ZmZmZmZiwgNDU2cHggNjU0cHggI2ZmZmZmZiwgNzU5cHggNjkwcHggI2ZmZmZmZiwgNDUycHggNjczcHggI2ZmZmZmZiwgOTkzcHggMTYxMHB4ICNmZmZmZmYsIDEyNzFweCAxODhweCAjZmZmZmZmLCAzNDNweCAxNzUwcHggI2ZmZmZmZiwgMTk0M3B4IDE3MzVweCAjZmZmZmZmLCAxNzE3cHggODUzcHggI2ZmZmZmZiwgMTI0N3B4IDMwM3B4ICNmZmZmZmYsIDEzMTRweCAxODk1cHggI2ZmZmZmZiwgMTIwM3B4IDQ4OXB4ICNmZmZmZmYsIDc0MXB4IDQ2OXB4ICNmZmZmZmYsIDRweCAyNDZweCAjZmZmZmZmLCAxNTE1cHggMTE1cHggI2ZmZmZmZiwgNjA2cHggMjE4cHggI2ZmZmZmZiwgMTk2NnB4IDE0NzFweCAjZmZmZmZmLCAxNzdweCA4N3B4ICNmZmZmZmYsIDE1NzVweCA1ODhweCAjZmZmZmZmLCAxMTM2cHggMTM4NnB4ICNmZmZmZmYsIDcwcHggMTg2OHB4ICNmZmZmZmYsIDEwNTNweCAxOHB4ICNmZmZmZmYsIDExMjRweCA3MjFweCAjZmZmZmZmLCAxNzQ4cHggMTE4MXB4ICNmZmZmZmYsIDE5MXB4IDEzODdweCAjZmZmZmZmLCAxOTMxcHggODQwcHggI2ZmZmZmZiwgMTA4OHB4IDE2MDNweCAjZmZmZmZmLCA2MzRweCAxMjU1cHggI2ZmZmZmZiwgODE0cHggMTQzNHB4ICNmZmZmZmYsIDU4NXB4IDY0cHggI2ZmZmZmZiwgMTA3NHB4IDE2MThweCAjZmZmZmZmLCAxNjkycHggNzYxcHggI2ZmZmZmZiwgNjUxcHggNjQzcHggI2ZmZmZmZiwgMTkzcHggMzM1cHggI2ZmZmZmZiwgMTEwM3B4IDE0NDdweCAjZmZmZmZmLCA0OTFweCAxMTQycHggI2ZmZmZmZiwgNTIxcHggNDA4cHggI2ZmZmZmZiwgNTM2cHggMzQwcHggI2ZmZmZmZiwgNDExcHggMTA5MXB4ICNmZmZmZmYsIDE2NDZweCAxOTNweCAjZmZmZmZmLCAxNTk1cHggMTI4NXB4ICNmZmZmZmYsIDg3MHB4IDEzNDlweCAjZmZmZmZmLCAxMDg1cHggMTAxM3B4ICNmZmZmZmYsIDIwNHB4IDE4NjRweCAjZmZmZmZmLCAxMzU5cHggMjk5cHggI2ZmZmZmZiwgODA3cHggOTY0cHggI2ZmZmZmZiwgMjE5cHggNTA5cHggI2ZmZmZmZiwgMzZweCAxMjI3cHggI2ZmZmZmZiwgNzAycHggMTg3M3B4ICNmZmZmZmYsIDE0NzFweCA5MzRweCAjZmZmZmZmLCAxNzYzcHggNzkycHggI2ZmZmZmZiwgOTczcHggMTk1N3B4ICNmZmZmZmYsIDk4N3B4IDY4cHggI2ZmZmZmZiwgNTkzcHggMTI4MnB4ICNmZmZmZmYsIDE5MDBweCA2MDdweCAjZmZmZmZmLCA0MDdweCAxNjU5cHggI2ZmZmZmZiwgNTg3cHggMTdweCAjZmZmZmZmLCA2MzJweCAxNThweCAjZmZmZmZmO1xyXG4gICAgYW5pbWF0aW9uOiBhbmltQnViYmxlcyA2MDBzIGxpbmVhciBpbmZpbml0ZTtcclxufVxyXG5cclxuI2J1YmJsZXM0OmFmdGVyIHtcclxuICAgIGNvbnRlbnQ6IFwiIFwiO1xyXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xyXG4gICAgdG9wOiAyMDAwcHg7XHJcbiAgICB3aWR0aDogMXB4O1xyXG4gICAgaGVpZ2h0OiAxcHg7XHJcbiAgICBiYWNrZ3JvdW5kOiB0cmFuc3BhcmVudDtcclxuICAgIGJveC1zaGFkb3c6IDIzM3B4IDE5NzZweCAjZmZmZmZmLCAxMTk2cHggMTExOXB4ICNmZmZmZmYsIDY0NnB4IDc0MHB4ICNmZmZmZmYsIDMzNXB4IDY0NXB4ICNmZmZmZmYsIDExMTlweCAxNDUycHggI2ZmZmZmZiwgMTc2cHggMTg3MHB4ICNmZmZmZmYsIDYzOXB4IDE3MTFweCAjZmZmZmZmLCA2NDdweCAxMzg4cHggI2ZmZmZmZiwgMTUxNnB4IDExMDhweCAjZmZmZmZmLCA0NjRweCA2NnB4ICNmZmZmZmYsIDMzMXB4IDM0NHB4ICNmZmZmZmYsIDc3MnB4IDExODlweCAjZmZmZmZmLCAxNTE2cHggMTg1MHB4ICNmZmZmZmYsIDE1MDBweCAxNDYzcHggI2ZmZmZmZiwgMTI3NXB4IDg3NnB4ICNmZmZmZmYsIDExMDdweCA2NDVweCAjZmZmZmZmLCA5NzdweCA0NzhweCAjZmZmZmZmLCA1ODNweCAxMTc5cHggI2ZmZmZmZiwgMjg0cHggMzk1cHggI2ZmZmZmZiwgMTIyMHB4IDQ2MXB4ICNmZmZmZmYsIDExNjBweCAyNDlweCAjZmZmZmZmLCAxOTZweCA4NjVweCAjZmZmZmZmLCA2NzBweCAxOTE1cHggI2ZmZmZmZiwgMTQ0OXB4IDM4MnB4ICNmZmZmZmYsIDExOTFweCA1NDZweCAjZmZmZmZmLCAxMzI5cHggNjA1cHggI2ZmZmZmZiwgMTk0NXB4IDQ1OHB4ICNmZmZmZmYsIDk5NXB4IDc0OXB4ICNmZmZmZmYsIDE0OTVweCA4NjFweCAjZmZmZmZmLCA3MDhweCAxNzMxcHggI2ZmZmZmZiwgMzQ4cHggNjUzcHggI2ZmZmZmZiwgNTQ4cHggMTI5OHB4ICNmZmZmZmYsIDE2MDZweCA5OTBweCAjZmZmZmZmLCAxMDQ5cHggMTIwNHB4ICNmZmZmZmYsIDI1M3B4IDE1MDFweCAjZmZmZmZmLCAxMTU0cHggMTY2cHggI2ZmZmZmZiwgMTA4N3B4IDEwNHB4ICNmZmZmZmYsIDEwMzRweCAxMTYxcHggI2ZmZmZmZiwgMTY4MXB4IDQ2MnB4ICNmZmZmZmYsIDU3N3B4IDE4OTdweCAjZmZmZmZmLCAxOTNweCAxOTAxcHggI2ZmZmZmZiwgMTcwMXB4IDE3NTVweCAjZmZmZmZmLCA4NjRweCAxMjk3cHggI2ZmZmZmZiwgODAwcHggMTI4OXB4ICNmZmZmZmYsIDY3NnB4IDI4cHggI2ZmZmZmZiwgMTg1cHggMTM0MXB4ICNmZmZmZmYsIDM3OXB4IDExNTFweCAjZmZmZmZmLCAxMjI0cHggMTcyNXB4ICNmZmZmZmYsIDI4MHB4IDU0MXB4ICNmZmZmZmYsIDQ3M3B4IDExOTZweCAjZmZmZmZmLCA5MjFweCAxNjI4cHggI2ZmZmZmZiwgOTY5cHggNDMycHggI2ZmZmZmZiwgMTQ3NXB4IDc1OHB4ICNmZmZmZmYsIDExOTVweCA5OTNweCAjZmZmZmZmLCA4NzZweCAxODQwcHggI2ZmZmZmZiwgMTI3NHB4IDE2ODlweCAjZmZmZmZmLCAxOTc3cHggMTEwMXB4ICNmZmZmZmYsIDgzN3B4IDUyN3B4ICNmZmZmZmYsIDE3ODVweCAxNjEwcHggI2ZmZmZmZiwgMTY1MHB4IDE4NDNweCAjZmZmZmZmLCAxMTI3cHggMTUwOHB4ICNmZmZmZmYsIDQwMXB4IDEwNTBweCAjZmZmZmZmLCA1MXB4IDExMDVweCAjZmZmZmZmLCA1NDVweCA4ODBweCAjZmZmZmZmLCAxNzg2cHggMTY3MnB4ICNmZmZmZmYsIDMxOHB4IDI2MHB4ICNmZmZmZmYsIDU2OHB4IDI1NHB4ICNmZmZmZmYsIDEwMjZweCAxNTI3cHggI2ZmZmZmZiwgMTI0MnB4IDg1MnB4ICNmZmZmZmYsIDE3ODVweCA5ODJweCAjZmZmZmZmLCAxMzE4cHggMTA3MXB4ICNmZmZmZmYsIDM5OHB4IDEwNjFweCAjZmZmZmZmLCAxNTA5cHggMjU3cHggI2ZmZmZmZiwgNTk5cHggOTI4cHggI2ZmZmZmZiwgMTE5NXB4IDE4MDBweCAjZmZmZmZmLCAxMjU0cHggOTA2cHggI2ZmZmZmZiwgMTQxcHggMjZweCAjZmZmZmZmLCAxMzg0cHggMTUwMnB4ICNmZmZmZmYsIDQ3NnB4IDc2N3B4ICNmZmZmZmYsIDE5NzNweCA3MjJweCAjZmZmZmZmLCAxMzM5cHggMTAzMXB4ICNmZmZmZmYsIDc3OHB4IDgxOHB4ICNmZmZmZmYsIDIxM3B4IDEzMjBweCAjZmZmZmZmLCAxODRweCAyMjFweCAjZmZmZmZmLCA5ODNweCAxOTExcHggI2ZmZmZmZiwgOTIzcHggMTQzOXB4ICNmZmZmZmYsIDE5MzZweCA1ODFweCAjZmZmZmZmLCAxMTA1cHggNjI1cHggI2ZmZmZmZiwgMzI1cHggNzI5cHggI2ZmZmZmZiwgMTQ3NXB4IDIwNHB4ICNmZmZmZmYsIDE0ODNweCAxNTY0cHggI2ZmZmZmZiwgMTMyN3B4IDEyNzJweCAjZmZmZmZmLCAxMTg3cHggMTk0NHB4ICNmZmZmZmYsIDE5NDVweCAxNDcxcHggI2ZmZmZmZiwgMTE2cHggOTYwcHggI2ZmZmZmZiwgMTY2MHB4IDE2MTBweCAjZmZmZmZmLCA0MTJweCAxMDIycHggI2ZmZmZmZiwgMTU1MnB4IDE1MTZweCAjZmZmZmZmLCAxNTE3cHggMTg5MnB4ICNmZmZmZmYsIDMwNnB4IDgyOXB4ICNmZmZmZmYsIDE0MTZweCA0NjJweCAjZmZmZmZmLCAxNTc1cHggMTQ2MHB4ICNmZmZmZmYsIDQyNHB4IDE1MDBweCAjZmZmZmZmLCAxNTMwcHggMTE2OXB4ICNmZmZmZmYsIDEzODhweCAxNjA4cHggI2ZmZmZmZiwgMTg1cHggNDE2cHggI2ZmZmZmZiwgNjM0cHggMTQ0NnB4ICNmZmZmZmYsIDc2N3B4IDQ3OXB4ICNmZmZmZmYsIDcxcHggNDI2cHggI2ZmZmZmZiwgMTkzN3B4IDE0NXB4ICNmZmZmZmYsIDE5NTVweCAxMzEycHggI2ZmZmZmZiwgMTgxMXB4IDYxMXB4ICNmZmZmZmYsIDExNDVweCA1NjlweCAjZmZmZmZmLCAxNDYwcHggNjc2cHggI2ZmZmZmZiwgMTMxcHggMTg1OHB4ICNmZmZmZmYsIDE1NTdweCA0NzNweCAjZmZmZmZmLCA3MzVweCAxMzBweCAjZmZmZmZmLCAxMTJweCAxNTMxcHggI2ZmZmZmZiwgMTMxMnB4IDMwNXB4ICNmZmZmZmYsIDQwOXB4IDEwMzJweCAjZmZmZmZmLCAxNDlweCAxOTY0cHggI2ZmZmZmZiwgNTM1cHggMTIxNXB4ICNmZmZmZmYsIDEzODJweCA2MzBweCAjZmZmZmZmLCAxNDM3cHggMTM2OHB4ICNmZmZmZmYsIDM2MnB4IDExODFweCAjZmZmZmZmLCAzODhweCAxODFweCAjZmZmZmZmLCAyNzRweCAxMjg3cHggI2ZmZmZmZiwgMTg1OHB4IDE0MTRweCAjZmZmZmZmLCA2NjFweCAxOTM1cHggI2ZmZmZmZiwgNjc1cHggMTIwNXB4ICNmZmZmZmYsIDE4MjlweCAxNzI1cHggI2ZmZmZmZiwgMTkzN3B4IDExNDVweCAjZmZmZmZmLCAyMzdweCA5MDhweCAjZmZmZmZmLCAxMDU5cHggMTE4NXB4ICNmZmZmZmYsIDgyNHB4IDEyNDhweCAjZmZmZmZmLCAxMTY3cHggMTczMHB4ICNmZmZmZmYsIDE4MHB4IDE5NjFweCAjZmZmZmZmLCAxNjYzcHggMjAzcHggI2ZmZmZmZiwgMzc0cHggMjIxcHggI2ZmZmZmZiwgNzI0cHggMTg4M3B4ICNmZmZmZmYsIDk3MHB4IDEzNjJweCAjZmZmZmZmLCA4MzJweCA1MDVweCAjZmZmZmZmLCAzMTNweCAyMzNweCAjZmZmZmZmLCAxOTA5cHggNTk3cHggI2ZmZmZmZiwgNDM0cHggMjAxcHggI2ZmZmZmZiwgNTg3cHggOTk1cHggI2ZmZmZmZiwgMTgzM3B4IDYyM3B4ICNmZmZmZmYsIDE0NjRweCA1NjFweCAjZmZmZmZmLCAyMzFweCA1OTNweCAjZmZmZmZmLCAxNTU4cHggMTQzM3B4ICNmZmZmZmYsIDE5ODZweCAxNzY3cHggI2ZmZmZmZiwgMTc1M3B4IDE3MjhweCAjZmZmZmZmLCAxMTUzcHggMTYyM3B4ICNmZmZmZmYsIDI0OXB4IDIyOXB4ICNmZmZmZmYsIDE1MDNweCAxMTg2cHggI2ZmZmZmZiwgMTc4NHB4IDEzN3B4ICNmZmZmZmYsIDg0MXB4IDQwM3B4ICNmZmZmZmYsIDE0MDBweCAzNTRweCAjZmZmZmZmLCAxOTdweCA0OTlweCAjZmZmZmZmLCAxMTg4cHggNjgxcHggI2ZmZmZmZiwgMTU4cHggMzkxcHggI2ZmZmZmZiwgNDQzcHggMTA5OXB4ICNmZmZmZmYsIDcyM3B4IDE0NDVweCAjZmZmZmZmLCAxNDA4cHggMTIzNXB4ICNmZmZmZmYsIDE5MDhweCAxOTVweCAjZmZmZmZmLCAyNzFweCA4OTFweCAjZmZmZmZmLCA0NjlweCAxNjkzcHggI2ZmZmZmZiwgNTgwcHggMTFweCAjZmZmZmZmLCAxNTMzcHggNzBweCAjZmZmZmZmLCA4NTlweCA3NjFweCAjZmZmZmZmLCAxNTEwcHggMTg0NHB4ICNmZmZmZmYsIDQyMXB4IDU1OHB4ICNmZmZmZmYsIDExMzJweCAxNDUzcHggI2ZmZmZmZiwgNzU3cHggMTk4N3B4ICNmZmZmZmYsIDIxMnB4IDI5M3B4ICNmZmZmZmYsIDU2OXB4IDMyM3B4ICNmZmZmZmYsIDE0MDRweCAxMzk0cHggI2ZmZmZmZiwgMjUycHggMTM4NnB4ICNmZmZmZmYsIDE2NjhweCAxODU3cHggI2ZmZmZmZiwgMTIzcHggMTY4NHB4ICNmZmZmZmYsIDEwNXB4IDQ5MHB4ICNmZmZmZmYsIDEwODNweCAxNzY5cHggI2ZmZmZmZiwgMTA3MXB4IDE5NTNweCAjZmZmZmZmLCAxMjcxcHggMTE1OXB4ICNmZmZmZmYsIDY5OXB4IDE0OTFweCAjZmZmZmZmLCAxNzQ0cHggMTk5N3B4ICNmZmZmZmYsIDE4NjhweCAxOTczcHggI2ZmZmZmZiwgMTQzOHB4IDE0NDlweCAjZmZmZmZmLCAxMjIycHggMTkyMXB4ICNmZmZmZmYsIDEzMjhweCAxMjEwcHggI2ZmZmZmZiwgNDM4cHggODczcHggI2ZmZmZmZiwgODA5cHggNzgwcHggI2ZmZmZmZiwgNDkxcHggMTUyNHB4ICNmZmZmZmYsIDQ0N3B4IDE4MzBweCAjZmZmZmZmLCA5MjdweCAxOTM2cHggI2ZmZmZmZiwgNTY0cHggNjkxcHggI2ZmZmZmZiwgMTc4NHB4IDE3NDdweCAjZmZmZmZmLCAxOTc4cHggMTcyMnB4ICNmZmZmZmYsIDE1OTlweCAxNDgwcHggI2ZmZmZmZiwgMTI3NnB4IDcyOXB4ICNmZmZmZmYsIDczMXB4IDExNzRweCAjZmZmZmZmLCAxNTg2cHggMTcxMXB4ICNmZmZmZmYsIDQ1MXB4IDEzNDBweCAjZmZmZmZmLCAxMDc1cHggMTg5OXB4ICNmZmZmZmYsIDEzcHggNTc1cHggI2ZmZmZmZiwgMzA5cHggMTM0MHB4ICNmZmZmZmYsIDk4MXB4IDE4M3B4ICNmZmZmZmYsIDI0OHB4IDEzMTVweCAjZmZmZmZmLCA4NDlweCA4MHB4ICNmZmZmZmYsIDE3NTRweCAxNTQwcHggI2ZmZmZmZiwgNzNweCAxNDMycHggI2ZmZmZmZiwgMTIwOHB4IDE4MjhweCAjZmZmZmZmLCA2NXB4IDU3NXB4ICNmZmZmZmYsIDEwOThweCA3MzBweCAjZmZmZmZmLCAxMjdweCAxMzU4cHggI2ZmZmZmZiwgMTg1cHggMTlweCAjZmZmZmZmLCAxMjIycHggMTY3OXB4ICNmZmZmZmYsIDExMjJweCAzMTVweCAjZmZmZmZmLCAxOTA2cHggNDUycHggI2ZmZmZmZiwgNzYxcHggMjg0cHggI2ZmZmZmZiwgODEzcHggNDkycHggI2ZmZmZmZiwgMTM0NHB4IDg0M3B4ICNmZmZmZmYsIDExOHB4IDE4MzRweCAjZmZmZmZmLCAxNjIwcHggMzU5cHggI2ZmZmZmZiwgMTc1NXB4IDEyNDZweCAjZmZmZmZmLCAyOTlweCAxMDc2cHggI2ZmZmZmZiwgMTc0NnB4IDE1OHB4ICNmZmZmZmYsIDZweCAxNjM1cHggI2ZmZmZmZiwgMTQzcHggMTkwcHggI2ZmZmZmZiwgMTAxcHggNDY4cHggI2ZmZmZmZiwgMTM3cHggOTcxcHggI2ZmZmZmZiwgMTIyMXB4IDE5MjlweCAjZmZmZmZmLCAxNzUycHggNjUwcHggI2ZmZmZmZiwgMTYzNXB4IDE3NjFweCAjZmZmZmZmLCAxNTIycHggODMzcHggI2ZmZmZmZiwgOTA4cHggMTUzcHggI2ZmZmZmZiwgMTA0NHB4IDM1MHB4ICNmZmZmZmYsIDExNTFweCAxOTQwcHggI2ZmZmZmZiwgODIycHggMjEwcHggI2ZmZmZmZiwgMTc3NHB4IDMxMHB4ICNmZmZmZmYsIDc5NnB4IDE0NDdweCAjZmZmZmZmLCAxMDY5cHggMTkwM3B4ICNmZmZmZmYsIDIxN3B4IDU2NXB4ICNmZmZmZmYsIDY2MnB4IDEzNzBweCAjZmZmZmZmLCAxODc2cHggMTU3MHB4ICNmZmZmZmYsIDg0N3B4IDQ2cHggI2ZmZmZmZiwgMTA0MnB4IDE2ODlweCAjZmZmZmZmLCAxNTg0cHggMTQzNHB4ICNmZmZmZmYsIDE3OTFweCA5MDhweCAjZmZmZmZmLCA5NzNweCA5MDhweCAjZmZmZmZmLCA3OTNweCA3NDdweCAjZmZmZmZmLCAxMjJweCA0ODNweCAjZmZmZmZmLCAxMTM3cHggMTM3NHB4ICNmZmZmZmYsIDE3NTdweCAxNzkxcHggI2ZmZmZmZiwgNTEzcHggMjI1cHggI2ZmZmZmZiwgNjNweCA3MzFweCAjZmZmZmZmLCAxMTc5cHggMTkyNnB4ICNmZmZmZmYsIDM0NnB4IDE4cHggI2ZmZmZmZiwgNTg5cHggMTc1cHggI2ZmZmZmZiwgODdweCAzMDJweCAjZmZmZmZmLCAzODBweCAxMjk1cHggI2ZmZmZmZiwgNDUwcHggOTIxcHggI2ZmZmZmZiwgMTY2N3B4IDE5NzNweCAjZmZmZmZmLCAxNDk1cHggMTM3M3B4ICNmZmZmZmYsIDE0NjJweCAxODUwcHggI2ZmZmZmZiwgNTQwcHggMjg4cHggI2ZmZmZmZiwgMTIwOHB4IDEwNTFweCAjZmZmZmZmLCAxNTU0cHggMTA5NXB4ICNmZmZmZmYsIDEwMDlweCAxNTE2cHggI2ZmZmZmZiwgMTgxcHggNTcycHggI2ZmZmZmZiwgMTY1cHggMzg3cHggI2ZmZmZmZiwgNTQ5cHggMTgzNXB4ICNmZmZmZmYsIDk2MHB4IDE2cHggI2ZmZmZmZiwgMTM2MHB4IDQwM3B4ICNmZmZmZmYsIDEyNTFweCA0M3B4ICNmZmZmZmYsIDE5MDVweCAxODEzcHggI2ZmZmZmZiwgMTEwNnB4IDg2NnB4ICNmZmZmZmYsIDE4MDlweCAyNzdweCAjZmZmZmZmLCAxODI4cHggMTcyMHB4ICNmZmZmZmYsIDI5NXB4IDE2MTBweCAjZmZmZmZmLCA1MjNweCAxNjZweCAjZmZmZmZmLCAxMDY5cHggNjkycHggI2ZmZmZmZiwgMTI5MnB4IDIxN3B4ICNmZmZmZmYsIDExcHggMTcyMXB4ICNmZmZmZmYsIDk5cHggMTA0NXB4ICNmZmZmZmYsIDUxcHggMTU4NHB4ICNmZmZmZmYsIDEwNTNweCAyNjZweCAjZmZmZmZmLCAxMjg3cHggMTIzNXB4ICNmZmZmZmYsIDc0N3B4IDE3MjJweCAjZmZmZmZmLCAxNTQycHggNzM2cHggI2ZmZmZmZiwgMTI1NnB4IDE4cHggI2ZmZmZmZiwgMTAycHggNjA5cHggI2ZmZmZmZiwgNTg2cHggMTMzOXB4ICNmZmZmZmYsIDE4NDNweCAxNjk3cHggI2ZmZmZmZiwgODI0cHggMTY4N3B4ICNmZmZmZmYsIDExMjRweCA4ODJweCAjZmZmZmZmLCAzOTVweCA1MDFweCAjZmZmZmZmLCAxNDU2cHggNjcycHggI2ZmZmZmZiwgMTQ3MnB4IDE2NDhweCAjZmZmZmZmLCAxMzI2cHggMTE2NHB4ICNmZmZmZmYsIDc3N3B4IDE2NzJweCAjZmZmZmZmLCA4MXB4IDM0NXB4ICNmZmZmZmYsIDkxcHggMzg2cHggI2ZmZmZmZiwgMjQzcHggNDExcHggI2ZmZmZmZiwgMTU2MHB4IDkwcHggI2ZmZmZmZiwgNnB4IDE3NzFweCAjZmZmZmZmLCAxNjAxcHggNjE2cHggI2ZmZmZmZiwgMTIyMHB4IDE4MDhweCAjZmZmZmZmLCAxMTYwcHggODM2cHggI2ZmZmZmZiwgMjQ2cHggMTc3N3B4ICNmZmZmZmYsIDQ1NnB4IDg2M3B4ICNmZmZmZmYsIDk3cHggMTEzOHB4ICNmZmZmZmYsIDE4MTFweCA5NDJweCAjZmZmZmZmLCAyMTNweCA0MTRweCAjZmZmZmZmLCA4OTFweCAzOTJweCAjZmZmZmZmLCAxMDQ0cHggOTI3cHggI2ZmZmZmZiwgMTg1NnB4IDIxNnB4ICNmZmZmZmYsIDk1N3B4IDM0N3B4ICNmZmZmZmYsIDE0ODZweCA0MDZweCAjZmZmZmZmLCA4MzhweCA5MTJweCAjZmZmZmZmLCA4MDNweCAzNjFweCAjZmZmZmZmLCA1NjRweCA4MjZweCAjZmZmZmZmLCAxNTk3cHggOTQ5cHggI2ZmZmZmZiwgMTIwNnB4IDI4OXB4ICNmZmZmZmYsIDMzcHggMTAzNXB4ICNmZmZmZmYsIDE3NjJweCAxMzc3cHggI2ZmZmZmZiwgNzg5cHggMTgxNXB4ICNmZmZmZmYsIDE1OTRweCAxMzQycHggI2ZmZmZmZiwgMTY2OHB4IDg4MHB4ICNmZmZmZmYsIDE1MzlweCAxNTgxcHggI2ZmZmZmZiwgMTU0N3B4IDUzcHggI2ZmZmZmZiwgODYxcHggMTQzM3B4ICNmZmZmZmYsIDY5M3B4IDE2MThweCAjZmZmZmZmLCAxNzYycHggNzgycHggI2ZmZmZmZiwgMTU2OHB4IDY4MnB4ICNmZmZmZmYsIDExMjZweCAxNzYycHggI2ZmZmZmZiwgMTI0MnB4IDEzNHB4ICNmZmZmZmYsIDQ5NXB4IDk1OXB4ICNmZmZmZmYsIDE2MDZweCAyMTlweCAjZmZmZmZmLCAxODc4cHggMTQxNXB4ICNmZmZmZmYsIDE2NTJweCA3OTdweCAjZmZmZmZmLCA3ODJweCAxOTAzcHggI2ZmZmZmZiwgMTc3NHB4IDExMzNweCAjZmZmZmZmLCAxNDMwcHggNDA4cHggI2ZmZmZmZiwgMjY1cHggMzk0cHggI2ZmZmZmZiwgODkwcHggMzM2cHggI2ZmZmZmZiwgMTA1MXB4IDMxMXB4ICNmZmZmZmYsIDQ2MXB4IDE1NTlweCAjZmZmZmZmLCAxOTMxcHggOTFweCAjZmZmZmZmLCAxMTYwcHggMzgwcHggI2ZmZmZmZiwgMTQ0MnB4IDEwNThweCAjZmZmZmZmLCAxMTU3cHggMzY0cHggI2ZmZmZmZiwgNTg2cHggMjI3cHggI2ZmZmZmZiwgMTM2NXB4IDcxNXB4ICNmZmZmZmYsIDE2NThweCAxNjU1cHggI2ZmZmZmZiwgMTkyM3B4IDE2NjRweCAjZmZmZmZmLCAxMDIzcHggMTg0NHB4ICNmZmZmZmYsIDE5MzlweCAxMzY3cHggI2ZmZmZmZiwgMTIwM3B4IDEzMDVweCAjZmZmZmZmLCAzNTlweCA2NDJweCAjZmZmZmZmLCAxMDU2cHggNDI1cHggI2ZmZmZmZiwgNzg3cHggMjAycHggI2ZmZmZmZiwgMTYwOXB4IDE4NTBweCAjZmZmZmZmLCAxOTY0cHggMjAwcHggI2ZmZmZmZiwgMTUzN3B4IDU4NnB4ICNmZmZmZmYsIDE1ODlweCA5MDNweCAjZmZmZmZmLCAxMDYzcHggMTY5NHB4ICNmZmZmZmYsIDc2MHB4IDExODVweCAjZmZmZmZmLCA1OTdweCAxMzk2cHggI2ZmZmZmZiwgMjk0cHggNDUycHggI2ZmZmZmZiwgNDMzcHggODE4cHggI2ZmZmZmZiwgMTk5cHggODQwcHggI2ZmZmZmZiwgMTMzMnB4IDE5MzdweCAjZmZmZmZmLCAxNjlweCAxOTA3cHggI2ZmZmZmZiwgNTkxcHggODM0cHggI2ZmZmZmZiwgMTcxNnB4IDEwMzJweCAjZmZmZmZmLCA0NXB4IDE4NzlweCAjZmZmZmZmLCA2ODZweCAxNDY5cHggI2ZmZmZmZiwgMTUyMHB4IDQ3NXB4ICNmZmZmZmYsIDExMjJweCA4NTlweCAjZmZmZmZmLCA5NzNweCAxNTQxcHggI2ZmZmZmZiwgMjY5cHggNDc3cHggI2ZmZmZmZiwgMTM5MHB4IDcxNnB4ICNmZmZmZmYsIDE3OTFweCA3ODNweCAjZmZmZmZmLCA4MjRweCAyMDAwcHggI2ZmZmZmZiwgMTIxMXB4IDE3MTdweCAjZmZmZmZmLCAxMDA4cHggMTU4N3B4ICNmZmZmZmYsIDE0MjJweCAyMDRweCAjZmZmZmZmLCAyMzRweCA1NTZweCAjZmZmZmZmLCA1MDZweCA1NTBweCAjZmZmZmZmLCA5NDJweCAxNjcwcHggI2ZmZmZmZiwgMzk3cHggODUzcHggI2ZmZmZmZiwgNTk5cHggNzk1cHggI2ZmZmZmZiwgNzYycHggMTkyNnB4ICNmZmZmZmYsIDEyMDJweCAxNDI0cHggI2ZmZmZmZiwgMTM1cHggMTMxNnB4ICNmZmZmZmYsIDE0NDJweCAxNjkycHggI2ZmZmZmZiwgOTc3cHggNjUycHggI2ZmZmZmZiwgNTY0cHggMTY0OHB4ICNmZmZmZmYsIDk5N3B4IDE0NzRweCAjZmZmZmZmLCA2N3B4IDEzNjZweCAjZmZmZmZmLCAxODYwcHggMTQ1MXB4ICNmZmZmZmYsIDExMDVweCA3NzJweCAjZmZmZmZmLCAxODg2cHggMTM5NnB4ICNmZmZmZmYsIDE1MTBweCA2NThweCAjZmZmZmZmLCA5NzZweCAxNTQ0cHggI2ZmZmZmZiwgODk0cHggNTQzcHggI2ZmZmZmZiwgMTA5OHB4IDExODlweCAjZmZmZmZmLCA2OTBweCA3N3B4ICNmZmZmZmYsIDc3MHB4IDczM3B4ICNmZmZmZmYsIDU1N3B4IDE0MDNweCAjZmZmZmZmLCAxNzU4cHggMTYyM3B4ICNmZmZmZmYsIDEzNDFweCA4MTJweCAjZmZmZmZmLCA2OTlweCA5NjdweCAjZmZmZmZmLCAyNzdweCA4NjZweCAjZmZmZmZmLCAxNTI2cHggMTgyOHB4ICNmZmZmZmYsIDhweCA5NzdweCAjZmZmZmZmLCAxNzA3cHggOTUycHggI2ZmZmZmZiwgMTJweCAxOTAwcHggI2ZmZmZmZiwgNzJweCA5MjFweCAjZmZmZmZmLCA0OTZweCAxMDY3cHggI2ZmZmZmZiwgMTI4OHB4IDE3NDlweCAjZmZmZmZmLCAyNzNweCA5ODRweCAjZmZmZmZmLCAxMTk3cHggMTk5MXB4ICNmZmZmZmYsIDI0MnB4IDc4OXB4ICNmZmZmZmYsIDkwM3B4IDEwMzVweCAjZmZmZmZmLCA0ODBweCAxNDkycHggI2ZmZmZmZiwgMTAycHggMTMzMXB4ICNmZmZmZmYsIDczOHB4IDEzNDNweCAjZmZmZmZmLCA1NjBweCAxNDc1cHggI2ZmZmZmZiwgMzY3cHggODQ2cHggI2ZmZmZmZiwgMTQyMHB4IDk2MnB4ICNmZmZmZmYsIDE5NzZweCA4OTJweCAjZmZmZmZmLCAxOTExcHggMTc2M3B4ICNmZmZmZmYsIDE2MzlweCAxMDAycHggI2ZmZmZmZiwgNDM3cHggMTUyMnB4ICNmZmZmZmYsIDE5MDZweCAxMDI1cHggI2ZmZmZmZiwgNzMwcHggMTM2NHB4ICNmZmZmZmYsIDExMjdweCA1MjFweCAjZmZmZmZmLCAxNDAxcHggMTc5MnB4ICNmZmZmZmYsIDE5NTRweCAxMDY2cHggI2ZmZmZmZiwgMjMycHggMjUwcHggI2ZmZmZmZiwgMTY4NXB4IDY2MHB4ICNmZmZmZmYsIDEwMTFweCA5OTlweCAjZmZmZmZmLCAxOTcwcHggNzkwcHggI2ZmZmZmZiwgNzUwcHggNDk5cHggI2ZmZmZmZiwgMTczOHB4IDY2MHB4ICNmZmZmZmYsIDE2MjFweCAxODQ5cHggI2ZmZmZmZiwgNDQ2cHggNTJweCAjZmZmZmZmLCAxMDU1cHggMTM5NnB4ICNmZmZmZmYsIDExNjVweCAxNDk3cHggI2ZmZmZmZiwgMTc0MHB4IDE0MjVweCAjZmZmZmZmLCAxMDEycHggMTkyMHB4ICNmZmZmZmYsIDEyNThweCAxNTYwcHggI2ZmZmZmZiwgMTAyMHB4IDExNTJweCAjZmZmZmZmLCAzNjJweCA2NzNweCAjZmZmZmZmLCAxMDY1cHggOTc1cHggI2ZmZmZmZiwgNTgycHggNzU1cHggI2ZmZmZmZiwgMTI3MXB4IDE0NzlweCAjZmZmZmZmLCA3MTlweCA1NDhweCAjZmZmZmZmLCAxNjAycHggODc5cHggI2ZmZmZmZiwgNTkwcHggNDk5cHggI2ZmZmZmZiwgNzIxcHggMTQxMnB4ICNmZmZmZmYsIDExODBweCAxMTNweCAjZmZmZmZmLCAxODAxcHggMTk2MXB4ICNmZmZmZmYsIDU4OXB4IDk0MXB4ICNmZmZmZmYsIDg4M3B4IDQ3NnB4ICNmZmZmZmYsIDIxNHB4IDg5MHB4ICNmZmZmZmYsIDEwMjhweCA4OTJweCAjZmZmZmZmLCAxMTA3cHggMTgzMnB4ICNmZmZmZmYsIDk0NHB4IDM2MXB4ICNmZmZmZmYsIDQ4MHB4IDE0NTNweCAjZmZmZmZmLCAxNDY2cHggNjgzcHggI2ZmZmZmZiwgOTgxcHggNzQ1cHggI2ZmZmZmZiwgMTk2OHB4IDgyOHB4ICNmZmZmZmYsIDY1N3B4IDE4MzBweCAjZmZmZmZmLCAxMXB4IDEzMzhweCAjZmZmZmZmLCAxNzlweCA3MzBweCAjZmZmZmZmLCAxNzEzcHggMTk3cHggI2ZmZmZmZiwgNTFweCA5NTVweCAjZmZmZmZmLCAxMjQzcHggMzE5cHggI2ZmZmZmZiwgMTE3NXB4IDYyNHB4ICNmZmZmZmYsIDQ0NnB4IDQ2cHggI2ZmZmZmZiwgNXB4IDExNThweCAjZmZmZmZmLCA4MnB4IDEzNTJweCAjZmZmZmZmLCAxODc3cHggNDAycHggI2ZmZmZmZiwgNzA4cHggMTc3OHB4ICNmZmZmZmYsIDkwM3B4IDE2MjVweCAjZmZmZmZmLCAxODI0cHggMzUycHggI2ZmZmZmZiwgMTIyOXB4IDE0MHB4ICNmZmZmZmYsIDE1MThweCAyNHB4ICNmZmZmZmYsIDEwMTdweCA1MTJweCAjZmZmZmZmLCA1MTVweCA2OTlweCAjZmZmZmZmLCAyOTVweCAyNjVweCAjZmZmZmZmLCA2OXB4IDE3NzNweCAjZmZmZmZmLCAxNjQwcHggMTE2M3B4ICNmZmZmZmYsIDUzNnB4IDM0MnB4ICNmZmZmZmYsIDk3MHB4IDE3NjZweCAjZmZmZmZmLCA1NjBweCAxNDE2cHggI2ZmZmZmZiwgNTc3cHggMTkzcHggI2ZmZmZmZiwgNDY5cHggOXB4ICNmZmZmZmYsIDQ2NnB4IDI3NnB4ICNmZmZmZmYsIDcxMXB4IDg1M3B4ICNmZmZmZmYsIDQwMXB4IDY4NXB4ICNmZmZmZmYsIDg1cHggNTA2cHggI2ZmZmZmZiwgODY1cHggNTU4cHggI2ZmZmZmZiwgNjMxcHggMTA1cHggI2ZmZmZmZiwgODg3cHggODY2cHggI2ZmZmZmZiwgMTcwNHB4IDEwMDFweCAjZmZmZmZmLCAxMDUxcHggMTE5OXB4ICNmZmZmZmYsIDI3NXB4IDE5MDlweCAjZmZmZmZmLCAxNDYycHggODI5cHggI2ZmZmZmZiwgMzc1cHggMTA1N3B4ICNmZmZmZmYsIDE1MzFweCAxNTAxcHggI2ZmZmZmZiwgMjA1cHggNDAzcHggI2ZmZmZmZiwgMzNweCAxODY5cHggI2ZmZmZmZiwgOTY3cHggMTE3NnB4ICNmZmZmZmYsIDM3NnB4IDg2M3B4ICNmZmZmZmYsIDE3NjlweCAxNTQ1cHggI2ZmZmZmZiwgNTM1cHggNTFweCAjZmZmZmZmLCAxOTcycHggMTU2OXB4ICNmZmZmZmYsIDE3NzNweCA5NjBweCAjZmZmZmZmLCA0ODdweCA2MjBweCAjZmZmZmZmLCAxNjYwcHggNjg3cHggI2ZmZmZmZiwgMTYzMnB4IDk3MnB4ICNmZmZmZmYsIDEzNjJweCA0MnB4ICNmZmZmZmYsIDQ3OXB4IDE2NTVweCAjZmZmZmZmLCAxNTMxcHggMTgwOHB4ICNmZmZmZmYsIDE0NTBweCAxNDEycHggI2ZmZmZmZiwgMTU0OXB4IDE3MHB4ICNmZmZmZmYsIDE5MDRweCAxMzA1cHggI2ZmZmZmZiwgMTIwOXB4IDQ4cHggI2ZmZmZmZiwgMTkzM3B4IDgyMHB4ICNmZmZmZmYsIDE2MjNweCA1OTVweCAjZmZmZmZmLCA0OHB4IDY0M3B4ICNmZmZmZmYsIDE3OXB4IDE3NTRweCAjZmZmZmZmLCA1ODlweCAxMDMycHggI2ZmZmZmZiwgMTE5OXB4IDM1NnB4ICNmZmZmZmYsIDE3NTVweCAxNDE4cHggI2ZmZmZmZiwgNzgwcHggMTE3NHB4ICNmZmZmZmYsIDE5MDVweCA3NThweCAjZmZmZmZmLCAxNTY3cHggNzEzcHggI2ZmZmZmZiwgMTM3MnB4IDcwNXB4ICNmZmZmZmYsIDQ1NnB4IDY1NHB4ICNmZmZmZmYsIDc1OXB4IDY5MHB4ICNmZmZmZmYsIDQ1MnB4IDY3M3B4ICNmZmZmZmYsIDk5M3B4IDE2MTBweCAjZmZmZmZmLCAxMjcxcHggMTg4cHggI2ZmZmZmZiwgMzQzcHggMTc1MHB4ICNmZmZmZmYsIDE5NDNweCAxNzM1cHggI2ZmZmZmZiwgMTcxN3B4IDg1M3B4ICNmZmZmZmYsIDEyNDdweCAzMDNweCAjZmZmZmZmLCAxMzE0cHggMTg5NXB4ICNmZmZmZmYsIDEyMDNweCA0ODlweCAjZmZmZmZmLCA3NDFweCA0NjlweCAjZmZmZmZmLCA0cHggMjQ2cHggI2ZmZmZmZiwgMTUxNXB4IDExNXB4ICNmZmZmZmYsIDYwNnB4IDIxOHB4ICNmZmZmZmYsIDE5NjZweCAxNDcxcHggI2ZmZmZmZiwgMTc3cHggODdweCAjZmZmZmZmLCAxNTc1cHggNTg4cHggI2ZmZmZmZiwgMTEzNnB4IDEzODZweCAjZmZmZmZmLCA3MHB4IDE4NjhweCAjZmZmZmZmLCAxMDUzcHggMThweCAjZmZmZmZmLCAxMTI0cHggNzIxcHggI2ZmZmZmZiwgMTc0OHB4IDExODFweCAjZmZmZmZmLCAxOTFweCAxMzg3cHggI2ZmZmZmZiwgMTkzMXB4IDg0MHB4ICNmZmZmZmYsIDEwODhweCAxNjAzcHggI2ZmZmZmZiwgNjM0cHggMTI1NXB4ICNmZmZmZmYsIDgxNHB4IDE0MzRweCAjZmZmZmZmLCA1ODVweCA2NHB4ICNmZmZmZmYsIDEwNzRweCAxNjE4cHggI2ZmZmZmZiwgMTY5MnB4IDc2MXB4ICNmZmZmZmYsIDY1MXB4IDY0M3B4ICNmZmZmZmYsIDE5M3B4IDMzNXB4ICNmZmZmZmYsIDExMDNweCAxNDQ3cHggI2ZmZmZmZiwgNDkxcHggMTE0MnB4ICNmZmZmZmYsIDUyMXB4IDQwOHB4ICNmZmZmZmYsIDUzNnB4IDM0MHB4ICNmZmZmZmYsIDQxMXB4IDEwOTFweCAjZmZmZmZmLCAxNjQ2cHggMTkzcHggI2ZmZmZmZiwgMTU5NXB4IDEyODVweCAjZmZmZmZmLCA4NzBweCAxMzQ5cHggI2ZmZmZmZiwgMTA4NXB4IDEwMTNweCAjZmZmZmZmLCAyMDRweCAxODY0cHggI2ZmZmZmZiwgMTM1OXB4IDI5OXB4ICNmZmZmZmYsIDgwN3B4IDk2NHB4ICNmZmZmZmYsIDIxOXB4IDUwOXB4ICNmZmZmZmYsIDM2cHggMTIyN3B4ICNmZmZmZmYsIDcwMnB4IDE4NzNweCAjZmZmZmZmLCAxNDcxcHggOTM0cHggI2ZmZmZmZiwgMTc2M3B4IDc5MnB4ICNmZmZmZmYsIDk3M3B4IDE5NTdweCAjZmZmZmZmLCA5ODdweCA2OHB4ICNmZmZmZmYsIDU5M3B4IDEyODJweCAjZmZmZmZmLCAxOTAwcHggNjA3cHggI2ZmZmZmZiwgNDA3cHggMTY1OXB4ICNmZmZmZmYsIDU4N3B4IDE3cHggI2ZmZmZmZiwgNjMycHggMTU4cHggI2ZmZmZmZjtcclxufVxyXG4qL1xyXG5cclxuQGtleWZyYW1lcyBhbmltQnViYmxlcyB7XHJcbiAgICBmcm9tIHtcclxuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMHB4KTtcclxuICAgIH1cclxuICAgIHRvIHtcclxuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTIwMDBweCk7XHJcbiAgICB9XHJcbn1cclxuXHJcbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBQSxDQUFDO0FBQ0csWUFBVTtBQUNWLE9BQUs7QUFDTCxRQUFNO0FBQ04sVUFBUTtBQUNSLFNBQU87QUFDWDtBQUVBLENBQUM7QUFDRyxZQUFVO0FBQ1YsT0FBSztBQUNMLFFBQU07QUFDTixTQUFPO0FBQ1AsVUFBUTtBQUNSLFdBQVM7QUFDVCxhQUFXLFVBQVUsR0FBRztBQUN4QixtQkFBaUI7QUFDakIsdUJBQXFCO0FBQ3pCO0FBRUEsV0FMZTtBQU1aO0FBQU0sYUFBUztBQUFFO0FBQ2pCO0FBQUksYUFBUztBQUFFO0FBQ2pCO0FBRUQsQ0FBQztBQUNHLFNBQU87QUFDUCxVQUFRO0FBQ1IsY0FBWTtBQUNaO0FBQUEsSUFBWSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sS0FBSyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLEtBQUssT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sS0FBSyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsS0FBSyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsS0FBSyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLEtBQUssT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsS0FBSyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxLQUFLLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLEtBQUssT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sS0FBSyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxLQUFLLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsSUFBSSxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxLQUFLLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsS0FBSyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxLQUFLLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sS0FBSyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsS0FBSyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsS0FBSyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsS0FBSyxNQUFNLE9BQU87QUFBQSxJQUFFLEtBQUssT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxLQUFLLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsS0FBSyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxLQUFLLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLEtBQUssT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sS0FBSyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxLQUFLLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLEtBQUssTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sS0FBSyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxLQUFLLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sS0FBSyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxLQUFLLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLEtBQUssTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsS0FBSyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsS0FBSyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxLQUFLLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxLQUFLLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLEtBQUssT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsS0FBSyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsS0FBSyxNQUFNLE9BQU87QUFBQSxJQUFFLEtBQUssTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLEtBQUssT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLElBQUksT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxLQUFLLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxLQUFLLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLEtBQUssT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sS0FBSyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxLQUFLLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsS0FBSyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLEtBQUssT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLEtBQUssTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxLQUFLLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxLQUFLLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsS0FBSyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxLQUFLLE1BQU0sT0FBTztBQUFBLElBQUUsSUFBSSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsS0FBSyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLEtBQUssT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsS0FBSyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsS0FBSyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxLQUFLLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLEtBQUssTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLEtBQUssT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU87QUFDOTlkLGFBQVcsWUFBWSxLQUFLLE9BQU87QUFDbkMsV0FBUztBQUNiO0FBRUEsQ0FUQyxPQVNPO0FBQ0osV0FBUztBQUNULFlBQVU7QUFDVixPQUFLO0FBQ0wsU0FBTztBQUNQLFVBQVE7QUFDUixjQUFZO0FBQ1o7QUFBQSxJQUFZLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxLQUFLLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsS0FBSyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxLQUFLLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxLQUFLLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxLQUFLLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sS0FBSyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxLQUFLLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLEtBQUssT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sS0FBSyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxLQUFLLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLEtBQUssTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxJQUFJLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLEtBQUssT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxLQUFLLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLEtBQUssT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxLQUFLLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxLQUFLLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxLQUFLLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxLQUFLLE1BQU0sT0FBTztBQUFBLElBQUUsS0FBSyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLEtBQUssT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxLQUFLLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLEtBQUssT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsS0FBSyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxLQUFLLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLEtBQUssTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsS0FBSyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxLQUFLLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLEtBQUssTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxLQUFLLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLEtBQUssTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsS0FBSyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxLQUFLLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxLQUFLLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLEtBQUssTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLEtBQUssTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sS0FBSyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxLQUFLLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxLQUFLLE1BQU0sT0FBTztBQUFBLElBQUUsS0FBSyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsS0FBSyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sSUFBSSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLEtBQUssT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLEtBQUssT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsS0FBSyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxLQUFLLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLEtBQUssT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxLQUFLLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sS0FBSyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsS0FBSyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLEtBQUssT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLEtBQUssT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxLQUFLLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLEtBQUssTUFBTSxPQUFPO0FBQUEsSUFBRSxJQUFJLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxLQUFLLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsS0FBSyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxLQUFLLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxLQUFLLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLEtBQUssTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsS0FBSyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sS0FBSyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTztBQUNsK2Q7QUFFQSxDQUFDO0FBQ0csU0FBTztBQUNQLFVBQVE7QUFDUixjQUFZO0FBQ1o7QUFBQSxJQUFZLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxLQUFLLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxLQUFLLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsS0FBSyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxLQUFLLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxJQUFJLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxLQUFLLE1BQU0sT0FBTztBQUFBLElBQUUsS0FBSyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxLQUFLLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLEtBQUssT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLEtBQUssT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxLQUFLLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLEtBQUssT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsS0FBSyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxLQUFLLE9BQU87QUFBQSxJQUFFLE1BQU0sS0FBSyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxJQUFJLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sS0FBSyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxLQUFLLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLEtBQUssTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLEtBQUssT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLEtBQUssT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLEtBQUssS0FBSyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU07QUFDdnlJLGFBQVcsWUFBWSxLQUFLLE9BQU87QUFDbkMsV0FBUztBQUNiO0FBRUEsQ0FUQyxRQVNRO0FBQ0wsV0FBUztBQUNULFlBQVU7QUFDVixPQUFLO0FBQ0wsU0FBTztBQUNQLFVBQVE7QUFDUixjQUFZO0FBQ1o7QUFBQSxJQUFZLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxLQUFLLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxLQUFLLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsS0FBSyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxLQUFLLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxJQUFJLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxLQUFLLE1BQU0sT0FBTztBQUFBLElBQUUsS0FBSyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxLQUFLLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLEtBQUssT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLEtBQUssT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxLQUFLLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLEtBQUssT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsS0FBSyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxLQUFLLE9BQU87QUFBQSxJQUFFLE1BQU0sS0FBSyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE1BQU0sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxJQUFJLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sS0FBSyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxPQUFPLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxLQUFLLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsT0FBTyxNQUFNLE9BQU87QUFBQSxJQUFFLE1BQU0sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxPQUFPLE9BQU87QUFBQSxJQUFFLE9BQU8sT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLEtBQUssTUFBTSxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU0sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLEtBQUssT0FBTyxPQUFPO0FBQUEsSUFBRSxPQUFPLE1BQU0sT0FBTztBQUFBLElBQUUsT0FBTyxPQUFPLE9BQU87QUFBQSxJQUFFLEtBQUssT0FBTyxPQUFPO0FBQUEsSUFBRSxNQUFNLE9BQU8sT0FBTztBQUFBLElBQUUsTUFBTSxNQUFNLE9BQU87QUFBQSxJQUFFLEtBQUssS0FBSyxPQUFPO0FBQUEsSUFBRSxNQUFNLE1BQU07QUFDM3lJO0FBdUNBLFdBdEVlO0FBdUVYO0FBQ0ksZUFBVyxXQUFXO0FBQzFCO0FBQ0E7QUFDSSxlQUFXLFdBQVc7QUFDMUI7QUFDSjsiLAogICJuYW1lcyI6IFtdCn0K */'] });
var BubblesComponent = _BubblesComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(BubblesComponent, { className: "BubblesComponent", filePath: "src\\app\\bubbles\\bubbles.component.ts", lineNumber: 8 });
})();

// src/app/sunlight-zone-bg/sunlight-zone-bg.component.ts
var _SunlightZoneBgComponent = class _SunlightZoneBgComponent {
};
_SunlightZoneBgComponent.\u0275fac = function SunlightZoneBgComponent_Factory(t) {
  return new (t || _SunlightZoneBgComponent)();
};
_SunlightZoneBgComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _SunlightZoneBgComponent, selectors: [["app-sunlight-zone-bg"]], decls: 5, vars: 0, consts: [[1, "sunlightBgDiv"], ["id", "bg3"], ["id", "bg2"], ["id", "bg1"]], template: function SunlightZoneBgComponent_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 0);
    \u0275\u0275element(1, "img", 1)(2, "img", 2)(3, "app-bubbles")(4, "img", 3);
    \u0275\u0275elementEnd();
  }
}, dependencies: [BubblesComponent], styles: ['\n\n.sunlightBgDiv[_ngcontent-%COMP%] {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  z-index: -15;\n  background-color: #030216;\n  background-image:\n    radial-gradient(ellipse at 50% 30%, #28fecd 0%, transparent 70%),\n    radial-gradient(ellipse at 50% -10%, #17fee2 0%, transparent 70%),\n    radial-gradient(ellipse at 10% 60%, #181d94 0%, transparent 55%),\n    radial-gradient(ellipse at 90% 80%, #181d94 0%, transparent 55%),\n    radial-gradient(ellipse at 20% 0%, #472ea6 0%, transparent 55%),\n    radial-gradient(ellipse at 80% 20%, #472ea6 0%, transparent 55%);\n}\n.sunlightBgDiv[_ngcontent-%COMP%]    > img[_ngcontent-%COMP%] {\n  position: absolute;\n  height: auto;\n}\n.sunlightBgDiv[_ngcontent-%COMP%]   #bg1[_ngcontent-%COMP%] {\n  content: url("./media/sunlight-bg1.PNG");\n  width: 102vw;\n  left: -1vw;\n  top: 38%;\n  filter: blur(5px);\n  animation: _ngcontent-%COMP%_slightMove1 8s 1s infinite ease-in-out;\n}\n.sunlightBgDiv[_ngcontent-%COMP%]   #bg2[_ngcontent-%COMP%] {\n  content: url("./media/sunlight-bg2.PNG");\n  width: 72vw;\n  left: -1vw;\n  bottom: -1vw;\n  filter: blur(1px);\n  animation: _ngcontent-%COMP%_slightMove2 8s 1s infinite ease-in-out;\n}\n.sunlightBgDiv[_ngcontent-%COMP%]   #bg3[_ngcontent-%COMP%] {\n  content: url("./media/sunlight-bg3.PNG");\n  width: 40%;\n  right: 0;\n  bottom: 0;\n  opacity: 0.5;\n  filter: blur(2px);\n}\n@keyframes _ngcontent-%COMP%_slightMove1 {\n  0%, 100% {\n    transform: translateY(0vw);\n  }\n  50% {\n    transform: translateY(-1vw);\n  }\n}\n@keyframes _ngcontent-%COMP%_slightMove2 {\n  0%, 100% {\n    transform: translateY(0vw);\n  }\n  50% {\n    transform: translateY(-0.5vw);\n  }\n}\n@media only screen and (max-height: 400px) and (orientation: landscape), only screen and (min-width: 390px) and (max-width: 768px) and (orientation: landscape), only screen and (device-width: 360px) and (device-height: 640px) and (-webkit-device-pixel-ratio: 4) and (orientation: landscape), only screen and (min-device-width: 390px) and (max-device-width: 844px) and (-webkit-min-device-pixel-ratio: 4) and (orientation: landscape), only screen and (min-device-width: 414px) and (max-device-width: 736px) and (-webkit-min-device-pixel-ratio: 3) and (orientation: landscape), only screen and (min-device-width: 375px) and (max-device-width: 812px) and (-webkit-min-device-pixel-ratio: 3) and (orientation: landscape) {\n  .sunlightBgDiv[_ngcontent-%COMP%]   #bg1[_ngcontent-%COMP%] {\n    top: 24%;\n    filter: blur(3px);\n  }\n  .sunlightBgDiv[_ngcontent-%COMP%]   #bg2[_ngcontent-%COMP%] {\n    width: 72vw;\n    bottom: -1vw;\n  }\n  .sunlightBgDiv[_ngcontent-%COMP%]   #bg3[_ngcontent-%COMP%] {\n    width: 35%;\n    bottom: -10%;\n  }\n}\n/*# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL2FwcC9zdW5saWdodC16b25lLWJnL3N1bmxpZ2h0LXpvbmUtYmcuY29tcG9uZW50LmNzcyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiLnN1bmxpZ2h0QmdEaXYge1xyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICB3aWR0aDogMTAwJTtcclxuICBoZWlnaHQ6IDEwMCU7XHJcbiAgdG9wOiAwO1xyXG4gIGxlZnQ6IDA7XHJcbiAgei1pbmRleDogLTE1O1xyXG4gIGJhY2tncm91bmQtY29sb3I6ICMwMzAyMTY7XHJcbiAgYmFja2dyb3VuZC1pbWFnZTpcclxuICAgIHJhZGlhbC1ncmFkaWVudChlbGxpcHNlIGF0IDUwJSAzMCUsICMyOGZlY2QgMCUsIHRyYW5zcGFyZW50IDcwJSksXHJcbiAgICByYWRpYWwtZ3JhZGllbnQoZWxsaXBzZSBhdCA1MCUgLTEwJSwgIzE3ZmVlMiAwJSwgdHJhbnNwYXJlbnQgNzAlKSxcclxuICAgIHJhZGlhbC1ncmFkaWVudChlbGxpcHNlIGF0IDEwJSA2MCUsICMxODFkOTQgMCUsIHRyYW5zcGFyZW50IDU1JSksXHJcbiAgICByYWRpYWwtZ3JhZGllbnQoZWxsaXBzZSBhdCA5MCUgODAlLCAjMTgxZDk0IDAlLCB0cmFuc3BhcmVudCA1NSUpLFxyXG4gICAgcmFkaWFsLWdyYWRpZW50KGVsbGlwc2UgYXQgMjAlIDAlLCAjNDcyZWE2IDAlLCB0cmFuc3BhcmVudCA1NSUpLFxyXG4gICAgcmFkaWFsLWdyYWRpZW50KGVsbGlwc2UgYXQgODAlIDIwJSwgIzQ3MmVhNiAwJSwgdHJhbnNwYXJlbnQgNTUlKTtcclxufVxyXG5cclxuLnN1bmxpZ2h0QmdEaXYgPiBpbWcge1xyXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcclxuICBoZWlnaHQ6IGF1dG87XHJcbn1cclxuLnN1bmxpZ2h0QmdEaXYgI2JnMSB7XHJcbiAgY29udGVudDogdXJsKFwiLi4vLi4vYXNzZXRzL2ltYWdlcy9zdW5saWdodC1iZzEuUE5HXCIpO1xyXG4gIHdpZHRoOiAxMDJ2dztcclxuICBsZWZ0OiAtMXZ3O1xyXG4gIHRvcDogMzglO1xyXG4gIGZpbHRlcjogYmx1cig1cHgpO1xyXG4gIGFuaW1hdGlvbjogc2xpZ2h0TW92ZTEgOHMgMXMgaW5maW5pdGUgZWFzZS1pbi1vdXQ7XHJcbn1cclxuLnN1bmxpZ2h0QmdEaXYgI2JnMiB7XHJcbiAgY29udGVudDogdXJsKFwiLi4vLi4vYXNzZXRzL2ltYWdlcy9zdW5saWdodC1iZzIuUE5HXCIpO1xyXG4gIHdpZHRoOiA3MnZ3O1xyXG4gIGxlZnQ6IC0xdnc7XHJcbiAgYm90dG9tOiAtMXZ3O1xyXG4gIGZpbHRlcjogYmx1cigxcHgpO1xyXG4gIGFuaW1hdGlvbjogc2xpZ2h0TW92ZTIgOHMgMXMgaW5maW5pdGUgZWFzZS1pbi1vdXQ7XHJcbn1cclxuLnN1bmxpZ2h0QmdEaXYgI2JnMyB7XHJcbiAgY29udGVudDogdXJsKFwiLi4vLi4vYXNzZXRzL2ltYWdlcy9zdW5saWdodC1iZzMuUE5HXCIpO1xyXG4gIHdpZHRoOiA0MCU7XHJcbiAgcmlnaHQ6IDA7XHJcbiAgYm90dG9tOiAwO1xyXG4gIG9wYWNpdHk6IDAuNTtcclxuICBmaWx0ZXI6IGJsdXIoMnB4KTtcclxufVxyXG5cclxuQGtleWZyYW1lcyBzbGlnaHRNb3ZlMSB7XHJcbiAgMCUsIDEwMCUge1xyXG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMHZ3KTtcclxuICB9XHJcbiAgNTAlIHtcclxuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0xdncpO1xyXG4gIH1cclxufVxyXG5cclxuQGtleWZyYW1lcyBzbGlnaHRNb3ZlMiB7XHJcbiAgMCUsIDEwMCUge1xyXG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoMHZ3KTtcclxuICB9XHJcbiAgNTAlIHtcclxuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0wLjV2dyk7XHJcbiAgfVxyXG59XHJcblxyXG5cclxuXHJcbi8qIHBjIGV4dHJhIHNtYWxsICovXHJcbkBtZWRpYSBvbmx5IHNjcmVlblxyXG4gIGFuZCAobWF4LWhlaWdodDogNDAwcHgpXHJcbiAgYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKSxcclxub25seSBzY3JlZW5cclxuICBhbmQgKG1pbi13aWR0aDogMzkwcHgpXHJcbiAgYW5kIChtYXgtd2lkdGg6IDc2OHB4KVxyXG4gIGFuZCAob3JpZW50YXRpb246IGxhbmRzY2FwZSksXHJcbi8qIFBob25lICovXHJcbm9ubHkgc2NyZWVuXHJcbiAgYW5kIChkZXZpY2Utd2lkdGg6IDM2MHB4KVxyXG4gIGFuZCAoZGV2aWNlLWhlaWdodDogNjQwcHgpXHJcbiAgYW5kICgtd2Via2l0LWRldmljZS1waXhlbC1yYXRpbzogNClcclxuICBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpLFxyXG5vbmx5IHNjcmVlblxyXG4gIGFuZCAobWluLWRldmljZS13aWR0aDogMzkwcHgpXHJcbiAgYW5kIChtYXgtZGV2aWNlLXdpZHRoOiA4NDRweClcclxuICBhbmQgKC13ZWJraXQtbWluLWRldmljZS1waXhlbC1yYXRpbzogNClcclxuICBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpLFxyXG5vbmx5IHNjcmVlblxyXG4gIGFuZCAobWluLWRldmljZS13aWR0aDogNDE0cHgpXHJcbiAgYW5kIChtYXgtZGV2aWNlLXdpZHRoOiA3MzZweClcclxuICBhbmQgKC13ZWJraXQtbWluLWRldmljZS1waXhlbC1yYXRpbzogMylcclxuICBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpLFxyXG5vbmx5IHNjcmVlblxyXG4gIGFuZCAobWluLWRldmljZS13aWR0aDogMzc1cHgpXHJcbiAgYW5kIChtYXgtZGV2aWNlLXdpZHRoOiA4MTJweClcclxuICBhbmQgKC13ZWJraXQtbWluLWRldmljZS1waXhlbC1yYXRpbzogMylcclxuICBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpIHtcclxuICAuc3VubGlnaHRCZ0RpdiAjYmcxIHtcclxuICAgIHRvcDogMjQlO1xyXG4gICAgZmlsdGVyOiBibHVyKDNweCk7XHJcbiAgfVxyXG4gIC5zdW5saWdodEJnRGl2ICNiZzIge1xyXG4gICAgd2lkdGg6IDcydnc7XHJcbiAgICBib3R0b206IC0xdnc7XHJcbiAgfVxyXG4gIC5zdW5saWdodEJnRGl2ICNiZzMge1xyXG4gICAgd2lkdGg6IDM1JTtcclxuICAgIGJvdHRvbTogLTEwJTtcclxuICB9XHJcbn1cclxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUFBLENBQUM7QUFDQyxZQUFVO0FBQ1YsU0FBTztBQUNQLFVBQVE7QUFDUixPQUFLO0FBQ0wsUUFBTTtBQUNOLFdBQVM7QUFDVCxvQkFBa0I7QUFDbEI7QUFBQSxJQUNFLGdCQUFnQixRQUFRLEdBQUcsSUFBSSxHQUFHLEVBQUUsUUFBUSxFQUFFLEVBQUUsWUFBWSxJQUFJO0FBQUEsSUFDaEUsZ0JBQWdCLFFBQVEsR0FBRyxJQUFJLElBQUksRUFBRSxRQUFRLEVBQUUsRUFBRSxZQUFZLElBQUk7QUFBQSxJQUNqRSxnQkFBZ0IsUUFBUSxHQUFHLElBQUksR0FBRyxFQUFFLFFBQVEsRUFBRSxFQUFFLFlBQVksSUFBSTtBQUFBLElBQ2hFLGdCQUFnQixRQUFRLEdBQUcsSUFBSSxHQUFHLEVBQUUsUUFBUSxFQUFFLEVBQUUsWUFBWSxJQUFJO0FBQUEsSUFDaEUsZ0JBQWdCLFFBQVEsR0FBRyxJQUFJLEVBQUUsRUFBRSxRQUFRLEVBQUUsRUFBRSxZQUFZLElBQUk7QUFBQSxJQUMvRCxnQkFBZ0IsUUFBUSxHQUFHLElBQUksR0FBRyxFQUFFLFFBQVEsRUFBRSxFQUFFLFlBQVk7QUFDaEU7QUFFQSxDQWpCQyxjQWlCYyxFQUFFO0FBQ2YsWUFBVTtBQUNWLFVBQVE7QUFDVjtBQUNBLENBckJDLGNBcUJjLENBQUM7QUFDZCxXQUFTO0FBQ1QsU0FBTztBQUNQLFFBQU07QUFDTixPQUFLO0FBQ0wsVUFBUSxLQUFLO0FBQ2IsYUFBVyxZQUFZLEdBQUcsR0FBRyxTQUFTO0FBQ3hDO0FBQ0EsQ0E3QkMsY0E2QmMsQ0FBQztBQUNkLFdBQVM7QUFDVCxTQUFPO0FBQ1AsUUFBTTtBQUNOLFVBQVE7QUFDUixVQUFRLEtBQUs7QUFDYixhQUFXLFlBQVksR0FBRyxHQUFHLFNBQVM7QUFDeEM7QUFDQSxDQXJDQyxjQXFDYyxDQUFDO0FBQ2QsV0FBUztBQUNULFNBQU87QUFDUCxTQUFPO0FBQ1AsVUFBUTtBQUNSLFdBQVM7QUFDVCxVQUFRLEtBQUs7QUFDZjtBQUVBLFdBbkJhO0FBb0JYO0FBQ0ksZUFBVyxXQUFXO0FBQzFCO0FBQ0E7QUFDSSxlQUFXLFdBQVc7QUFDMUI7QUFDRjtBQUVBLFdBcEJhO0FBcUJYO0FBQ0ksZUFBVyxXQUFXO0FBQzFCO0FBQ0E7QUFDSSxlQUFXLFdBQVc7QUFDMUI7QUFDRjtBQUtBLE9BQU8sS0FBSyxPQUNWLElBQUksQ0FBQyxVQUFVLEVBQUUsT0FDakIsSUFBSSxDQUFDLFdBQVcsRUFBRSxVQUFVLEVBQzlCLEtBQUssT0FDSCxJQUFJLENBQUMsU0FBUyxFQUFFLE9BQ2hCLElBQUksQ0FBQyxTQUFTLEVBQUUsT0FDaEIsSUFBSSxDQUFDLFdBQVcsRUFBRSxVQUFVLEVBRTlCLEtBQUssT0FDSCxJQUFJLENBQUMsWUFBWSxFQUFFLE9BQ25CLElBQUksQ0FBQyxhQUFhLEVBQUUsT0FDcEIsSUFBSSxDQUFDLDBCQUEwQixFQUFFLEdBQ2pDLElBQUksQ0FBQyxXQUFXLEVBQUUsVUFBVSxFQUM5QixLQUFLLE9BQ0gsSUFBSSxDQUFDLGdCQUFnQixFQUFFLE9BQ3ZCLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxPQUN2QixJQUFJLENBQUMsOEJBQThCLEVBQUUsR0FDckMsSUFBSSxDQUFDLFdBQVcsRUFBRSxVQUFVLEVBQzlCLEtBQUssT0FDSCxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsT0FDdkIsSUFBSSxDQUFDLGdCQUFnQixFQUFFLE9BQ3ZCLElBQUksQ0FBQyw4QkFBOEIsRUFBRSxHQUNyQyxJQUFJLENBQUMsV0FBVyxFQUFFLFVBQVUsRUFDOUIsS0FBSyxPQUNILElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxPQUN2QixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsT0FDdkIsSUFBSSxDQUFDLDhCQUE4QixFQUFFLEdBQ3JDLElBQUksQ0FBQyxXQUFXLEVBQUU7QUFDbEIsR0EvRkQsY0ErRmdCLENBMUVEO0FBMkVaLFNBQUs7QUFDTCxZQUFRLEtBQUs7QUFDZjtBQUNBLEdBbkdELGNBbUdnQixDQXRFRDtBQXVFWixXQUFPO0FBQ1AsWUFBUTtBQUNWO0FBQ0EsR0F2R0QsY0F1R2dCLENBbEVEO0FBbUVaLFdBQU87QUFDUCxZQUFRO0FBQ1Y7QUFDRjsiLAogICJuYW1lcyI6IFtdCn0K */'] });
var SunlightZoneBgComponent = _SunlightZoneBgComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(SunlightZoneBgComponent, { className: "SunlightZoneBgComponent", filePath: "src\\app\\sunlight-zone-bg\\sunlight-zone-bg.component.ts", lineNumber: 8 });
})();

// src/app/sunlight-zone/sunlight-zone.component.ts
var _c04 = (a1) => ["presents-to-schneider", a1];
function SunlightZoneComponent_div_9_div_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 15)(1, "a", 16);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const projectName_r3 = ctx.$implicit;
    const ctx_r2 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(1);
    \u0275\u0275property("routerLink", \u0275\u0275pureFunction1(2, _c04, projectName_r3));
    \u0275\u0275advance(1);
    \u0275\u0275textInterpolate(ctx_r2.projectNameList[projectName_r3]);
  }
}
var _c13 = (a0, a1) => ({ "top": a0, "left": a1 });
function SunlightZoneComponent_div_9_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 10);
    \u0275\u0275listener("click", function SunlightZoneComponent_div_9_Template_div_click_0_listener() {
      \u0275\u0275restoreView(_r5);
      const ctx_r4 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r4.closeProjectList());
    });
    \u0275\u0275elementStart(1, "div", 11)(2, "div");
    \u0275\u0275element(3, "img", 12);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(4, "div", 13);
    \u0275\u0275listener("click", function SunlightZoneComponent_div_9_Template_div_click_4_listener($event) {
      return $event.stopPropagation();
    });
    \u0275\u0275template(5, SunlightZoneComponent_div_9_div_5_Template, 3, 4, "div", 14);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(1);
    \u0275\u0275property("ngStyle", \u0275\u0275pureFunction2(2, _c13, ctx_r0.projectContentY, ctx_r0.projectContentX));
    \u0275\u0275advance(4);
    \u0275\u0275property("ngForOf", ctx_r0.projectList);
  }
}
function SunlightZoneComponent_div_10_div_5_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 15)(1, "a", 16);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const projectName_r8 = ctx.$implicit;
    const ctx_r7 = \u0275\u0275nextContext(2);
    \u0275\u0275advance(1);
    \u0275\u0275property("routerLink", \u0275\u0275pureFunction1(2, _c04, projectName_r8));
    \u0275\u0275advance(1);
    \u0275\u0275textInterpolate(ctx_r7.projectNameList[projectName_r8]);
  }
}
function SunlightZoneComponent_div_10_Template(rf, ctx) {
  if (rf & 1) {
    const _r10 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 17);
    \u0275\u0275listener("click", function SunlightZoneComponent_div_10_Template_div_click_0_listener() {
      \u0275\u0275restoreView(_r10);
      const ctx_r9 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r9.closeProjectList());
    });
    \u0275\u0275elementStart(1, "div", 18)(2, "div");
    \u0275\u0275element(3, "img", 12);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(4, "div", 13);
    \u0275\u0275listener("click", function SunlightZoneComponent_div_10_Template_div_click_4_listener($event) {
      return $event.stopPropagation();
    });
    \u0275\u0275template(5, SunlightZoneComponent_div_10_div_5_Template, 3, 4, "div", 14);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(5);
    \u0275\u0275property("ngForOf", ctx_r1.projectList);
  }
}
var _SunlightZoneComponent = class _SunlightZoneComponent {
  constructor() {
    this.level = "sunlight";
    this.projectList = [];
    this.projectNameList = {};
    this.showList = false;
    this.projectContentX = "";
    this.projectContentY = "";
  }
  ngOnInit() {
    this.projectList = PROJECT_LIST[this.level];
    this.projectNameList = PROJECT_NAME_LIST;
  }
  showProjectList(e) {
    this.showList = true;
    this.projectContentX = e.clientX + "px";
    this.projectContentY = e.clientY + "px";
  }
  closeProjectList() {
    this.showList = false;
  }
};
_SunlightZoneComponent.\u0275fac = function SunlightZoneComponent_Factory(t) {
  return new (t || _SunlightZoneComponent)();
};
_SunlightZoneComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _SunlightZoneComponent, selectors: [["app-sunlight-zone"]], decls: 14, vars: 4, consts: [["onload", "testFunction()", 1, "layerContainer", "sunlightLayerContainer"], [3, "level", "showBack"], [1, "sunlightLayerNav"], ["routerLink", "letters-to-schneider", "matTooltip", "Letters to Schneider", "matTooltipPosition", "above", "matTooltipShowDelay", "0", 1, "galleriesLink"], ["matTooltip", "Presents to Schneider", "matTooltipPosition", "above", "matTooltipShowDelay", "0", 1, "projectListBtn", 3, "click"], ["routerLink", "schneider-journey", "matTooltip", "Schneider's Journey", "matTooltipPosition", "above", "matTooltipShowDelay", "0", 1, "timeLineLink"], ["class", "projectModal modalOnOthers", 3, "click", 4, "ngIf"], ["class", "projectModal modalOnPhone", 3, "click", 4, "ngIf"], [1, "schneiderDiv"], ["src", "#"], [1, "projectModal", "modalOnOthers", 3, "click"], [1, "projectModalContent", 3, "ngStyle"], [1, "projectListCloseBtn"], [1, "projectModalList", 3, "click"], ["class", "projectList", 4, "ngFor", "ngForOf"], [1, "projectList"], [3, "routerLink"], [1, "projectModal", "modalOnPhone", 3, "click"], [1, "projectModalContent"]], template: function SunlightZoneComponent_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 0);
    \u0275\u0275element(1, "app-tool-bar", 1);
    \u0275\u0275elementStart(2, "nav", 2)(3, "a", 3);
    \u0275\u0275element(4, "img");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(5, "div", 4);
    \u0275\u0275listener("click", function SunlightZoneComponent_Template_div_click_5_listener($event) {
      return ctx.showProjectList($event);
    });
    \u0275\u0275element(6, "img");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(7, "a", 5);
    \u0275\u0275element(8, "img");
    \u0275\u0275elementEnd();
    \u0275\u0275template(9, SunlightZoneComponent_div_9_Template, 6, 5, "div", 6)(10, SunlightZoneComponent_div_10_Template, 6, 1, "div", 7);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(11, "div", 8);
    \u0275\u0275element(12, "img", 9);
    \u0275\u0275elementEnd();
    \u0275\u0275element(13, "app-sunlight-zone-bg");
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    \u0275\u0275advance(1);
    \u0275\u0275property("level", ctx.level)("showBack", false);
    \u0275\u0275advance(8);
    \u0275\u0275property("ngIf", ctx.showList);
    \u0275\u0275advance(1);
    \u0275\u0275property("ngIf", ctx.showList);
  }
}, dependencies: [NgForOf, NgIf, NgStyle, RouterLink, MatTooltip, ToolBarComponent, SunlightZoneBgComponent], styles: ['\n\n.projectModal[_ngcontent-%COMP%] {\n  background: rgba(0, 0, 0, 0.5);\n  width: 100%;\n  height: 100%;\n  position: fixed;\n  top: 0px;\n  left: 0px;\n  z-index: 5;\n}\n.projectModalContent[_ngcontent-%COMP%] {\n  position: absolute;\n  display: flex;\n  flex-direction: row;\n  justify-content: center;\n  align-items: center;\n  transform: translate(-45px, -50%);\n}\n.projectModalList[_ngcontent-%COMP%] {\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 8px;\n  border: solid 3px black;\n  border-radius: 20px;\n  background-color: rgba(0, 0, 0, 0.7);\n}\n.modalOnOthers[_ngcontent-%COMP%] {\n  display: block;\n}\n.modalOnPhone[_ngcontent-%COMP%] {\n  display: none;\n}\n.modalOnPhone[_ngcontent-%COMP%]   .projectModalContent[_ngcontent-%COMP%] {\n  top: 50%;\n  right: -23px;\n  height: 100%;\n}\n.modalOnPhone[_ngcontent-%COMP%]   .projectModalContent[_ngcontent-%COMP%]   .projectModalList[_ngcontent-%COMP%] {\n  border: solid 3px black;\n  border-radius: 0px;\n  background-color: rgba(0, 0, 0, 0.7);\n  height: 100%;\n}\n.projectList[_ngcontent-%COMP%] {\n  border-top: solid 2px white;\n  padding: 10px 10px;\n  width: 90%;\n}\n.projectList[_ngcontent-%COMP%]:nth-child(1) {\n  border: none;\n}\n.projectList[_ngcontent-%COMP%]    > a[_ngcontent-%COMP%]:hover {\n  color: #edd3ba;\n}\n.projectListCloseBtn[_ngcontent-%COMP%] {\n  width: 90px;\n  height: auto;\n  content: url("./media/projects-close-icon.PNG");\n}\n.projectListCloseBtn[_ngcontent-%COMP%]:hover {\n  content: url("./media/projects-close-icon-hover.PNG");\n  cursor: pointer;\n}\n.sunlightLayerNav[_ngcontent-%COMP%] {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  z-index: -5;\n}\n.galleriesLink[_ngcontent-%COMP%] {\n  position: absolute;\n  width: 250px;\n  height: auto;\n  top: 8%;\n  left: 55%;\n  opacity: 0;\n  animation: _ngcontent-%COMP%_fadeIn 500ms 500ms ease-in-out forwards, _ngcontent-%COMP%_floating 2s 950ms ease-in-out infinite alternate;\n}\n.galleriesLink[_ngcontent-%COMP%]    > img[_ngcontent-%COMP%] {\n  content: url("./media/galleries-icon.PNG");\n  width: 100%;\n  height: auto;\n}\n.galleriesLink[_ngcontent-%COMP%]    > img[_ngcontent-%COMP%]:hover {\n  width: 100%;\n  height: auto;\n  content: url("./media/galleries-icon-hover.PNG");\n  transform: scale(1.1);\n}\n.timeLineLink[_ngcontent-%COMP%] {\n  position: absolute;\n  width: 250px;\n  height: auto;\n  top: 42%;\n  left: 48%;\n  opacity: 0;\n  animation: _ngcontent-%COMP%_fadeIn 500ms 700ms ease-in-out forwards, _ngcontent-%COMP%_floating 2s 1330ms ease-in-out infinite alternate;\n}\n.timeLineLink[_ngcontent-%COMP%]    > img[_ngcontent-%COMP%] {\n  content: url("./media/timeline-icon.PNG");\n  width: 100%;\n  height: auto;\n}\n.timeLineLink[_ngcontent-%COMP%]    > img[_ngcontent-%COMP%]:hover {\n  width: 100%;\n  height: auto;\n  content: url("./media/timeline-icon-hover.PNG");\n  transform: scale(1.1);\n}\n.projectListBtn[_ngcontent-%COMP%] {\n  position: absolute;\n  width: 250px;\n  height: auto;\n  top: 30%;\n  left: 67%;\n  opacity: 0;\n  animation: _ngcontent-%COMP%_fadeIn 500ms 400ms ease-in-out forwards, _ngcontent-%COMP%_floating 2s 500ms ease-in-out infinite alternate;\n}\n.projectListBtn[_ngcontent-%COMP%]    > img[_ngcontent-%COMP%] {\n  content: url("./media/projects-icon.PNG");\n  width: 100%;\n  height: auto;\n}\n.projectListBtn[_ngcontent-%COMP%]    > img[_ngcontent-%COMP%]:hover {\n  width: 100%;\n  height: auto;\n  content: url("./media/projects-icon-hover.PNG");\n  transform: scale(1.1);\n  cursor: pointer;\n}\n.schneiderDiv[_ngcontent-%COMP%] {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  z-index: -10;\n}\n.schneiderDiv[_ngcontent-%COMP%]    > img[_ngcontent-%COMP%] {\n  width: 700px;\n  height: auto;\n  content: url("./media/schneider-layer-dive.GIF");\n  position: absolute;\n  top: 5%;\n  right: 52vw;\n  animation-fill-mode: forwards;\n  animation-name: _ngcontent-%COMP%_hiding;\n  animation-duration: 1ms;\n  animation-delay: 1108ms;\n  animation-iteration-count: 1;\n  animation-timing-function: linear;\n}\n@keyframes _ngcontent-%COMP%_hiding {\n  0%, 48% {\n    content: url("./media/schneider-layer-dive.GIF");\n    opacity: 1;\n  }\n  49% {\n    content: url("./media/schneider-layer-dive.GIF");\n    opacity: 0;\n  }\n  50% {\n    content: url("./media/schneider-layer-float.GIF");\n    opacity: 0;\n  }\n  51%, 100% {\n    content: url("./media/schneider-layer-float.GIF");\n    opacity: 1;\n  }\n}\n@keyframes _ngcontent-%COMP%_floating {\n  from {\n    transform: translateY(0vh);\n  }\n  to {\n    transform: translateY(2vh);\n  }\n}\n@keyframes _ngcontent-%COMP%_fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n@media only screen and (max-height: 600px) and (orientation: landscape), only screen and (min-width: 768px) and (max-width: 1024px), only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 1), only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 2), only screen and (min-device-width: 1112px) and (max-device-width: 1112px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 2), only screen and (min-device-width: 1366px) and (max-device-width: 1366px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 2) {\n  .schneiderDiv[_ngcontent-%COMP%]    > img[_ngcontent-%COMP%] {\n    width: 515px;\n    right: 55vw;\n  }\n  .galleriesLink[_ngcontent-%COMP%] {\n    width: 190px;\n  }\n  .timeLineLink[_ngcontent-%COMP%] {\n    width: 190px;\n  }\n  .projectListBtn[_ngcontent-%COMP%] {\n    width: 190px;\n  }\n  .projectModalContent[_ngcontent-%COMP%] {\n    transform: translate(-25px, -50%);\n  }\n  .projectListCloseBtn[_ngcontent-%COMP%] {\n    width: 50px;\n  }\n  .projectModalList[_ngcontent-%COMP%] {\n    padding: 5px;\n    border: solid 2px black;\n    border-radius: 10px;\n  }\n}\n@media only screen and (max-height: 400px) and (orientation: landscape), only screen and (min-width: 390px) and (max-width: 768px) and (orientation: landscape), only screen and (device-width: 360px) and (device-height: 640px) and (-webkit-device-pixel-ratio: 4) and (orientation: landscape), only screen and (min-device-width: 390px) and (max-device-width: 844px) and (-webkit-min-device-pixel-ratio: 4) and (orientation: landscape), only screen and (min-device-width: 414px) and (max-device-width: 736px) and (-webkit-min-device-pixel-ratio: 3) and (orientation: landscape), only screen and (min-device-width: 375px) and (max-device-width: 812px) and (-webkit-min-device-pixel-ratio: 3) and (orientation: landscape) {\n  .schneiderDiv[_ngcontent-%COMP%]    > img[_ngcontent-%COMP%] {\n    width: 340px;\n    right: 60vw;\n    top: -7vh;\n  }\n  .galleriesLink[_ngcontent-%COMP%] {\n    width: 160px;\n    left: 58%;\n  }\n  .timeLineLink[_ngcontent-%COMP%] {\n    width: 160px;\n    top: 23%;\n    left: 41%;\n  }\n  .projectListBtn[_ngcontent-%COMP%] {\n    width: 160px;\n    top: 20%;\n    left: 75%;\n  }\n  .projectModalContent[_ngcontent-%COMP%] {\n    transform: translate(-25px, -50%);\n  }\n  .projectListCloseBtn[_ngcontent-%COMP%] {\n    width: 50px;\n  }\n  .projectModalList[_ngcontent-%COMP%] {\n    padding: 5px;\n    border: solid 2px black;\n    border-radius: 10px;\n  }\n  .modalOnOthers[_ngcontent-%COMP%] {\n    display: none;\n  }\n  .modalOnPhone[_ngcontent-%COMP%] {\n    display: block;\n  }\n}\n@media only screen and (min-height: 1100px) and (orientation: landscape) {\n  .schneiderDiv[_ngcontent-%COMP%]    > img[_ngcontent-%COMP%] {\n    width: 1100px;\n    right: 60vw;\n  }\n  .galleriesLink[_ngcontent-%COMP%] {\n    width: 395px;\n  }\n  .timeLineLink[_ngcontent-%COMP%] {\n    width: 395px;\n  }\n  .projectListBtn[_ngcontent-%COMP%] {\n    width: 395px;\n  }\n  .projectModalContent[_ngcontent-%COMP%] {\n    transform: translate(-55px, -50%);\n  }\n  .projectListCloseBtn[_ngcontent-%COMP%] {\n    width: 110px;\n  }\n  .projectModalList[_ngcontent-%COMP%] {\n    padding: 10px;\n    border: solid 5px black;\n    border-radius: 25px;\n  }\n}\n/*# sourceMappingURL=data:application/json;base64, */'] });
var SunlightZoneComponent = _SunlightZoneComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(SunlightZoneComponent, { className: "SunlightZoneComponent", filePath: "src\\app\\sunlight-zone\\sunlight-zone.component.ts", lineNumber: 10 });
})();

// src/app/galleries/services/message.service.ts
var _MessageService = class _MessageService {
  constructor(httpClient) {
    this.httpClient = httpClient;
  }
  getMessages(level) {
    const messageUrl = MESSAGE_URL[level];
    const result = new Subject();
    let galleriesMessages = [];
    this.httpClient.request("GET", messageUrl, { responseType: "text" }).subscribe((data) => {
      const dataArr = data.split(/\r\n|\n/);
      for (let i = 1; i < dataArr.length; i++) {
        let record = dataArr[i].split(",");
        let message = record.slice(4).join().replace(/^"(.+)"$/, "$1");
        let galleriesMessage = {
          timestamp: record[0].trim() + record[1].trim(),
          dear: record[2].trim(),
          message,
          from: record[3].trim()
        };
        galleriesMessages.push(galleriesMessage);
      }
      result.next(galleriesMessages);
      result.complete();
    });
    return result;
  }
};
_MessageService.\u0275fac = function MessageService_Factory(t) {
  return new (t || _MessageService)(\u0275\u0275inject(HttpClient));
};
_MessageService.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _MessageService, factory: _MessageService.\u0275fac, providedIn: "root" });
var MessageService = _MessageService;

// src/app/galleries/galleries.component.ts
var _c05 = () => ({ value: "visible" });
function GalleriesComponent_div_12_Template(rf, ctx) {
  if (rf & 1) {
    const _r5 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 11)(1, "a", 12);
    \u0275\u0275listener("click", function GalleriesComponent_div_12_Template_a_click_1_listener() {
      const restoredCtx = \u0275\u0275restoreView(_r5);
      const pageNumber_r3 = restoredCtx.$implicit;
      const ctx_r4 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r4.selectGalleriesPage(pageNumber_r3));
    });
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const pageNumber_r3 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("@animation", \u0275\u0275pureFunction0(4, _c05));
    \u0275\u0275advance(1);
    \u0275\u0275classProp("selected", pageNumber_r3 === ctx_r0.currentPage);
    \u0275\u0275advance(1);
    \u0275\u0275textInterpolate1(" ", pageNumber_r3 + 1, " ");
  }
}
function GalleriesComponent_div_14_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 13);
    \u0275\u0275element(1, "img");
    \u0275\u0275elementEnd();
  }
}
function GalleriesComponent_div_15_div_1_div_6_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 20);
    \u0275\u0275text(1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const galleriesMessage_r7 = \u0275\u0275nextContext().$implicit;
    \u0275\u0275advance(1);
    \u0275\u0275textInterpolate(galleriesMessage_r7.message);
  }
}
function GalleriesComponent_div_15_div_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 16)(1, "div", 17)(2, "div");
    \u0275\u0275text(3, "Dear");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(4, "div");
    \u0275\u0275text(5);
    \u0275\u0275elementEnd()();
    \u0275\u0275template(6, GalleriesComponent_div_15_div_1_div_6_Template, 2, 1, "div", 18);
    \u0275\u0275elementStart(7, "div", 19);
    \u0275\u0275text(8);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const galleriesMessage_r7 = ctx.$implicit;
    \u0275\u0275advance(5);
    \u0275\u0275textInterpolate1("", (galleriesMessage_r7.dear == "Schneider (default)" ? "Schneider" : galleriesMessage_r7.dear) || "Schneider", ",");
    \u0275\u0275advance(1);
    \u0275\u0275property("ngIf", galleriesMessage_r7.message);
    \u0275\u0275advance(2);
    \u0275\u0275textInterpolate(galleriesMessage_r7.from || "Anonymous Honey");
  }
}
function GalleriesComponent_div_15_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 14);
    \u0275\u0275template(1, GalleriesComponent_div_15_div_1_Template, 9, 3, "div", 15);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r2 = \u0275\u0275nextContext();
    \u0275\u0275property("@animation", \u0275\u0275pureFunction0(2, _c05));
    \u0275\u0275advance(1);
    \u0275\u0275property("ngForOf", ctx_r2.galleriesMessagesPage);
  }
}
var _GalleriesComponent = class _GalleriesComponent {
  constructor(messageService, route) {
    this.messageService = messageService;
    this.route = route;
    this.galleriesMessages = [];
    this.galleriesMessagesPage = [];
    this.messageCount = 0;
    this.pageCountArr = [];
    this.pageCount = 1;
    this.currentPage = 0;
  }
  ngOnInit() {
    this.level = this.route.snapshot.params["level"];
    this.getGalleriesMessages();
  }
  getGalleriesMessages() {
    console.log("get galleries of", this.level);
    this.messageService.getMessages(this.level).subscribe((messages) => {
      this.galleriesMessages = messages;
      this.pageCount = Math.ceil(this.galleriesMessages.length / MAX_COUNT_PER_PAGE);
      this.pageCountArr = Array(this.pageCount).fill(0).map((x, i) => i);
      this.selectGalleriesPage(0);
      this.showMessageCount(this.galleriesMessages.length);
    });
  }
  selectGalleriesPage(selectedPage) {
    this.currentPage = selectedPage;
    let minIndex = selectedPage * MAX_COUNT_PER_PAGE;
    let maxIndex = (selectedPage + 1) * MAX_COUNT_PER_PAGE;
    this.galleriesMessagesPage = this.galleriesMessages.slice(minIndex, maxIndex);
  }
  showMessageCount(totalCount) {
    let startNum = Math.max(totalCount - 70, 0);
    this.counting(startNum, totalCount);
  }
  counting(curNum, endNum) {
    if (curNum <= endNum) {
      this.messageCount = curNum;
      setTimeout(() => {
        this.counting(curNum + 1, endNum);
      }, 10);
    }
  }
};
_GalleriesComponent.\u0275fac = function GalleriesComponent_Factory(t) {
  return new (t || _GalleriesComponent)(\u0275\u0275directiveInject(MessageService), \u0275\u0275directiveInject(ActivatedRoute));
};
_GalleriesComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _GalleriesComponent, selectors: [["app-galleries"]], inputs: { level: "level" }, decls: 17, vars: 10, consts: [[1, "layerContainer", "sunlightLayerContainer"], [3, "level", "sublevel"], [1, "galleriesToolBar"], [1, "sendBtnBar"], [1, "numberCounter"], ["href", "https://docs.google.com/forms/d/e/1FAIpQLSenvzwpl8PhVSUaEHiTr88JBhhwMVqFXQJ4JHTZl6sttVnOzQ/viewform?usp=sf_link", "target", "_blank"], [1, "paginationToolBar"], ["class", "page", 4, "ngFor", "ngForOf"], [1, "galleriesContainer"], ["class", "loadingDiv", 4, "ngIf"], ["class", "galleriesList", 4, "ngIf"], [1, "page"], [3, "click"], [1, "loadingDiv"], [1, "galleriesList"], ["class", "galleriesMessage", 4, "ngFor", "ngForOf"], [1, "galleriesMessage"], [1, "messageDear"], ["class", "messageText", 4, "ngIf"], [1, "messageFrom"], [1, "messageText"]], template: function GalleriesComponent_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 0);
    \u0275\u0275element(1, "app-tool-bar", 1);
    \u0275\u0275elementStart(2, "div", 2)(3, "div", 3)(4, "h2", 4);
    \u0275\u0275text(5, "Number of Letters: ");
    \u0275\u0275elementStart(6, "span");
    \u0275\u0275text(7);
    \u0275\u0275pipe(8, "number");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(9, "a", 5);
    \u0275\u0275text(10, " Write A Letter ");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(11, "div", 6);
    \u0275\u0275template(12, GalleriesComponent_div_12_Template, 3, 5, "div", 7);
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(13, "div", 8);
    \u0275\u0275template(14, GalleriesComponent_div_14_Template, 2, 0, "div", 9)(15, GalleriesComponent_div_15_Template, 2, 3, "div", 10);
    \u0275\u0275elementEnd();
    \u0275\u0275element(16, "app-sunlight-zone-bg");
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    \u0275\u0275advance(1);
    \u0275\u0275property("level", ctx.level)("sublevel", "Letters to Schneider");
    \u0275\u0275advance(6);
    \u0275\u0275textInterpolate(\u0275\u0275pipeBind3(8, 6, ctx.messageCount, "1.0", "en-US"));
    \u0275\u0275advance(5);
    \u0275\u0275property("ngForOf", ctx.pageCountArr);
    \u0275\u0275advance(2);
    \u0275\u0275property("ngIf", !ctx.galleriesMessages.length);
    \u0275\u0275advance(1);
    \u0275\u0275property("ngIf", ctx.galleriesMessages.length);
  }
}, dependencies: [NgForOf, NgIf, ToolBarComponent, SunlightZoneBgComponent, DecimalPipe], styles: ['\n\n.galleriesToolBar[_ngcontent-%COMP%] {\n  width: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: end;\n  row-gap: 10px;\n  margin: 10px 0;\n  font-weight: bold;\n  text-shadow: 0px 0px 5px #53babf;\n}\n.sendBtnBar[_ngcontent-%COMP%] {\n  width: 100%;\n  font-style: italic;\n}\n.sendBtnBar[_ngcontent-%COMP%]    > a[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 50px;\n  right: 4%;\n  transform: translateY(50%);\n  border: white solid 2px;\n  border-radius: 0.8rem;\n  padding: 3px 7px;\n}\n.sendBtnBar[_ngcontent-%COMP%]    > a[_ngcontent-%COMP%]:hover {\n  box-shadow: 0 0 0.5rem white;\n}\n.numberCounter[_ngcontent-%COMP%]    > span[_ngcontent-%COMP%] {\n  width: 5rem;\n  display: inline-block;\n}\n.paginationToolBar[_ngcontent-%COMP%] {\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  column-gap: 10px;\n  margin-bottom: 5px;\n}\n.page[_ngcontent-%COMP%] {\n  border-left: solid 2px white;\n  padding-left: 10px;\n}\n.page[_ngcontent-%COMP%]:nth-child(1) {\n  border: none;\n}\n.page[_ngcontent-%COMP%]    > a[_ngcontent-%COMP%] {\n  padding: 5px;\n}\n.page[_ngcontent-%COMP%]    > a[_ngcontent-%COMP%]:hover {\n  color: #ebebeb;\n  cursor: pointer;\n}\n.selected[_ngcontent-%COMP%] {\n  border-top: solid 2px white;\n  border-bottom: solid 2px white;\n}\n.galleriesContainer[_ngcontent-%COMP%] {\n  height: 100%;\n  width: 100%;\n  overflow-y: scroll;\n  display: inline-block;\n  position: relative;\n}\n.galleriesList[_ngcontent-%COMP%] {\n  width: 90%;\n  margin: 0 auto;\n  column-count: 5;\n  gap: 45px;\n  transform: translateX(-15px);\n  margin-bottom: 40vh;\n}\n.galleriesMessage[_ngcontent-%COMP%] {\n  width: 100%;\n  height: auto;\n  display: inline-block;\n  background-color: rgba(255, 250, 239, 0.8);\n  border: solid white 2px;\n  border-radius: 5px;\n  color: black;\n  margin: 17px;\n  padding: 10px;\n}\n.loadingDiv[_ngcontent-%COMP%] {\n  width: 100%;\n  height: 100%;\n}\n.loadingDiv[_ngcontent-%COMP%]    > img[_ngcontent-%COMP%] {\n  content: url("./media/loading-icon.PNG");\n  width: 70px;\n  height: auto;\n  position: absolute;\n  top: 30%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  animation: _ngcontent-%COMP%_spin 1s linear infinite;\n}\n.messageFrom[_ngcontent-%COMP%] {\n  padding: 10px 0px;\n  text-align: right;\n  font-style: italic;\n}\n.messageDear[_ngcontent-%COMP%] {\n  padding-bottom: 20px;\n  text-align: left;\n  flex-direction: column;\n  font-style: italic;\n}\n.messageText[_ngcontent-%COMP%] {\n  width: 100%;\n  height: auto;\n  padding-top: 5px;\n  padding-bottom: 20px;\n  text-align: left;\n  font-size: 0.9rem;\n}\n@keyframes _ngcontent-%COMP%_spin {\n  from {\n    transform: translate(-50%, -50%) rotate(0deg);\n  }\n  to {\n    transform: translate(-50%, -50%) rotate(360deg);\n  }\n}\n@media only screen and (max-height: 600px) and (orientation: landscape), only screen and (min-width: 768px) and (max-width: 1024px), only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 1), only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 2), only screen and (min-device-width: 1112px) and (max-device-width: 1112px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 2), only screen and (min-device-width: 1366px) and (max-device-width: 1366px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 2) {\n  .galleriesList[_ngcontent-%COMP%] {\n    column-count: 3;\n  }\n  .galleriesToolBar[_ngcontent-%COMP%] {\n    row-gap: 0px;\n    margin: 10px 0;\n  }\n  .sendBtnBar[_ngcontent-%COMP%]    > h2[_ngcontent-%COMP%] {\n    margin-top: 0px;\n  }\n  .paginationToolBar[_ngcontent-%COMP%] {\n    column-gap: 3px;\n    font-size: 0.8rem;\n  }\n  .page[_ngcontent-%COMP%] {\n    padding-left: 3px;\n  }\n}\n@media only screen and (max-height: 400px) and (orientation: landscape), only screen and (min-width: 390px) and (max-width: 768px) and (orientation: landscape), only screen and (device-width: 360px) and (device-height: 640px) and (-webkit-device-pixel-ratio: 4) and (orientation: landscape), only screen and (min-device-width: 390px) and (max-device-width: 844px) and (-webkit-min-device-pixel-ratio: 4) and (orientation: landscape), only screen and (min-device-width: 414px) and (max-device-width: 736px) and (-webkit-min-device-pixel-ratio: 3) and (orientation: landscape), only screen and (min-device-width: 375px) and (max-device-width: 812px) and (-webkit-min-device-pixel-ratio: 3) and (orientation: landscape) {\n  .galleriesList[_ngcontent-%COMP%] {\n    column-count: 3;\n  }\n  .galleriesToolBar[_ngcontent-%COMP%] {\n    row-gap: 0px;\n    margin: 5px 0;\n  }\n  .sendBtnBar[_ngcontent-%COMP%] {\n    display: flex;\n    flex-direction: column;\n    column-gap: 0px;\n    justify-content: end;\n    align-items: flex-end;\n    padding-bottom: 5px;\n  }\n  .sendBtnBar[_ngcontent-%COMP%]    > a[_ngcontent-%COMP%] {\n    position: relative;\n    top: -6px;\n    right: 4%;\n    border-radius: 0.5rem;\n  }\n  .sendBtnBar[_ngcontent-%COMP%]    > h2[_ngcontent-%COMP%] {\n    margin-top: 0px;\n    margin-bottom: 0px;\n    width: fit-content;\n  }\n  .paginationToolBar[_ngcontent-%COMP%] {\n    column-gap: 3px;\n    font-size: 0.7rem;\n    width: fit-content;\n    position: absolute;\n    top: 60px;\n    left: 4%;\n  }\n  .page[_ngcontent-%COMP%] {\n    padding-left: 3px;\n  }\n  .messageFrom[_ngcontent-%COMP%] {\n    font-size: 0.9rem;\n  }\n  .messageDear[_ngcontent-%COMP%] {\n    font-size: 0.9rem;\n  }\n  .messageText[_ngcontent-%COMP%] {\n    font-size: 0.8rem;\n  }\n}\n@media only screen and (max-width: 800px) {\n  .galleriesList[_ngcontent-%COMP%] {\n    column-count: 3;\n  }\n  .loadingDiv[_ngcontent-%COMP%]    > img[_ngcontent-%COMP%] {\n    width: 50px;\n  }\n}\n/*# sourceMappingURL=data:application/json;base64, */'], data: { animation: [
  trigger("animation", [
    transition("void => visible", [
      style({ opacity: 0 }),
      animate("500ms", style({ opacity: 1 }))
    ]),
    transition("visible => void", [
      style({ opacity: 1 }),
      animate("500ms", style({ opacity: 0 }))
    ])
  ])
] } });
var GalleriesComponent = _GalleriesComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(GalleriesComponent, { className: "GalleriesComponent", filePath: "src\\app\\galleries\\galleries.component.ts", lineNumber: 25 });
})();

// src/app/time-line/time-line.component.ts
var _TimeLineComponent = class _TimeLineComponent {
  constructor(route) {
    this.route = route;
  }
  ngOnInit() {
    this.level = this.route.snapshot.params["level"];
  }
  monthSelect(monthId) {
    const monthIdDiv = document.getElementById(monthId);
    if (monthIdDiv != null) {
      document.getElementById("timeLineContainer")?.scrollTo({
        top: monthIdDiv.offsetTop - 30,
        behavior: "smooth"
      });
    }
  }
};
_TimeLineComponent.\u0275fac = function TimeLineComponent_Factory(t) {
  return new (t || _TimeLineComponent)(\u0275\u0275directiveInject(ActivatedRoute));
};
_TimeLineComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _TimeLineComponent, selectors: [["app-time-line"]], decls: 2604, vars: 2, consts: [[1, "layerContainer", "sunlightLayerContainer"], [3, "level", "sublevel"], [1, "timeLineToolBar"], [1, "monthDiv", "fullMonth"], [3, "click"], [1, "monthDiv", "shortMonth"], ["id", "timeLineContainer", 1, "timeLineContainer"], [1, "timeLineContent"], ["id", "marHead", 1, "monthHead"], [1, "title"], [1, "info"], [1, "underline", 2, "transform", "rotate(0deg) translate(0.5rem, 0px)"], [1, "underline", 2, "transform", "rotate(0deg) translate(102px, 0px)"], [1, "number"], [1, "highlight"], [1, "music"], [1, "underline"], [1, "goods"], ["id", "aprHead", 1, "monthHead"], [1, "congrats"], [1, "underline", 2, "transform", "rotate(-8deg) translate(0.5rem, -18px)"], [1, "underline", 2, "transform", "rotate(-8deg) translate(5.5rem, -20px)"], [1, "underline", 2, "transform", "rotate(-8deg) translate(0.5rem, -20px)"], [1, "underline", 2, "transform", "rotate(-8deg) translate(0.5rem, 5px)"], [1, "member"], ["id", "mayHead", 1, "monthHead"], [1, "collab"], ["id", "junHead", 1, "monthHead"], ["id", "julHead", 1, "monthHead"], ["id", "augHead", 1, "monthHead"], ["id", "sepHead", 1, "monthHead"], ["id", "octHead", 1, "monthHead"], ["id", "novHead", 1, "monthHead"], ["id", "decHead", 1, "monthHead"], ["id", "janHead", 1, "monthHead"], ["id", "febHead", 1, "monthHead"]], template: function TimeLineComponent_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 0);
    \u0275\u0275element(1, "app-tool-bar", 1);
    \u0275\u0275elementStart(2, "div", 2)(3, "div", 3)(4, "a", 4);
    \u0275\u0275listener("click", function TimeLineComponent_Template_a_click_4_listener() {
      return ctx.monthSelect("marHead");
    });
    \u0275\u0275text(5, "2023");
    \u0275\u0275element(6, "br");
    \u0275\u0275text(7, "March");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(8, "div", 3)(9, "a", 4);
    \u0275\u0275listener("click", function TimeLineComponent_Template_a_click_9_listener() {
      return ctx.monthSelect("aprHead");
    });
    \u0275\u0275text(10, "2023");
    \u0275\u0275element(11, "br");
    \u0275\u0275text(12, "April");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(13, "div", 3)(14, "a", 4);
    \u0275\u0275listener("click", function TimeLineComponent_Template_a_click_14_listener() {
      return ctx.monthSelect("mayHead");
    });
    \u0275\u0275text(15, "2023");
    \u0275\u0275element(16, "br");
    \u0275\u0275text(17, "May");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(18, "div", 3)(19, "a", 4);
    \u0275\u0275listener("click", function TimeLineComponent_Template_a_click_19_listener() {
      return ctx.monthSelect("junHead");
    });
    \u0275\u0275text(20, "2023");
    \u0275\u0275element(21, "br");
    \u0275\u0275text(22, "June");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(23, "div", 3)(24, "a", 4);
    \u0275\u0275listener("click", function TimeLineComponent_Template_a_click_24_listener() {
      return ctx.monthSelect("julHead");
    });
    \u0275\u0275text(25, "2023");
    \u0275\u0275element(26, "br");
    \u0275\u0275text(27, "July");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(28, "div", 3)(29, "a", 4);
    \u0275\u0275listener("click", function TimeLineComponent_Template_a_click_29_listener() {
      return ctx.monthSelect("augHead");
    });
    \u0275\u0275text(30, "2023");
    \u0275\u0275element(31, "br");
    \u0275\u0275text(32, "August");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(33, "div", 3)(34, "a", 4);
    \u0275\u0275listener("click", function TimeLineComponent_Template_a_click_34_listener() {
      return ctx.monthSelect("sepHead");
    });
    \u0275\u0275text(35, "2023");
    \u0275\u0275element(36, "br");
    \u0275\u0275text(37, "September");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(38, "div", 3)(39, "a", 4);
    \u0275\u0275listener("click", function TimeLineComponent_Template_a_click_39_listener() {
      return ctx.monthSelect("octHead");
    });
    \u0275\u0275text(40, "2023");
    \u0275\u0275element(41, "br");
    \u0275\u0275text(42, "October");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(43, "div", 3)(44, "a", 4);
    \u0275\u0275listener("click", function TimeLineComponent_Template_a_click_44_listener() {
      return ctx.monthSelect("novHead");
    });
    \u0275\u0275text(45, "2023");
    \u0275\u0275element(46, "br");
    \u0275\u0275text(47, "November");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(48, "div", 3)(49, "a", 4);
    \u0275\u0275listener("click", function TimeLineComponent_Template_a_click_49_listener() {
      return ctx.monthSelect("decHead");
    });
    \u0275\u0275text(50, "2023");
    \u0275\u0275element(51, "br");
    \u0275\u0275text(52, "December");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(53, "div", 3)(54, "a", 4);
    \u0275\u0275listener("click", function TimeLineComponent_Template_a_click_54_listener() {
      return ctx.monthSelect("janHead");
    });
    \u0275\u0275text(55, "2024");
    \u0275\u0275element(56, "br");
    \u0275\u0275text(57, "January");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(58, "div", 3)(59, "a", 4);
    \u0275\u0275listener("click", function TimeLineComponent_Template_a_click_59_listener() {
      return ctx.monthSelect("febHead");
    });
    \u0275\u0275text(60, "2024");
    \u0275\u0275element(61, "br");
    \u0275\u0275text(62, "February");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(63, "div", 5)(64, "a", 4);
    \u0275\u0275listener("click", function TimeLineComponent_Template_a_click_64_listener() {
      return ctx.monthSelect("marHead");
    });
    \u0275\u0275text(65, "23.03");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(66, "div", 5)(67, "a", 4);
    \u0275\u0275listener("click", function TimeLineComponent_Template_a_click_67_listener() {
      return ctx.monthSelect("aprHead");
    });
    \u0275\u0275text(68, "23.04");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(69, "div", 5)(70, "a", 4);
    \u0275\u0275listener("click", function TimeLineComponent_Template_a_click_70_listener() {
      return ctx.monthSelect("mayHead");
    });
    \u0275\u0275text(71, "23.05");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(72, "div", 5)(73, "a", 4);
    \u0275\u0275listener("click", function TimeLineComponent_Template_a_click_73_listener() {
      return ctx.monthSelect("junHead");
    });
    \u0275\u0275text(74, "23.06");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(75, "div", 5)(76, "a", 4);
    \u0275\u0275listener("click", function TimeLineComponent_Template_a_click_76_listener() {
      return ctx.monthSelect("julHead");
    });
    \u0275\u0275text(77, "23.07");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(78, "div", 5)(79, "a", 4);
    \u0275\u0275listener("click", function TimeLineComponent_Template_a_click_79_listener() {
      return ctx.monthSelect("augHead");
    });
    \u0275\u0275text(80, "23.08");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(81, "div", 5)(82, "a", 4);
    \u0275\u0275listener("click", function TimeLineComponent_Template_a_click_82_listener() {
      return ctx.monthSelect("sepHead");
    });
    \u0275\u0275text(83, "23.09");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(84, "div", 5)(85, "a", 4);
    \u0275\u0275listener("click", function TimeLineComponent_Template_a_click_85_listener() {
      return ctx.monthSelect("octHead");
    });
    \u0275\u0275text(86, "23.10");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(87, "div", 5)(88, "a", 4);
    \u0275\u0275listener("click", function TimeLineComponent_Template_a_click_88_listener() {
      return ctx.monthSelect("novHead");
    });
    \u0275\u0275text(89, "23.11");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(90, "div", 5)(91, "a", 4);
    \u0275\u0275listener("click", function TimeLineComponent_Template_a_click_91_listener() {
      return ctx.monthSelect("decHead");
    });
    \u0275\u0275text(92, "23.12");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(93, "div", 5)(94, "a", 4);
    \u0275\u0275listener("click", function TimeLineComponent_Template_a_click_94_listener() {
      return ctx.monthSelect("janHead");
    });
    \u0275\u0275text(95, "24.01");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(96, "div", 5)(97, "a", 4);
    \u0275\u0275listener("click", function TimeLineComponent_Template_a_click_97_listener() {
      return ctx.monthSelect("febHead");
    });
    \u0275\u0275text(98, "24.02");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(99, "div", 6)(100, "div", 7)(101, "h2", 8);
    \u0275\u0275text(102, "March 2023");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(103, "ul")(104, "li");
    \u0275\u0275element(105, "span");
    \u0275\u0275elementStart(106, "div")(107, "div", 9);
    \u0275\u0275text(108, "Celestial Operation: ORION");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(109, "div", 10);
    \u0275\u0275text(110, "[Post] \u0E0A\u0E19\u0E14\u0E40\u0E23\u0E34\u0E48\u0E21\u0E40\u0E25\u0E48\u0E19\u0E17\u0E27\u0E34\u0E15 /\u0E2D\u0E31\u0E1B\u0E23\u0E39\u0E1B\u0E14\u0E34\u0E2A\u0E15\u0E31\u0E27\u0E40\u0E2D\u0E07\u0E44\u0E21\u0E48\u0E44\u0E14\u0E49");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(111, "div", 10);
    \u0275\u0275text(112, "[Tag] \u0E01\u0E33\u0E40\u0E19\u0E34\u0E14 ");
    \u0275\u0275elementStart(113, "span", 11);
    \u0275\u0275text(114, "#KrakenClass");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(115, "span", 12);
    \u0275\u0275text(116, "#KrakenLust");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(117, "span", 13)(118, "span");
    \u0275\u0275text(119, "Mar 14");
    \u0275\u0275elementEnd();
    \u0275\u0275element(120, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(121, "li", 14)(122, "div");
    \u0275\u0275element(123, "span");
    \u0275\u0275elementStart(124, "div", 9);
    \u0275\u0275text(125, "Escape from the sky \u300CORION\u300D");
    \u0275\u0275elementEnd();
    \u0275\u0275element(126, "img", 15);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(127, "span", 13)(128, "span");
    \u0275\u0275text(129, "Mar 20");
    \u0275\u0275elementEnd();
    \u0275\u0275element(130, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(131, "li")(132, "div");
    \u0275\u0275element(133, "span");
    \u0275\u0275elementStart(134, "div", 9);
    \u0275\u0275text(135, "[Live Debut] ");
    \u0275\u0275elementStart(136, "span", 16);
    \u0275\u0275text(137, "\u0E04\u0E25\u0E32\u0E2A\u0E41\u0E23\u0E01");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(138, "div", 9);
    \u0275\u0275text(139, "ORION Debut Goods");
    \u0275\u0275elementEnd();
    \u0275\u0275element(140, "img", 17);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(141, "span", 13)(142, "span");
    \u0275\u0275text(143, "Mar 25");
    \u0275\u0275elementEnd();
    \u0275\u0275element(144, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(145, "li", 14)(146, "div");
    \u0275\u0275element(147, "span");
    \u0275\u0275elementStart(148, "div", 9);
    \u0275\u0275text(149, "The Deep's Desire\u300C Schneider\u300D");
    \u0275\u0275elementEnd();
    \u0275\u0275element(150, "img", 15);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(151, "span", 13)(152, "span");
    \u0275\u0275text(153, "Mar 26");
    \u0275\u0275elementEnd();
    \u0275\u0275element(154, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(155, "li")(156, "div");
    \u0275\u0275element(157, "span");
    \u0275\u0275elementStart(158, "div", 9);
    \u0275\u0275text(159, "[LIVE] \u0E2D\u0E48\u0E32\u0E19\u0E42\u0E14\u0E40\u0E19\u0E17 \u0E44\u0E21\u0E48\u0E43\u0E0A\u0E48 ClickBait ");
    \u0275\u0275elementStart(160, "span", 16);
    \u0275\u0275text(161, "\u0E44\u0E25\u0E1F\u0E4C\u0E41\u0E23\u0E01!!");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(162, "span", 13)(163, "span");
    \u0275\u0275text(164, "Mar 26");
    \u0275\u0275elementEnd();
    \u0275\u0275element(165, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(166, "li")(167, "div");
    \u0275\u0275element(168, "span");
    \u0275\u0275elementStart(169, "div", 9);
    \u0275\u0275text(170, "[LIVE] \u0E40\u0E25\u0E48\u0E32\u0E41\u0E19\u0E27\u0E04\u0E34\u0E14\u0E15\u0E2D\u0E19\u0E41\u0E15\u0E48\u0E07\u0E40\u0E1E\u0E25\u0E07 EFTS \u0E41\u0E15\u0E48\u0E25\u0E30 ver.");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(171, "span", 13)(172, "span");
    \u0275\u0275text(173, "Mar 27");
    \u0275\u0275elementEnd();
    \u0275\u0275element(174, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(175, "li")(176, "div");
    \u0275\u0275element(177, "span");
    \u0275\u0275elementStart(178, "div", 9);
    \u0275\u0275text(179, "[LIVE] KARAOKE");
    \u0275\u0275elementStart(180, "span", 16);
    \u0275\u0275text(181, "\u0E42\u0E2D\u0E49\u0E17\u0E32\u0E23\u0E01");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(182, "span", 13)(183, "span");
    \u0275\u0275text(184, "Mar 28");
    \u0275\u0275elementEnd();
    \u0275\u0275element(185, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(186, "li")(187, "div");
    \u0275\u0275element(188, "span");
    \u0275\u0275elementStart(189, "div", 9);
    \u0275\u0275text(190, "[LIVE] Assign \u0E14\u0E48\u0E27\u0E19 Free Talk");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(191, "span", 13)(192, "span");
    \u0275\u0275text(193, "Mar 29");
    \u0275\u0275elementEnd();
    \u0275\u0275element(194, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(195, "li")(196, "div");
    \u0275\u0275element(197, "span");
    \u0275\u0275elementStart(198, "div", 9);
    \u0275\u0275text(199, "[LIVE] Perfume Class");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(200, "span", 13)(201, "span");
    \u0275\u0275text(202, "Mar 30");
    \u0275\u0275elementEnd();
    \u0275\u0275element(203, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(204, "li")(205, "div");
    \u0275\u0275element(206, "span");
    \u0275\u0275elementStart(207, "div", 9);
    \u0275\u0275text(208, "[LIVE] Pico Park ft. ORION");
    \u0275\u0275elementStart(209, "span", 16);
    \u0275\u0275text(210, "\u0E23\u0E35\u0E40\u0E1F\u0E25\u0E01\u0E0B\u0E4C\u0E04\u0E19\u0E41\u0E01\u0E48");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(211, "span", 13)(212, "span");
    \u0275\u0275text(213, "Mar 31");
    \u0275\u0275elementEnd();
    \u0275\u0275element(214, "span");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(215, "h2", 18);
    \u0275\u0275text(216, "April 2023");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(217, "ul")(218, "li", 14)(219, "div");
    \u0275\u0275element(220, "span");
    \u0275\u0275elementStart(221, "div", 9);
    \u0275\u0275text(222, "ARP x Cos Nishi");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(223, "div", 10);
    \u0275\u0275text(224, "\u0E40\u0E2A\u0E37\u0E49\u0E2D\u0E42\u0E2D\u0E49\u0E17\u0E32\u0E23\u0E01, sticker, mouse pad EFTS");
    \u0275\u0275elementEnd();
    \u0275\u0275element(225, "img", 19);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(226, "span", 13)(227, "span");
    \u0275\u0275text(228, "Apr 02");
    \u0275\u0275elementEnd();
    \u0275\u0275element(229, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(230, "li")(231, "div");
    \u0275\u0275element(232, "span");
    \u0275\u0275elementStart(233, "div", 9);
    \u0275\u0275text(234, "[LIVE] Free Talk \u0E1C\u0E39\u0E49\u0E0A\u0E32\u0E22\u0E23\u0E32\u0E04\u0E32\u0E41\u0E1E\u0E07");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(235, "span", 13)(236, "span");
    \u0275\u0275text(237, "Apr 03");
    \u0275\u0275elementEnd();
    \u0275\u0275element(238, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(239, "li")(240, "div");
    \u0275\u0275element(241, "span");
    \u0275\u0275elementStart(242, "div", 9);
    \u0275\u0275text(243, "[LIVE] Who's your daddy ft. ORION");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(244, "span", 13)(245, "span");
    \u0275\u0275text(246, "Apr 04");
    \u0275\u0275elementEnd();
    \u0275\u0275element(247, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(248, "li")(249, "div");
    \u0275\u0275element(250, "span");
    \u0275\u0275elementStart(251, "div", 9);
    \u0275\u0275text(252, "[LIVE] \u0E40\u0E1B\u0E34\u0E14\u0E42\u0E1B\u0E23\u0E40\u0E08\u0E01\u0E15\u0E4C EFTS ft. Zekai");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(253, "span", 13)(254, "span");
    \u0275\u0275text(255, "Apr 05");
    \u0275\u0275elementEnd();
    \u0275\u0275element(256, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(257, "li", 14)(258, "div");
    \u0275\u0275element(259, "span");
    \u0275\u0275elementStart(260, "div", 9);
    \u0275\u0275text(261, "Schneider - Sarushibai [Thai ver.]");
    \u0275\u0275elementStart(262, "span", 16);
    \u0275\u0275text(263, "\u0E02\u0E2D\u0E15\u0E31\u0E27\u0E25\u0E32\u0E01\u0E48\u0E2D\u0E19~");
    \u0275\u0275elementEnd()();
    \u0275\u0275element(264, "img", 15);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(265, "span", 13)(266, "span");
    \u0275\u0275text(267, "Apr 06");
    \u0275\u0275elementEnd();
    \u0275\u0275element(268, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(269, "li")(270, "div");
    \u0275\u0275element(271, "span");
    \u0275\u0275elementStart(272, "div", 9);
    \u0275\u0275text(273, "[Voice] Just wake up at the middle of the night");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(274, "span", 13)(275, "span");
    \u0275\u0275text(276, "Apr 08");
    \u0275\u0275elementEnd();
    \u0275\u0275element(277, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(278, "li")(279, "div");
    \u0275\u0275element(280, "span");
    \u0275\u0275elementStart(281, "div", 9);
    \u0275\u0275text(282, "[LIVE] Membership Open ");
    \u0275\u0275elementStart(283, "span", 20);
    \u0275\u0275text(284, "\u0E19\u0E23.\u0E2B\u0E19\u0E49\u0E32\u0E2B\u0E49\u0E2D\u0E07");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(285, "span", 16);
    \u0275\u0275text(286, "\u0E41\u0E21\u0E48\u0E04\u0E49\u0E32\u0E15\u0E32\u0E21\u0E2A\u0E31\u0E48\u0E07/\u0E1C\u0E31\u0E14\u0E44\u0E17\u0E22\u0E2A\u0E38\u0E14\u0E2A\u0E27\u0E22\u0E2B\u0E4C");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(287, "span", 21);
    \u0275\u0275text(288, "\u0E40\u0E08\u0E49\u0E32\u0E02\u0E2D\u0E07\u0E42\u0E23\u0E07\u0E07\u0E32\u0E19");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(289, "span", 13)(290, "span");
    \u0275\u0275text(291, "Apr 11");
    \u0275\u0275elementEnd();
    \u0275\u0275element(292, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(293, "li")(294, "div");
    \u0275\u0275element(295, "span");
    \u0275\u0275elementStart(296, "div", 9);
    \u0275\u0275text(297, "[LIVE] Free Talk \u0E01\u0E2D\u0E07\u0E42\u0E08\u0E23 \u0E01\u0E34\u0E19\u0E1C\u0E31\u0E14\u0E44\u0E17\u0E22");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(298, "span", 13)(299, "span");
    \u0275\u0275text(300, "Apr 12");
    \u0275\u0275elementEnd();
    \u0275\u0275element(301, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(302, "li")(303, "div");
    \u0275\u0275element(304, "span");
    \u0275\u0275elementStart(305, "div", 9);
    \u0275\u0275text(306, "[LIVE] Free Talk \u0E23\u0E14\u0E19\u0E49\u0E33\u0E14\u0E33\u0E2B\u0E31\u0E27 \u0E04\u0E25\u0E49\u0E2D\u0E07\u0E1E\u0E27\u0E07\u0E21\u0E32\u0E25\u0E31\u0E22 ");
    \u0275\u0275elementStart(307, "span", 22);
    \u0275\u0275text(308, "\u0E43\u0E1A\u0E49\u0E2B\u0E27\u0E22\u0E42\u0E14\u0E22\u0E21\u0E32\u0E23\u0E27\u0E22");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(309, "span", 23);
    \u0275\u0275text(310, "\u0E2D\u0E27\u0E22\u0E22\u0E28\u0E40\u0E15\u0E47\u0E21");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(311, "span", 13)(312, "span");
    \u0275\u0275text(313, "Apr 14");
    \u0275\u0275elementEnd();
    \u0275\u0275element(314, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(315, "li")(316, "div");
    \u0275\u0275element(317, "span");
    \u0275\u0275elementStart(318, "div", 9);
    \u0275\u0275text(319, "[LIVE] Ghost Watchers ft. ORION");
    \u0275\u0275elementStart(320, "span", 16);
    \u0275\u0275text(321, "\u0E01\u0E33\u0E40\u0E19\u0E34\u0E14\u0E04\u0E19\u0E15\u0E48\u0E2D\u0E22\u0E1C\u0E35");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(322, "span", 13)(323, "span");
    \u0275\u0275text(324, "Apr 15");
    \u0275\u0275elementEnd();
    \u0275\u0275element(325, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(326, "li")(327, "div");
    \u0275\u0275element(328, "span");
    \u0275\u0275elementStart(329, "div", 9);
    \u0275\u0275text(330, "[LIVE] 36 Questions To Fall In Love ft. Evalia");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(331, "span", 13)(332, "span");
    \u0275\u0275text(333, "Apr 16");
    \u0275\u0275elementEnd();
    \u0275\u0275element(334, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(335, "li")(336, "div");
    \u0275\u0275element(337, "span");
    \u0275\u0275elementStart(338, "div", 9);
    \u0275\u0275text(339, "[LIVE] Talking \u0E40\u0E01\u0E35\u0E48\u0E22\u0E27\u0E01\u0E31\u0E1A\u0E01\u0E32\u0E23\u0E40\u0E02\u0E35\u0E22\u0E19\u0E40\u0E19\u0E37\u0E49\u0E2D Sarushibai");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(340, "div", 9);
    \u0275\u0275text(341, "[Membership] ASMR \u0E2D\u0E48\u0E32\u0E19\u0E2B\u0E19\u0E31\u0E07\u0E2A\u0E37\u0E2D");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(342, "div", 9);
    \u0275\u0275text(343, "[PIC] \u0E41\u0E01\u0E49\u0E27\u0E40\u0E2B\u0E25\u0E49\u0E32\u0E0A\u0E32 mix berry & Keyboard RK H81");
    \u0275\u0275elementEnd();
    \u0275\u0275element(344, "img", 24);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(345, "span", 13)(346, "span");
    \u0275\u0275text(347, "Apr 17");
    \u0275\u0275elementEnd();
    \u0275\u0275element(348, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(349, "li")(350, "div");
    \u0275\u0275element(351, "span");
    \u0275\u0275elementStart(352, "div", 9);
    \u0275\u0275text(353, "[Voice] \u0E2D\u0E22\u0E48\u0E32\u0E40\u0E17\u0E35\u0E48\u0E22\u0E27\u0E44\u0E1B\u0E2D\u0E49\u0E32\u0E07\u0E27\u0E48\u0E32\u0E40\u0E1B\u0E47\u0E19\u0E25\u0E39\u0E01\u0E02\u0E2D\u0E07\u0E44\u0E1B\u0E4B\u0E2B\u0E39\u0E48");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(354, "span", 13)(355, "span");
    \u0275\u0275text(356, "Apr 20");
    \u0275\u0275elementEnd();
    \u0275\u0275element(357, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(358, "li")(359, "div");
    \u0275\u0275element(360, "span");
    \u0275\u0275elementStart(361, "div", 9);
    \u0275\u0275text(362, "[Voice] \u0E40\u0E21\u0E32\u0E41\u0E25\u0E49\u0E27\u0E2E\u0E31\u0E21\u0E40\u0E19\u0E37\u0E49\u0E2D Summer breeze");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(363, "div", 9);
    \u0275\u0275text(364, "[Voice] \u0E23\u0E49\u0E2D\u0E07\u0E40\u0E1E\u0E25\u0E07\u0E27\u0E34\u0E21\u0E32\u0E19\u0E14\u0E34\u0E19");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(365, "span", 13)(366, "span");
    \u0275\u0275text(367, "Apr 22");
    \u0275\u0275elementEnd();
    \u0275\u0275element(368, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(369, "li")(370, "div");
    \u0275\u0275element(371, "span");
    \u0275\u0275elementStart(372, "div", 9);
    \u0275\u0275text(373, "[Tag] \u0E01\u0E33\u0E40\u0E19\u0E34\u0E14");
    \u0275\u0275elementStart(374, "span", 11);
    \u0275\u0275text(375, "#schneitaste");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(376, "span", 13)(377, "span");
    \u0275\u0275text(378, "Apr 23");
    \u0275\u0275elementEnd();
    \u0275\u0275element(379, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(380, "li")(381, "div");
    \u0275\u0275element(382, "span");
    \u0275\u0275elementStart(383, "div", 9);
    \u0275\u0275text(384, "[LIVE] \u0E01\u0E2D\u0E07\u0E42\u0E08\u0E23 \u0E21\u0E32\u0E19\u0E31\u0E48\u0E07\u0E2B\u0E32\u0E22\u0E43\u0E08\u0E43\u0E2B\u0E49\u0E1F\u0E31\u0E07");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(385, "div", 9);
    \u0275\u0275text(386, "[LIVE] \u0E40\u0E25\u0E48\u0E32\u0E40\u0E23\u0E37\u0E48\u0E2D\u0E07");
    \u0275\u0275elementStart(387, "s");
    \u0275\u0275text(388, " \u0E1C\u0E35 ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(389, "span", 16);
    \u0275\u0275text(390, "\u0E2A\u0E38\u0E01\u0E35\u0E49!");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(391, "span", 13)(392, "span");
    \u0275\u0275text(393, "Apr 24");
    \u0275\u0275elementEnd();
    \u0275\u0275element(394, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(395, "li")(396, "div");
    \u0275\u0275element(397, "span");
    \u0275\u0275elementStart(398, "div", 9);
    \u0275\u0275text(399, "[LIVE] talking \u0E1E\u0E35\u0E48\u0E0A\u0E31\u0E22\u0E40\u0E25\u0E48\u0E32\u0E0A\u0E35\u0E27\u0E34\u0E15\u0E21\u0E2B\u0E32\u0E25\u0E31\u0E22");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(400, "span", 13)(401, "span");
    \u0275\u0275text(402, "Apr 25");
    \u0275\u0275elementEnd();
    \u0275\u0275element(403, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(404, "li", 14)(405, "div");
    \u0275\u0275element(406, "span");
    \u0275\u0275elementStart(407, "div", 9);
    \u0275\u0275text(408, "100K Subscribers!!");
    \u0275\u0275elementStart(409, "span", 16);
    \u0275\u0275text(410, "#100KHoneyCantEscapeFromThisGuy");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(411, "div", 10);
    \u0275\u0275text(412, "\u0E40\u0E25\u0E48\u0E19\u0E41\u0E17\u0E47\u0E01 #100KHoneyCantEscapeFromThisGuy");
    \u0275\u0275elementEnd();
    \u0275\u0275element(413, "img", 19);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(414, "span", 13)(415, "span");
    \u0275\u0275text(416, "Apr 25");
    \u0275\u0275elementEnd();
    \u0275\u0275element(417, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(418, "li")(419, "div");
    \u0275\u0275element(420, "span");
    \u0275\u0275elementStart(421, "div", 9);
    \u0275\u0275text(422, "[Membership] \u0E0B\u0E49\u0E2D\u0E21\u0E23\u0E49\u0E2D\u0E07\u0E40\u0E1E\u0E25\u0E07");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(423, "div", 9);
    \u0275\u0275text(424, "[LIVE] \u0E44\u0E25\u0E1F\u0E4C\u0E14\u0E37\u0E48\u0E21 Deep talk \u0E23\u0E49\u0E2D\u0E07\u0E44\u0E2B\u0E49 ft. ORION");
    \u0275\u0275elementEnd();
    \u0275\u0275element(425, "img", 24);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(426, "span", 13)(427, "span");
    \u0275\u0275text(428, "Apr 26");
    \u0275\u0275elementEnd();
    \u0275\u0275element(429, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(430, "li", 14)(431, "div");
    \u0275\u0275element(432, "span");
    \u0275\u0275elementStart(433, "div", 9);
    \u0275\u0275text(434, "Schneider - Cold Hand [Short ver.]");
    \u0275\u0275elementStart(435, "span", 16);
    \u0275\u0275text(436, "\u0E15\u0E31\u0E27\u0E40\u0E15\u0E47\u0E21 when?");
    \u0275\u0275elementEnd()();
    \u0275\u0275element(437, "img", 15);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(438, "span", 13)(439, "span");
    \u0275\u0275text(440, "Apr 26");
    \u0275\u0275elementEnd();
    \u0275\u0275element(441, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(442, "li", 14)(443, "div");
    \u0275\u0275element(444, "span");
    \u0275\u0275elementStart(445, "div", 9);
    \u0275\u0275text(446, "Schneider - Friday Night [Thai ver.]");
    \u0275\u0275elementEnd();
    \u0275\u0275element(447, "img", 15);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(448, "span", 13)(449, "span");
    \u0275\u0275text(450, "Apr 27");
    \u0275\u0275elementEnd();
    \u0275\u0275element(451, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(452, "li")(453, "div");
    \u0275\u0275element(454, "span");
    \u0275\u0275elementStart(455, "div", 9);
    \u0275\u0275text(456, "[LIVE] Roleplay \u0E40\u0E1B\u0E47\u0E19\u0E1C\u0E39\u0E49\u0E0A\u0E32\u0E22\u0E04\u0E37\u0E19\u0E27\u0E31\u0E19\u0E28\u0E38\u0E01\u0E23\u0E4C");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(457, "span", 13)(458, "span");
    \u0275\u0275text(459, "Apr 28");
    \u0275\u0275elementEnd();
    \u0275\u0275element(460, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(461, "li")(462, "div");
    \u0275\u0275element(463, "span");
    \u0275\u0275elementStart(464, "div", 9);
    \u0275\u0275text(465, "[LIVE] \u0E01\u0E2D\u0E07\u0E42\u0E08\u0E23 \u0E04\u0E37\u0E2D\u0E07\u0E35\u0E49");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(466, "div", 9);
    \u0275\u0275text(467, "[Post] \u0E40\u0E2A\u0E37\u0E49\u0E2D 3XL \u0E01\u0E47\u0E22\u0E31\u0E07\u0E15\u0E36\u0E07\u0E21\u0E32\u0E01");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(468, "span", 13)(469, "span");
    \u0275\u0275text(470, "Apr 30");
    \u0275\u0275elementEnd();
    \u0275\u0275element(471, "span");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(472, "h2", 25);
    \u0275\u0275text(473, "May 2023");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(474, "ul")(475, "li")(476, "div");
    \u0275\u0275element(477, "span");
    \u0275\u0275elementStart(478, "div", 9);
    \u0275\u0275text(479, "[LIVE] \u0E2A\u0E48\u0E2D\u0E07\u0E41\u0E17\u0E47\u0E01 #100KHoneyCantEscapeFromThisGuy");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(480, "div", 9);
    \u0275\u0275text(481, "[Post] \u0E02\u0E2D\u0E1A\u0E04\u0E38\u0E13 #100KHoneyCantEscapeFromThisGuy");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(482, "span", 13)(483, "span");
    \u0275\u0275text(484, "May 01");
    \u0275\u0275elementEnd();
    \u0275\u0275element(485, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(486, "li")(487, "div");
    \u0275\u0275element(488, "span");
    \u0275\u0275elementStart(489, "div", 9);
    \u0275\u0275text(490, "[LIVE] \u0E01\u0E2D\u0E07\u0E42\u0E08\u0E23 ");
    \u0275\u0275elementStart(491, "span", 16);
    \u0275\u0275text(492, "\u0E2A\u0E07\u0E04\u0E23\u0E32\u0E21\u0E1B\u0E32\u0E0B\u0E38\u0E1B\u0E41\u0E14\u0E07");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(493, "div", 9);
    \u0275\u0275text(494, "[LIVE] Club Tuesday \u0E1E\u0E35\u0E48\u0E0A\u0E31\u0E22\u0E44\u0E21\u0E48\u0E09\u0E2D\u0E14 pt.1");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(495, "div", 9);
    \u0275\u0275text(496, "[Pic] \u0E41\u0E19\u0E30\u0E19\u0E33\u0E42\u0E1F\u0E21\u0E41\u0E15\u0E48\u0E07\u0E1C\u0E21");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(497, "div", 9);
    \u0275\u0275text(498, "[Voice] \u0E23\u0E49\u0E2D\u0E07\u0E40\u0E1E\u0E25\u0E07\u0E2D\u0E22\u0E48\u0E32\u0E07\u0E19\u0E49\u0E2D\u0E22 - Big Ass");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(499, "span", 13)(500, "span");
    \u0275\u0275text(501, "May 02");
    \u0275\u0275elementEnd();
    \u0275\u0275element(502, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(503, "li")(504, "div");
    \u0275\u0275element(505, "span");
    \u0275\u0275elementStart(506, "div", 9);
    \u0275\u0275text(507, "[LIVE] WORMS W.M.D. ft. Zenith,Zekai etc");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(508, "div", 9);
    \u0275\u0275text(509, "[LIVE] \u0E04\u0E37\u0E19\u0E27\u0E31\u0E19\u0E1E\u0E38\u0E18 \u0E2D\u0E2D\u0E04\u0E42\u0E15\u0E1B\u0E38\u0E2A\u0E19\u0E48\u0E32\u0E01\u0E25\u0E31\u0E27 \u0E40\u0E25\u0E48\u0E32\u0E40\u0E23\u0E37\u0E48\u0E2D\u0E07\u0E1C\u0E35 pt.1");
    \u0275\u0275elementStart(510, "span", 16);
    \u0275\u0275text(511, "\u0E21\u0E35\u0E04\u0E19\u0E2D\u0E22\u0E32\u0E01\u0E44\u0E14\u0E49\u0E2D\u0E38\u0E22\u0E08\u0E32\u0E44\u0E27\u0E49\u0E2A\u0E38\u0E48\u0E21");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(512, "span", 13)(513, "span");
    \u0275\u0275text(514, "May 03");
    \u0275\u0275elementEnd();
    \u0275\u0275element(515, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(516, "li")(517, "div");
    \u0275\u0275element(518, "span");
    \u0275\u0275elementStart(519, "div", 9);
    \u0275\u0275text(520, "[LIVE] Drinking \u0E15\u0E1A\u0E15\u0E31\u0E01");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(521, "span", 13)(522, "span");
    \u0275\u0275text(523, "May 04");
    \u0275\u0275elementEnd();
    \u0275\u0275element(524, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(525, "li")(526, "div");
    \u0275\u0275element(527, "span");
    \u0275\u0275elementStart(528, "div", 9);
    \u0275\u0275text(529, "[LIVE] How to \u0E40\u0E02\u0E35\u0E22\u0E19\u0E40\u0E19\u0E37\u0E49\u0E2D\u0E40\u0E1E\u0E25\u0E07\u0E04\u0E37\u0E19\u0E27\u0E31\u0E19\u0E28\u0E38\u0E01\u0E23\u0E4C");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(530, "div", 10);
    \u0275\u0275text(531, "[Tag] \u0E01\u0E33\u0E40\u0E19\u0E34\u0E14");
    \u0275\u0275elementStart(532, "span", 11);
    \u0275\u0275text(533, "#\u0E41\u0E21\u0E48\u0E19\u0E49\u0E33\u0E1C\u0E36\u0E49\u0E07\u0E40\u0E2A\u0E35\u0E22\u0E07\u0E2B\u0E27\u0E32\u0E19");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(534, "span", 13)(535, "span");
    \u0275\u0275text(536, "May 05");
    \u0275\u0275elementEnd();
    \u0275\u0275element(537, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(538, "li")(539, "div");
    \u0275\u0275element(540, "span");
    \u0275\u0275elementStart(541, "div", 9);
    \u0275\u0275text(542, "[Voice] \u0E23\u0E49\u0E2D\u0E07 Friday night ft. \u0E19\u0E49\u0E2D\u0E07\u0E08\u0E34\u0E19\u0E40\u0E25\u0E48\u0E19\u0E01\u0E35\u0E15\u0E49\u0E32\u0E23\u0E4C");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(543, "div", 9);
    \u0275\u0275text(544, "[Voice] Roleplay \u0E40\u0E1B\u0E47\u0E19\u0E44\u0E2D\u0E49\u0E2B\u0E21\u0E2D\u0E19\u0E31\u0E48\u0E19\u0E43\u0E19\u0E40\u0E1E\u0E25\u0E07 Friday Night");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(545, "span", 13)(546, "span");
    \u0275\u0275text(547, "May 06");
    \u0275\u0275elementEnd();
    \u0275\u0275element(548, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(549, "li")(550, "div");
    \u0275\u0275element(551, "span");
    \u0275\u0275elementStart(552, "div", 9);
    \u0275\u0275text(553, "[LIVE] Karaoke \u0E09\u0E25\u0E2D\u0E07\u0E41\u0E2A\u0E19\u0E0B\u0E31\u0E1E");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(554, "span", 13)(555, "span");
    \u0275\u0275text(556, "May 07");
    \u0275\u0275elementEnd();
    \u0275\u0275element(557, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(558, "li")(559, "div");
    \u0275\u0275element(560, "span");
    \u0275\u0275elementStart(561, "div", 9);
    \u0275\u0275text(562, "[LIVE] \u0E01\u0E2D\u0E07\u0E42\u0E08\u0E23 \u0E42\u0E19\u0E1A\u0E32\u0E14\u0E35\u0E49\u0E01\u0E2D\u0E19\u0E19\u0E32\u0E44\u0E14\u0E23\u0E1F\u0E4C ");
    \u0275\u0275elementStart(563, "span", 16);
    \u0275\u0275text(564, "\u0E44\u0E21\u0E48\u0E44\u0E14\u0E49\u0E40\u0E25\u0E48\u0E19\u0E19\u0E19\u0E19");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(565, "div", 9);
    \u0275\u0275text(566, "[LIVE] Club Tuesday \u0E1E\u0E35\u0E48\u0E0A\u0E31\u0E22\u0E44\u0E21\u0E48\u0E09\u0E2D\u0E14 pt.2");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(567, "span", 13)(568, "span");
    \u0275\u0275text(569, "May 09");
    \u0275\u0275elementEnd();
    \u0275\u0275element(570, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(571, "li")(572, "div");
    \u0275\u0275element(573, "span");
    \u0275\u0275elementStart(574, "div", 9);
    \u0275\u0275text(575, "[LIVE] \u0E04\u0E37\u0E19\u0E27\u0E31\u0E19\u0E1E\u0E38\u0E18 \u0E2D\u0E2D\u0E04\u0E42\u0E15\u0E1B\u0E38\u0E2A\u0E19\u0E48\u0E32\u0E01\u0E25\u0E31\u0E27 \u0E40\u0E25\u0E48\u0E32\u0E40\u0E23\u0E37\u0E48\u0E2D\u0E07\u0E1C\u0E35 pt.2");
    \u0275\u0275elementStart(576, "span", 16);
    \u0275\u0275text(577, "\u0E40\u0E1B\u0E34\u0E14\u0E15\u0E31\u0E27\u0E1B\u0E34\u0E41\u0E2D\u0E23\u0E4C");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(578, "span", 13)(579, "span");
    \u0275\u0275text(580, "May 10");
    \u0275\u0275elementEnd();
    \u0275\u0275element(581, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(582, "li")(583, "div");
    \u0275\u0275element(584, "span");
    \u0275\u0275elementStart(585, "div", 9);
    \u0275\u0275text(586, "[LIVE] Goose Goose Duck ft. ARP boys");
    \u0275\u0275elementStart(587, "span", 16);
    \u0275\u0275text(588, "\u0E0A\u0E38\u0E14\u0E2D\u0E22\u0E39\u0E48\u0E1A\u0E49\u0E32\u0E19\u0E41\u0E19\u0E48\u0E19\u0E30\u0E27\u0E34");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(589, "span", 13)(590, "span");
    \u0275\u0275text(591, "May 11");
    \u0275\u0275elementEnd();
    \u0275\u0275element(592, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(593, "li")(594, "div");
    \u0275\u0275element(595, "span");
    \u0275\u0275elementStart(596, "div", 9);
    \u0275\u0275text(597, "[LIVE] \u0E0A\u0E44\u0E19\u0E0A\u0E27\u0E19\u0E0A\u0E34\u0E21 \u0E08\u0E31\u0E14 Tier list \u0E44\u0E01\u0E48\u0E17\u0E2D\u0E14");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(598, "div", 9);
    \u0275\u0275text(599, "[Reply] \u0E41\u0E27\u0E30\u0E40\u0E02\u0E49\u0E32\u0E44\u0E1B\u0E2E\u0E31\u0E25\u0E42\u0E2B\u0E25\u0E04\u0E19\u0E23\u0E35\u0E27\u0E34\u0E27\u0E40\u0E2A\u0E37\u0E49\u0E2D\u0E42\u0E2D\u0E49\u0E17\u0E32\u0E23\u0E01");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(600, "span", 13)(601, "span");
    \u0275\u0275text(602, "May 12");
    \u0275\u0275elementEnd();
    \u0275\u0275element(603, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(604, "li")(605, "div");
    \u0275\u0275element(606, "span");
    \u0275\u0275elementStart(607, "div", 9);
    \u0275\u0275text(608, "[Membership] \u0E44\u0E1B\u0E19\u0E2D\u0E19\u0E44\u0E1B 1");
    \u0275\u0275elementEnd();
    \u0275\u0275element(609, "img", 24);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(610, "span", 13)(611, "span");
    \u0275\u0275text(612, "May 13");
    \u0275\u0275elementEnd();
    \u0275\u0275element(613, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(614, "li")(615, "div");
    \u0275\u0275element(616, "span");
    \u0275\u0275elementStart(617, "div", 9);
    \u0275\u0275text(618, "[LIVE] Drinking but English");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(619, "div", 10);
    \u0275\u0275text(620, "[Tag] \u0E01\u0E33\u0E40\u0E19\u0E34\u0E14");
    \u0275\u0275elementStart(621, "span", 11);
    \u0275\u0275text(622, "#\u0E1B\u0E25\u0E32\u0E22\u0E08\u0E27\u0E31\u0E01\u0E19\u0E49\u0E33\u0E1C\u0E36\u0E49\u0E07");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(623, "span", 13)(624, "span");
    \u0275\u0275text(625, "May 14");
    \u0275\u0275elementEnd();
    \u0275\u0275element(626, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(627, "li")(628, "div");
    \u0275\u0275element(629, "span");
    \u0275\u0275elementStart(630, "div", 9);
    \u0275\u0275text(631, "[LIVE] \u0E01\u0E2D\u0E07\u0E42\u0E08\u0E23\u0E41\u0E21\u0E30\u0E2B\u0E07\u0E36\u0E01 ");
    \u0275\u0275elementStart(632, "span", 16);
    \u0275\u0275text(633, "\u0E21\u0E49\u0E32\u0E27\u0E27\u0E27\u0E27\u0E27 'w'");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(634, "div", 9);
    \u0275\u0275text(635, "[Reply] \u0E41\u0E21\u0E30\u0E07\u0E36\u0E48\u0E07");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(636, "span", 13)(637, "span");
    \u0275\u0275text(638, "May 16");
    \u0275\u0275elementEnd();
    \u0275\u0275element(639, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(640, "li", 14)(641, "div");
    \u0275\u0275element(642, "span");
    \u0275\u0275elementStart(643, "div", 9);
    \u0275\u0275text(644, "\u300C \u{1D64A}\u{1D64D}\u{1D644}\u{1D64A}\u{1D649} \u{1D64A}\u{1D649} \u{1D63D}\u{1D644}\u{1D647}\u{1D644}\u{1D63D}\u{1D644}\u{1D647}\u{1D644} \u300D");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(645, "span", 13)(646, "span");
    \u0275\u0275text(647, "May 16");
    \u0275\u0275elementEnd();
    \u0275\u0275element(648, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(649, "li")(650, "div");
    \u0275\u0275element(651, "span");
    \u0275\u0275elementStart(652, "div", 9);
    \u0275\u0275text(653, "[Membership] \u0E44\u0E1B\u0E19\u0E2D\u0E19\u0E44\u0E1B 2");
    \u0275\u0275elementEnd();
    \u0275\u0275element(654, "img", 24);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(655, "span", 13)(656, "span");
    \u0275\u0275text(657, "May 17");
    \u0275\u0275elementEnd();
    \u0275\u0275element(658, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(659, "li")(660, "div");
    \u0275\u0275element(661, "span");
    \u0275\u0275elementStart(662, "div", 9);
    \u0275\u0275text(663, "Aramo Aroma X Orion Discovery set");
    \u0275\u0275elementEnd();
    \u0275\u0275element(664, "img", 17);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(665, "span", 13)(666, "span");
    \u0275\u0275text(667, "May 17");
    \u0275\u0275elementEnd();
    \u0275\u0275element(668, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(669, "li", 14)(670, "div");
    \u0275\u0275element(671, "span");
    \u0275\u0275elementStart(672, "div", 9);
    \u0275\u0275text(673, "\u{1D5E2}\u{1D5FF}\u{1D5F6}\u{1D5FC}\u{1D5FB} \u{1D5D7}\u{1D5F2}\u{1D5EF}\u{1D602}\u{1D601} \u{1D5E0}\u{1D5F6}\u{1D5FB}\u{1D5F6} \u{1D5D6}\u{1D5FC}\u{1D5FB}\u{1D5F0}\u{1D5F2}\u{1D5FF}\u{1D601} \u{1D63D}\u{1D644}\u{1D647}\u{1D644}\u{1D63D}\u{1D644}\u{1D647}\u{1D644}");
    \u0275\u0275elementEnd();
    \u0275\u0275element(674, "img", 19);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(675, "span", 13)(676, "span");
    \u0275\u0275text(677, "May 17");
    \u0275\u0275elementEnd();
    \u0275\u0275element(678, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(679, "li")(680, "div");
    \u0275\u0275element(681, "span");
    \u0275\u0275elementStart(682, "div", 9);
    \u0275\u0275text(683, "[LIVE] \u0E01\u0E2D\u0E07\u0E42\u0E08\u0E23 \u0E41\u0E01\u0E49\u0E21\u0E19\u0E49\u0E2D\u0E07\u0E19\u0E49\u0E33\u0E1C\u0E36\u0E49\u0E07\u0E19\u0E31\u0E49\u0E19\u0E41\u0E14\u0E07\u0E01\u0E27\u0E48\u0E32\u0E43\u0E04\u0E23");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(684, "span", 13)(685, "span");
    \u0275\u0275text(686, "May 18");
    \u0275\u0275elementEnd();
    \u0275\u0275element(687, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(688, "li")(689, "div");
    \u0275\u0275element(690, "span");
    \u0275\u0275elementStart(691, "div", 9);
    \u0275\u0275text(692, "[PIC] 520 day \u0E40\u0E07\u0E32\u0E19\u0E34\u0E49\u0E27");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(693, "span", 13)(694, "span");
    \u0275\u0275text(695, "May 20");
    \u0275\u0275elementEnd();
    \u0275\u0275element(696, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(697, "li")(698, "div");
    \u0275\u0275element(699, "span");
    \u0275\u0275elementStart(700, "div", 9);
    \u0275\u0275text(701, "[LIVE] \u0E21\u0E32\u0E23\u0E35\u0E27\u0E34\u0E27\u0E19\u0E49\u0E33\u0E2B\u0E2D\u0E21 Collab ARAMO");
    \u0275\u0275elementEnd();
    \u0275\u0275element(702, "img", 26);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(703, "span", 13)(704, "span");
    \u0275\u0275text(705, "May 21");
    \u0275\u0275elementEnd();
    \u0275\u0275element(706, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(707, "li")(708, "div");
    \u0275\u0275element(709, "span");
    \u0275\u0275elementStart(710, "div", 9);
    \u0275\u0275text(711, "[LIVE] Talking \u0E40\u0E25\u0E48\u0E32\u0E27\u0E31\u0E19\u0E2B\u0E22\u0E38\u0E14\u0E17\u0E35\u0E48\u0E1C\u0E48\u0E32\u0E19\u0E21\u0E32");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(712, "span", 13)(713, "span");
    \u0275\u0275text(714, "May 22");
    \u0275\u0275elementEnd();
    \u0275\u0275element(715, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(716, "li")(717, "div");
    \u0275\u0275element(718, "span");
    \u0275\u0275elementStart(719, "div", 9);
    \u0275\u0275text(720, "[LIVE] Club Tuesday \u0E1E\u0E35\u0E48\u0E0A\u0E31\u0E22\u0E44\u0E21\u0E48\u0E09\u0E2D\u0E14 pt.3");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(721, "div", 9);
    \u0275\u0275text(722, "[Poll] \u0E41\u0E01\u0E07\u0E40\u0E02\u0E35\u0E22\u0E27\u0E2B\u0E27\u0E32\u0E19\u0E15\u0E49\u0E2D\u0E07\u0E2B\u0E27\u0E32\u0E19\u0E40\u0E17\u0E48\u0E32\u0E19\u0E31\u0E49\u0E19\u0E16\u0E36\u0E07\u0E08\u0E30\u0E2D\u0E23\u0E48\u0E2D\u0E22");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(723, "span", 13)(724, "span");
    \u0275\u0275text(725, "May 23");
    \u0275\u0275elementEnd();
    \u0275\u0275element(726, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(727, "li")(728, "div");
    \u0275\u0275element(729, "span");
    \u0275\u0275elementStart(730, "div", 9);
    \u0275\u0275text(731, "[LIVE] \u0E04\u0E37\u0E19\u0E27\u0E31\u0E19\u0E1E\u0E38\u0E18\u0E40\u0E25\u0E48\u0E19\u0E40\u0E01\u0E21\u0E1C\u0E35 The Shadow Over Route 80");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(732, "span", 13)(733, "span");
    \u0275\u0275text(734, "May 24");
    \u0275\u0275elementEnd();
    \u0275\u0275element(735, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(736, "li")(737, "div");
    \u0275\u0275element(738, "span");
    \u0275\u0275elementStart(739, "div", 9);
    \u0275\u0275text(740, "[LIVE] Valorant ft. ORION, Usan, Shoto");
    \u0275\u0275elementEnd();
    \u0275\u0275element(741, "img", 26);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(742, "span", 13)(743, "span");
    \u0275\u0275text(744, "May 25");
    \u0275\u0275elementEnd();
    \u0275\u0275element(745, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(746, "li")(747, "div");
    \u0275\u0275element(748, "span");
    \u0275\u0275elementStart(749, "div", 9);
    \u0275\u0275text(750, "[LIVE] Roleplay \u0E40\u0E15\u0E23\u0E35\u0E22\u0E21\u0E15\u0E31\u0E27\u0E44\u0E1B\u0E40\u0E14\u0E15");
    \u0275\u0275elementStart(751, "span", 16);
    \u0275\u0275text(752, "\u0E2D\u0E32\u0E1A\u0E19\u0E49\u0E33\u0E2D\u0E2D\u0E01\u0E44\u0E25\u0E1F\u0E4C");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(753, "div", 9);
    \u0275\u0275text(754, "[PIC] \u0E01\u0E23\u0E30\u0E15\u0E38\u0E49\u0E19\u0E22\u0E2D\u0E14\u0E02\u0E32\u0E22 \u0E19\u0E31\u0E48\u0E07\u0E41\u0E2D\u0E47\u0E01\u0E17\u0E33\u0E19\u0E49\u0E33\u0E2B\u0E2D\u0E21");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(755, "span", 13)(756, "span");
    \u0275\u0275text(757, "May 26");
    \u0275\u0275elementEnd();
    \u0275\u0275element(758, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(759, "li", 14)(760, "div");
    \u0275\u0275element(761, "span");
    \u0275\u0275elementStart(762, "div", 9);
    \u0275\u0275text(763, "Summer Breeze - \u0E2B\u0E19\u0E49\u0E32\u0E23\u0E49\u0E2D\u0E19(\u0E21\u0E35\u0E2A\u0E2D\u0E07\u0E04\u0E27\u0E32\u0E21\u0E2B\u0E21\u0E32\u0E22)\u300CORION\u300D");
    \u0275\u0275elementEnd();
    \u0275\u0275element(764, "img", 15);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(765, "span", 13)(766, "span");
    \u0275\u0275text(767, "May 27");
    \u0275\u0275elementEnd();
    \u0275\u0275element(768, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(769, "li")(770, "div");
    \u0275\u0275element(771, "span");
    \u0275\u0275elementStart(772, "div", 9);
    \u0275\u0275text(773, "Aramo Aroma X Orion : \u{1D5E6}\u{1D5E8}\u{1D5E0}\u{1D5E0}\u{1D5D8}\u{1D5E5} \u{1D5D5}\u{1D5E5}\u{1D5D8}\u{1D5D8}\u{1D5ED}\u{1D5D8}");
    \u0275\u0275elementEnd();
    \u0275\u0275element(774, "img", 17);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(775, "span", 13)(776, "span");
    \u0275\u0275text(777, "May 27");
    \u0275\u0275elementEnd();
    \u0275\u0275element(778, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(779, "li")(780, "div");
    \u0275\u0275element(781, "span");
    \u0275\u0275elementStart(782, "div", 9);
    \u0275\u0275text(783, "[LIVE] \u0E43\u0E0A\u0E48\u0E0A\u0E31\u0E27\u0E23\u0E4C \u0E2B\u0E23\u0E37\u0E2D \u0E21\u0E31\u0E48\u0E27\u0E19\u0E34\u0E48\u0E21 Schneider VS Zekai");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(784, "div", 9);
    \u0275\u0275text(785, "[Membership] \u0E01\u0E2D\u0E07\u0E42\u0E08\u0E23 \u0E2B\u0E49\u0E32\u0E17\u0E38\u0E48\u0E21\u0E21\u0E35\u0E2D\u0E30\u0E44\u0E23");
    \u0275\u0275elementEnd();
    \u0275\u0275element(786, "img", 24);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(787, "span", 13)(788, "span");
    \u0275\u0275text(789, "May 27");
    \u0275\u0275elementEnd();
    \u0275\u0275element(790, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(791, "li", 14)(792, "div");
    \u0275\u0275element(793, "span");
    \u0275\u0275elementStart(794, "div", 9);
    \u0275\u0275text(795, "[ARParty] \u0E21\u0E30\u0E40\u0E23\u0E47\u0E07\u0E23\u0E31\u0E01\u0E29\u0E32\u0E44\u0E14\u0E49 \u0E2D\u0E01\u0E2B\u0E31\u0E01\u0E23\u0E31\u0E01\u0E29\u0E32\u0E44\u0E21\u0E48\u0E44\u0E14\u0E49");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(796, "span", 13)(797, "span");
    \u0275\u0275text(798, "May 28");
    \u0275\u0275elementEnd();
    \u0275\u0275element(799, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(800, "li")(801, "div");
    \u0275\u0275element(802, "span");
    \u0275\u0275elementStart(803, "div", 9);
    \u0275\u0275text(804, "[PIC] \u0E43\u0E0A\u0E49\u0E1B\u0E32\u0E01\u0E01\u0E32\u0E01\u0E31\u0E1A\u0E2A\u0E21\u0E38\u0E14\u0E17\u0E35\u0E48\u0E21\u0E19\u0E1C\u0E43\u0E2B\u0E49");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(805, "span", 13)(806, "span");
    \u0275\u0275text(807, "May 29");
    \u0275\u0275elementEnd();
    \u0275\u0275element(808, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(809, "li")(810, "div");
    \u0275\u0275element(811, "span");
    \u0275\u0275elementStart(812, "div", 9);
    \u0275\u0275text(813, "[LIVE] UNO ft. ORION & U-San");
    \u0275\u0275elementEnd();
    \u0275\u0275element(814, "img", 26);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(815, "span", 13)(816, "span");
    \u0275\u0275text(817, "May 31");
    \u0275\u0275elementEnd();
    \u0275\u0275element(818, "span");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(819, "h2", 27);
    \u0275\u0275text(820, "June 2023");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(821, "ul")(822, "li")(823, "div");
    \u0275\u0275element(824, "span");
    \u0275\u0275elementStart(825, "div", 9);
    \u0275\u0275text(826, "[LIVE] \u0E40\u0E1B\u0E34\u0E14\u0E42\u0E1B\u0E23\u0E40\u0E08\u0E01\u0E15\u0E4C\u0E40\u0E1E\u0E25\u0E07 Summerbreeze ft. Zekai");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(827, "span", 13)(828, "span");
    \u0275\u0275text(829, "Jun 01");
    \u0275\u0275elementEnd();
    \u0275\u0275element(830, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(831, "li")(832, "div");
    \u0275\u0275element(833, "span");
    \u0275\u0275elementStart(834, "div", 9);
    \u0275\u0275text(835, "[LIVE] \u0E04\u0E38\u0E22\u0E01\u0E31\u0E19\u0E41\u0E1A\u0E1A\u0E01\u0E23\u0E30\u0E0B\u0E34\u0E1A\u0E04\u0E23\u0E31\u0E1A ASMR");
    \u0275\u0275elementStart(836, "span", 16);
    \u0275\u0275text(837, "Friday night \u0E01\u0E23\u0E30\u0E0B\u0E34\u0E1A ver.");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(838, "span", 13)(839, "span");
    \u0275\u0275text(840, "Jun 02");
    \u0275\u0275elementEnd();
    \u0275\u0275element(841, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(842, "li", 14)(843, "div");
    \u0275\u0275element(844, "span");
    \u0275\u0275elementStart(845, "div", 9);
    \u0275\u0275text(846, "ORION - Summer Breeze T POP VOTE");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(847, "span", 13)(848, "span");
    \u0275\u0275text(849, "Jun 02");
    \u0275\u0275elementEnd();
    \u0275\u0275element(850, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(851, "li")(852, "div");
    \u0275\u0275element(853, "span");
    \u0275\u0275elementStart(854, "div", 9);
    \u0275\u0275text(855, "[LIVE] Schneider x \u0E17\u0E48\u0E32\u0E19\u0E40\u0E17\u0E1E ");
    \u0275\u0275elementStart(856, "span", 16);
    \u0275\u0275text(857, "#Orion\u0E1B\u0E25\u0E48\u0E2D\u0E22\u0E1C\u0E21\u0E44\u0E1B\u0E40\u0E16\u0E2D\u0E30");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(858, "div", 10);
    \u0275\u0275text(859, "\u0E40\u0E25\u0E48\u0E19 #Orion\u0E1B\u0E25\u0E48\u0E2D\u0E22\u0E1C\u0E21\u0E44\u0E1B\u0E40\u0E16\u0E2D\u0E30 \u0E25\u0E38\u0E49\u0E19\u0E0A\u0E34\u0E01\u0E34\u0E0A\u0E34\u0E1E\u0E23\u0E49\u0E2D\u0E21\u0E25\u0E32\u0E22\u0E40\u0E0B\u0E47\u0E19");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(860, "div", 9);
    \u0275\u0275text(861, "[PIC] \u0E2D\u0E27\u0E14\u0E15\u0E38\u0E4A\u0E01\u0E15\u0E32\u0E2B\u0E21\u0E36\u0E01\u0E02\u0E2D\u0E07\u0E41\u0E1F\u0E19\u0E04\u0E25\u0E31\u0E1A");
    \u0275\u0275elementEnd();
    \u0275\u0275element(862, "img", 26);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(863, "span", 13)(864, "span");
    \u0275\u0275text(865, "Jun 04");
    \u0275\u0275elementEnd();
    \u0275\u0275element(866, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(867, "li")(868, "div");
    \u0275\u0275element(869, "span");
    \u0275\u0275elementStart(870, "div", 9);
    \u0275\u0275text(871, "[LIVE] Talking \u0E01\u0E34\u0E19\u0E1E\u0E32\u0E2A\u0E15\u0E49\u0E32");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(872, "span", 13)(873, "span");
    \u0275\u0275text(874, "Jun 05");
    \u0275\u0275elementEnd();
    \u0275\u0275element(875, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(876, "li")(877, "div");
    \u0275\u0275element(878, "span");
    \u0275\u0275elementStart(879, "div", 9);
    \u0275\u0275text(880, "[LIVE] Orion \u0E15\u0E35\u0E41\u0E2D\u0E25\u0E01\u0E31\u0E1A\u0E41\u0E1F\u0E19\u0E04\u0E25\u0E31\u0E1A");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(881, "div", 9);
    \u0275\u0275text(882, "\u2726 Cthulhu x Schneider ORION \u2726 \u0E0A\u0E34\u0E01\u0E34\u0E0A\u0E34, Griptok, Keychain");
    \u0275\u0275elementEnd();
    \u0275\u0275element(883, "img", 17);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(884, "span", 13)(885, "span");
    \u0275\u0275text(886, "Jun 06");
    \u0275\u0275elementEnd();
    \u0275\u0275element(887, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(888, "li", 14)(889, "div");
    \u0275\u0275element(890, "span");
    \u0275\u0275elementStart(891, "div", 9);
    \u0275\u0275text(892, "Escape from the sky \u300CORION\u300D5M Views");
    \u0275\u0275elementEnd();
    \u0275\u0275element(893, "img", 19);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(894, "span", 13)(895, "span");
    \u0275\u0275text(896, "Jun 06");
    \u0275\u0275elementEnd();
    \u0275\u0275element(897, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(898, "li")(899, "div");
    \u0275\u0275element(900, "span");
    \u0275\u0275elementStart(901, "div", 9);
    \u0275\u0275text(902, "[Voice] \u0E40\u0E25\u0E48\u0E19\u0E2D\u0E39\u0E04\u0E39\u0E40\u0E25\u0E40\u0E25\u0E48\u0E40\u0E1E\u0E25\u0E07\u0E2B\u0E19\u0E49\u0E32\u0E23\u0E49\u0E2D\u0E19");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(903, "span", 13)(904, "span");
    \u0275\u0275text(905, "Jun 09");
    \u0275\u0275elementEnd();
    \u0275\u0275element(906, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(907, "li")(908, "div");
    \u0275\u0275element(909, "span");
    \u0275\u0275elementStart(910, "div", 9);
    \u0275\u0275text(911, "[Post] \u0E09\u0E32\u0E22\u0E32\u0E01\u0E49\u0E19\u0E41\u0E2B\u0E48\u0E07\u0E40\u0E2D\u0E23\u0E32\u0E1E\u0E35");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(912, "span", 13)(913, "span");
    \u0275\u0275text(914, "Jun 10");
    \u0275\u0275elementEnd();
    \u0275\u0275element(915, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(916, "li")(917, "div");
    \u0275\u0275element(918, "span");
    \u0275\u0275elementStart(919, "div", 9);
    \u0275\u0275text(920, "[PIC] \u0E14\u0E32\u0E01\u0E30\u0E02\u0E35\u0E48\u0E2B\u0E25\u0E31\u0E07\u0E1E\u0E35\u0E48\u0E0A\u0E44\u0E19");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(921, "span", 13)(922, "span");
    \u0275\u0275text(923, "Jun 11");
    \u0275\u0275elementEnd();
    \u0275\u0275element(924, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(925, "li")(926, "div");
    \u0275\u0275element(927, "span");
    \u0275\u0275elementStart(928, "div", 9);
    \u0275\u0275text(929, "[Membership] \u0E21\u0E32\u0E41\u0E1A\u0E1A\u0E2D\u0E36\u0E19\u0E46");
    \u0275\u0275elementStart(930, "span", 16);
    \u0275\u0275text(931, "\u0E40\u0E1B\u0E34\u0E14\u0E23\u0E48\u0E32\u0E07Alter\u0E04\u0E23\u0E31\u0E49\u0E07\u0E41\u0E23\u0E01");
    \u0275\u0275elementEnd()();
    \u0275\u0275element(932, "img", 24);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(933, "span", 13)(934, "span");
    \u0275\u0275text(935, "Jun 12");
    \u0275\u0275elementEnd();
    \u0275\u0275element(936, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(937, "li", 14)(938, "div");
    \u0275\u0275element(939, "span");
    \u0275\u0275elementStart(940, "div", 9);
    \u0275\u0275text(941, "Schneider - Sarushibai [Thai ver.] 1M Views");
    \u0275\u0275elementEnd();
    \u0275\u0275element(942, "img", 19);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(943, "span", 13)(944, "span");
    \u0275\u0275text(945, "Jun 15");
    \u0275\u0275elementEnd();
    \u0275\u0275element(946, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(947, "li")(948, "div");
    \u0275\u0275element(949, "span");
    \u0275\u0275elementStart(950, "div", 9);
    \u0275\u0275text(951, "[LIVE] The Outlast Trials ft. ORION & Shoto");
    \u0275\u0275elementEnd();
    \u0275\u0275element(952, "img", 26);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(953, "span", 13)(954, "span");
    \u0275\u0275text(955, "Jun 16");
    \u0275\u0275elementEnd();
    \u0275\u0275element(956, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(957, "li")(958, "div");
    \u0275\u0275element(959, "span");
    \u0275\u0275elementStart(960, "div", 9);
    \u0275\u0275text(961, "[Membership] \u0E40\u0E1E\u0E37\u0E48\u0E2D\u0E19\u0E1A\u0E49\u0E32\u0E2D\u0E30\u0E44\u0E23");
    \u0275\u0275elementStart(962, "span", 16);
    \u0275\u0275text(963, "\u0E43\u0E0A\u0E49\u0E23\u0E48\u0E32\u0E07Alter");
    \u0275\u0275elementEnd()();
    \u0275\u0275element(964, "img", 24);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(965, "span", 13)(966, "span");
    \u0275\u0275text(967, "Jun 17");
    \u0275\u0275elementEnd();
    \u0275\u0275element(968, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(969, "li", 14)(970, "div");
    \u0275\u0275element(971, "span");
    \u0275\u0275elementStart(972, "div", 9);
    \u0275\u0275text(973, "Summer Breeze - \u0E2B\u0E19\u0E49\u0E32\u0E23\u0E49\u0E2D\u0E19(\u0E21\u0E35\u0E2A\u0E2D\u0E07\u0E04\u0E27\u0E32\u0E21\u0E2B\u0E21\u0E32\u0E22)\u300CORION\u300D1M Views");
    \u0275\u0275elementEnd();
    \u0275\u0275element(974, "img", 19);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(975, "span", 13)(976, "span");
    \u0275\u0275text(977, "Jun 18");
    \u0275\u0275elementEnd();
    \u0275\u0275element(978, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(979, "li")(980, "div");
    \u0275\u0275element(981, "span");
    \u0275\u0275elementStart(982, "div", 9);
    \u0275\u0275text(983, "[LIVE] ORION \u0E1E\u0E39\u0E14\u0E04\u0E38\u0E22\u0E01\u0E31\u0E1A\u0E17\u0E35\u0E21\u0E07\u0E32\u0E19 TGS \u0E01\u0E48\u0E2D\u0E19\u0E07\u0E32\u0E19 CAF");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(984, "span", 13)(985, "span");
    \u0275\u0275text(986, "Jun 19");
    \u0275\u0275elementEnd();
    \u0275\u0275element(987, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(988, "li")(989, "div");
    \u0275\u0275element(990, "span");
    \u0275\u0275elementStart(991, "div", 9);
    \u0275\u0275text(992, "[LIVE] \u0E40\u0E23\u0E14\u0E44\u0E1B\u0E2B\u0E32\u0E40\u0E2D\u0E1F\u0E1F\u0E35\u0E48 Debut");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(993, "span", 13)(994, "span");
    \u0275\u0275text(995, "Jun 21");
    \u0275\u0275elementEnd();
    \u0275\u0275element(996, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(997, "li")(998, "div");
    \u0275\u0275element(999, "span");
    \u0275\u0275elementStart(1e3, "div", 9);
    \u0275\u0275text(1001, "[LIVE] Minecraft ft. ORION pt.1");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1002, "span", 13)(1003, "span");
    \u0275\u0275text(1004, "Jun 23");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1005, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1006, "li", 14)(1007, "div");
    \u0275\u0275element(1008, "span");
    \u0275\u0275elementStart(1009, "div", 9);
    \u0275\u0275text(1010, "Schneider - Friday Night [Thai ver.] 1M Views");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1011, "img", 19);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1012, "span", 13)(1013, "span");
    \u0275\u0275text(1014, "Jun 25");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1015, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1016, "li")(1017, "div");
    \u0275\u0275element(1018, "span");
    \u0275\u0275elementStart(1019, "div", 9);
    \u0275\u0275text(1020, "[LIVE] Coffee Talk pt.1");
    \u0275\u0275elementStart(1021, "span", 16);
    \u0275\u0275text(1022, "\u0E40\u0E1B\u0E34\u0E14\u0E04\u0E32\u0E40\u0E1F\u0E48\u0E19\u0E49\u0E2D\u0E07\u0E0A\u0E44\u0E19");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(1023, "span", 13)(1024, "span");
    \u0275\u0275text(1025, "Jun 26");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1026, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1027, "li")(1028, "div");
    \u0275\u0275element(1029, "span");
    \u0275\u0275elementStart(1030, "div", 9);
    \u0275\u0275text(1031, "[LIVE] Talking \u0E01\u0E34\u0E19\u0E04\u0E34\u0E21\u0E1A\u0E31\u0E1A");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1032, "div", 9);
    \u0275\u0275text(1033, "[LIVE] Coffee Talk pt.2");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1034, "span", 13)(1035, "span");
    \u0275\u0275text(1036, "Jun 27");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1037, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1038, "li", 14)(1039, "div");
    \u0275\u0275element(1040, "span");
    \u0275\u0275elementStart(1041, "div", 9);
    \u0275\u0275text(1042, "ARP x CAF - 01/07 ARP Mini concert");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1043, "div", 10);
    \u0275\u0275text(1044, "\u0E41\u0E1F\u0E49\u0E21 , \u0E14\u0E48\u0E2D\u0E07\u0E2A\u0E1B\u0E23\u0E34\u0E07ARP x CAF - 01/07 ARP Mini concert");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1045, "div", 10);
    \u0275\u0275text(1046, "Orion Free Photocard");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1047, "div", 9);
    \u0275\u0275text(1048, "\u0E41\u0E21\u0E48\u0E19\u0E49\u0E33\u0E1C\u0E36\u0E49\u0E07\u0E17\u0E31\u0E28\u0E19\u0E28\u0E36\u0E01\u0E29\u0E32 \u0E07\u0E32\u0E19 CAF");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1049, "img", 19);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1050, "span", 13)(1051, "span");
    \u0275\u0275text(1052, "Jun 30");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1053, "span");
    \u0275\u0275text(1054, "Jul 02");
    \u0275\u0275elementEnd()()()();
    \u0275\u0275elementStart(1055, "h2", 28);
    \u0275\u0275text(1056, "July 2023");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1057, "ul")(1058, "li")(1059, "div");
    \u0275\u0275element(1060, "span");
    \u0275\u0275elementStart(1061, "div", 9);
    \u0275\u0275text(1062, "[PIC] PS5 for \u0E0A\u0E19\u0E14");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1063, "span", 13)(1064, "span");
    \u0275\u0275text(1065, "Jul 03");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1066, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1067, "li")(1068, "div");
    \u0275\u0275element(1069, "span");
    \u0275\u0275elementStart(1070, "div", 9);
    \u0275\u0275text(1071, "[LIVE] Goose Goose Duck");
    \u0275\u0275elementStart(1072, "span", 16);
    \u0275\u0275text(1073, "\u0E0A\u0E44\u0E19\u0E40\u0E14\u0E49\u0E2D\u0E04\u0E37\u0E2D\u0E23\u0E31\u0E19\u0E40\u0E27\u0E22\u0E4C");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(1074, "span", 13)(1075, "span");
    \u0275\u0275text(1076, "Jul 04");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1077, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1078, "li")(1079, "div");
    \u0275\u0275element(1080, "span");
    \u0275\u0275elementStart(1081, "div", 9);
    \u0275\u0275text(1082, "[LIVE] Coffee Talk pt.3");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1083, "div", 9);
    \u0275\u0275text(1084, "[Space] \u0E2D\u0E2D\u0E01\u0E01\u0E33\u0E25\u0E31\u0E07\u0E01\u0E32\u0E22");
    \u0275\u0275elementStart(1085, "span", 16);
    \u0275\u0275text(1086, "/////");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(1087, "span", 13)(1088, "span");
    \u0275\u0275text(1089, "Jul 06");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1090, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1091, "li")(1092, "div");
    \u0275\u0275element(1093, "span");
    \u0275\u0275elementStart(1094, "div", 9);
    \u0275\u0275text(1095, "VOICE PACK TANABATA, Keychain, \u0E1B\u0E49\u0E32\u0E22\u0E44\u0E21\u0E49, Wallpaper");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1096, "img", 17);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1097, "span", 13)(1098, "span");
    \u0275\u0275text(1099, "Jul 07");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1100, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1101, "li")(1102, "div");
    \u0275\u0275element(1103, "span");
    \u0275\u0275elementStart(1104, "div", 9);
    \u0275\u0275text(1105, "[Space] \u0E41\u0E01\u0E30\u0E02\u0E2D\u0E07\u0E02\u0E27\u0E31\u0E0D \u0E23\u0E49\u0E2D\u0E07\u0E44\u0E2B\u0E49\u0E2D\u0E38\u0E4B\u0E07\u0E2D\u0E34\u0E4B\u0E07");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1106, "span", 13)(1107, "span");
    \u0275\u0275text(1108, "Jul 08");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1109, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1110, "li")(1111, "div");
    \u0275\u0275element(1112, "span");
    \u0275\u0275elementStart(1113, "div", 9);
    \u0275\u0275text(1114, "[LIVE] \u0E0A\u0E34\u0E21 BL \u0E08\u0E32\u0E01 Phoenix Next");
    \u0275\u0275elementStart(1115, "span", 16);
    \u0275\u0275text(1116, "\u0E0B\u0E32\u0E0B\u0E32\u0E01\u0E34\u0E21\u0E34\u0E22\u0E32\u0E42\u0E19\u0E30");
    \u0275\u0275elementEnd()();
    \u0275\u0275element(1117, "img", 26);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1118, "span", 13)(1119, "span");
    \u0275\u0275text(1120, "Jul 09");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1121, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1122, "li")(1123, "div");
    \u0275\u0275element(1124, "span");
    \u0275\u0275elementStart(1125, "div", 9);
    \u0275\u0275text(1126, "[LIVE] Coffee Talk pt.4 ");
    \u0275\u0275elementStart(1127, "span", 20);
    \u0275\u0275text(1128, "\u0E21\u0E19\u0E1C\u0E15\u0E31\u0E49\u0E21\u0E17\u0E34\u0E1B\u0E21\u0E35");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1129, "span", 21);
    \u0275\u0275text(1130, "\u0E40\u0E2A\u0E35\u0E22\u0E07\u0E42\u0E17\u0E23\u0E28\u0E31\u0E1E\u0E17\u0E4C\u0E40\u0E02\u0E49\u0E32\u0E23\u0E31\u0E27\u0E46");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1131, "span", 16);
    \u0275\u0275text(1132, "\u0E23\u0E49\u0E2D\u0E07 Blessing OF The Nephilim");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(1133, "span", 13)(1134, "span");
    \u0275\u0275text(1135, "Jul 11");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1136, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1137, "li")(1138, "div");
    \u0275\u0275element(1139, "span");
    \u0275\u0275elementStart(1140, "div", 9);
    \u0275\u0275text(1141, "[LIVE] \u0E04\u0E37\u0E19\u0E27\u0E31\u0E19\u0E1E\u0E38\u0E18 \u0E2D\u0E2D\u0E04\u0E42\u0E15\u0E1B\u0E38\u0E2A\u0E19\u0E48\u0E32\u0E01\u0E25\u0E31\u0E27 \u0E40\u0E25\u0E48\u0E32\u0E40\u0E23\u0E37\u0E48\u0E2D\u0E07\u0E1C\u0E35 pt.3");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1142, "span", 13)(1143, "span");
    \u0275\u0275text(1144, "Jul 12");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1145, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1146, "li")(1147, "div");
    \u0275\u0275element(1148, "span");
    \u0275\u0275elementStart(1149, "div", 9);
    \u0275\u0275text(1150, "[Membership] ASMR \u0E08\u0E32\u0E23\u0E22\u0E4C\u0E0A\u0E31\u0E22\u0E41\u0E14\u0E07");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1151, "img", 24);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1152, "span", 13)(1153, "span");
    \u0275\u0275text(1154, "Jul 13");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1155, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1156, "li")(1157, "div");
    \u0275\u0275element(1158, "span");
    \u0275\u0275elementStart(1159, "div", 9);
    \u0275\u0275text(1160, "[LIVE] Singing \u0E23\u0E49\u0E2D\u0E07\u0E40\u0E1E\u0E25\u0E07\u0E40\u0E1B\u0E35\u0E22\u0E42\u0E19\u0E40\u0E27\u0E2D\u0E23\u0E4C\u0E0A\u0E31\u0E48\u0E19");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1161, "span", 13)(1162, "span");
    \u0275\u0275text(1163, "Jul 15");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1164, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1165, "li", 14)(1166, "div");
    \u0275\u0275element(1167, "span");
    \u0275\u0275elementStart(1168, "div", 9);
    \u0275\u0275text(1169, "Schneider - Kiss The Rain-THAMA- [Thai ver.]");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1170, "img", 15);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1171, "span", 13)(1172, "span");
    \u0275\u0275text(1173, "Jul 15");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1174, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1175, "li")(1176, "div");
    \u0275\u0275element(1177, "span");
    \u0275\u0275elementStart(1178, "div", 9);
    \u0275\u0275text(1179, "[Quote] \u0E42\u0E21\u0E40\u0E21\u0E19\u0E15\u0E4C\u0E1B\u0E23\u0E30\u0E17\u0E31\u0E1A\u0E43\u0E08\u0E43\u0E19\u0E15\u0E31\u0E27\u0E41\u0E1F\u0E19\u0E04\u0E25\u0E31\u0E1A");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1180, "span", 13)(1181, "span");
    \u0275\u0275text(1182, "Jul 17");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1183, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1184, "li")(1185, "div");
    \u0275\u0275element(1186, "span");
    \u0275\u0275elementStart(1187, "div", 9);
    \u0275\u0275text(1188, "[Quote] \u0E2D\u0E30\u0E44\u0E23\u0E17\u0E35\u0E48\u0E17\u0E33\u0E43\u0E2B\u0E49\u0E04\u0E38\u0E13\u0E2D\u0E22\u0E32\u0E01\u0E17\u0E33\u0E27\u0E35\u0E17\u0E39\u0E1B\u0E15\u0E48\u0E2D\u0E44\u0E1B");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1189, "span", 13)(1190, "span");
    \u0275\u0275text(1191, "Jul 20");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1192, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1193, "li")(1194, "div");
    \u0275\u0275element(1195, "span");
    \u0275\u0275elementStart(1196, "div", 9);
    \u0275\u0275text(1197, "[LIVE] Coffee Talk pt.5");
    \u0275\u0275elementStart(1198, "span", 16);
    \u0275\u0275text(1199, '\u0E22\u0E2D\u0E21\u0E23\u0E31\u0E1A\u0E27\u0E48\u0E32"\u0E04\u0E34\u0E14\u0E16\u0E36\u0E07"');
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1200, "div", 9);
    \u0275\u0275text(1201, "[PIC] \u0E1E\u0E35\u0E48\u0E0A\u0E44\u0E19\u0E41\u0E25\u0E30\u0E14\u0E32\u0E01\u0E30\u0E44\u0E1B\u0E19\u0E34\u0E17\u0E23\u0E23\u0E28\u0E08\u0E34\u0E1A\u0E25\u0E34");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1202, "span", 13)(1203, "span");
    \u0275\u0275text(1204, "Jul 25");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1205, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1206, "li")(1207, "div");
    \u0275\u0275element(1208, "span");
    \u0275\u0275elementStart(1209, "div", 9);
    \u0275\u0275text(1210, "[LIVE] Free Talk \u0E19\u0E31\u0E48\u0E07\u0E17\u0E33 Wish List");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1211, "span", 13)(1212, "span");
    \u0275\u0275text(1213, "Jul 26");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1214, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1215, "li")(1216, "div");
    \u0275\u0275element(1217, "span");
    \u0275\u0275elementStart(1218, "div", 9);
    \u0275\u0275text(1219, "[LIVE] \u0E1E\u0E39\u0E14\u0E16\u0E36\u0E07\u0E01\u0E32\u0E23\u0E41\u0E15\u0E48\u0E07\u0E40\u0E19\u0E37\u0E49\u0E2D\u0E40\u0E1E\u0E25\u0E07 Kiss The Rain");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1220, "span", 13)(1221, "span");
    \u0275\u0275text(1222, "Jul 27");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1223, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1224, "li")(1225, "div");
    \u0275\u0275element(1226, "span");
    \u0275\u0275elementStart(1227, "div", 9);
    \u0275\u0275text(1228, "[LIVE] \u0E01\u0E2D\u0E07\u0E42\u0E08\u0E23\u0E01\u0E48\u0E2D\u0E19\u0E17\u0E39\u0E0A\u0E47\u0E2D\u0E15");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1229, "div", 10);
    \u0275\u0275text(1230, "[Tag] \u0E01\u0E33\u0E40\u0E19\u0E34\u0E14");
    \u0275\u0275elementStart(1231, "span", 11);
    \u0275\u0275text(1232, "#\u0E19\u0E49\u0E33\u0E1C\u0E36\u0E49\u0E07\u0E2B\u0E27\u0E32\u0E19selcaday");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(1233, "span", 13)(1234, "span");
    \u0275\u0275text(1235, "Jul 29");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1236, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1237, "li", 14)(1238, "div");
    \u0275\u0275element(1239, "span");
    \u0275\u0275elementStart(1240, "div", 9);
    \u0275\u0275text(1241, "V-MEET By V-Festa");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1242, "div", 10);
    \u0275\u0275text(1243, "Gashapon Keyring V-FEST");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1244, "div", 9);
    \u0275\u0275text(1245, "\u0E41\u0E21\u0E48\u0E19\u0E49\u0E33\u0E1C\u0E36\u0E49\u0E07\u0E23\u0E27\u0E21\u0E15\u0E31\u0E27\u0E07\u0E32\u0E19 V-meet");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1246, "img", 19);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1247, "span", 13)(1248, "span");
    \u0275\u0275text(1249, "Jul 29");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1250, "span");
    \u0275\u0275text(1251, "Jul 30");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(1252, "li")(1253, "div");
    \u0275\u0275element(1254, "span");
    \u0275\u0275elementStart(1255, "div", 9);
    \u0275\u0275text(1256, "[LIVE] \u0E40\u0E02\u0E32\u0E27\u0E48\u0E32\u0E21\u0E32\u0E40\u0E09\u0E22 \u0E46");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1257, "span", 13)(1258, "span");
    \u0275\u0275text(1259, "Jul 30");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1260, "span");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(1261, "h2", 29);
    \u0275\u0275text(1262, "August 2023");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1263, "ul")(1264, "li")(1265, "div");
    \u0275\u0275element(1266, "span");
    \u0275\u0275elementStart(1267, "div", 9);
    \u0275\u0275text(1268, "[LIVE] Coffee Talk pt.6");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1269, "span", 13)(1270, "span");
    \u0275\u0275text(1271, "Aug 01");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1272, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1273, "li")(1274, "div");
    \u0275\u0275element(1275, "span");
    \u0275\u0275elementStart(1276, "div", 9);
    \u0275\u0275text(1277, "[LIVE] Only Up \u0E23\u0E35\u0E40\u0E1F\u0E25\u0E47\u0E01\u0E04\u0E19\u0E41\u0E01\u0E48");
    \u0275\u0275elementStart(1278, "span", 16);
    \u0275\u0275text(1279, "\u0E44\u0E25\u0E1F\u0E4C\u0E40\u0E1E\u0E34\u0E48\u0E07\u0E40\u0E23\u0E34\u0E48\u0E21\u0E43\u0E0A\u0E48\u0E21\u0E31\u0E49\u0E22\u0E04\u0E30");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(1280, "span", 13)(1281, "span");
    \u0275\u0275text(1282, "Aug 03");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1283, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1284, "li")(1285, "div");
    \u0275\u0275element(1286, "span");
    \u0275\u0275elementStart(1287, "div", 9);
    \u0275\u0275text(1288, "[LIVE] \u0E44\u0E1B\u0E2B\u0E32 Merryweather \u0E43\u0E19 Twitch (ENG Stream) ");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1289, "img", 26);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1290, "span", 13)(1291, "span");
    \u0275\u0275text(1292, "Aug 04");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1293, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1294, "li")(1295, "div");
    \u0275\u0275element(1296, "span");
    \u0275\u0275elementStart(1297, "div", 9);
    \u0275\u0275text(1298, "[Membership] \u0E17\u0E33\u0E2D\u0E30\u0E44\u0E23\u0E01\u0E4A\u0E2D\u0E01 \u0E46 \u0E41\u0E01\u0E4A\u0E01 \u0E46");
    \u0275\u0275elementStart(1299, "span", 16);
    \u0275\u0275text(1300, "\u0E1E\u0E39\u0E14\u0E44\u0E21\u0E04\u0E4C\u0E41\u0E22\u0E01\u0E0B\u0E49\u0E32\u0E22\u0E02\u0E27\u0E32\u0E41\u0E01\u0E25\u0E49\u0E07\u0E21\u0E19\u0E1C");
    \u0275\u0275elementEnd()();
    \u0275\u0275element(1301, "img", 24);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1302, "span", 13)(1303, "span");
    \u0275\u0275text(1304, "Aug 07");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1305, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1306, "li")(1307, "div");
    \u0275\u0275element(1308, "span");
    \u0275\u0275elementStart(1309, "div", 9);
    \u0275\u0275text(1310, "[LIVE] Coffee Talk pt.7");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1311, "span", 13)(1312, "span");
    \u0275\u0275text(1313, "Aug 08");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1314, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1315, "li")(1316, "div");
    \u0275\u0275element(1317, "span");
    \u0275\u0275elementStart(1318, "div", 9);
    \u0275\u0275text(1319, "[LIVE] \u0E08\u0E30\u0E1E\u0E39\u0E14\u0E04\u0E38\u0E22\u0E2D\u0E22\u0E48\u0E32\u0E07\u0E08\u0E23\u0E34\u0E07\u0E08\u0E31\u0E07\u0E01\u0E31\u0E1A\u0E17\u0E38\u0E01 \u0E46 \u0E40\u0E23\u0E37\u0E48\u0E2D\u0E07\u0E17\u0E35\u0E48\u0E04\u0E38\u0E13\u0E2A\u0E48\u0E07\u0E21\u0E32");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1320, "span", 13)(1321, "span");
    \u0275\u0275text(1322, "Aug 10");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1323, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1324, "li")(1325, "div");
    \u0275\u0275element(1326, "span");
    \u0275\u0275elementStart(1327, "div", 9);
    \u0275\u0275text(1328, "[LIVE] Queen & Ant \u0E21\u0E32\u0E19\u0E31\u0E48\u0E07\u0E01\u0E34\u0E19\u0E40\u0E01\u0E23\u0E19\u0E40\u0E19\u0E48\u0E22\u0E4C\u0E01\u0E31\u0E1A\u0E1E\u0E35\u0E48\u0E46\u0E14\u0E35\u0E01\u0E27\u0E48\u0E32 ft. Orion");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1329, "img", 26);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1330, "span", 13)(1331, "span");
    \u0275\u0275text(1332, "Aug 11");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1333, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1334, "li")(1335, "div");
    \u0275\u0275element(1336, "span");
    \u0275\u0275elementStart(1337, "div", 9);
    \u0275\u0275text(1338, "[LIVE] \u0E23\u0E49\u0E2D\u0E07\u0E40\u0E1E\u0E25\u0E07\u0E41\u0E1A\u0E1A\u0E23\u0E38\u0E48\u0E19\u0E1E\u0E35\u0E48\u0E2A\u0E38\u0E14\u0E2B\u0E25\u0E48\u0E2D");
    \u0275\u0275elementStart(1339, "span", 16);
    \u0275\u0275text(1340, "\u0E23\u0E49\u0E2D\u0E07 Beginning - One ok rock");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1341, "div", 9);
    \u0275\u0275text(1342, "ARP x Animate goods");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1343, "div", 10);
    \u0275\u0275text(1344, "Standee cafe, postcard \u0E14\u0E48\u0E2D\u0E07\u0E44\u0E14\u0E04\u0E31\u0E17,\u0E40\u0E2A\u0E37\u0E49\u0E2D\u0E14\u0E48\u0E2D\u0E07 ,\u0E40\u0E02\u0E47\u0E21\u0E01\u0E25\u0E31\u0E14 Orion animal ver.");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1345, "div", 9);
    \u0275\u0275text(1346, "[Pic] \u0E2B\u0E21\u0E36\u0E01\u0E40\u0E21\u0E32\u0E04\u0E31\u0E49\u0E1A");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1347, "img", 17);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1348, "span", 13)(1349, "span");
    \u0275\u0275text(1350, "Aug 12");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1351, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1352, "li")(1353, "div");
    \u0275\u0275element(1354, "span");
    \u0275\u0275elementStart(1355, "div", 9);
    \u0275\u0275text(1356, "[LIVE] Surgeon Simulator 2 ft.ORION");
    \u0275\u0275elementStart(1357, "span", 16);
    \u0275\u0275text(1358, "\u0E23\u0E27\u0E21\u0E1E\u0E25\u0E31\u0E07\u0E1E\u0E31\u0E07\u0E42\u0E23\u0E07\u0E1A\u0E32\u0E25");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(1359, "span", 13)(1360, "span");
    \u0275\u0275text(1361, "Aug 13");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1362, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1363, "li")(1364, "div");
    \u0275\u0275element(1365, "span");
    \u0275\u0275elementStart(1366, "div", 9);
    \u0275\u0275text(1367, "[LIVE] Coffee Talk Episode 2 pt.1");
    \u0275\u0275elementStart(1368, "span", 16);
    \u0275\u0275text(1369, "\u0E40\u0E1B\u0E47\u0E19\u0E1E\u0E35\u0E48\u0E0A\u0E44\u0E19\u0E41\u0E25\u0E49\u0E27");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(1370, "span", 13)(1371, "span");
    \u0275\u0275text(1372, "Aug 14");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1373, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1374, "li")(1375, "div");
    \u0275\u0275element(1376, "span");
    \u0275\u0275elementStart(1377, "div", 9);
    \u0275\u0275text(1378, "[LIVE] Working with me \u0E19\u0E31\u0E48\u0E07\u0E41\u0E15\u0E48\u0E07\u0E40\u0E19\u0E37\u0E49\u0E2D\u0E44\u0E17\u0E22 Seven - Jungkok");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1379, "div", 9);
    \u0275\u0275text(1380, "[Voice] \u0E40\u0E23\u0E35\u0E22\u0E01 Sweet Honey \u0E41\u0E25\u0E49\u0E27\u0E0A\u0E2D\u0E1A\u0E43\u0E08\u0E2D\u0E48\u0E2D");
    \u0275\u0275elementStart(1381, "span", 16);
    \u0275\u0275text(1382, "\u0E0A\u0E2D\u0E1A\u0E04\u0E48\u0E30!");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(1383, "span", 13)(1384, "span");
    \u0275\u0275text(1385, "Aug 16");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1386, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1387, "li")(1388, "div");
    \u0275\u0275element(1389, "span");
    \u0275\u0275elementStart(1390, "div", 9);
    \u0275\u0275text(1391, "[PIC] \u0E1E\u0E32\u0E01\u0E22\u0E4C\u0E40\u0E2A\u0E35\u0E22\u0E07 Webtoon Moonlight Serenade");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1392, "span", 13)(1393, "span");
    \u0275\u0275text(1394, "Aug 17");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1395, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1396, "li")(1397, "div");
    \u0275\u0275element(1398, "span");
    \u0275\u0275elementStart(1399, "div", 9);
    \u0275\u0275text(1400, "[Membership] \u0E19\u0E31\u0E48\u0E07\u0E17\u0E33\u0E07\u0E32\u0E19\u0E43\u0E2B\u0E49\u0E04\u0E38\u0E13\u0E1F\u0E31\u0E07");
    \u0275\u0275elementStart(1401, "span", 16);
    \u0275\u0275text(1402, "\u0E21\u0E19\u0E1C\u0E1B\u0E32\u0E17\u0E34\u0E1B\u0E21\u0E35 30k \u0E43\u0E19 6 \u0E19\u0E32\u0E17\u0E35");
    \u0275\u0275elementEnd()();
    \u0275\u0275element(1403, "img", 24);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1404, "span", 13)(1405, "span");
    \u0275\u0275text(1406, "Aug 20");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1407, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1408, "li")(1409, "div");
    \u0275\u0275element(1410, "span");
    \u0275\u0275elementStart(1411, "div", 9);
    \u0275\u0275text(1412, "[LIVE] Coffee Talk Episode 2 pt.2");
    \u0275\u0275elementStart(1413, "span", 16);
    \u0275\u0275text(1414, "\u0E43\u0E04\u0E23\u0E08\u0E30\u0E41\u0E15\u0E48\u0E07\u0E07\u0E32\u0E19\u0E21\u0E32\u0E1A\u0E2D\u0E01\u0E40\u0E14\u0E35\u0E4B\u0E22\u0E27\u0E23\u0E49\u0E2D\u0E07\u0E40\u0E1E\u0E25\u0E07\u0E43\u0E2B\u0E49");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(1415, "span", 13)(1416, "span");
    \u0275\u0275text(1417, "Aug 21");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1418, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1419, "li")(1420, "div");
    \u0275\u0275element(1421, "span");
    \u0275\u0275elementStart(1422, "div", 9);
    \u0275\u0275text(1423, "ORION x Animatecafe");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1424, "div", 10);
    \u0275\u0275text(1425, "\u0E40\u0E04\u0E23\u0E37\u0E48\u0E2D\u0E07\u0E14\u0E37\u0E48\u0E21\u0E2A\u0E01\u0E23\u0E35\u0E19\u0E25\u0E32\u0E22 , \u0E04\u0E38\u0E49\u0E01\u0E01\u0E35\u0E49\u0E44\u0E2D\u0E0B\u0E34\u0E07, COLOTTA , Sticker set, ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1426, "div", 10);
    \u0275\u0275text(1427, "\u0E40\u0E02\u0E47\u0E21\u0E01\u0E25\u0E31\u0E14, Standee Cafe chibi, Coaster \u0E2A\u0E38\u0E48\u0E21, Bromide \u0E2A\u0E38\u0E48\u0E21");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1428, "img", 17);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1429, "span", 13)(1430, "span");
    \u0275\u0275text(1431, "Aug 22");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1432, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1433, "li")(1434, "div");
    \u0275\u0275element(1435, "span");
    \u0275\u0275elementStart(1436, "div", 9);
    \u0275\u0275text(1437, "[LIVE] \u0E04\u0E37\u0E19\u0E27\u0E31\u0E19\u0E1E\u0E38\u0E18\u0E40\u0E25\u0E48\u0E19\u0E40\u0E01\u0E21\u0E1C\u0E35 Five Nights at Freddy's 4");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1438, "span", 13)(1439, "span");
    \u0275\u0275text(1440, "Aug 23");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1441, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1442, "li")(1443, "div");
    \u0275\u0275element(1444, "span");
    \u0275\u0275elementStart(1445, "div", 9);
    \u0275\u0275text(1446, "[Membership] Live \u0E14\u0E37\u0E48\u0E21\u0E41\u0E1A\u0E1A\u0E2A\u0E38\u0E25\u0E15\u0E48\u0E32\u0E19");
    \u0275\u0275elementStart(1447, "span", 16);
    \u0275\u0275text(1448, "\u0E21\u0E19\u0E1C\u0E40\u0E25\u0E35\u0E49\u0E22\u0E07\u0E40\u0E2B\u0E25\u0E49\u0E32 5555");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1449, "div", 9);
    \u0275\u0275text(1450, "[Voice] DumDum - Jeff Satur");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1451, "img", 24);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1452, "span", 13)(1453, "span");
    \u0275\u0275text(1454, "Aug 24");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1455, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1456, "li")(1457, "div");
    \u0275\u0275element(1458, "span");
    \u0275\u0275elementStart(1459, "div", 9);
    \u0275\u0275text(1460, "[LIVE] Minecraft ft. ORION");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1461, "span", 13)(1462, "span");
    \u0275\u0275text(1463, "Aug 25");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1464, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1465, "li")(1466, "div");
    \u0275\u0275element(1467, "span");
    \u0275\u0275elementStart(1468, "div", 9);
    \u0275\u0275text(1469, "GemiGummi X Orion \u0E0B\u0E37\u0E49\u0E2D Gemi \u0E23\u0E31\u0E1A Photocard \u0E08\u0E34\u0E1A\u0E34");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1470, "img", 17);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1471, "span", 13)(1472, "span");
    \u0275\u0275text(1473, "Aug 26");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1474, "span");
    \u0275\u0275text(1475, "Aug 27");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(1476, "li")(1477, "div");
    \u0275\u0275element(1478, "span");
    \u0275\u0275elementStart(1479, "div", 9);
    \u0275\u0275text(1480, "\u0E21\u0E19\u0E1C\u0E0A\u0E48\u0E27\u0E22\u0E08\u0E31\u0E14\u0E40\u0E1F\u0E48\u0E27\u0E31\u0E19\u0E40\u0E01\u0E34\u0E14 Popo");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1481, "span", 13)(1482, "span");
    \u0275\u0275text(1483, "Aug 27");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1484, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1485, "li")(1486, "div");
    \u0275\u0275element(1487, "span");
    \u0275\u0275elementStart(1488, "div", 9);
    \u0275\u0275text(1489, "[LIVE] Coffee Talk Episode 2 pt.3");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1490, "span", 13)(1491, "span");
    \u0275\u0275text(1492, "Aug 28");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1493, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1494, "li")(1495, "div");
    \u0275\u0275element(1496, "span");
    \u0275\u0275elementStart(1497, "div", 9);
    \u0275\u0275text(1498, "[LIVE] \u0E01\u0E2D\u0E07\u0E42\u0E08\u0E23\u0E01\u0E34\u0E19\u0E02\u0E49\u0E32\u0E27\u0E0B\u0E2D\u0E22\u0E15\u0E2D\u0E19\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1499, "div", 9);
    \u0275\u0275text(1500, "[Voice] \u0E44\u0E2D\u0E40\u0E23\u0E32\u0E01\u0E47\u0E14\u0E31\u0E19\u0E40\u0E17\u0E48\u0E0B\u0E30\u0E14\u0E49\u0E27\u0E22 \u0E41\u0E15\u0E48\u0E40\u0E18\u0E2D\u0E17\u0E33\u0E43\u0E2B\u0E49\u0E1C\u0E39\u0E49\u0E2B\u0E0D\u0E34\u0E07\u0E04\u0E19\u0E2D\u0E37\u0E48\u0E19\u0E2A\u0E27\u0E22\u0E19\u0E49\u0E2D\u0E22\u0E25\u0E07 \u0E40\u0E02\u0E49\u0E32\u0E43\u0E08\u0E21\u0E31\u0E49\u0E22\u0E04\u0E23\u0E31\u0E1A\u0E19\u0E49\u0E33\u0E1C\u0E36\u0E49\u0E07");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1501, "span", 13)(1502, "span");
    \u0275\u0275text(1503, "Aug 29");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1504, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1505, "li")(1506, "div");
    \u0275\u0275element(1507, "span");
    \u0275\u0275elementStart(1508, "div", 9);
    \u0275\u0275text(1509, "[LIVE] \u0E04\u0E37\u0E19\u0E27\u0E31\u0E19\u0E1E\u0E38\u0E18 \u0E2D\u0E2D\u0E04\u0E42\u0E15\u0E1B\u0E38\u0E2A\u0E21\u0E32\u0E40\u0E25\u0E48\u0E32\u0E40\u0E23\u0E37\u0E48\u0E2D\u0E07\u0E1C\u0E35\u0E15\u0E2D\u0E19\u0E1A\u0E27\u0E0A");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1510, "div", 9);
    \u0275\u0275text(1511, "[LIVE] Honkai Star Rail");
    \u0275\u0275elementStart(1512, "span", 16);
    \u0275\u0275text(1513, "\u0E08\u0E49\u0E32\u0E27\u0E22\u0E25 20 \u0E42\u0E23\u0E25\u0E15\u0E36\u0E07 \u0E46");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(1514, "span", 13)(1515, "span");
    \u0275\u0275text(1516, "Aug 31");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1517, "span");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(1518, "h2", 30);
    \u0275\u0275text(1519, "September 2023");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1520, "ul")(1521, "li")(1522, "div");
    \u0275\u0275element(1523, "span");
    \u0275\u0275elementStart(1524, "div", 9);
    \u0275\u0275text(1525, "[LIVE] \u0E40\u0E25\u0E48\u0E19\u0E40\u0E01\u0E21 Unpacking");
    \u0275\u0275elementStart(1526, "span", 16);
    \u0275\u0275text(1527, "Popo \u0E02\u0E2D\u0E1A\u0E04\u0E38\u0E13\u0E21\u0E19\u0E1C\u0E17\u0E35\u0E48\u0E0A\u0E48\u0E27\u0E22\u0E08\u0E31\u0E14\u0E40\u0E1F\u0E48\u0E27\u0E31\u0E19\u0E40\u0E01\u0E34\u0E14");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(1528, "span", 13)(1529, "span");
    \u0275\u0275text(1530, "Sep 01");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1531, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1532, "li")(1533, "div");
    \u0275\u0275element(1534, "span");
    \u0275\u0275elementStart(1535, "div", 9);
    \u0275\u0275text(1536, "Standee ORION - Escape From The Sky");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1537, "img", 26);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1538, "span", 13)(1539, "span");
    \u0275\u0275text(1540, "Sep 01");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1541, "span");
    \u0275\u0275text(1542, "Sep 03");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(1543, "li")(1544, "div");
    \u0275\u0275element(1545, "span");
    \u0275\u0275elementStart(1546, "div", 9);
    \u0275\u0275text(1547, "[LIVE] Coffee Talk Episode 2 pt.4");
    \u0275\u0275elementStart(1548, "span", 16);
    \u0275\u0275text(1549, "\u0E21\u0E19\u0E1C\u0E1B\u0E23\u0E36\u0E01\u0E29\u0E32\u0E40\u0E23\u0E37\u0E48\u0E2D\u0E07\u0E02\u0E2D\u0E41\u0E15\u0E48\u0E07\u0E07\u0E32\u0E19");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(1550, "span", 13)(1551, "span");
    \u0275\u0275text(1552, "Sep 04");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1553, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1554, "li")(1555, "div");
    \u0275\u0275element(1556, "span");
    \u0275\u0275elementStart(1557, "div", 9);
    \u0275\u0275text(1558, "[LIVE] \u0E04\u0E37\u0E19\u0E27\u0E31\u0E19\u0E1E\u0E38\u0E18\u0E16\u0E35\u0E1A Stalker \u0E40\u0E01\u0E21 PARASOCIAL");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1559, "span", 13)(1560, "span");
    \u0275\u0275text(1561, "Sep 06");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1562, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1563, "li")(1564, "div");
    \u0275\u0275element(1565, "span");
    \u0275\u0275elementStart(1566, "div", 9);
    \u0275\u0275text(1567, "[LIVE] Overcooked 2");
    \u0275\u0275elementStart(1568, "span", 16);
    \u0275\u0275text(1569, "\u0E02\u0E33\u0E1B\u0E2D\u0E14\u0E42\u0E22\u0E01");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1570, "div", 9);
    \u0275\u0275text(1571, "[Voice] \u0E1E\u0E48\u0E2D\u0E41\u0E21\u0E27\u0E21\u0E37\u0E2D\u0E43\u0E2B\u0E21\u0E48");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1572, "span", 13)(1573, "span");
    \u0275\u0275text(1574, "Sep 08");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1575, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1576, "li")(1577, "div");
    \u0275\u0275element(1578, "span");
    \u0275\u0275elementStart(1579, "div", 9);
    \u0275\u0275text(1580, "[LIVE] \u0E04\u0E25\u0E32\u0E2A\u0E19\u0E49\u0E33\u0E2B\u0E2D\u0E21");
    \u0275\u0275elementStart(1581, "span", 16);
    \u0275\u0275text(1582, "\u0E1B\u0E49\u0E32\u0E22\u0E22\u0E32\u0E19\u0E49\u0E33\u0E2B\u0E2D\u0E21 Butterfly");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(1583, "span", 13)(1584, "span");
    \u0275\u0275text(1585, "Sep 09");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1586, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1587, "li")(1588, "div");
    \u0275\u0275element(1589, "span");
    \u0275\u0275elementStart(1590, "div", 9);
    \u0275\u0275text(1591, "[LIVE] \u0E21\u0E32\u0E04\u0E38\u0E22\u0E43\u0E2B\u0E49\u0E1F\u0E31\u0E07\u0E40\u0E01\u0E35\u0E48\u0E22\u0E27\u0E01\u0E31\u0E1A\u0E2D\u0E32\u0E2B\u0E32\u0E23\u0E41\u0E25\u0E30\u0E01\u0E32\u0E23\u0E2D\u0E2D\u0E01\u0E01\u0E33\u0E25\u0E31\u0E07\u0E01\u0E32\u0E22 (Spon Gemi Gummy)");
    \u0275\u0275elementStart(1592, "span", 16);
    \u0275\u0275text(1593, "\u0E40\u0E2A\u0E37\u0E49\u0E2D\u0E01\u0E25\u0E49\u0E32\u0E21\u0E0A\u0E31\u0E0A\u0E0A\u0E32\u0E15\u0E34 55555");
    \u0275\u0275elementEnd()();
    \u0275\u0275element(1594, "img", 26);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1595, "span", 13)(1596, "span");
    \u0275\u0275text(1597, "Sep 12");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1598, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1599, "li")(1600, "div");
    \u0275\u0275element(1601, "span");
    \u0275\u0275elementStart(1602, "div", 9);
    \u0275\u0275text(1603, "[LIVE] \u0E01\u0E34\u0E19\u0E1A\u0E30\u0E2B\u0E21\u0E35\u0E48\u0E01\u0E36\u0E48\u0E07\u0E2A\u0E33\u0E40\u0E23\u0E47\u0E08\u0E23\u0E39\u0E1B\u0E40\u0E1B\u0E47\u0E19\u0E02\u0E49\u0E32\u0E27\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1604, "div", 9);
    \u0275\u0275text(1605, "[LIVE] \u0E42\u0E2D\u0E49\u0E17\u0E32\u0E23\u0E01 \u0E41\u0E21\u0E48\u0E19\u0E49\u0E33\u0E1C\u0E36\u0E49\u0E07 \u0E2B\u0E31\u0E27\u0E43\u0E08\u0E2B\u0E27\u0E32\u0E19 pt.1");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1606, "span", 13)(1607, "span");
    \u0275\u0275text(1608, "Sep 13");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1609, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1610, "li")(1611, "div");
    \u0275\u0275element(1612, "span");
    \u0275\u0275elementStart(1613, "div", 9);
    \u0275\u0275text(1614, "[Membership] \u0E40\u0E1B\u0E34\u0E14\u0E1A\u0E32\u0E23\u0E4C\u0E23\u0E49\u0E2D\u0E07 KARAOKE");
    \u0275\u0275elementStart(1615, "span", 16);
    \u0275\u0275text(1616, "\u0E23\u0E49\u0E2D\u0E07\u0E40\u0E1E\u0E25\u0E07\u0E2A\u0E35\u0E1F\u0E49\u0E32\u0E04\u0E23\u0E31\u0E49\u0E07\u0E41\u0E23\u0E01!");
    \u0275\u0275elementEnd()();
    \u0275\u0275element(1617, "img", 24);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1618, "span", 13)(1619, "span");
    \u0275\u0275text(1620, "Sep 16");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1621, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1622, "li")(1623, "div");
    \u0275\u0275element(1624, "span");
    \u0275\u0275elementStart(1625, "div", 9);
    \u0275\u0275text(1626, "[LIVE] \u0E04\u0E32\u0E40\u0E1F\u0E48\u0E21\u0E35\u0E1B\u0E31\u0E0D\u0E2B\u0E32 \u0E40\u0E25\u0E48\u0E19 Sea of stars \u0E41\u0E17\u0E19");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1627, "div", 9);
    \u0275\u0275text(1628, "Symple x Orion Goods");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1629, "div", 10);
    \u0275\u0275text(1630, "\u0E40\u0E2A\u0E37\u0E49\u0E2D, \u0E40\u0E02\u0E47\u0E21\u0E01\u0E25\u0E31\u0E14, \u0E1E\u0E27\u0E07\u0E01\u0E38\u0E0D\u0E41\u0E08, Photocard, Nametag, cupsleeve");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1631, "img", 17);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1632, "span", 13)(1633, "span");
    \u0275\u0275text(1634, "Sep 19");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1635, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1636, "li")(1637, "div");
    \u0275\u0275element(1638, "span");
    \u0275\u0275elementStart(1639, "div", 9);
    \u0275\u0275text(1640, "[LIVE] \u0E42\u0E2D\u0E49\u0E17\u0E32\u0E23\u0E01 \u0E41\u0E21\u0E48\u0E19\u0E49\u0E33\u0E1C\u0E36\u0E49\u0E07 \u0E2B\u0E31\u0E27\u0E43\u0E08\u0E2B\u0E27\u0E32\u0E19 pt.2");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1641, "span", 13)(1642, "span");
    \u0275\u0275text(1643, "Sep 21");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1644, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1645, "li")(1646, "div");
    \u0275\u0275element(1647, "span");
    \u0275\u0275elementStart(1648, "div", 9);
    \u0275\u0275text(1649, "[LIVE] Escape the Backrooms ft. ORION \u0E2B\u0E19\u0E35\u0E15\u0E32\u0E22 pt.1");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1650, "span", 13)(1651, "span");
    \u0275\u0275text(1652, "Sep 22");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1653, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1654, "li")(1655, "div");
    \u0275\u0275element(1656, "span");
    \u0275\u0275elementStart(1657, "div", 9);
    \u0275\u0275text(1658, "TCC Random Bromide, Photocard \u0E43\u0E2A EFTS & Key visual");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1659, "img", 17);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1660, "span", 13)(1661, "span");
    \u0275\u0275text(1662, "Sep 22");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1663, "span");
    \u0275\u0275text(1664, "Sep 24");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(1665, "li")(1666, "div");
    \u0275\u0275element(1667, "span");
    \u0275\u0275elementStart(1668, "div", 9);
    \u0275\u0275text(1669, "[Membership] Free Talk");
    \u0275\u0275elementStart(1670, "span", 16);
    \u0275\u0275text(1671, "\u0E23\u0E49\u0E2D\u0E07 I see the light");
    \u0275\u0275elementEnd()();
    \u0275\u0275element(1672, "img", 24);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1673, "span", 13)(1674, "span");
    \u0275\u0275text(1675, "Sep 23");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1676, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1677, "li", 14)(1678, "div");
    \u0275\u0275element(1679, "span");
    \u0275\u0275elementStart(1680, "div", 9);
    \u0275\u0275text(1681, "(Thai version) \u30AD\u30BF\u30CB\u30BF\u30C4\u30E4 - \u9752\u306E\u3059\u307F\u304B / Where our blue is (Schneider ver.)");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1682, "img", 15);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1683, "span", 13)(1684, "span");
    \u0275\u0275text(1685, "Sep 26");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1686, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1687, "li")(1688, "div");
    \u0275\u0275element(1689, "span");
    \u0275\u0275elementStart(1690, "div", 9);
    \u0275\u0275text(1691, "[LIVE] \u0E1E\u0E39\u0E14\u0E16\u0E36\u0E07\u0E01\u0E32\u0E23\u0E41\u0E15\u0E48\u0E07\u0E40\u0E19\u0E37\u0E49\u0E2D\u0E40\u0E1E\u0E25\u0E07 Where Our Blue Is");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1692, "div", 9);
    \u0275\u0275text(1693, "[PIC] \u0E0B\u0E31\u0E1A\u0E40\u0E27\u0E22\u0E4C\u0E40\u0E17\u0E48\u0E32\u0E04\u0E35\u0E22\u0E4C\u0E1A\u0E2D\u0E23\u0E4C\u0E14");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1694, "span", 13)(1695, "span");
    \u0275\u0275text(1696, "Sep 27");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1697, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1698, "li")(1699, "div");
    \u0275\u0275element(1700, "span");
    \u0275\u0275elementStart(1701, "div", 9);
    \u0275\u0275text(1702, "[Membership] \u0E07\u0E39\u0E49\u0E22\u0E22\u0E22\u0E22 \u0E02\u0E2D\u0E1A\u0E04\u0E38\u0E13\u0E17\u0E35\u0E48\u0E40\u0E25\u0E35\u0E49\u0E22\u0E07\u0E40\u0E04\u0E23\u0E37\u0E48\u0E2D\u0E07\u0E14\u0E37\u0E48\u0E21\u0E19\u0E30\u0E04\u0E23\u0E31\u0E1A\u0E2A\u0E38\u0E14\u0E2A\u0E27\u0E22\u0E2B\u0E4C");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1703, "img", 24);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1704, "span", 13)(1705, "span");
    \u0275\u0275text(1706, "Sep 30");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1707, "span");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(1708, "h2", 31);
    \u0275\u0275text(1709, "October 2023");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1710, "ul")(1711, "li")(1712, "div");
    \u0275\u0275element(1713, "span");
    \u0275\u0275elementStart(1714, "div", 9);
    \u0275\u0275text(1715, "[LIVE] Coffee Talk Episode 2 pt.5");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1716, "span", 13)(1717, "span");
    \u0275\u0275text(1718, "Oct 02");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1719, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1720, "li")(1721, "div");
    \u0275\u0275element(1722, "span");
    \u0275\u0275elementStart(1723, "div", 9);
    \u0275\u0275text(1724, "[LIVE] #ARProducersRelay \u0E0A\u0E19\u0E14\u0E41\u0E15\u0E48\u0E07\u0E40\u0E19\u0E37\u0E49\u0E2D ft. Magnum, Zekai");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1725, "span", 13)(1726, "span");
    \u0275\u0275text(1727, "Oct 11");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1728, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1729, "li")(1730, "div");
    \u0275\u0275element(1731, "span");
    \u0275\u0275elementStart(1732, "div", 9);
    \u0275\u0275text(1733, "[LIVE] ASMR Talking");
    \u0275\u0275elementStart(1734, "span", 16);
    \u0275\u0275text(1735, "\u0E2B\u0E31\u0E27\u0E2B\u0E2D\u0E21\u0E01\u0E31\u0E14\u0E02\u0E32\u0E44\u0E21\u0E04\u0E4C");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(1736, "span", 13)(1737, "span");
    \u0275\u0275text(1738, "Oct 12");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1739, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1740, "li")(1741, "div");
    \u0275\u0275element(1742, "span");
    \u0275\u0275elementStart(1743, "div", 9);
    \u0275\u0275text(1744, "AYRA x ORION");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1745, "div", 10);
    \u0275\u0275text(1746, "Ribbon ORION \u0E41\u0E22\u0E01\u0E40\u0E21\u0E21 , Tote bag Davils & Angels");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1747, "div", 10);
    \u0275\u0275text(1748, "\u0E0B\u0E37\u0E49\u0E2D\u0E2B\u0E19\u0E31\u0E07\u0E2A\u0E37\u0E2D\u0E25\u0E38\u0E49\u0E19 Standee Limited Edition");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1749, "img", 17);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1750, "span", 13)(1751, "span");
    \u0275\u0275text(1752, "Oct 12");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1753, "span");
    \u0275\u0275text(1754, "Oct 23");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(1755, "li")(1756, "div");
    \u0275\u0275element(1757, "span");
    \u0275\u0275elementStart(1758, "div", 9);
    \u0275\u0275text(1759, "[LIVE] \u0E28\u0E38\u0E01\u0E23\u0E4C 13 \u0E41\u0E01\u0E4A\u0E07\u0E2B\u0E31\u0E27\u0E2B\u0E2D\u0E21\u0E25\u0E49\u0E2D\u0E21\u0E27\u0E07 AYRA x ORION");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1760, "img", 26);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1761, "span", 13)(1762, "span");
    \u0275\u0275text(1763, "Oct 13");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1764, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1765, "li")(1766, "div");
    \u0275\u0275element(1767, "span");
    \u0275\u0275elementStart(1768, "div", 9);
    \u0275\u0275text(1769, "\u0E40\u0E1B\u0E34\u0E14\u0E2B\u0E21\u0E27\u0E01\u0E14\u0E32\u0E01\u0E30 \u0E41\u0E21\u0E48\u0E19\u0E49\u0E33\u0E1C\u0E36\u0E49\u0E07\u0E23\u0E27\u0E21\u0E15\u0E31\u0E27\u0E42\u0E14\u0E22\u0E21\u0E34\u0E44\u0E14\u0E49\u0E19\u0E31\u0E14\u0E2B\u0E21\u0E32\u0E22");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1770, "div", 9);
    \u0275\u0275text(1771, "[PIC] \u0E2B\u0E31\u0E27\u0E2B\u0E2D\u0E21\u0E2D\u0E22\u0E32\u0E01\u0E41\u0E17\u0E47\u0E01\u0E21\u0E31\u0E07\u0E08\u0E38\u0E4A\u0E14\u0E01\u0E31\u0E1A\u0E19\u0E49\u0E32\u0E19\u0E49\u0E33\u0E1C\u0E36\u0E49\u0E07");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1772, "span", 13)(1773, "span");
    \u0275\u0275text(1774, "Oct 14");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1775, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1776, "li")(1777, "div");
    \u0275\u0275element(1778, "span");
    \u0275\u0275elementStart(1779, "div", 9);
    \u0275\u0275text(1780, "[LIVE] Coffee Talk Episode 2 pt.6");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1781, "span", 13)(1782, "span");
    \u0275\u0275text(1783, "Oct 17");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1784, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1785, "li")(1786, "div");
    \u0275\u0275element(1787, "span");
    \u0275\u0275elementStart(1788, "div", 9);
    \u0275\u0275text(1789, "[Membership] \u0E41\u0E15\u0E48\u0E07\u0E40\u0E19\u0E37\u0E49\u0E2D Merry-Go-Around \u0E43\u0E2B\u0E49\u0E14\u0E32\u0E01\u0E30");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1790, "img", 24);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1791, "span", 13)(1792, "span");
    \u0275\u0275text(1793, "Oct 19");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1794, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1795, "li", 14)(1796, "div");
    \u0275\u0275element(1797, "span");
    \u0275\u0275elementStart(1798, "div", 9);
    \u0275\u0275text(1799, "Escape from the (blue) sky\u300C ORION feat. NeX Wonder \u300D");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1800, "img", 15);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1801, "span", 13)(1802, "span");
    \u0275\u0275text(1803, "Oct 20");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1804, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1805, "li", 14)(1806, "div");
    \u0275\u0275element(1807, "span");
    \u0275\u0275elementStart(1808, "div", 9);
    \u0275\u0275text(1809, "TGS 2023");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1810, "div", 10);
    \u0275\u0275text(1811, "TGS Goods - \u0E40\u0E02\u0E47\u0E21\u0E01\u0E25\u0E31\u0E14 EFTS, \u0E1E\u0E27\u0E01\u0E01\u0E38\u0E0D\u0E41\u0E08\u0E2A\u0E38\u0E48\u0E21 Pocari");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1812, "div", 10);
    \u0275\u0275text(1813, " Desk Mat, \u0E40\u0E2A\u0E37\u0E49\u0E2D. \u0E41\u0E1F\u0E49\u0E21, Keyring Producer Collection");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1814, "img", 19);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1815, "span", 13)(1816, "span");
    \u0275\u0275text(1817, "Oct 20");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1818, "span");
    \u0275\u0275text(1819, "Oct 22");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(1820, "li")(1821, "div");
    \u0275\u0275element(1822, "span");
    \u0275\u0275elementStart(1823, "div", 9);
    \u0275\u0275text(1824, "[Post] \u0E1A\u0E2D\u0E01\u0E23\u0E31\u0E01");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1825, "div", 9);
    \u0275\u0275text(1826, "[PIC] \u0E1E\u0E32\u0E2B\u0E31\u0E27\u0E2B\u0E2D\u0E21\u0E21\u0E32\u0E41\u0E1E\u0E49\u0E14\u0E46 \u0E21\u0E19\u0E1C\u0E2B\u0E25\u0E31\u0E07 TGS");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1827, "span", 13)(1828, "span");
    \u0275\u0275text(1829, "Oct 22");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1830, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1831, "li")(1832, "div");
    \u0275\u0275element(1833, "span");
    \u0275\u0275elementStart(1834, "div", 9);
    \u0275\u0275text(1835, "[LIVE] Algor PewPew");
    \u0275\u0275elementStart(1836, "span", 16);
    \u0275\u0275text(1837, "\u0E2A\u0E1B\u0E2D\u0E19\u0E40\u0E0B\u0E2D\u0E23\u0E4C\u0E1A\u0E32\u0E22\u0E04\u0E38\u0E13\u0E40\u0E1B\u0E47\u0E14");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(1838, "span", 13)(1839, "span");
    \u0275\u0275text(1840, "Oct 24");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1841, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1842, "li")(1843, "div");
    \u0275\u0275element(1844, "span");
    \u0275\u0275elementStart(1845, "div", 9);
    \u0275\u0275text(1846, "[LIVE] ORION Talk & MV Watch Party 'Escape From Blue Sky'");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1847, "div", 9);
    \u0275\u0275text(1848, "[PIC] \u0E04\u0E19\u0E2D\u0E30\u0E44\u0E23\u0E2B\u0E25\u0E48\u0E2D\u0E22\u0E31\u0E19\u0E40\u0E07\u0E32\u0E21\u0E37\u0E2D");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1849, "span", 13)(1850, "span");
    \u0275\u0275text(1851, "Oct 25");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1852, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1853, "li", 14)(1854, "div");
    \u0275\u0275element(1855, "span");
    \u0275\u0275elementStart(1856, "div", 9);
    \u0275\u0275text(1857, "Schneider - Friday Night [Thai ver.] 2M Views");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1858, "img", 19);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1859, "span", 13)(1860, "span");
    \u0275\u0275text(1861, "Oct 26");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1862, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1863, "li")(1864, "div");
    \u0275\u0275element(1865, "span");
    \u0275\u0275elementStart(1866, "div", 9);
    \u0275\u0275text(1867, "[Membership] \u0E08\u0E30\u0E15\u0E2D\u0E1A\u0E01\u0E25\u0E31\u0E1A\u0E17\u0E38\u0E01\u0E42\u0E14\u0E40\u0E19\u0E17\u0E14\u0E49\u0E27\u0E22\u0E21\u0E38\u0E01\u0E41\u0E2A\u0E01\u0E21\u0E40\u0E21\u0E2D\u0E23\u0E4C");
    \u0275\u0275elementStart(1868, "span", 16);
    \u0275\u0275text(1869, "\u0E0A\u0E44\u0E19\u0E40\u0E1A\u0E49\u0E2D");
    \u0275\u0275elementEnd()();
    \u0275\u0275element(1870, "img", 24);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1871, "span", 13)(1872, "span");
    \u0275\u0275text(1873, "Oct 26");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1874, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1875, "li")(1876, "div");
    \u0275\u0275element(1877, "span");
    \u0275\u0275elementStart(1878, "div", 9);
    \u0275\u0275text(1879, "[PIC] \u0E0A\u0E32\u0E2A\u0E15\u0E23\u0E2D\u0E27\u0E4C\u0E40\u0E1A\u0E2D\u0E23\u0E4C\u0E23\u0E35 Cold Brew");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1880, "span", 13)(1881, "span");
    \u0275\u0275text(1882, "Oct 30");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1883, "span");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(1884, "h2", 32);
    \u0275\u0275text(1885, "November 2023");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1886, "ul")(1887, "li")(1888, "div");
    \u0275\u0275element(1889, "span");
    \u0275\u0275elementStart(1890, "div", 9);
    \u0275\u0275text(1891, "[LIVE] Coffee Talk Episode 2 pt.6");
    \u0275\u0275elementStart(1892, "span", 16);
    \u0275\u0275text(1893, "\u0E1E\u0E32\u0E23\u0E4C\u0E17 6.2 \u0E2B\u0E23\u0E2D\u0E1E\u0E35\u0E48");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1894, "div", 9);
    \u0275\u0275text(1895, "[Voice] \u0E15\u0E31\u0E27\u0E23\u0E49\u0E32\u0E22\u0E17\u0E35\u0E48\u0E23\u0E31\u0E01\u0E40\u0E18\u0E2D - \u0E17\u0E28\u0E01\u0E31\u0E13\u0E10\u0E4C");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1896, "span", 13)(1897, "span");
    \u0275\u0275text(1898, "Nov 01");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1899, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1900, "li")(1901, "div");
    \u0275\u0275element(1902, "span");
    \u0275\u0275elementStart(1903, "div", 9);
    \u0275\u0275text(1904, "[PIC] \u0E41\u0E27\u0E30\u0E2D\u0E31\u0E14\u0E40\u0E1E\u0E25\u0E07\u0E1A\u0E49\u0E32\u0E19\u0E14\u0E32\u0E01\u0E30");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1905, "span", 13)(1906, "span");
    \u0275\u0275text(1907, "Nov 02");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1908, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1909, "li", 14)(1910, "div");
    \u0275\u0275element(1911, "span");
    \u0275\u0275elementStart(1912, "div", 9);
    \u0275\u0275text(1913, "\u30AD\u30BF\u30CB\u30BF\u30C4\u30E4 - \u9752\u306E\u3059\u307F\u304B / Where our blue is (Schneider ver.) 1M Views");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1914, "img", 19);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1915, "span", 13)(1916, "span");
    \u0275\u0275text(1917, "Nov 03");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1918, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1919, "li")(1920, "div");
    \u0275\u0275element(1921, "span");
    \u0275\u0275elementStart(1922, "div", 9);
    \u0275\u0275text(1923, "[LIVE] Free Talk \u0E44\u0E25\u0E1F\u0E4C 7 \u0E0A\u0E31\u0E48\u0E27\u0E42\u0E21\u0E07\u0E43\u0E19\u0E15\u0E33\u0E19\u0E32\u0E19");
    \u0275\u0275elementStart(1924, "span", 16);
    \u0275\u0275text(1925, "\u0E19\u0E2D\u0E19\u0E43\u0E2B\u0E49\u0E40\u0E15\u0E34\u0E21\u0E2B\u0E25\u0E2D\u0E14");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(1926, "span", 13)(1927, "span");
    \u0275\u0275text(1928, "Nov 03");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1929, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1930, "li")(1931, "div");
    \u0275\u0275element(1932, "span");
    \u0275\u0275elementStart(1933, "div", 9);
    \u0275\u0275text(1934, "[Voice] \u0E2A\u0E1B\u0E2D\u0E22\u0E40\u0E1E\u0E25\u0E07\u0E41\u0E14\u0E07\u0E08\u0E23\u0E31\u0E2A\u0E2A\u0E01\u0E32\u0E22");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1935, "span", 13)(1936, "span");
    \u0275\u0275text(1937, "Nov 05");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1938, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1939, "li")(1940, "div");
    \u0275\u0275element(1941, "span");
    \u0275\u0275elementStart(1942, "div", 9);
    \u0275\u0275text(1943, "[LIVE] Coffee Talk Episode 2 pt.7");
    \u0275\u0275elementStart(1944, "span", 16);
    \u0275\u0275text(1945, "\u0E1E\u0E35\u0E48\u0E0A\u0E44\u0E19\u0E40\u0E1B\u0E34\u0E14\u0E43\u0E08\u0E04\u0E38\u0E22");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(1946, "span", 13)(1947, "span");
    \u0275\u0275text(1948, "Nov 07");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1949, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1950, "li")(1951, "div");
    \u0275\u0275element(1952, "span");
    \u0275\u0275elementStart(1953, "div", 9);
    \u0275\u0275text(1954, "[LIVE] Free Talk \u0E01\u0E48\u0E2D\u0E19\u0E40\u0E02\u0E49\u0E32\u0E27\u0E31\u0E19\u0E2A\u0E38\u0E14\u0E2D\u0E31\u0E19\u0E15\u0E23\u0E32\u0E22");
    \u0275\u0275elementStart(1955, "span", 16);
    \u0275\u0275text(1956, "\u0E21\u0E30\u0E27\u0E34\u0E49\u0E07\u0E21\u0E30\u0E41\u0E27\u0E49\u0E07");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(1957, "span", 13)(1958, "span");
    \u0275\u0275text(1959, "Nov 08");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1960, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1961, "li", 14)(1962, "div");
    \u0275\u0275element(1963, "span");
    \u0275\u0275elementStart(1964, "div", 9);
    \u0275\u0275text(1965, "Dangerous Sky\u300CORION\u300D");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1966, "img", 15);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1967, "span", 13)(1968, "span");
    \u0275\u0275text(1969, "Nov 11");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1970, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1971, "li", 14)(1972, "div");
    \u0275\u0275element(1973, "span");
    \u0275\u0275elementStart(1974, "div", 9);
    \u0275\u0275text(1975, "First Album Shade Of Sky");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1976, "img", 19);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(1977, "span", 13)(1978, "span");
    \u0275\u0275text(1979, "Nov 12");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1980, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1981, "li")(1982, "div");
    \u0275\u0275element(1983, "span");
    \u0275\u0275elementStart(1984, "div", 9);
    \u0275\u0275text(1985, "[LIVE] \u0E1F\u0E49\u0E32\u0E40\u0E09\u0E14\u0E2A\u0E35\u0E19\u0E35\u0E49 \u0E40\u0E23\u0E32\u0E21\u0E35\u0E40\u0E23\u0E37\u0E48\u0E2D\u0E07\u0E43\u0E2B\u0E49\u0E04\u0E38\u0E22\u0E01\u0E31\u0E19\u0E40\u0E22\u0E2D\u0E30 ft. ORION");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1986, "span", 13)(1987, "span");
    \u0275\u0275text(1988, "Nov 12");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1989, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1990, "li")(1991, "div");
    \u0275\u0275element(1992, "span");
    \u0275\u0275elementStart(1993, "div", 9);
    \u0275\u0275text(1994, "[LIVE] Free Talk \u0E40\u0E01\u0E47\u0E1A\u0E15\u0E01\u0E44\u0E2D\u0E40\u0E14\u0E35\u0E22\u0E15\u0E2D\u0E19\u0E41\u0E15\u0E48\u0E07\u0E40\u0E1E\u0E25\u0E07 Dangerous Sky");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1995, "span", 13)(1996, "span");
    \u0275\u0275text(1997, "Nov 13");
    \u0275\u0275elementEnd();
    \u0275\u0275element(1998, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(1999, "li")(2e3, "div");
    \u0275\u0275element(2001, "span");
    \u0275\u0275elementStart(2002, "div", 9);
    \u0275\u0275text(2003, "[LIVE] Coffee Talk Episode 2 pt.8");
    \u0275\u0275elementStart(2004, "span", 16);
    \u0275\u0275text(2005, "\u0E23\u0E49\u0E2D\u0E07 Paranoia");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2006, "div", 9);
    \u0275\u0275text(2007, "[Post] \u0E27\u0E34\u0E18\u0E35\u0E01\u0E32\u0E23\u0E2A\u0E48\u0E07\u0E40\u0E14\u0E42\u0E21\u0E48\u0E43\u0E2B\u0E49\u0E0A\u0E19\u0E38\u0E07\u0E14\u0E38\u0E22 \u0E2D\u0E38\u0E23\u0E38\u0E20\u0E31\u0E22");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2008, "span", 13)(2009, "span");
    \u0275\u0275text(2010, "Nov 14");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2011, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2012, "li")(2013, "div");
    \u0275\u0275element(2014, "span");
    \u0275\u0275elementStart(2015, "div", 9);
    \u0275\u0275text(2016, "[LIVE] Escape the Backrooms ft. ORION pt.2");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2017, "span", 13)(2018, "span");
    \u0275\u0275text(2019, "Nov 15");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2020, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2021, "li")(2022, "div");
    \u0275\u0275element(2023, "span");
    \u0275\u0275elementStart(2024, "div", 9);
    \u0275\u0275text(2025, "[LIVE] KARAOKE");
    \u0275\u0275elementStart(2026, "span", 16);
    \u0275\u0275text(2027, "\u0E1E\u0E39\u0E14\u0E16\u0E36\u0E07\u0E21\u0E19\u0E1C\u0E2A\u0E48\u0E07\u0E40\u0E1B\u0E35\u0E22\u0E42\u0E19\u0E43\u0E2B\u0E49\u0E43\u0E19\u0E42\u0E2D\u0E01\u0E32\u0E2A 200K");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(2028, "span", 13)(2029, "span");
    \u0275\u0275text(2030, "Nov 18");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2031, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2032, "li")(2033, "div");
    \u0275\u0275element(2034, "span");
    \u0275\u0275elementStart(2035, "div", 9);
    \u0275\u0275text(2036, "[Post] \u0E2D\u0E31\u0E19\u0E40\u0E14\u0E2D\u0E23\u0E4C\u0E04\u0E31\u0E17\u0E41\u0E1A\u0E1A\u0E44\u0E16\u0E02\u0E49\u0E32\u0E07\u0E2B\u0E25\u0E31\u0E07\u0E2A\u0E39\u0E07\u0E01\u0E48\u0E33\u0E44\u0E1B\u0E2B\u0E19\u0E48\u0E2D\u0E22");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2037, "span", 13)(2038, "span");
    \u0275\u0275text(2039, "Nov 20");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2040, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2041, "li")(2042, "div");
    \u0275\u0275element(2043, "span");
    \u0275\u0275elementStart(2044, "div", 9);
    \u0275\u0275text(2045, "[LIVE] Free Talk \u0E21\u0E32\u0E1A\u0E48\u0E19\u0E40\u0E23\u0E37\u0E48\u0E2D\u0E07\u0E17\u0E23\u0E07\u0E1C\u0E21\u0E40\u0E09\u0E22 \u0E46");
    \u0275\u0275elementStart(2046, "span", 16);
    \u0275\u0275text(2047, "\u0E01\u0E48\u0E33 5555");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(2048, "span", 13)(2049, "span");
    \u0275\u0275text(2050, "Nov 21");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2051, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2052, "li")(2053, "div");
    \u0275\u0275element(2054, "span");
    \u0275\u0275elementStart(2055, "div", 9);
    \u0275\u0275text(2056, "[LIVE] Coffee Talk Episode 2 pt.9");
    \u0275\u0275elementStart(2057, "span", 16);
    \u0275\u0275text(2058, "\u0E02\u0E2D\u0E1A\u0E04\u0E38\u0E13\u0E21\u0E19\u0E1C\u0E17\u0E35\u0E48\u0E2D\u0E22\u0E39\u0E48\u0E14\u0E49\u0E27\u0E22\u0E01\u0E31\u0E19\u0E21\u0E32\u0E08\u0E19\u0E16\u0E36\u0E07 200K");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(2059, "span", 13)(2060, "span");
    \u0275\u0275text(2061, "Nov 22");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2062, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2063, "li", 14)(2064, "div");
    \u0275\u0275element(2065, "span");
    \u0275\u0275elementStart(2066, "div", 9);
    \u0275\u0275text(2067, "200K Subscribers!!");
    \u0275\u0275elementStart(2068, "span", 16);
    \u0275\u0275text(2069, "#2\u0E41\u0E2A\u0E19\u0E0B\u0E31\u0E1A\u0E1E\u0E35\u0E48\u0E0A\u0E44\u0E19\u0E23\u0E31\u0E1A\u0E23\u0E31\u0E01\u0E44\u0E14\u0E49\u0E2B\u0E23\u0E37\u0E2D\u0E22\u0E31\u0E07");
    \u0275\u0275elementEnd()();
    \u0275\u0275element(2070, "img", 19);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2071, "span", 13)(2072, "span");
    \u0275\u0275text(2073, "Nov 22");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2074, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2075, "li")(2076, "div");
    \u0275\u0275element(2077, "span");
    \u0275\u0275elementStart(2078, "div", 9);
    \u0275\u0275text(2079, "[PIC] \u0E25\u0E07\u0E23\u0E39\u0E1B\u0E40\u0E1B\u0E35\u0E22\u0E42\u0E19 \u0E2B\u0E39\u0E1F\u0E31\u0E07\u0E02\u0E2D\u0E07\u0E02\u0E27\u0E31\u0E0D 200K \u0E08\u0E32\u0E01\u0E21\u0E19\u0E1C");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2080, "span", 13)(2081, "span");
    \u0275\u0275text(2082, "Nov 23");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2083, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2084, "li")(2085, "div");
    \u0275\u0275element(2086, "span");
    \u0275\u0275elementStart(2087, "div", 9);
    \u0275\u0275text(2088, "[Membership] \u0E41\u0E15\u0E48\u0E48\u0E07\u0E40\u0E19\u0E37\u0E49\u0E2D\u0E40\u0E1E\u0E25\u0E07 Osmanthus");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2089, "img", 24);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2090, "span", 13)(2091, "span");
    \u0275\u0275text(2092, "Nov 25");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2093, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2094, "li")(2095, "div");
    \u0275\u0275element(2096, "span");
    \u0275\u0275elementStart(2097, "div", 9);
    \u0275\u0275text(2098, "[LIVE] Free Talk \u0E40\u0E21\u0E49\u0E32\u0E41\u0E0B\u0E48\u0E1A\u0E27\u0E31\u0E19\u0E08\u0E31\u0E19\u0E17\u0E23\u0E4C");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2099, "span", 13)(2100, "span");
    \u0275\u0275text(2101, "Nov 27");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2102, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2103, "li")(2104, "div");
    \u0275\u0275element(2105, "span");
    \u0275\u0275elementStart(2106, "div", 9);
    \u0275\u0275text(2107, "[LIVE] Free Talk \u0E40\u0E21\u0E49\u0E32\u0E41\u0E0B\u0E48\u0E1A\u0E27\u0E31\u0E19\u0E08\u0E31\u0E19\u0E17\u0E23\u0E4C");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2108, "span", 13)(2109, "span");
    \u0275\u0275text(2110, "Nov 27");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2111, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2112, "li")(2113, "div");
    \u0275\u0275element(2114, "span");
    \u0275\u0275elementStart(2115, "div", 9);
    \u0275\u0275text(2116, "[LIVE] Coffee Talk Episode 2 pt.10");
    \u0275\u0275elementStart(2117, "span", 16);
    \u0275\u0275text(2118, "\u0E42\u0E14\u0E40\u0E19\u0E17\u0E04\u0E48\u0E32\u0E44\u0E21\u0E04\u0E4C");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(2119, "span", 13)(2120, "span");
    \u0275\u0275text(2121, "Nov 28");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2122, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2123, "li", 14)(2124, "div");
    \u0275\u0275element(2125, "span");
    \u0275\u0275elementStart(2126, "div", 9);
    \u0275\u0275text(2127, "Dangerous Sky\u300CORION\u300D1M Views");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2128, "img", 19);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2129, "span", 13)(2130, "span");
    \u0275\u0275text(2131, "Nov 29");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2132, "span");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(2133, "h2", 33);
    \u0275\u0275text(2134, "December 2023");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2135, "ul")(2136, "li")(2137, "div");
    \u0275\u0275element(2138, "span");
    \u0275\u0275elementStart(2139, "div", 9);
    \u0275\u0275text(2140, "[PIC] \u0E40\u0E23\u0E32\u0E01\u0E47\u0E21\u0E35\u0E23\u0E39\u0E1B\u0E04\u0E39\u0E48\u0E01\u0E31\u0E19\u0E19\u0E30 \u0E2B\u0E21\u0E32\u0E22\u0E16\u0E36\u0E07\u0E2B\u0E25\u0E32\u0E22\u0E04\u0E39\u0E48\u0E40\u0E25\u0E22");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2141, "span", 13)(2142, "span");
    \u0275\u0275text(2143, "Dec 01");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2144, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2145, "li")(2146, "div");
    \u0275\u0275element(2147, "span");
    \u0275\u0275elementStart(2148, "div", 9);
    \u0275\u0275text(2149, "[LIVE] Animal Party ft. Evalia, Ark, Aoi, Zekai, Hyouga");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2150, "span", 13)(2151, "span");
    \u0275\u0275text(2152, "Dec 02");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2153, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2154, "li")(2155, "div");
    \u0275\u0275element(2156, "span");
    \u0275\u0275elementStart(2157, "div", 9);
    \u0275\u0275text(2158, "[LIVE] KARAOKE \u0E41\u0E1A\u0E1A\u0E40\u0E2A\u0E2D\u0E44\u0E1E\u0E49");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2159, "span", 13)(2160, "span");
    \u0275\u0275text(2161, "Dec 07");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2162, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2163, "li", 14)(2164, "div");
    \u0275\u0275element(2165, "span");
    \u0275\u0275elementStart(2166, "div", 9);
    \u0275\u0275text(2167, "Algor Arcana");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2168, "div", 10);
    \u0275\u0275text(2169, "POCARI SWEAT x ORION Exclusive Lucky Draw");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2170, "div", 10);
    \u0275\u0275text(2171, "\u0E40\u0E01\u0E47\u0E1A\u0E1D\u0E32\u0E41\u0E25\u0E01 Poster Pocari, \u0E0B\u0E37\u0E49\u0E2D 1 \u0E25\u0E31\u0E07\u0E41\u0E25\u0E01\u0E1E\u0E31\u0E14 Pocari");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2172, "div", 10);
    \u0275\u0275text(2173, "AYRA x ORION - \u0E1E\u0E27\u0E07\u0E01\u0E38\u0E0D\u0E41\u0E08\u0E14\u0E48\u0E2D\u0E07 , \u0E23\u0E34\u0E1A\u0E1A\u0E34\u0E49\u0E19\u0E14\u0E48\u0E2D\u0E07 ORION");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2174, "div", 9);
    \u0275\u0275text(2175, "Algor Arcana goods");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2176, "div", 10);
    \u0275\u0275text(2177, "tarot card, standee, \u0E40\u0E17\u0E35\u0E22\u0E19\u0E2B\u0E2D\u0E21, tarot artbook, calendar, ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2178, "div", 10);
    \u0275\u0275text(2179, "\u0E40\u0E02\u0E47\u0E21\u0E01\u0E25\u0E31\u0E14 ARP \u0E2B\u0E07\u0E38\u0E07, NameSticker, ORION x LOGA Mouse Pad");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2180, "div", 9);
    \u0275\u0275text(2181, "\u0E21\u0E19\u0E1C\u0E23\u0E27\u0E21\u0E15\u0E31\u0E27 Algor Arcana");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2182, "img", 19);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2183, "span", 13)(2184, "span");
    \u0275\u0275text(2185, "Dec 09");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2186, "span");
    \u0275\u0275text(2187, "Dec 10");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(2188, "li")(2189, "div");
    \u0275\u0275element(2190, "span");
    \u0275\u0275elementStart(2191, "div", 9);
    \u0275\u0275text(2192, "[Voice] \u0E1F\u0E49\u0E32\u0E42\u0E2D\u0E19\u0E43\u0E2B\u0E49\u0E1E\u0E48\u0E2D\u0E2B\u0E19\u0E48\u0E2D\u0E22\u0E44\u0E14\u0E49\u0E21\u0E31\u0E49\u0E22");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2193, "span", 13)(2194, "span");
    \u0275\u0275text(2195, "Dec 11");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2196, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2197, "li")(2198, "div");
    \u0275\u0275element(2199, "span");
    \u0275\u0275elementStart(2200, "div", 9);
    \u0275\u0275text(2201, "[PIC] \u0E1F\u0E49\u0E32\u0E0B\u0E37\u0E49\u0E2D\u0E2D\u0E30\u0E44\u0E23\u0E43\u0E2B\u0E49\u0E1E\u0E48\u0E2D\u0E40\u0E19\u0E35\u0E48\u0E22 (Gucci)");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2202, "span", 13)(2203, "span");
    \u0275\u0275text(2204, "Dec 12");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2205, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2206, "li")(2207, "div");
    \u0275\u0275element(2208, "span");
    \u0275\u0275elementStart(2209, "div", 9);
    \u0275\u0275text(2210, "[LIVE] Coffee Talk Episode 2 pt.11");
    \u0275\u0275elementStart(2211, "span", 16);
    \u0275\u0275text(2212, "\u0E21\u0E19\u0E1C\u0E1B\u0E32\u0E01\u0E25\u0E48\u0E2D\u0E07\u0E41\u0E15\u0E48\u0E04\u0E32\u0E23\u0E38\u0E42\u0E1E\u0E23\u0E38 \u0E21\u0E31\u0E48\u0E22\u0E14\u0E31\u0E49\u0E22\u0E22\u0E22\u0E22");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2213, "div", 9);
    \u0275\u0275text(2214, "[Post] \u0E1C\u0E21\u0E40\u0E1B\u0E47\u0E19\u0E04\u0E19\u0E0A\u0E2D\u0E1A\u0E2A\u0E23\u0E49\u0E2D\u0E22\u0E02\u0E49\u0E2D\u0E21\u0E37\u0E2D\u0E21\u0E32\u0E01\u0E04\u0E23\u0E31\u0E1A");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2215, "span", 13)(2216, "span");
    \u0275\u0275text(2217, "Dec 13");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2218, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2219, "li")(2220, "div");
    \u0275\u0275element(2221, "span");
    \u0275\u0275elementStart(2222, "div", 9);
    \u0275\u0275text(2223, "[LIVE] Schneider feat. GEMINI");
    \u0275\u0275elementStart(2224, "span", 16);
    \u0275\u0275text(2225, "\u0E2A\u0E21\u0E32\u0E0A\u0E34\u0E01 GEMINI \u0E04\u0E19\u0E17\u0E35\u0E48\u0E2A\u0E32\u0E21");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2226, "div", 9);
    \u0275\u0275text(2227, "[PIC] \u0E16\u0E49\u0E32\u0E2B\u0E19\u0E39\u0E2D\u0E22\u0E32\u0E01\u0E44\u0E14\u0E49\u0E14\u0E32\u0E27 \u0E1E\u0E48\u0E2D\u0E01\u0E47\u0E08\u0E30\u0E44\u0E1B\u0E2B\u0E32\u0E21\u0E32\u0E43\u0E2B\u0E49");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2228, "span", 13)(2229, "span");
    \u0275\u0275text(2230, "Dec 14");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2231, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2232, "li")(2233, "div");
    \u0275\u0275element(2234, "span");
    \u0275\u0275elementStart(2235, "div", 9);
    \u0275\u0275text(2236, "[LIVE] Valorant 5v5 ft. ORION, Usan, Shoto, Kuro, Eito, Leo, Bettel, Altare");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2237, "span", 13)(2238, "span");
    \u0275\u0275text(2239, "Dec 15");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2240, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2241, "li")(2242, "div");
    \u0275\u0275element(2243, "span");
    \u0275\u0275elementStart(2244, "div", 9);
    \u0275\u0275text(2245, "[LIVE] Free Talk \u0E40\u0E01\u0E47\u0E1A\u0E15\u0E01\u0E17\u0E49\u0E32\u0E22\u0E2A\u0E31\u0E1B\u0E14\u0E32\u0E2B\u0E4C\u0E2B\u0E25\u0E31\u0E07\u0E08\u0E1A\u0E07\u0E32\u0E19 Algor Arcana");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2246, "span", 13)(2247, "span");
    \u0275\u0275text(2248, "Dec 17");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2249, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2250, "li")(2251, "div");
    \u0275\u0275element(2252, "span");
    \u0275\u0275elementStart(2253, "div", 9);
    \u0275\u0275text(2254, "[LIVE] Memorize Homies \u0E25\u0E48\u0E32\u0E40\u0E23\u0E37\u0E48\u0E2D\u0E07 Puppy Love \u0E43\u0E19\u0E42\u0E23\u0E07\u0E40\u0E23\u0E35\u0E22\u0E19 ft. Zekai");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2255, "img", 26);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2256, "span", 13)(2257, "span");
    \u0275\u0275text(2258, "Dec 18");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2259, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2260, "li")(2261, "div");
    \u0275\u0275element(2262, "span");
    \u0275\u0275elementStart(2263, "div", 9);
    \u0275\u0275text(2264, "[LIVE] UNO of the DEATH ft. ORION, U-San");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2265, "img", 26);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2266, "span", 13)(2267, "span");
    \u0275\u0275text(2268, "Dec 19");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2269, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2270, "li")(2271, "div");
    \u0275\u0275element(2272, "span");
    \u0275\u0275elementStart(2273, "div", 9);
    \u0275\u0275text(2274, "[Clip] \u0E23\u0E49\u0E2D\u0E07 under sky with my bae \u0E23\u0E34\u0E21\u0E17\u0E30\u0E40\u0E25");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2275, "span", 13)(2276, "span");
    \u0275\u0275text(2277, "Dec 23");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2278, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2279, "li")(2280, "div");
    \u0275\u0275element(2281, "span");
    \u0275\u0275elementStart(2282, "div", 9);
    \u0275\u0275text(2283, "[PIC] \u201C\u0E04\u0E19\u0E19\u0E35\u0E49\u0E40\u0E08\u0E49\u0E32\u0E02\u0E2D\u0E07\u0E04\u0E48\u0E32\u0E22\u0E40\u0E2B\u0E23\u0E2D ?\u201D");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2284, "span", 13)(2285, "span");
    \u0275\u0275text(2286, "Dec 24");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2287, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2288, "li", 14)(2289, "div");
    \u0275\u0275element(2290, "span");
    \u0275\u0275elementStart(2291, "div", 9);
    \u0275\u0275text(2292, "Mariah Carey - All I Want for Christmas Is You Thai ver.\u300CORION\u300D");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2293, "img", 15);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2294, "span", 13)(2295, "span");
    \u0275\u0275text(2296, "Dec 25");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2297, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2298, "li", 14)(2299, "div");
    \u0275\u0275element(2300, "span");
    \u0275\u0275elementStart(2301, "div", 9);
    \u0275\u0275text(2302, "The Deep's Desire\u300C Schneider\u300D1M Views");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2303, "img", 19);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2304, "span", 13)(2305, "span");
    \u0275\u0275text(2306, "Dec 27");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2307, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2308, "li")(2309, "div");
    \u0275\u0275element(2310, "span");
    \u0275\u0275elementStart(2311, "div", 9);
    \u0275\u0275text(2312, "[Membership] \u0E19\u0E49\u0E2D\u0E07\u0E0A\u0E44\u0E19\u0E40\u0E1A\u0E2D\u0E23\u0E4C\u0E17\u0E33\u0E07\u0E32\u0E19\u0E41\u0E17\u0E19");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2313, "img", 24);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2314, "span", 13)(2315, "span");
    \u0275\u0275text(2316, "Dec 28");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2317, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2318, "li")(2319, "div");
    \u0275\u0275element(2320, "span");
    \u0275\u0275elementStart(2321, "div", 9);
    \u0275\u0275text(2322, "[LIVE] Free Talk Recap \u0E17\u0E31\u0E49\u0E07\u0E1B\u0E35");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2323, "span", 13)(2324, "span");
    \u0275\u0275text(2325, "Dec 30");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2326, "span");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(2327, "h2", 34);
    \u0275\u0275text(2328, "January 2024");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2329, "ul")(2330, "li", 14)(2331, "div");
    \u0275\u0275element(2332, "span");
    \u0275\u0275elementStart(2333, "div", 9);
    \u0275\u0275text(2334, "Escape from the sky \u300CORION\u300D10M Views");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2335, "img", 19);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2336, "span", 13)(2337, "span");
    \u0275\u0275text(2338, "Jan 04");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2339, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2340, "li")(2341, "div");
    \u0275\u0275element(2342, "span");
    \u0275\u0275elementStart(2343, "div", 9);
    \u0275\u0275text(2344, "[Voice] Flukie x Vivee - Some (Soyou x Junggigo)");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2345, "span", 13)(2346, "span");
    \u0275\u0275text(2347, "Jan 07");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2348, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2349, "li")(2350, "div");
    \u0275\u0275element(2351, "span");
    \u0275\u0275elementStart(2352, "div", 9);
    \u0275\u0275text(2353, "[LIVE] Free Talk \u0E44\u0E25\u0E1F\u0E4C\u0E41\u0E23\u0E01\u0E2B\u0E25\u0E31\u0E07\u0E1B\u0E35\u0E43\u0E2B\u0E21\u0E48 \u0E19\u0E31\u0E48\u0E07\u0E04\u0E38\u0E22\u0E41\u0E1A\u0E1A\u0E2A\u0E1A\u0E32\u0E22 \u0E46 \u0E2D\u0E31\u0E1E\u0E40\u0E14\u0E17\u0E19\u0E31\u0E48\u0E19\u0E19\u0E35\u0E48");
    \u0275\u0275elementStart(2354, "span", 16);
    \u0275\u0275text(2355, "\u0E40\u0E25\u0E48\u0E32\u0E16\u0E36\u0E07\u0E2A\u0E21\u0E31\u0E22\u0E40\u0E1B\u0E47\u0E19\u0E2D\u0E32\u0E08\u0E32\u0E23\u0E22\u0E4C");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(2356, "span", 13)(2357, "span");
    \u0275\u0275text(2358, "Jan 08");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2359, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2360, "li")(2361, "div");
    \u0275\u0275element(2362, "span");
    \u0275\u0275elementStart(2363, "div", 9);
    \u0275\u0275text(2364, "[LIVE] \u0E1E\u0E39\u0E14\u0E16\u0E36\u0E07\u0E01\u0E32\u0E23\u0E41\u0E15\u0E48\u0E07\u0E40\u0E19\u0E37\u0E49\u0E2D\u0E40\u0E1E\u0E25\u0E07\u0E17\u0E49\u0E2D\u0E07\u0E1F\u0E49\u0E32\u0E2B\u0E25\u0E32\u0E22\u0E40\u0E09\u0E14");
    \u0275\u0275elementStart(2365, "span", 16);
    \u0275\u0275text(2366, "Demo \u0E40\u0E2A\u0E35\u0E22\u0E07\u0E0A\u0E19\u0E14\u0E2A\u0E38\u0E14\u0E22\u0E2D\u0E14!");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(2367, "span", 13)(2368, "span");
    \u0275\u0275text(2369, "Jan 11");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2370, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2371, "li")(2372, "div");
    \u0275\u0275element(2373, "span");
    \u0275\u0275elementStart(2374, "div", 9);
    \u0275\u0275text(2375, "[PIC] \u0E42\u0E2E\u0E21\u0E21\u0E35\u0E48\u0E43\u0E2A\u0E48\u0E40\u0E2A\u0E37\u0E49\u0E2D\u0E2A\u0E35\u0E40\u0E14\u0E35\u0E22\u0E27\u0E01\u0E31\u0E19");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2376, "span", 13)(2377, "span");
    \u0275\u0275text(2378, "Jan 13");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2379, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2380, "li")(2381, "div");
    \u0275\u0275element(2382, "span");
    \u0275\u0275elementStart(2383, "div", 9);
    \u0275\u0275text(2384, "[LIVE] KARAOKE \u0E09\u0E25\u0E2D\u0E07 200K \u0E14\u0E49\u0E27\u0E22 ARP song");
    \u0275\u0275elementStart(2385, "span", 16);
    \u0275\u0275text(2386, "List \u0E40\u0E1E\u0E25\u0E07\u0E15\u0E36\u0E07 \u0E46");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(2387, "span", 13)(2388, "span");
    \u0275\u0275text(2389, "Jan 14");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2390, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2391, "li")(2392, "div");
    \u0275\u0275element(2393, "span");
    \u0275\u0275elementStart(2394, "div", 9);
    \u0275\u0275text(2395, "[LIVE] Coffee Talk Episode 2 \u0E1E\u0E32\u0E23\u0E4C\u0E17\u0E2A\u0E38\u0E14\u0E17\u0E49\u0E32\u0E22");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2396, "div", 9);
    \u0275\u0275text(2397, "[Post] \u0E2B\u0E31\u0E27\u0E2B\u0E2D\u0E21\u0E2B\u0E19\u0E31\u0E01 4.2 \u0E42\u0E25\u0E25\u0E30");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2398, "span", 13)(2399, "span");
    \u0275\u0275text(2400, "Jan 16");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2401, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2402, "li")(2403, "div");
    \u0275\u0275element(2404, "span");
    \u0275\u0275elementStart(2405, "div", 9);
    \u0275\u0275text(2406, "[LIVE] \u0E04\u0E37\u0E19\u0E27\u0E31\u0E19\u0E1E\u0E38\u0E18 \u0E2D\u0E2D\u0E04\u0E42\u0E15\u0E1B\u0E38\u0E2A\u0E17\u0E49\u0E32\u0E1C\u0E35\u0E15\u0E48\u0E2D\u0E22 Crimson Snow");
    \u0275\u0275elementStart(2407, "span", 16);
    \u0275\u0275text(2408, "\u0E40\u0E15\u0E4A\u0E07\u0E07\u0E07\u0E07\u0E07\u0E07");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(2409, "span", 13)(2410, "span");
    \u0275\u0275text(2411, "Jan 17");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2412, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2413, "li")(2414, "div");
    \u0275\u0275element(2415, "span");
    \u0275\u0275elementStart(2416, "div", 9);
    \u0275\u0275text(2417, "[LIVE] LoL \u0E01\u0E2D\u0E07\u0E42\u0E08\u0E23\u0E01\u0E48\u0E2D\u0E19\u0E15\u0E36\u0E07\u0E08\u0E23\u0E34\u0E07 with Dacapo_ARP, S1R_ARP");
    \u0275\u0275elementStart(2418, "span", 16);
    \u0275\u0275text(2419, "\u0E2B\u0E49\u0E32\u0E19\u0E32\u0E17\u0E35\u0E40\u0E02\u0E49\u0E32\u0E40\u0E21\u0E21 555");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(2420, "span", 13)(2421, "span");
    \u0275\u0275text(2422, "Jan 18");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2423, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2424, "li")(2425, "div");
    \u0275\u0275element(2426, "span");
    \u0275\u0275elementStart(2427, "div", 9);
    \u0275\u0275text(2428, "[LIVE] LoL \u0E01\u0E32\u0E23\u0E17\u0E35\u0E48\u0E21\u0E35\u0E04\u0E19\u0E43\u0E19\u0E1B\u0E01 \u0E44\u0E21\u0E48\u0E44\u0E14\u0E49\u0E2B\u0E21\u0E32\u0E22\u0E04\u0E27\u0E32\u0E21\u0E27\u0E48\u0E32\u0E08\u0E30\u0E21\u0E32\u0E04\u0E23\u0E1A\u0E17\u0E38\u0E01\u0E04\u0E19");
    \u0275\u0275elementStart(2429, "span", 16);
    \u0275\u0275text(2430, "\u0E25\u0E1A\u0E44\u0E14\u0E49\u0E25\u0E1A\u0E19\u0E30\u0E40\u0E01\u0E21\u0E19\u0E35\u0E49");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(2431, "span", 13)(2432, "span");
    \u0275\u0275text(2433, "Jan 19");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2434, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2435, "li")(2436, "div");
    \u0275\u0275element(2437, "span");
    \u0275\u0275elementStart(2438, "div", 9);
    \u0275\u0275text(2439, "[LIVE] Magic Wheel Spinning \u0E2A\u0E38\u0E48\u0E21\u0E1C\u0E39\u0E49\u0E42\u0E0A\u0E04\u0E14\u0E35 Call Sign 1st Mini Album : Shades of Sky");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2440, "span", 13)(2441, "span");
    \u0275\u0275text(2442, "Jan 20");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2443, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2444, "li")(2445, "div");
    \u0275\u0275element(2446, "span");
    \u0275\u0275elementStart(2447, "div", 9);
    \u0275\u0275text(2448, "[LIVE] Free Talk \u0E0A\u0E48\u0E27\u0E07\u0E2A\u0E32\u0E22\u0E27\u0E31\u0E19\u0E2D\u0E32\u0E17\u0E34\u0E15\u0E22\u0E4C \u0E19\u0E31\u0E48\u0E07\u0E04\u0E34\u0E14\u0E40\u0E21\u0E19\u0E39\u0E21\u0E37\u0E49\u0E2D\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2449, "div", 9);
    \u0275\u0275text(2450, "[LIVE] Goose Goose Duck \u0E01\u0E31\u0E4A\u0E01\u0E01\u0E31\u0E4A\u0E01\u0E14\u0E39\u0E0B \u0E40\u0E2B\u0E49\u0E22! feat. ARP");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2451, "span", 13)(2452, "span");
    \u0275\u0275text(2453, "Jan 21");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2454, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2455, "li")(2456, "div");
    \u0275\u0275element(2457, "span");
    \u0275\u0275elementStart(2458, "div", 9);
    \u0275\u0275text(2459, "[Membership] \u0E40\u0E21\u0E30\u0E2B\u0E37\u0E21\u0E2A\u0E38\u0E14\u0E2B\u0E23\u0E48\u0E2D\u0E01\u0E31\u0E1A\u0E22\u0E31\u0E22\u0E15\u0E31\u0E27\u0E41\u0E2A\u0E1A");
    \u0275\u0275elementStart(2460, "span", 16);
    \u0275\u0275text(2461, "\u0E40\u0E25\u0E37\u0E2D\u0E01\u0E40\u0E2D\u0E32\u0E23\u0E30\u0E2B\u0E27\u0E48\u0E32\u0E07\u0E40\u0E02\u0E34\u0E19\u0E2B\u0E23\u0E37\u0E2D\u0E02\u0E33 55");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2462, "div", 9);
    \u0275\u0275text(2463, "[Post] \u0E41\u0E2A\u0E19\u0E0B\u0E19\u0E19\u0E31\u0E01\u0E19\u0E30\u0E2B\u0E4C \u0E22\u0E31\u0E22\u0E15\u0E31\u0E27\u0E41\u0E2A\u0E1A\u0E2B\u0E4C");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2464, "img", 24);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2465, "span", 13)(2466, "span");
    \u0275\u0275text(2467, "Jan 22");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2468, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2469, "li")(2470, "div");
    \u0275\u0275element(2471, "span");
    \u0275\u0275elementStart(2472, "div", 9);
    \u0275\u0275text(2473, "[LIVE] Among Us Always Innocent ft. \u0E40\u0E22\u0E2D\u0E30\u0E21\u0E32\u0E01\u0E40\u0E02\u0E35\u0E22\u0E19\u0E44\u0E21\u0E48\u0E2B\u0E21\u0E14");
    \u0275\u0275elementStart(2474, "span", 16);
    \u0275\u0275text(2475, "\u0E01\u0E25\u0E32\u0E22\u0E40\u0E1B\u0E47\u0E19 introvert");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2476, "div", 9);
    \u0275\u0275text(2477, "[Post] \u0E22\u0E32\u0E07\u0E23\u0E31\u0E48\u0E27\u0E15\u0E31\u0E49\u0E07\u0E41\u0E15\u0E48\u0E40\u0E14\u0E37\u0E2D\u0E19\u0E41\u0E23\u0E01\u0E02\u0E2D\u0E07\u0E1B\u0E35 \u0E01\u0E23\u0E35\u0E4A\u0E14");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2478, "div", 9);
    \u0275\u0275text(2479, "[Voice] \u0E0A\u0E37\u0E48\u0E2D\u0E40\u0E2A\u0E35\u0E22\u0E07\u0E40\u0E07\u0E34\u0E19\u0E21\u0E2D\u0E07\u0E09\u0E31\u0E19\u0E01\u0E47\u0E1E\u0E2D\u0E08\u0E30\u0E21\u0E35");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2480, "img", 26);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2481, "span", 13)(2482, "span");
    \u0275\u0275text(2483, "Jan 23");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2484, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2485, "li")(2486, "div");
    \u0275\u0275element(2487, "span");
    \u0275\u0275elementStart(2488, "div", 9);
    \u0275\u0275text(2489, "[LIVE] Crimson Snow \u0E40\u0E15\u0E07\u0E40\u0E01\u0E47\u0E1A\u0E40\u0E25\u0E47\u0E1A\u0E01\u0E48\u0E2D\u0E19 pt.2");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2490, "span", 13)(2491, "span");
    \u0275\u0275text(2492, "Jan 24");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2493, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2494, "li", 14)(2495, "div");
    \u0275\u0275element(2496, "span");
    \u0275\u0275elementStart(2497, "div", 9);
    \u0275\u0275text(2498, "Schneider - Sarushibai [Thai ver.] 2M Views");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2499, "img", 19);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2500, "span", 13)(2501, "span");
    \u0275\u0275text(2502, "Jan 26");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2503, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2504, "li", 14)(2505, "div");
    \u0275\u0275element(2506, "span");
    \u0275\u0275elementStart(2507, "div", 9);
    \u0275\u0275text(2508, "[ARParty] \u0E40\u0E1E\u0E35\u0E22\u0E07\u0E41\u0E04\u0E48\u0E1D\u0E31\u0E19\u0E15\u0E01\u0E25\u0E07\u0E17\u0E35\u0E48\u0E2B\u0E19\u0E49\u0E32\u0E15\u0E48\u0E32\u0E07\u0E43\u0E19\u0E15\u0E2D\u0E19.. \u0E2D\u0E48\u0E2D \u0E19\u0E31\u0E48\u0E19\u0E1D\u0E19");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2509, "span", 13)(2510, "span");
    \u0275\u0275text(2511, "Jan 28");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2512, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2513, "li")(2514, "div");
    \u0275\u0275element(2515, "span");
    \u0275\u0275elementStart(2516, "div", 9);
    \u0275\u0275text(2517, "[LIVE] Talking \u0E0A\u0E44\u0E19\u0E40\u0E1A\u0E49\u0E2D\u0E42\u0E01\u0E25\u0E14\u0E4C\u0E17\u0E33\u0E01\u0E32\u0E23");
    \u0275\u0275elementStart(2518, "span", 16);
    \u0275\u0275text(2519, "\u0E2A\u0E27\u0E31\u0E2A\u0E14\u0E35\u0E04\u0E23\u0E31\u0E1A \u0E1C\u0E21\u0E08\u0E2D\u0E2B\u0E4C\u0E19");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(2520, "span", 13)(2521, "span");
    \u0275\u0275text(2522, "Jan 29");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2523, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2524, "li")(2525, "div");
    \u0275\u0275element(2526, "span");
    \u0275\u0275elementStart(2527, "div", 9);
    \u0275\u0275text(2528, "[LIVE] Free Talk Comfy Talk");
    \u0275\u0275elementStart(2529, "span", 16);
    \u0275\u0275text(2530, "\u0E2B\u0E25\u0E31\u0E1A\u0E1D\u0E31\u0E19\u0E14\u0E35\u0E25\u0E30\u0E04\u0E48\u0E30");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2531, "div", 9);
    \u0275\u0275text(2532, "[Post] \u0E02\u0E2D\u0E1A\u0E04\u0E38\u0E13 \u0E2A\u0E35\u0E1F\u0E49\u0E32\u0E2A\u0E2D\u0E07\u0E25\u0E49\u0E32\u0E19\u0E27\u0E34\u0E27");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2533, "span", 13)(2534, "span");
    \u0275\u0275text(2535, "Jan 30");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2536, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2537, "li")(2538, "div");
    \u0275\u0275element(2539, "span");
    \u0275\u0275elementStart(2540, "div", 9);
    \u0275\u0275text(2541, "[Space] \u0E17\u0E2D\u0E14\u0E44\u0E02\u0E48");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2542, "div", 9);
    \u0275\u0275text(2543, "[LIVE] Free Talk \u0E19\u0E31\u0E48\u0E07\u0E17\u0E32\u0E19\u0E02\u0E49\u0E32\u0E27\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07\u0E40\u0E1B\u0E47\u0E19\u0E40\u0E1E\u0E37\u0E48\u0E2D\u0E19 \u0E44\u0E21\u0E48\u0E2D\u0E23\u0E48\u0E2D\u0E22\u0E43\u0E2B\u0E49\u0E17\u0E33\u0E43\u0E08");
    \u0275\u0275elementStart(2544, "span", 16);
    \u0275\u0275text(2545, "\u0E25\u0E37\u0E21\u0E1B\u0E34\u0E14\u0E44\u0E25\u0E1F\u0E4C 555555555555555");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(2546, "span", 13)(2547, "span");
    \u0275\u0275text(2548, "Jan 31");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2549, "span");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(2550, "h2", 35);
    \u0275\u0275text(2551, "February 2024");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2552, "ul")(2553, "li")(2554, "div");
    \u0275\u0275element(2555, "span");
    \u0275\u0275elementStart(2556, "div", 9);
    \u0275\u0275text(2557, "[LIVE] Tea Time with Eu \u0E44\u0E1B\u0E14\u0E37\u0E48\u0E21\u0E0A\u0E32\u0E01\u0E31\u0E1A\u0E40\u0E0B\u0E1B\u0E40\u0E0B\u0E1B ft. ZephyrEuthalia");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2558, "div", 9);
    \u0275\u0275text(2559, "2024 ARP Birthday Merchandise \u0E1E\u0E27\u0E07\u0E01\u0E38\u0E0D\u0E41\u0E08\u0E2D\u0E30\u0E04\u0E23\u0E34\u0E25\u0E34\u0E01\u0E0A\u0E44\u0E19\u0E40\u0E14\u0E2D\u0E23\u0E4C\u0E22\u0E34\u0E07\u0E1B\u0E34\u0E4A\u0E27\u0E46");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2560, "img", 17);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2561, "span", 13)(2562, "span");
    \u0275\u0275text(2563, "Feb 01");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2564, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2565, "li", 14)(2566, "div");
    \u0275\u0275element(2567, "span");
    \u0275\u0275elementStart(2568, "div", 9);
    \u0275\u0275text(2569, "(Thai version) \u306A\u3068\u308A - \u91D1\u6728\u7280 / Osmanthus (Schneider ver.)");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2570, "img", 15);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2571, "span", 13)(2572, "span");
    \u0275\u0275text(2573, "Feb 01");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2574, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2575, "li")(2576, "div");
    \u0275\u0275element(2577, "span");
    \u0275\u0275elementStart(2578, "div", 9);
    \u0275\u0275text(2579, "[Post] \u0E21\u0E35\u0E17\u0E38\u0E01\u0E2D\u0E22\u0E48\u0E32\u0E07\u0E22\u0E01\u0E40\u0E27\u0E49\u0E19\u0E41\u0E17\u0E47\u0E01\u0E27\u0E31\u0E19\u0E40\u0E01\u0E34\u0E14 \u0E0A\u0E19\u0E14\u0E40\u0E25\u0E22\u0E04\u0E34\u0E14\u0E43\u0E2B\u0E49");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2580, "div", 10);
    \u0275\u0275text(2581, "[Tag] \u0E01\u0E33\u0E40\u0E19\u0E34\u0E14");
    \u0275\u0275elementStart(2582, "span", 11);
    \u0275\u0275text(2583, "#\u0E1E\u0E48\u0E2D\u0E2B\u0E21\u0E36\u0E01\u0E2B\u0E25\u0E48\u0E2D\u0E04\u0E19\u0E19\u0E31\u0E49\u0E1930\u0E22\u0E31\u0E07\u0E41\u0E08\u0E4B\u0E27");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2584, "div", 9);
    \u0275\u0275text(2585, "\u0E21\u0E19\u0E1C\u0E40\u0E23\u0E34\u0E48\u0E21\u0E09\u0E25\u0E2D\u0E07\u0E27\u0E31\u0E19\u0E40\u0E01\u0E34\u0E14\u0E0A\u0E19\u0E14\u0E25\u0E48\u0E27\u0E07\u0E2B\u0E19\u0E49\u0E32");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2586, "span", 13)(2587, "span");
    \u0275\u0275text(2588, "Feb 02");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2589, "span");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2590, "li")(2591, "div");
    \u0275\u0275element(2592, "span");
    \u0275\u0275elementStart(2593, "div", 9);
    \u0275\u0275text(2594, "[Post] Givaway \u0E41\u0E0B\u0E19\u0E14\u0E4C\u0E27\u0E34\u0E0A\u0E44\u0E02\u0E48\u0E28\u0E23\u0E35\u0E23\u0E32\u0E0A\u0E32\u0E21\u0E32\u0E42\u0E22\u0E40\u0E1E\u0E34\u0E48\u0E21\u0E1B\u0E39\u0E2D\u0E31\u0E14\u0E01\u0E31\u0E1A\u0E01\u0E38\u0E49\u0E07\u0E08\u0E32\u0E01\u0E0A\u0E44\u0E19\u0E40\u0E14\u0E49\u0E2D");
    \u0275\u0275elementStart(2595, "span", 16);
    \u0275\u0275text(2596, "\u0E27\u0E32\u0E2A\u0E19\u0E32\u0E21\u0E19\u0E1C");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2597, "div", 9);
    \u0275\u0275text(2598, '\u0E04\u0E32\u0E1A\u0E40\u0E23\u0E35\u0E22\u0E19\u0E1E\u0E34\u0E40\u0E28\u0E29 \u0E2B\u0E19\u0E31\u0E07\u0E2A\u0E37\u0E2D\u0E2D\u0E48\u0E32\u0E19\u0E19\u0E2D\u0E01\u0E40\u0E27\u0E25\u0E32 "\u0E27\u0E31\u0E19\u0E46 \u0E01\u0E31\u0E1A\u0E19\u0E32\u0E22\u0E17\u0E48\u0E32\u0E19\u0E2B\u0E21\u0E32"');
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(2599, "span", 13)(2600, "span");
    \u0275\u0275text(2601, "Feb 04");
    \u0275\u0275elementEnd();
    \u0275\u0275element(2602, "span");
    \u0275\u0275elementEnd()()()()();
    \u0275\u0275element(2603, "app-sunlight-zone-bg");
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    \u0275\u0275advance(1);
    \u0275\u0275property("level", ctx.level)("sublevel", "Schneider's Journey");
  }
}, dependencies: [ToolBarComponent, SunlightZoneBgComponent], styles: ['\n\n.timeLineContainer[_ngcontent-%COMP%] {\n  height: 100%;\n  width: 100%;\n  overflow-y: scroll;\n  position: relative;\n  margin-top: 10px;\n}\n.timeLineContent[_ngcontent-%COMP%] {\n  height: auto;\n  width: 60vw;\n  margin: 0 auto;\n  padding: 10px;\n  margin-bottom: 40vh;\n  text-align: left;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  transform: scaleX(0.5);\n  opacity: 0;\n  animation: _ngcontent-%COMP%_expand 500ms 300ms ease-in-out forwards;\n}\n.timeLineContent[_ngcontent-%COMP%]   h2[_ngcontent-%COMP%] {\n  text-align: left;\n}\n.timeLineContent[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%] {\n  margin: 0;\n  margin-top: 1rem;\n  list-style: none;\n  position: relative;\n  padding: 1px 100px;\n  color: #fff;\n  font-size: 0.9rem;\n}\n.timeLineContent[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]:last-of-type {\n  margin-bottom: 100px;\n}\n.timeLineContent[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]:before {\n  content: "";\n  width: 1px;\n  height: 100%;\n  position: absolute;\n  border-left: 2px dashed #fff;\n}\n.timeLineContent[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]   li[_ngcontent-%COMP%] {\n  position: relative;\n  margin-left: 30px;\n  background-color: rgba(0, 0, 0, 0.45);\n  padding: 14px;\n  border-radius: 6px;\n  width: 100%;\n  box-shadow: 0 0 4px rgba(0, 0, 0, 0.12), 0 2px 2px rgba(0, 0, 0, 0.08);\n}\n.highlight[_ngcontent-%COMP%] {\n  border: 5px solid #dfcdff;\n  background-color: rgb(0 0 0 / 55%) !important;\n}\n.timeLineContent[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]   .highlight[_ngcontent-%COMP%] {\n  margin-left: 25px;\n}\n.timeLineContent[_ngcontent-%COMP%]   .highlight[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]   .title[_ngcontent-%COMP%] {\n  font-size: 1.2rem;\n}\n.timeLineContent[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]:not(:first-child) {\n  margin-top: 30px;\n}\n.timeLineContent[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]    > span[_ngcontent-%COMP%] {\n  width: 2px;\n  height: 100%;\n  background: #fff;\n  left: -30px;\n  top: 0;\n  position: absolute;\n}\n.timeLineContent[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]    > span[_ngcontent-%COMP%]:before {\n  content: "";\n  width: 8px;\n  height: 8px;\n  border-radius: 50%;\n  border: 2px solid #fff;\n  position: absolute;\n  background: #86b7e7;\n  left: -5px;\n  top: 0;\n}\n.timeLineContent[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]:after {\n  top: 100%;\n}\n.timeLineContent[_ngcontent-%COMP%]   ul[_ngcontent-%COMP%]   li[_ngcontent-%COMP%]    > div[_ngcontent-%COMP%] {\n  margin-left: 10px;\n}\n.timeLineContent[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]   .title[_ngcontent-%COMP%] {\n  font-weight: 300;\n  font-size: 1rem;\n  margin-top: 10px;\n}\n.timeLineContent[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]   .title[_ngcontent-%COMP%]:nth-of-type(1) {\n  margin-top: 0px;\n}\n.timeLineContent[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]   .info[_ngcontent-%COMP%] {\n  font-weight: 300;\n}\n.timeLineContent[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]    > div[_ngcontent-%COMP%] {\n}\n.timeLineContent[_ngcontent-%COMP%]   span.number[_ngcontent-%COMP%] {\n  height: 100%;\n}\n.timeLineContent[_ngcontent-%COMP%]   span.number[_ngcontent-%COMP%]   span[_ngcontent-%COMP%] {\n  position: absolute;\n  font-size: 1rem;\n  left: -4.5rem;\n  font-weight: bold;\n}\n.timeLineContent[_ngcontent-%COMP%]   span.number[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]:first-child {\n  top: -8px;\n}\n.timeLineContent[_ngcontent-%COMP%]   span.number[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]:last-child {\n  bottom: -10px;\n}\n.monthHead[_ngcontent-%COMP%] {\n  margin-top: 50px;\n}\n.underline[_ngcontent-%COMP%] {\n  display: inline-block;\n  position: absolute;\n  font-size: 0.85rem;\n  transform: rotate(-8deg) translate(0.5rem, 0px);\n  width: max-content;\n}\n.underline[_ngcontent-%COMP%]::after {\n  content: "";\n  position: absolute;\n  width: 100%;\n  height: 2px;\n  bottom: 0;\n  left: 0;\n  background-color: #ff878dca;\n}\n.music[_ngcontent-%COMP%] {\n  content: url("./media/music-icon.PNG");\n  width: 50px;\n  height: auto;\n  position: absolute;\n  top: 0;\n  right: 0;\n  transform: translate(15px, -15px);\n}\n.member[_ngcontent-%COMP%] {\n  content: url("./media/member-icon.PNG");\n  width: 50px;\n  height: auto;\n  position: absolute;\n  top: 0;\n  right: 0;\n  transform: translate(15px, -15px);\n}\n.goods[_ngcontent-%COMP%] {\n  content: url("./media/goods-icon.PNG");\n  width: 50px;\n  height: auto;\n  position: absolute;\n  top: 0;\n  right: 0;\n  transform: translate(15px, -15px);\n}\n.collab[_ngcontent-%COMP%] {\n  content: url("./media/collab-icon.PNG");\n  width: 65px;\n  height: auto;\n  position: absolute;\n  top: 0;\n  right: 0;\n  transform: translate(18px, -18px);\n}\n.congrats[_ngcontent-%COMP%] {\n  content: url("./media/congrats-icon.PNG");\n  width: 90px;\n  height: auto;\n  position: absolute;\n  top: 0;\n  right: 0;\n  transform: translate(60px, -23px) rotate(11deg);\n}\n.timeLineToolBar[_ngcontent-%COMP%] {\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  column-gap: 10px;\n  margin: 10px 0;\n  font-weight: bold;\n  text-shadow: 0px 0px 5px #53babf;\n  opacity: 0;\n  animation: _ngcontent-%COMP%_fadeIn 800ms ease-in-out forwards;\n}\n.monthDiv[_ngcontent-%COMP%] {\n  border-left: solid 3px white;\n  padding-left: 10px;\n  width: max-content;\n}\n.monthDiv[_ngcontent-%COMP%]:nth-child(1), .monthDiv[_ngcontent-%COMP%]:nth-child(13) {\n  border: none;\n}\n.monthDiv[_ngcontent-%COMP%]    > a[_ngcontent-%COMP%] {\n  padding: 5px;\n  display: flex;\n}\n.monthDiv[_ngcontent-%COMP%]    > a[_ngcontent-%COMP%]:hover {\n  color: #ebebeb;\n  cursor: pointer;\n}\n.fullMonth[_ngcontent-%COMP%] {\n  display: block;\n}\n.shortMonth[_ngcontent-%COMP%] {\n  display: none;\n}\n.selected[_ngcontent-%COMP%] {\n  border-top: solid 2px white;\n  border-bottom: solid 2px white;\n}\n@keyframes _ngcontent-%COMP%_expand {\n  from {\n    opacity: 0;\n    transform: scaleX(0.8);\n  }\n  to {\n    opacity: 1;\n    transform: scaleX(1);\n  }\n}\n@keyframes _ngcontent-%COMP%_fadeIn {\n  from {\n    opacity: 0;\n  }\n  to {\n    opacity: 1;\n  }\n}\n@media only screen and (max-height: 600px) and (orientation: landscape), only screen and (min-width: 768px) and (max-width: 1024px), only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 1), only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 2), only screen and (min-device-width: 1112px) and (max-device-width: 1112px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 2), only screen and (min-device-width: 1366px) and (max-device-width: 1366px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 2) {\n  .timeLineContent[_ngcontent-%COMP%] {\n    width: 75vw;\n  }\n  .timeLineToolBar[_ngcontent-%COMP%] {\n    column-gap: 3px;\n    font-size: 0.8rem;\n  }\n  .monthDiv[_ngcontent-%COMP%] {\n    padding-left: 3px;\n  }\n  .congrats[_ngcontent-%COMP%] {\n    width: 70px;\n    transform: translate(45px, -23px) rotate(11deg);\n  }\n  .music[_ngcontent-%COMP%] {\n    width: 40px;\n  }\n  .member[_ngcontent-%COMP%] {\n    width: 40px;\n  }\n  .goods[_ngcontent-%COMP%] {\n    width: 40px;\n  }\n  .collab[_ngcontent-%COMP%] {\n    width: 60px;\n  }\n}\n@media only screen and (max-height: 400px) and (orientation: landscape), only screen and (min-width: 390px) and (max-width: 768px) and (orientation: landscape), only screen and (device-width: 360px) and (device-height: 640px) and (-webkit-device-pixel-ratio: 4) and (orientation: landscape), only screen and (min-device-width: 390px) and (max-device-width: 844px) and (-webkit-min-device-pixel-ratio: 4) and (orientation: landscape), only screen and (min-device-width: 414px) and (max-device-width: 736px) and (-webkit-min-device-pixel-ratio: 3) and (orientation: landscape), only screen and (min-device-width: 375px) and (max-device-width: 812px) and (-webkit-min-device-pixel-ratio: 3) and (orientation: landscape) {\n  .timeLineContent[_ngcontent-%COMP%] {\n    width: 75vw;\n    padding-top: 0px;\n  }\n  .timeLineToolBar[_ngcontent-%COMP%] {\n    column-gap: 3px;\n    font-size: 0.8rem;\n  }\n  .timeLineContent[_ngcontent-%COMP%]   span.number[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]:first-child {\n    top: -8px;\n    left: -58px;\n    font-size: 0.8rem;\n  }\n  .timeLineContent[_ngcontent-%COMP%]   span.number[_ngcontent-%COMP%]   span[_ngcontent-%COMP%]:last-child {\n    bottom: -10px;\n    left: -58px;\n    font-size: 0.8rem;\n  }\n  .monthDiv[_ngcontent-%COMP%] {\n    padding-left: 3px;\n  }\n  .fullMonth[_ngcontent-%COMP%] {\n    display: none;\n  }\n  .shortMonth[_ngcontent-%COMP%] {\n    display: block;\n  }\n  .timeLineContent[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]   .title[_ngcontent-%COMP%] {\n    font-size: 0.9rem;\n  }\n  .timeLineContent[_ngcontent-%COMP%]   .highlight[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]   .title[_ngcontent-%COMP%] {\n    font-size: 1rem;\n  }\n  .timeLineContent[_ngcontent-%COMP%]   div[_ngcontent-%COMP%]   .info[_ngcontent-%COMP%] {\n    font-size: 0.7rem;\n  }\n  .monthHead[_ngcontent-%COMP%] {\n    margin-top: 40px;\n  }\n  .congrats[_ngcontent-%COMP%] {\n    width: 70px;\n    transform: translate(45px, -23px) rotate(11deg);\n  }\n  .music[_ngcontent-%COMP%] {\n    width: 40px;\n  }\n  .member[_ngcontent-%COMP%] {\n    width: 40px;\n  }\n  .goods[_ngcontent-%COMP%] {\n    width: 40px;\n  }\n  .collab[_ngcontent-%COMP%] {\n    width: 60px;\n  }\n}\n@media only screen and (max-width: 900px) {\n  .timeLineContent[_ngcontent-%COMP%] {\n    width: 90vw;\n  }\n}\n/*# sourceMappingURL=data:application/json;base64, */'] });
var TimeLineComponent = _TimeLineComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(TimeLineComponent, { className: "TimeLineComponent", filePath: "src\\app\\time-line\\time-line.component.ts", lineNumber: 9 });
})();

// src/app/projects/base-project.service.ts
var _BaseProject = class _BaseProject {
  constructor(route) {
    this.route = route;
    this.projectNameList = {};
    this.projectName = "";
    this.showPreview = false;
    this.lightBoxImageClass = "";
  }
  ngOnInit() {
    this.level = this.route.snapshot.params["level"];
    this.projectNameList = PROJECT_NAME_LIST;
  }
  onPreviewImage(imgClass) {
    this.showPreview = true;
    this.lightBoxImageClass = imgClass;
  }
  onClosePreview() {
    this.showPreview = false;
    this.lightBoxImageClass = "";
  }
};
_BaseProject.\u0275fac = function BaseProject_Factory(t) {
  return new (t || _BaseProject)(\u0275\u0275inject(ActivatedRoute));
};
_BaseProject.\u0275prov = /* @__PURE__ */ \u0275\u0275defineInjectable({ token: _BaseProject, factory: _BaseProject.\u0275fac, providedIn: "root" });
var BaseProject = _BaseProject;

// src/app/projects/projects-tool-bar/projects-tool-bar.component.ts
function ProjectsToolBarComponent_div_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 2)(1, "a", 3);
    \u0275\u0275text(2);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    const projectName_r1 = ctx.$implicit;
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275advance(1);
    \u0275\u0275classProp("selected", projectName_r1 === ctx_r0.currentProject);
    \u0275\u0275propertyInterpolate1("routerLink", "../", projectName_r1, "");
    \u0275\u0275advance(1);
    \u0275\u0275textInterpolate1(" ", ctx_r0.projectNameList[projectName_r1], " ");
  }
}
var _ProjectsToolBarComponent = class _ProjectsToolBarComponent {
  constructor() {
    this.projectList = [];
    this.projectNameList = {};
  }
  ngOnInit() {
    this.projectList = PROJECT_LIST[this.level];
    this.projectNameList = PROJECT_NAME_LIST;
  }
};
_ProjectsToolBarComponent.\u0275fac = function ProjectsToolBarComponent_Factory(t) {
  return new (t || _ProjectsToolBarComponent)();
};
_ProjectsToolBarComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _ProjectsToolBarComponent, selectors: [["app-projects-tool-bar"]], inputs: { level: "level", currentProject: "currentProject" }, decls: 2, vars: 1, consts: [[1, "projectsToolBar"], ["class", "project", 4, "ngFor", "ngForOf"], [1, "project"], [3, "routerLink"]], template: function ProjectsToolBarComponent_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 0);
    \u0275\u0275template(1, ProjectsToolBarComponent_div_1_Template, 3, 4, "div", 1);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    \u0275\u0275advance(1);
    \u0275\u0275property("ngForOf", ctx.projectList);
  }
}, dependencies: [NgForOf, RouterLink], styles: ["\n\n.projectsToolBar[_ngcontent-%COMP%] {\n  width: 100%;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  column-gap: 10px;\n  height: 50px;\n  font-weight: bold;\n  text-shadow: 0 0 5px #53babf;\n}\n.project[_ngcontent-%COMP%] {\n  border-left: solid 2px white;\n  padding-left: 10px;\n}\n.project[_ngcontent-%COMP%]:nth-child(1) {\n  border: none;\n}\n.project[_ngcontent-%COMP%]    > a[_ngcontent-%COMP%] {\n  padding: 5px;\n}\n.project[_ngcontent-%COMP%]    > a[_ngcontent-%COMP%]:hover {\n  color: #ebebeb;\n}\n.selected[_ngcontent-%COMP%] {\n  border-top: solid 2px white;\n  border-bottom: solid 2px white;\n}\n@media only screen and (max-height: 600px) and (orientation: landscape), only screen and (min-width: 768px) and (max-width: 1024px), only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 1), only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 2), only screen and (min-device-width: 1112px) and (max-device-width: 1112px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 2), only screen and (min-device-width: 1366px) and (max-device-width: 1366px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 2) {\n  .projectsToolBar[_ngcontent-%COMP%] {\n    font-size: 0.8rem;\n    column-gap: 3px;\n  }\n  .project[_ngcontent-%COMP%] {\n    padding-left: 3px;\n  }\n}\n@media only screen and (max-height: 400px) and (orientation: landscape), only screen and (min-width: 390px) and (max-width: 768px) and (orientation: landscape), only screen and (device-width: 360px) and (device-height: 640px) and (-webkit-device-pixel-ratio: 4) and (orientation: landscape), only screen and (min-device-width: 390px) and (max-device-width: 844px) and (-webkit-min-device-pixel-ratio: 4) and (orientation: landscape), only screen and (min-device-width: 414px) and (max-device-width: 736px) and (-webkit-min-device-pixel-ratio: 3) and (orientation: landscape), only screen and (min-device-width: 375px) and (max-device-width: 812px) and (-webkit-min-device-pixel-ratio: 3) and (orientation: landscape) {\n  .projectsToolBar[_ngcontent-%COMP%] {\n    font-size: 0.8rem;\n    column-gap: 3px;\n    height: 46px;\n  }\n  .project[_ngcontent-%COMP%] {\n    padding-left: 3px;\n  }\n}\n/*# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL2FwcC9wcm9qZWN0cy9wcm9qZWN0cy10b29sLWJhci9wcm9qZWN0cy10b29sLWJhci5jb21wb25lbnQuY3NzIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyIucHJvamVjdHNUb29sQmFyIHtcclxuICB3aWR0aDogMTAwJTtcclxuICBkaXNwbGF5OiBmbGV4O1xyXG4gIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gIGFsaWduLWl0ZW1zOiBjZW50ZXI7XHJcbiAgY29sdW1uLWdhcDogMTBweDtcclxuICBoZWlnaHQ6IDUwcHg7XHJcbiAgZm9udC13ZWlnaHQ6IGJvbGQ7XHJcbiAgdGV4dC1zaGFkb3c6IDAgMCA1cHggIzUzYmFiZjtcclxufVxyXG4ucHJvamVjdCB7XHJcbiAgYm9yZGVyLWxlZnQ6IHNvbGlkIDJweCB3aGl0ZTtcclxuICBwYWRkaW5nLWxlZnQ6IDEwcHg7XHJcbn1cclxuLnByb2plY3Q6bnRoLWNoaWxkKDEpIHtcclxuICBib3JkZXI6IG5vbmU7XHJcbn1cclxuLnByb2plY3QgPiBhIHtcclxuICBwYWRkaW5nOiA1cHg7XHJcbn1cclxuLnByb2plY3QgPiBhOmhvdmVyIHtcclxuICBjb2xvcjogI2ViZWJlYjtcclxufVxyXG4uc2VsZWN0ZWQge1xyXG4gIGJvcmRlci10b3A6IHNvbGlkIDJweCB3aGl0ZTtcclxuICBib3JkZXItYm90dG9tOiBzb2xpZCAycHggd2hpdGU7XHJcbn1cclxuXHJcbi8qIHBjIHNtYWxsICovXHJcbkBtZWRpYSBvbmx5IHNjcmVlblxyXG4gIGFuZCAobWF4LWhlaWdodDogNjAwcHgpXHJcbiAgYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKSxcclxub25seSBzY3JlZW5cclxuICBhbmQgKG1pbi13aWR0aDogNzY4cHgpXHJcbiAgYW5kIChtYXgtd2lkdGg6IDEwMjRweCksXHJcbi8qIGlQYWQgKi9cclxub25seSBzY3JlZW5cclxuICBhbmQgKG1pbi1kZXZpY2Utd2lkdGg6IDc2OHB4KVxyXG4gIGFuZCAobWF4LWRldmljZS13aWR0aDogMTAyNHB4KVxyXG4gIGFuZCAob3JpZW50YXRpb246IGxhbmRzY2FwZSlcclxuICBhbmQgKC13ZWJraXQtbWluLWRldmljZS1waXhlbC1yYXRpbzogMSksXHJcbm9ubHkgc2NyZWVuXHJcbiAgYW5kIChtaW4tZGV2aWNlLXdpZHRoOiA3NjhweClcclxuICBhbmQgKG1heC1kZXZpY2Utd2lkdGg6IDEwMjRweClcclxuICBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpXHJcbiAgYW5kICgtd2Via2l0LW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDIpLFxyXG5vbmx5IHNjcmVlblxyXG4gIGFuZCAobWluLWRldmljZS13aWR0aDogMTExMnB4KVxyXG4gIGFuZCAobWF4LWRldmljZS13aWR0aDogMTExMnB4KVxyXG4gIGFuZCAob3JpZW50YXRpb246IGxhbmRzY2FwZSlcclxuICBhbmQgKC13ZWJraXQtbWluLWRldmljZS1waXhlbC1yYXRpbzogMiksXHJcbm9ubHkgc2NyZWVuXHJcbiAgYW5kIChtaW4tZGV2aWNlLXdpZHRoOiAxMzY2cHgpXHJcbiAgYW5kIChtYXgtZGV2aWNlLXdpZHRoOiAxMzY2cHgpXHJcbiAgYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKVxyXG4gIGFuZCAoLXdlYmtpdC1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAyKSB7XHJcbiAgLnByb2plY3RzVG9vbEJhciB7XHJcbiAgICBmb250LXNpemU6IDAuOHJlbTtcclxuICAgIGNvbHVtbi1nYXA6IDNweDtcclxuICB9XHJcbiAgLnByb2plY3Qge1xyXG4gICAgcGFkZGluZy1sZWZ0OiAzcHg7XHJcbiAgfVxyXG59XHJcblxyXG4vKiBwYyBleHRyYSBzbWFsbCAqL1xyXG5AbWVkaWEgb25seSBzY3JlZW5cclxuICBhbmQgKG1heC1oZWlnaHQ6IDQwMHB4KVxyXG4gIGFuZCAob3JpZW50YXRpb246IGxhbmRzY2FwZSksXHJcbm9ubHkgc2NyZWVuXHJcbiAgYW5kIChtaW4td2lkdGg6IDM5MHB4KVxyXG4gIGFuZCAobWF4LXdpZHRoOiA3NjhweClcclxuICBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpLFxyXG4vKiBQaG9uZSAqL1xyXG5vbmx5IHNjcmVlblxyXG4gIGFuZCAoZGV2aWNlLXdpZHRoOiAzNjBweClcclxuICBhbmQgKGRldmljZS1oZWlnaHQ6IDY0MHB4KVxyXG4gIGFuZCAoLXdlYmtpdC1kZXZpY2UtcGl4ZWwtcmF0aW86IDQpXHJcbiAgYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKSxcclxub25seSBzY3JlZW5cclxuICBhbmQgKG1pbi1kZXZpY2Utd2lkdGg6IDM5MHB4KVxyXG4gIGFuZCAobWF4LWRldmljZS13aWR0aDogODQ0cHgpXHJcbiAgYW5kICgtd2Via2l0LW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDQpXHJcbiAgYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKSxcclxub25seSBzY3JlZW5cclxuICBhbmQgKG1pbi1kZXZpY2Utd2lkdGg6IDQxNHB4KVxyXG4gIGFuZCAobWF4LWRldmljZS13aWR0aDogNzM2cHgpXHJcbiAgYW5kICgtd2Via2l0LW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDMpXHJcbiAgYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKSxcclxub25seSBzY3JlZW5cclxuICBhbmQgKG1pbi1kZXZpY2Utd2lkdGg6IDM3NXB4KVxyXG4gIGFuZCAobWF4LWRldmljZS13aWR0aDogODEycHgpXHJcbiAgYW5kICgtd2Via2l0LW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDMpXHJcbiAgYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKSB7XHJcbiAgLnByb2plY3RzVG9vbEJhciB7XHJcbiAgICBmb250LXNpemU6IDAuOHJlbTtcclxuICAgIGNvbHVtbi1nYXA6IDNweDtcclxuICAgIGhlaWdodDogNDZweDtcclxuICB9XHJcbiAgLnByb2plY3Qge1xyXG4gICAgcGFkZGluZy1sZWZ0OiAzcHg7XHJcbiAgfVxyXG59XHJcbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBQSxDQUFDO0FBQ0MsU0FBTztBQUNQLFdBQVM7QUFDVCxtQkFBaUI7QUFDakIsZUFBYTtBQUNiLGNBQVk7QUFDWixVQUFRO0FBQ1IsZUFBYTtBQUNiLGVBQWEsRUFBRSxFQUFFLElBQUk7QUFDdkI7QUFDQSxDQUFDO0FBQ0MsZUFBYSxNQUFNLElBQUk7QUFDdkIsZ0JBQWM7QUFDaEI7QUFDQSxDQUpDLE9BSU87QUFDTixVQUFRO0FBQ1Y7QUFDQSxDQVBDLFFBT1EsRUFBRTtBQUNULFdBQVM7QUFDWDtBQUNBLENBVkMsUUFVUSxFQUFFLENBQUM7QUFDVixTQUFPO0FBQ1Q7QUFDQSxDQUFDO0FBQ0MsY0FBWSxNQUFNLElBQUk7QUFDdEIsaUJBQWUsTUFBTSxJQUFJO0FBQzNCO0FBR0EsT0FBTyxLQUFLLE9BQ1YsSUFBSSxDQUFDLFVBQVUsRUFBRSxPQUNqQixJQUFJLENBQUMsV0FBVyxFQUFFLFVBQVUsRUFDOUIsS0FBSyxPQUNILElBQUksQ0FBQyxTQUFTLEVBQUUsT0FDaEIsSUFBSSxDQUFDLFNBQVMsRUFBRSxPQUFPLEVBRXpCLEtBQUssT0FDSCxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsT0FDdkIsSUFBSSxDQUFDLGdCQUFnQixFQUFFLFFBQ3ZCLElBQUksQ0FBQyxXQUFXLEVBQUUsV0FDbEIsSUFBSSxDQUFDLDhCQUE4QixFQUFFLEVBQUUsRUFDekMsS0FBSyxPQUNILElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxPQUN2QixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsUUFDdkIsSUFBSSxDQUFDLFdBQVcsRUFBRSxXQUNsQixJQUFJLENBQUMsOEJBQThCLEVBQUUsRUFBRSxFQUN6QyxLQUFLLE9BQ0gsSUFBSSxDQUFDLGdCQUFnQixFQUFFLFFBQ3ZCLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxRQUN2QixJQUFJLENBQUMsV0FBVyxFQUFFLFdBQ2xCLElBQUksQ0FBQyw4QkFBOEIsRUFBRSxFQUFFLEVBQ3pDLEtBQUssT0FDSCxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsUUFDdkIsSUFBSSxDQUFDLGdCQUFnQixFQUFFLFFBQ3ZCLElBQUksQ0FBQyxXQUFXLEVBQUUsV0FDbEIsSUFBSSxDQUFDLDhCQUE4QixFQUFFO0FBQ3JDLEdBeEREO0FBeURHLGVBQVc7QUFDWCxnQkFBWTtBQUNkO0FBQ0EsR0FsREQ7QUFtREcsa0JBQWM7QUFDaEI7QUFDRjtBQUdBLE9BQU8sS0FBSyxPQUNWLElBQUksQ0FBQyxVQUFVLEVBQUUsT0FDakIsSUFBSSxDQUFDLFdBQVcsRUFBRSxVQUFVLEVBQzlCLEtBQUssT0FDSCxJQUFJLENBQUMsU0FBUyxFQUFFLE9BQ2hCLElBQUksQ0FBQyxTQUFTLEVBQUUsT0FDaEIsSUFBSSxDQUFDLFdBQVcsRUFBRSxVQUFVLEVBRTlCLEtBQUssT0FDSCxJQUFJLENBQUMsWUFBWSxFQUFFLE9BQ25CLElBQUksQ0FBQyxhQUFhLEVBQUUsT0FDcEIsSUFBSSxDQUFDLDBCQUEwQixFQUFFLEdBQ2pDLElBQUksQ0FBQyxXQUFXLEVBQUUsVUFBVSxFQUM5QixLQUFLLE9BQ0gsSUFBSSxDQUFDLGdCQUFnQixFQUFFLE9BQ3ZCLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxPQUN2QixJQUFJLENBQUMsOEJBQThCLEVBQUUsR0FDckMsSUFBSSxDQUFDLFdBQVcsRUFBRSxVQUFVLEVBQzlCLEtBQUssT0FDSCxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsT0FDdkIsSUFBSSxDQUFDLGdCQUFnQixFQUFFLE9BQ3ZCLElBQUksQ0FBQyw4QkFBOEIsRUFBRSxHQUNyQyxJQUFJLENBQUMsV0FBVyxFQUFFLFVBQVUsRUFDOUIsS0FBSyxPQUNILElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxPQUN2QixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsT0FDdkIsSUFBSSxDQUFDLDhCQUE4QixFQUFFLEdBQ3JDLElBQUksQ0FBQyxXQUFXLEVBQUU7QUFDbEIsR0E5RkQ7QUErRkcsZUFBVztBQUNYLGdCQUFZO0FBQ1osWUFBUTtBQUNWO0FBQ0EsR0F6RkQ7QUEwRkcsa0JBQWM7QUFDaEI7QUFDRjsiLAogICJuYW1lcyI6IFtdCn0K */"] });
var ProjectsToolBarComponent = _ProjectsToolBarComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(ProjectsToolBarComponent, { className: "ProjectsToolBarComponent", filePath: "src\\app\\projects\\projects-tool-bar\\projects-tool-bar.component.ts", lineNumber: 9 });
})();

// src/app/projects/fenchanted/fenchanted.component.ts
var _c06 = () => ({ value: "visible" });
var _c14 = (a0) => [a0];
function FenchantedComponent_div_86_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 26);
    \u0275\u0275listener("click", function FenchantedComponent_div_86_Template_div_click_0_listener() {
      \u0275\u0275restoreView(_r2);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onClosePreview());
    });
    \u0275\u0275element(1, "img", 27);
    \u0275\u0275elementStart(2, "div", 28)(3, "img", 29);
    \u0275\u0275listener("click", function FenchantedComponent_div_86_Template_img_click_3_listener($event) {
      return $event.stopPropagation();
    });
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("@animation", \u0275\u0275pureFunction0(2, _c06));
    \u0275\u0275advance(3);
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(3, _c14, ctx_r0.lightBoxImageClass));
  }
}
var _FenchantedComponent = class _FenchantedComponent extends BaseProject {
  constructor(route) {
    super(route);
    this.projectName = "fenchanted";
  }
};
_FenchantedComponent.\u0275fac = function FenchantedComponent_Factory(t) {
  return new (t || _FenchantedComponent)(\u0275\u0275directiveInject(ActivatedRoute));
};
_FenchantedComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _FenchantedComponent, selectors: [["app-fenchanted"]], features: [\u0275\u0275InheritDefinitionFeature], decls: 88, vars: 5, consts: [[1, "layerContainer", "sunlightLayerContainer"], [3, "level", "sublevel"], [3, "level", "currentProject"], [1, "projectContainer"], [1, "projectDetail"], [1, "logoDiv"], [1, "twitterDiv"], ["href", "https://twitter.com/FEnchanted0802", "target", "_blank", 1, "twitterLink"], ["src", "#"], [1, "dateNPlaceDiv"], ["href", "https://maps.app.goo.gl/Ds7xpw63PgZYMnVw8", "target", "_blank", 1, "locationDiv"], [1, "menuDiv"], [1, "giftDiv"], [1, "staticPicDiv"], [1, "standeeDiv"], ["src", "#", 1, "standee1"], ["src", "#", 1, "standee2"], ["src", "#", 1, "specialMenuImg1"], ["src", "#", 1, "specialMenuImg2"], ["src", "#", 1, "specialMenuImg3"], [1, "galleriesDiv"], [1, "slideshow"], [1, "slide-wrapper"], [1, "slide"], ["src", "#", 3, "click"], ["class", "lightBox", 3, "click", 4, "ngIf"], [1, "lightBox", 3, "click"], [1, "closeBtn"], [1, "lightBoxContainer"], ["src", "#", 1, "lightBoxImage", 3, "ngClass", "click"]], template: function FenchantedComponent_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 0);
    \u0275\u0275element(1, "app-tool-bar", 1)(2, "app-projects-tool-bar", 2);
    \u0275\u0275elementStart(3, "div", 3)(4, "div", 4);
    \u0275\u0275element(5, "div", 5);
    \u0275\u0275elementStart(6, "div", 6)(7, "a", 7);
    \u0275\u0275element(8, "img", 8);
    \u0275\u0275elementStart(9, "span");
    \u0275\u0275text(10, "#FEnchanted");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(11, "p");
    \u0275\u0275text(12, '"\u0E07\u0E32\u0E19\u0E40\u0E25\u0E35\u0E49\u0E22\u0E07\u0E19\u0E49\u0E33\u0E0A\u0E32\u0E41\u0E2B\u0E48\u0E07\u0E21\u0E19\u0E15\u0E23\u0E32\u0E41\u0E2A\u0E19\u0E1E\u0E34\u0E40\u0E28\u0E29 \u0E13 \u0E04\u0E24\u0E2B\u0E32\u0E2A\u0E19\u0E4C\u0E02\u0E2D\u0E07\u0E19\u0E32\u0E22\u0E17\u0E48\u0E32\u0E19\u0E0A\u0E44\u0E19\u0E40\u0E14\u0E2D\u0E23\u0E4C"');
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(13, "div", 9)(14, "h2");
    \u0275\u0275text(15, "3 - 4 Feb 2024");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(16, "p");
    \u0275\u0275text(17, "Babette's, the Steak House \u0E0A\u0E31\u0E49\u0E19 19");
    \u0275\u0275element(18, "br");
    \u0275\u0275text(19, "Hotel Muse Bangkok Langsuan ");
    \u0275\u0275elementStart(20, "a", 10);
    \u0275\u0275element(21, "img", 8);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(22, "div", 11)(23, "h1");
    \u0275\u0275text(24, "Special Menu");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(25, "dl")(26, "dt");
    \u0275\u0275text(27, "Dearest");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(28, "dd");
    \u0275\u0275text(29, "\u0E0A\u0E35\u0E2A\u0E40\u0E04\u0E49\u0E01 1 \u0E0A\u0E34\u0E49\u0E19 \u0E40\u0E04\u0E23\u0E37\u0E48\u0E2D\u0E07\u0E14\u0E37\u0E48\u0E21 2 \u0E41\u0E01\u0E49\u0E27");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(30, "dt");
    \u0275\u0275text(31, "Sweetheart");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(32, "dd");
    \u0275\u0275text(33, "\u0E1A\u0E23\u0E32\u0E27\u0E19\u0E35\u0E48 1 \u0E0A\u0E34\u0E49\u0E19 \u0E40\u0E04\u0E23\u0E37\u0E48\u0E2D\u0E07\u0E14\u0E37\u0E48\u0E21 2 \u0E41\u0E01\u0E49\u0E27");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(34, "div", 12)(35, "h1");
    \u0275\u0275text(36, "Gift Set");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(37, "dl")(38, "dt");
    \u0275\u0275text(39, "Gift set box");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(40, "dd");
    \u0275\u0275text(41, "\u0E01\u0E25\u0E48\u0E2D\u0E07\u0E02\u0E2D\u0E07\u0E02\u0E27\u0E31\u0E0D");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(42, "dt");
    \u0275\u0275text(43, "Invitation card and envelope");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(44, "dd");
    \u0275\u0275text(45, "\u0E01\u0E32\u0E23\u0E4C\u0E14\u0E40\u0E0A\u0E34\u0E0D\u0E41\u0E25\u0E30\u0E0B\u0E2D\u0E07");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(46, "dt");
    \u0275\u0275text(47, "Coaster");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(48, "dd");
    \u0275\u0275text(49, "\u0E17\u0E35\u0E48\u0E23\u0E2D\u0E07\u0E41\u0E01\u0E49\u0E27");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(50, "dt");
    \u0275\u0275text(51, "7 postcards in 7 Days with Schneider theme");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(52, "dd");
    \u0275\u0275text(53, "\u0E42\u0E1B\u0E2A\u0E01\u0E32\u0E23\u0E4C\u0E14 7 \u0E43\u0E1A\u0E43\u0E19\u0E18\u0E35\u0E21 7 Days with Schneider");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(54, "dt");
    \u0275\u0275text(55, "Acrylic Standee");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(56, "dd");
    \u0275\u0275text(57, "\u0E2A\u0E41\u0E15\u0E19\u0E14\u0E35\u0E49\u0E2D\u0E30\u0E04\u0E23\u0E34\u0E25\u0E34\u0E04");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(58, "div", 13)(59, "div", 14);
    \u0275\u0275element(60, "img", 15)(61, "img", 16);
    \u0275\u0275elementEnd();
    \u0275\u0275element(62, "img", 17)(63, "img", 18)(64, "img", 19);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(65, "div", 20)(66, "h1");
    \u0275\u0275text(67, "Galleries");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(68, "div", 21)(69, "div", 22)(70, "div", 23)(71, "img", 24);
    \u0275\u0275listener("click", function FenchantedComponent_Template_img_click_71_listener() {
      return ctx.onPreviewImage("previewFen1");
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(72, "div", 23)(73, "img", 24);
    \u0275\u0275listener("click", function FenchantedComponent_Template_img_click_73_listener() {
      return ctx.onPreviewImage("previewFen2");
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(74, "div", 23)(75, "img", 24);
    \u0275\u0275listener("click", function FenchantedComponent_Template_img_click_75_listener() {
      return ctx.onPreviewImage("previewFen3");
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(76, "div", 23)(77, "img", 24);
    \u0275\u0275listener("click", function FenchantedComponent_Template_img_click_77_listener() {
      return ctx.onPreviewImage("previewFen4");
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(78, "div", 23)(79, "img", 24);
    \u0275\u0275listener("click", function FenchantedComponent_Template_img_click_79_listener() {
      return ctx.onPreviewImage("previewFen5");
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(80, "div", 23)(81, "img", 24);
    \u0275\u0275listener("click", function FenchantedComponent_Template_img_click_81_listener() {
      return ctx.onPreviewImage("previewFen6");
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(82, "div", 23)(83, "img", 24);
    \u0275\u0275listener("click", function FenchantedComponent_Template_img_click_83_listener() {
      return ctx.onPreviewImage("previewFen7");
    });
    \u0275\u0275elementEnd()()()();
    \u0275\u0275elementStart(84, "div");
    \u0275\u0275text(85, "\u2726 \u2726 \u2726 slide left/right to see more \u2726 \u2726 \u2726");
    \u0275\u0275elementEnd()()();
    \u0275\u0275template(86, FenchantedComponent_div_86_Template, 4, 5, "div", 25);
    \u0275\u0275elementEnd();
    \u0275\u0275element(87, "app-sunlight-zone-bg");
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    \u0275\u0275advance(1);
    \u0275\u0275property("level", ctx.level)("sublevel", "Presents to Schneider");
    \u0275\u0275advance(1);
    \u0275\u0275property("level", ctx.level)("currentProject", ctx.projectName);
    \u0275\u0275advance(84);
    \u0275\u0275property("ngIf", ctx.showPreview);
  }
}, dependencies: [NgClass, NgIf, ToolBarComponent, SunlightZoneBgComponent, ProjectsToolBarComponent], styles: ['\n\n.projectDetail[_ngcontent-%COMP%]   .logoDiv[_ngcontent-%COMP%] {\n  -webkit-mask-image: url("./media/fenchanted-logo.PNG");\n  mask-image: url("./media/fenchanted-logo.PNG");\n  -webkit-mask-size: 600px auto;\n  mask-size: 600px auto;\n  -webkit-mask-repeat: no-repeat;\n  mask-repeat: no-repeat;\n  -webkit-mask-position: center;\n  mask-position: center;\n}\n.standee1[_ngcontent-%COMP%] {\n  content: url("./media/standee-k-mad.JPG");\n  width: 48%;\n  height: auto;\n}\n.standee2[_ngcontent-%COMP%] {\n  content: url("./media/standee-k-first.JPG");\n  width: 48%;\n  height: auto;\n}\n.specialMenuImg1[_ngcontent-%COMP%] {\n  margin-top: 10px;\n  content: url("./media/special-set.JPG");\n  width: 70%;\n  height: auto;\n}\n.specialMenuImg2[_ngcontent-%COMP%] {\n  margin-top: 10px;\n  content: url("./media/dearest.JPG");\n  width: 70%;\n  height: auto;\n}\n.specialMenuImg3[_ngcontent-%COMP%] {\n  margin-top: 10px;\n  content: url("./media/sweetheart.JPG");\n  width: 70%;\n  height: auto;\n}\n.slide-wrapper[_ngcontent-%COMP%] {\n  width: 4250px;\n}\n.slide[_ngcontent-%COMP%]:nth-child(1)    > img[_ngcontent-%COMP%] {\n  content: url("./media/fen1.JPG");\n  width: 600px;\n}\n.slide[_ngcontent-%COMP%]:nth-child(2)    > img[_ngcontent-%COMP%] {\n  content: url("./media/fen2.JPG");\n  width: 650px;\n}\n.slide[_ngcontent-%COMP%]:nth-child(3)    > img[_ngcontent-%COMP%] {\n  content: url("./media/fen3.JPG");\n  width: 340px;\n}\n.slide[_ngcontent-%COMP%]:nth-child(4)    > img[_ngcontent-%COMP%] {\n  content: url("./media/fen4.JPG");\n  width: 650px;\n}\n.slide[_ngcontent-%COMP%]:nth-child(5)    > img[_ngcontent-%COMP%] {\n  content: url("./media/fen5.JPG");\n  width: 650px;\n}\n.slide[_ngcontent-%COMP%]:nth-child(6)    > img[_ngcontent-%COMP%] {\n  content: url("./media/fen6.JPG");\n  width: 650px;\n}\n.slide[_ngcontent-%COMP%]:nth-child(7)    > img[_ngcontent-%COMP%] {\n  content: url("./media/fen7.JPG");\n  width: 650px;\n}\n.previewFen1[_ngcontent-%COMP%] {\n  content: url("./media/fen1.JPG");\n}\n.previewFen2[_ngcontent-%COMP%] {\n  content: url("./media/fen2.JPG");\n}\n.previewFen3[_ngcontent-%COMP%] {\n  content: url("./media/fen3.JPG");\n}\n.previewFen4[_ngcontent-%COMP%] {\n  content: url("./media/fen4.JPG");\n}\n.previewFen5[_ngcontent-%COMP%] {\n  content: url("./media/fen5.JPG");\n}\n.previewFen6[_ngcontent-%COMP%] {\n  content: url("./media/fen6.JPG");\n}\n.previewFen7[_ngcontent-%COMP%] {\n  content: url("./media/fen7.JPG");\n}\n@media only screen and (max-height: 600px) and (orientation: landscape), only screen and (min-width: 768px) and (max-width: 1024px), only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 1), only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 2), only screen and (min-device-width: 1112px) and (max-device-width: 1112px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 2), only screen and (min-device-width: 1366px) and (max-device-width: 1366px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 2) {\n  .projectDetail[_ngcontent-%COMP%]   .logoDiv[_ngcontent-%COMP%] {\n    -webkit-mask-size: 400px auto;\n    mask-size: 400px auto;\n  }\n  .slide-wrapper[_ngcontent-%COMP%] {\n    width: 3435px;\n  }\n  .slide[_ngcontent-%COMP%]:nth-child(1)    > img[_ngcontent-%COMP%] {\n    width: 460px;\n  }\n  .slide[_ngcontent-%COMP%]:nth-child(2)    > img[_ngcontent-%COMP%] {\n    width: 530px;\n  }\n  .slide[_ngcontent-%COMP%]:nth-child(3)    > img[_ngcontent-%COMP%] {\n    width: 265px;\n  }\n  .slide[_ngcontent-%COMP%]:nth-child(4)    > img[_ngcontent-%COMP%] {\n    width: 530px;\n  }\n  .slide[_ngcontent-%COMP%]:nth-child(5)    > img[_ngcontent-%COMP%] {\n    width: 530px;\n  }\n  .slide[_ngcontent-%COMP%]:nth-child(6)    > img[_ngcontent-%COMP%] {\n    width: 530px;\n  }\n  .slide[_ngcontent-%COMP%]:nth-child(7)    > img[_ngcontent-%COMP%] {\n    width: 530px;\n  }\n}\n@media only screen and (max-height: 400px) and (orientation: landscape), only screen and (min-width: 390px) and (max-width: 768px) and (orientation: landscape), only screen and (device-width: 360px) and (device-height: 640px) and (-webkit-device-pixel-ratio: 4) and (orientation: landscape), only screen and (min-device-width: 390px) and (max-device-width: 844px) and (-webkit-min-device-pixel-ratio: 4) and (orientation: landscape), only screen and (min-device-width: 414px) and (max-device-width: 736px) and (-webkit-min-device-pixel-ratio: 3) and (orientation: landscape), only screen and (min-device-width: 375px) and (max-device-width: 812px) and (-webkit-min-device-pixel-ratio: 3) and (orientation: landscape) {\n  .projectDetail[_ngcontent-%COMP%]   .logoDiv[_ngcontent-%COMP%] {\n    -webkit-mask-size: 280px auto;\n    mask-size: 280px auto;\n  }\n  .slide-wrapper[_ngcontent-%COMP%] {\n    width: 2345px;\n  }\n  .slide[_ngcontent-%COMP%]:nth-child(1)    > img[_ngcontent-%COMP%] {\n    width: 300px;\n  }\n  .slide[_ngcontent-%COMP%]:nth-child(2)    > img[_ngcontent-%COMP%] {\n    width: 370px;\n  }\n  .slide[_ngcontent-%COMP%]:nth-child(3)    > img[_ngcontent-%COMP%] {\n    width: 165px;\n  }\n  .slide[_ngcontent-%COMP%]:nth-child(4)    > img[_ngcontent-%COMP%] {\n    width: 370px;\n  }\n  .slide[_ngcontent-%COMP%]:nth-child(5)    > img[_ngcontent-%COMP%] {\n    width: 370px;\n  }\n  .slide[_ngcontent-%COMP%]:nth-child(6)    > img[_ngcontent-%COMP%] {\n    width: 370px;\n  }\n  .slide[_ngcontent-%COMP%]:nth-child(7)    > img[_ngcontent-%COMP%] {\n    width: 370px;\n  }\n}\n/*# sourceMappingURL=data:application/json;base64, */'], data: { animation: [
  trigger("animation", [
    transition("void => visible", [
      style({ opacity: 0 }),
      animate("300ms", style({ opacity: 1 }))
    ]),
    transition("visible => void", [
      style({ opacity: 1 }),
      animate("300ms", style({ opacity: 0 }))
    ])
  ])
] } });
var FenchantedComponent = _FenchantedComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(FenchantedComponent, { className: "FenchantedComponent", filePath: "src\\app\\projects\\fenchanted\\fenchanted.component.ts", lineNumber: 23 });
})();

// src/app/projects/amiore/amiore.component.ts
var _c07 = () => ({ value: "visible" });
var _c15 = (a0) => [a0];
function AmioreComponent_div_83_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 25);
    \u0275\u0275listener("click", function AmioreComponent_div_83_Template_div_click_0_listener() {
      \u0275\u0275restoreView(_r2);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onClosePreview());
    });
    \u0275\u0275element(1, "img", 26);
    \u0275\u0275elementStart(2, "div", 27)(3, "img", 28);
    \u0275\u0275listener("click", function AmioreComponent_div_83_Template_img_click_3_listener($event) {
      return $event.stopPropagation();
    });
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("@animation", \u0275\u0275pureFunction0(2, _c07));
    \u0275\u0275advance(3);
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(3, _c15, ctx_r0.lightBoxImageClass));
  }
}
var _AmioreComponent = class _AmioreComponent extends BaseProject {
  constructor(route) {
    super(route);
    this.projectName = "amiore";
  }
};
_AmioreComponent.\u0275fac = function AmioreComponent_Factory(t) {
  return new (t || _AmioreComponent)(\u0275\u0275directiveInject(ActivatedRoute));
};
_AmioreComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AmioreComponent, selectors: [["app-amiore"]], features: [\u0275\u0275InheritDefinitionFeature], decls: 85, vars: 5, consts: [[1, "layerContainer", "sunlightLayerContainer"], [3, "level", "sublevel"], [3, "level", "currentProject"], [1, "projectContainer"], [1, "projectDetail"], [1, "logoDiv"], [1, "twitterDiv"], ["href", "https://twitter.com/AMiORE0802", "target", "_blank", 1, "twitterLink"], ["src", "#"], [1, "dateNPlaceDiv"], ["href", "https://maps.app.goo.gl/gLif8MspMnyu4JR16", "target", "_blank", 1, "locationDiv"], [1, "menuDiv"], [1, "giftDiv"], [1, "staticPicDiv"], [1, "standeeDiv"], ["src", "#", 1, "standee1"], ["src", "#", 1, "standee2"], ["src", "#", 1, "specialMenuImg1"], ["src", "#", 1, "specialMenuImg2"], [1, "galleriesDiv"], [1, "slideshow"], [1, "slide-wrapper"], [1, "slide"], ["src", "#", 3, "click"], ["class", "lightBox", 3, "click", 4, "ngIf"], [1, "lightBox", 3, "click"], [1, "closeBtn"], [1, "lightBoxContainer"], ["src", "#", 1, "lightBoxImage", 3, "ngClass", "click"]], template: function AmioreComponent_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 0);
    \u0275\u0275element(1, "app-tool-bar", 1)(2, "app-projects-tool-bar", 2);
    \u0275\u0275elementStart(3, "div", 3)(4, "div", 4);
    \u0275\u0275element(5, "div", 5);
    \u0275\u0275elementStart(6, "div", 6)(7, "a", 7);
    \u0275\u0275element(8, "img", 8);
    \u0275\u0275elementStart(9, "span");
    \u0275\u0275text(10, "#AMiORE0802");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(11, "p");
    \u0275\u0275text(12, `"Special date with our dearest friend 'Schneider'"`);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(13, "div", 9)(14, "h2");
    \u0275\u0275text(15, "2 - 4 Feb 2024");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(16, "p");
    \u0275\u0275text(17, "Holidate Cafe ");
    \u0275\u0275elementStart(18, "a", 10);
    \u0275\u0275element(19, "img", 8);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(20, "div", 11)(21, "h1");
    \u0275\u0275text(22, "Special Menu");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(23, "dl")(24, "dt");
    \u0275\u0275text(25, "LOVE");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(26, "dd");
    \u0275\u0275text(27, "\u0E21\u0E34\u0E01\u0E0B\u0E4C\u0E40\u0E1A\u0E2D\u0E23\u0E35\u0E48 \u0E2A\u0E49\u0E21 \u0E42\u0E0B\u0E14\u0E32 \u0E23\u0E2A\u0E0A\u0E32\u0E15\u0E34\u0E40\u0E1B\u0E23\u0E35\u0E49\u0E22\u0E27\u0E46\u0E21\u0E35\u0E23\u0E2A\u0E2B\u0E27\u0E32\u0E19\u0E19\u0E34\u0E14\u0E46");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(28, "dt");
    \u0275\u0275text(29, "BELOVED");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(30, "dd");
    \u0275\u0275text(31, "\u0E19\u0E21\u0E19\u0E49\u0E33\u0E1C\u0E36\u0E49\u0E07\u0E40\u0E22\u0E47\u0E19 \u0E19\u0E21\u0E19\u0E27\u0E25\u0E46 \u0E2B\u0E2D\u0E21\u0E19\u0E49\u0E33\u0E1C\u0E36\u0E49\u0E07 \u0E21\u0E32\u0E1E\u0E23\u0E49\u0E2D\u0E21\u0E23\u0E2A\u0E2B\u0E27\u0E32\u0E19\u0E19\u0E38\u0E48\u0E21\u0E46");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(32, "div", 12)(33, "h1");
    \u0275\u0275text(34, "Gift Set");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(35, "dl")(36, "dt");
    \u0275\u0275text(37, "Cup Sleeve");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(38, "dd");
    \u0275\u0275text(39, "\u0E01\u0E23\u0E30\u0E14\u0E32\u0E29\u0E04\u0E23\u0E2D\u0E1A\u0E41\u0E01\u0E49\u0E27");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(40, "dt");
    \u0275\u0275text(41, "Clear Card");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(42, "dd");
    \u0275\u0275text(43, "\u0E01\u0E32\u0E23\u0E4C\u0E14\u0E43\u0E2A");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(44, "dt");
    \u0275\u0275text(45, "Coaster");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(46, "dd");
    \u0275\u0275text(47, "\u0E17\u0E35\u0E48\u0E23\u0E2D\u0E07\u0E41\u0E01\u0E49\u0E27");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(48, "dt");
    \u0275\u0275text(49, "Random Post Card");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(50, "dd");
    \u0275\u0275text(51, "\u0E42\u0E1B\u0E2A\u0E01\u0E32\u0E23\u0E4C\u0E14\u0E41\u0E1A\u0E1A\u0E2A\u0E38\u0E48\u0E21");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(52, "dt");
    \u0275\u0275text(53, "Acrylic Standee");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(54, "dd");
    \u0275\u0275text(55, "\u0E2A\u0E41\u0E15\u0E19\u0E14\u0E35\u0E49\u0E2D\u0E30\u0E04\u0E23\u0E34\u0E25\u0E34\u0E04");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(56, "div", 13)(57, "div", 14);
    \u0275\u0275element(58, "img", 15)(59, "img", 16);
    \u0275\u0275elementEnd();
    \u0275\u0275element(60, "img", 17)(61, "img", 18);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(62, "div", 19)(63, "h1");
    \u0275\u0275text(64, "Galleries");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(65, "div", 20)(66, "div", 21)(67, "div", 22)(68, "img", 23);
    \u0275\u0275listener("click", function AmioreComponent_Template_img_click_68_listener() {
      return ctx.onPreviewImage("previewAmil1");
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(69, "div", 22)(70, "img", 23);
    \u0275\u0275listener("click", function AmioreComponent_Template_img_click_70_listener() {
      return ctx.onPreviewImage("previewAmil2");
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(71, "div", 22)(72, "img", 23);
    \u0275\u0275listener("click", function AmioreComponent_Template_img_click_72_listener() {
      return ctx.onPreviewImage("previewAmil3");
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(73, "div", 22)(74, "img", 23);
    \u0275\u0275listener("click", function AmioreComponent_Template_img_click_74_listener() {
      return ctx.onPreviewImage("previewAmil4");
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(75, "div", 22)(76, "img", 23);
    \u0275\u0275listener("click", function AmioreComponent_Template_img_click_76_listener() {
      return ctx.onPreviewImage("previewAmil5");
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(77, "div", 22)(78, "img", 23);
    \u0275\u0275listener("click", function AmioreComponent_Template_img_click_78_listener() {
      return ctx.onPreviewImage("previewAmil6");
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(79, "div", 22)(80, "img", 23);
    \u0275\u0275listener("click", function AmioreComponent_Template_img_click_80_listener() {
      return ctx.onPreviewImage("previewAmil7");
    });
    \u0275\u0275elementEnd()()()();
    \u0275\u0275elementStart(81, "div");
    \u0275\u0275text(82, "\u2726 \u2726 \u2726 slide left/right to see more \u2726 \u2726 \u2726");
    \u0275\u0275elementEnd()()();
    \u0275\u0275template(83, AmioreComponent_div_83_Template, 4, 5, "div", 24);
    \u0275\u0275elementEnd();
    \u0275\u0275element(84, "app-sunlight-zone-bg");
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    \u0275\u0275advance(1);
    \u0275\u0275property("level", ctx.level)("sublevel", "Presents to Schneider");
    \u0275\u0275advance(1);
    \u0275\u0275property("level", ctx.level)("currentProject", ctx.projectName);
    \u0275\u0275advance(81);
    \u0275\u0275property("ngIf", ctx.showPreview);
  }
}, dependencies: [NgClass, NgIf, ToolBarComponent, SunlightZoneBgComponent, ProjectsToolBarComponent], styles: ['\n\n.projectDetail[_ngcontent-%COMP%]   .logoDiv[_ngcontent-%COMP%] {\n  height: 260px;\n  margin-top: 65px;\n  -webkit-mask-image: url("./media/amiore-logo.PNG");\n  mask-image: url("./media/amiore-logo.PNG");\n  -webkit-mask-size: 650px auto;\n  mask-size: 650px auto;\n  -webkit-mask-repeat: no-repeat;\n  mask-repeat: no-repeat;\n  -webkit-mask-position: center;\n  mask-position: center;\n}\n.standee1[_ngcontent-%COMP%] {\n  content: url("./media/standee-amil1.JPG");\n  width: 48%;\n  height: auto;\n}\n.standee2[_ngcontent-%COMP%] {\n  content: url("./media/standee-amil2.JPG");\n  width: 48%;\n  height: auto;\n}\n.specialMenuImg1[_ngcontent-%COMP%] {\n  margin-top: 10px;\n  content: url("./media/love.JPG");\n  width: 70%;\n  height: auto;\n}\n.specialMenuImg2[_ngcontent-%COMP%] {\n  margin-top: 10px;\n  content: url("./media/be-loved.JPG");\n  width: 70%;\n  height: auto;\n}\n.slide-wrapper[_ngcontent-%COMP%] {\n  width: 2160px;\n}\n.slide[_ngcontent-%COMP%]:nth-child(1)    > img[_ngcontent-%COMP%] {\n  content: url("./media/amil1.JPG");\n}\n.slide[_ngcontent-%COMP%]:nth-child(2)    > img[_ngcontent-%COMP%] {\n  content: url("./media/amil2.JPG");\n}\n.slide[_ngcontent-%COMP%]:nth-child(3)    > img[_ngcontent-%COMP%] {\n  content: url("./media/amil3.JPG");\n}\n.slide[_ngcontent-%COMP%]:nth-child(4)    > img[_ngcontent-%COMP%] {\n  content: url("./media/amil4.JPG");\n}\n.slide[_ngcontent-%COMP%]:nth-child(5)    > img[_ngcontent-%COMP%] {\n  content: url("./media/amil5.JPG");\n}\n.slide[_ngcontent-%COMP%]:nth-child(6)    > img[_ngcontent-%COMP%] {\n  content: url("./media/amil6.JPG");\n}\n.slide[_ngcontent-%COMP%]:nth-child(7)    > img[_ngcontent-%COMP%] {\n  content: url("./media/amil7.JPG");\n}\n.previewAmil1[_ngcontent-%COMP%] {\n  content: url("./media/amil1.JPG");\n}\n.previewAmil2[_ngcontent-%COMP%] {\n  content: url("./media/amil2.JPG");\n}\n.previewAmil3[_ngcontent-%COMP%] {\n  content: url("./media/amil3.JPG");\n}\n.previewAmil4[_ngcontent-%COMP%] {\n  content: url("./media/amil4.JPG");\n}\n.previewAmil5[_ngcontent-%COMP%] {\n  content: url("./media/amil5.JPG");\n}\n.previewAmil6[_ngcontent-%COMP%] {\n  content: url("./media/amil6.JPG");\n}\n.previewAmil7[_ngcontent-%COMP%] {\n  content: url("./media/amil7.JPG");\n}\n@media only screen and (max-height: 600px) and (orientation: landscape), only screen and (min-width: 768px) and (max-width: 1024px), only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 1), only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 2), only screen and (min-device-width: 1112px) and (max-device-width: 1112px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 2), only screen and (min-device-width: 1366px) and (max-device-width: 1366px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 2) {\n  .projectDetail[_ngcontent-%COMP%]   .logoDiv[_ngcontent-%COMP%] {\n    height: 180px;\n    margin-top: 50px;\n    -webkit-mask-size: 450px auto;\n    mask-size: 450px auto;\n  }\n  .slide-wrapper[_ngcontent-%COMP%] {\n    width: 1670px;\n  }\n}\n@media only screen and (max-height: 400px) and (orientation: landscape), only screen and (min-width: 390px) and (max-width: 768px) and (orientation: landscape), only screen and (device-width: 360px) and (device-height: 640px) and (-webkit-device-pixel-ratio: 4) and (orientation: landscape), only screen and (min-device-width: 390px) and (max-device-width: 844px) and (-webkit-min-device-pixel-ratio: 4) and (orientation: landscape), only screen and (min-device-width: 414px) and (max-device-width: 736px) and (-webkit-min-device-pixel-ratio: 3) and (orientation: landscape), only screen and (min-device-width: 375px) and (max-device-width: 812px) and (-webkit-min-device-pixel-ratio: 3) and (orientation: landscape) {\n  .projectDetail[_ngcontent-%COMP%]   .logoDiv[_ngcontent-%COMP%] {\n    height: 80px;\n    margin-top: 25px;\n    -webkit-mask-size: 280px auto;\n    mask-size: 280px auto;\n  }\n  .slide-wrapper[_ngcontent-%COMP%] {\n    width: 1010px;\n  }\n}\n/*# sourceMappingURL=data:application/json;base64, */'], data: { animation: [
  trigger("animation", [
    transition("void => visible", [
      style({ opacity: 0 }),
      animate("300ms", style({ opacity: 1 }))
    ]),
    transition("visible => void", [
      style({ opacity: 1 }),
      animate("300ms", style({ opacity: 0 }))
    ])
  ])
] } });
var AmioreComponent = _AmioreComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AmioreComponent, { className: "AmioreComponent", filePath: "src\\app\\projects\\amiore\\amiore.component.ts", lineNumber: 23 });
})();

// src/app/projects/whisper-from-deep-sea/whisper-from-deep-sea.component.ts
var _c08 = () => ({ value: "visible" });
var _c16 = (a0) => [a0];
function WhisperFromDeepSeaComponent_div_94_Template(rf, ctx) {
  if (rf & 1) {
    const _r2 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 26);
    \u0275\u0275listener("click", function WhisperFromDeepSeaComponent_div_94_Template_div_click_0_listener() {
      \u0275\u0275restoreView(_r2);
      const ctx_r1 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r1.onClosePreview());
    });
    \u0275\u0275element(1, "img", 27);
    \u0275\u0275elementStart(2, "div", 28)(3, "img", 29);
    \u0275\u0275listener("click", function WhisperFromDeepSeaComponent_div_94_Template_img_click_3_listener($event) {
      return $event.stopPropagation();
    });
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r0 = \u0275\u0275nextContext();
    \u0275\u0275property("@animation", \u0275\u0275pureFunction0(2, _c08));
    \u0275\u0275advance(3);
    \u0275\u0275property("ngClass", \u0275\u0275pureFunction1(3, _c16, ctx_r0.lightBoxImageClass));
  }
}
var _WhisperFromDeepSeaComponent = class _WhisperFromDeepSeaComponent extends BaseProject {
  constructor(route) {
    super(route);
    this.projectName = "whisper-from-the-deep-sea";
  }
};
_WhisperFromDeepSeaComponent.\u0275fac = function WhisperFromDeepSeaComponent_Factory(t) {
  return new (t || _WhisperFromDeepSeaComponent)(\u0275\u0275directiveInject(ActivatedRoute));
};
_WhisperFromDeepSeaComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _WhisperFromDeepSeaComponent, selectors: [["app-whisper-from-deep-sea"]], features: [\u0275\u0275InheritDefinitionFeature], decls: 96, vars: 5, consts: [[1, "layerContainer", "sunlightLayerContainer"], [3, "level", "sublevel"], [3, "level", "currentProject"], [1, "projectContainer"], [1, "projectDetail"], [1, "logoDiv"], [1, "twitterDiv"], ["href", "https://twitter.com/DeepSea_0802", "target", "_blank", 1, "twitterLink"], ["src", "#"], [1, "dateNPlaceDiv"], ["href", "https://maps.app.goo.gl/8SjPxbvAqKmALfdQ6", "target", "_blank", 1, "locationDiv"], [1, "menuDiv"], [1, "giftDiv"], [1, "staticPicDiv"], [1, "standeeDiv"], ["src", "#", 1, "standee1"], ["src", "#", 1, "standee2"], ["src", "#", 1, "specialMenuImg1"], ["src", "#", 1, "specialMenuImg2"], ["src", "#", 1, "specialMenuImg3"], [1, "galleriesDiv"], [1, "slideshow"], [1, "slide-wrapper"], [1, "slide"], ["src", "#", 3, "click"], ["class", "lightBox", 3, "click", 4, "ngIf"], [1, "lightBox", 3, "click"], [1, "closeBtn"], [1, "lightBoxContainer"], ["src", "#", 1, "lightBoxImage", 3, "ngClass", "click"]], template: function WhisperFromDeepSeaComponent_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 0);
    \u0275\u0275element(1, "app-tool-bar", 1)(2, "app-projects-tool-bar", 2);
    \u0275\u0275elementStart(3, "div", 3)(4, "div", 4);
    \u0275\u0275element(5, "div", 5);
    \u0275\u0275elementStart(6, "div", 6)(7, "a", 7);
    \u0275\u0275element(8, "img", 8);
    \u0275\u0275elementStart(9, "span");
    \u0275\u0275text(10, "#TheWhisperCafe");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(11, "p");
    \u0275\u0275text(12, '"Ahoy! Arrrrr ye ready? \u0E21\u0E32\u0E2D\u0E2D\u0E01\u0E40\u0E14\u0E34\u0E19\u0E17\u0E32\u0E07\u0E40\u0E1E\u0E37\u0E48\u0E2D\u0E15\u0E32\u0E21\u0E2B\u0E32\u0E40\u0E2A\u0E35\u0E22\u0E07\u0E01\u0E23\u0E30\u0E0B\u0E34\u0E1A\u0E08\u0E32\u0E01\u0E2B\u0E49\u0E27\u0E07\u0E17\u0E30\u0E40\u0E25\u0E25\u0E36\u0E01\u0E01\u0E31\u0E19\u0E40\u0E16\u0E2D\u0E30!"');
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(13, "div", 9)(14, "h2");
    \u0275\u0275text(15, "2 - 4 Feb 2024");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(16, "p");
    \u0275\u0275text(17, "Hwang Cafe, ");
    \u0275\u0275element(18, "br");
    \u0275\u0275text(19, "BTS Phra Khanong ");
    \u0275\u0275elementStart(20, "a", 10);
    \u0275\u0275element(21, "img", 8);
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(22, "div", 11)(23, "h1");
    \u0275\u0275text(24, "Special Menu");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(25, "dl")(26, "dt");
    \u0275\u0275text(27, "Firtha's Horizon Treasures");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(28, "dd");
    \u0275\u0275text(29, "\u0E2D\u0E31\u0E0D\u0E0A\u0E31\u0E19\u0E19\u0E49\u0E33\u0E1C\u0E36\u0E49\u0E07\u0E21\u0E30\u0E19\u0E32\u0E27\u0E42\u0E0B\u0E14\u0E32 & \u0E1A\u0E25\u0E39\u0E40\u0E1A\u0E2D\u0E23\u0E4C\u0E23\u0E35\u0E48\u0E0A\u0E35\u0E2A\u0E40\u0E04\u0E49\u0E01");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(30, "dt");
    \u0275\u0275text(31, "Lorelei's Sips and Treat");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(32, "dd");
    \u0275\u0275text(33, "\u0E0A\u0E32\u0E44\u0E17\u0E22 & \u0E2A\u0E1B\u0E31\u0E19\u0E08\u0E4C\u0E40\u0E04\u0E49\u0E01\u0E41\u0E22\u0E21\u0E1A\u0E25\u0E39\u0E40\u0E1A\u0E2D\u0E23\u0E4C\u0E23\u0E35\u0E48");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(34, "dt");
    \u0275\u0275text(35, "Corsair's Sips and Treat");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(36, "dd");
    \u0275\u0275text(37, "\u0E0A\u0E32\u0E40\u0E02\u0E35\u0E22\u0E27 & \u0E2A\u0E1B\u0E31\u0E08\u0E19\u0E4C\u0E40\u0E04\u0E49\u0E01\u0E41\u0E22\u0E21\u0E1A\u0E25\u0E39\u0E40\u0E1A\u0E2D\u0E23\u0E4C\u0E23\u0E35\u0E48)\u0E48");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(38, "div", 12)(39, "h1");
    \u0275\u0275text(40, "Gift Set");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(41, "dl")(42, "dt");
    \u0275\u0275text(43, "Cup Sleeve");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(44, "dd");
    \u0275\u0275text(45, "\u0E01\u0E23\u0E30\u0E14\u0E32\u0E29\u0E04\u0E23\u0E2D\u0E1A\u0E41\u0E01\u0E49\u0E27");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(46, "dt");
    \u0275\u0275text(47, "Post Card");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(48, "dd");
    \u0275\u0275text(49, "\u0E42\u0E1B\u0E2A\u0E01\u0E32\u0E23\u0E4C\u0E14");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(50, "dt");
    \u0275\u0275text(51, "Photo Card (special menu)");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(52, "dd");
    \u0275\u0275text(53, "\u0E42\u0E1F\u0E42\u0E15\u0E49\u0E01\u0E32\u0E23\u0E4C\u0E14 (\u0E40\u0E21\u0E19\u0E39\u0E1E\u0E34\u0E40\u0E28\u0E29)");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(54, "dt");
    \u0275\u0275text(55, "Random Photo Card");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(56, "dd");
    \u0275\u0275text(57, "\u0E42\u0E1F\u0E42\u0E15\u0E49\u0E01\u0E32\u0E23\u0E4C\u0E14\u0E41\u0E1A\u0E1A\u0E2A\u0E38\u0E48\u0E21");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(58, "dt");
    \u0275\u0275text(59, "Photo Booth Strip");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(60, "dd");
    \u0275\u0275text(61, "\u0E42\u0E1F\u0E42\u0E15\u0E49\u0E2A\u0E15\u0E23\u0E34\u0E1B \u0E23\u0E39\u0E1B\u0E16\u0E48\u0E32\u0E22\u0E15\u0E39\u0E49\u0E2A\u0E15\u0E34\u0E01\u0E40\u0E01\u0E2D\u0E23\u0E4C");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(62, "dt");
    \u0275\u0275text(63, "Random Post Card (activities)");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(64, "dd");
    \u0275\u0275text(65, "\u0E42\u0E1B\u0E2A\u0E01\u0E32\u0E23\u0E4C\u0E14\u0E41\u0E1A\u0E1A\u0E2A\u0E38\u0E48\u0E21 (\u0E01\u0E34\u0E08\u0E01\u0E23\u0E23\u0E21)");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(66, "div", 13)(67, "div", 14);
    \u0275\u0275element(68, "img", 15)(69, "img", 16);
    \u0275\u0275elementEnd();
    \u0275\u0275element(70, "img", 17)(71, "img", 18)(72, "img", 19);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(73, "div", 20)(74, "h1");
    \u0275\u0275text(75, "Galleries");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(76, "div", 21)(77, "div", 22)(78, "div", 23)(79, "img", 24);
    \u0275\u0275listener("click", function WhisperFromDeepSeaComponent_Template_img_click_79_listener() {
      return ctx.onPreviewImage("previewWhisper1");
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(80, "div", 23)(81, "img", 24);
    \u0275\u0275listener("click", function WhisperFromDeepSeaComponent_Template_img_click_81_listener() {
      return ctx.onPreviewImage("previewWhisper2");
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(82, "div", 23)(83, "img", 24);
    \u0275\u0275listener("click", function WhisperFromDeepSeaComponent_Template_img_click_83_listener() {
      return ctx.onPreviewImage("previewWhisper3");
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(84, "div", 23)(85, "img", 24);
    \u0275\u0275listener("click", function WhisperFromDeepSeaComponent_Template_img_click_85_listener() {
      return ctx.onPreviewImage("previewWhisper4");
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(86, "div", 23)(87, "img", 24);
    \u0275\u0275listener("click", function WhisperFromDeepSeaComponent_Template_img_click_87_listener() {
      return ctx.onPreviewImage("previewWhisper5");
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(88, "div", 23)(89, "img", 24);
    \u0275\u0275listener("click", function WhisperFromDeepSeaComponent_Template_img_click_89_listener() {
      return ctx.onPreviewImage("previewWhisper6");
    });
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(90, "div", 23)(91, "img", 24);
    \u0275\u0275listener("click", function WhisperFromDeepSeaComponent_Template_img_click_91_listener() {
      return ctx.onPreviewImage("previewWhisper7");
    });
    \u0275\u0275elementEnd()()()();
    \u0275\u0275elementStart(92, "div");
    \u0275\u0275text(93, "\u2726 \u2726 \u2726 slide left/right to see more \u2726 \u2726 \u2726");
    \u0275\u0275elementEnd()()();
    \u0275\u0275template(94, WhisperFromDeepSeaComponent_div_94_Template, 4, 5, "div", 25);
    \u0275\u0275elementEnd();
    \u0275\u0275element(95, "app-sunlight-zone-bg");
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    \u0275\u0275advance(1);
    \u0275\u0275property("level", ctx.level)("sublevel", "Presents to Schneider");
    \u0275\u0275advance(1);
    \u0275\u0275property("level", ctx.level)("currentProject", ctx.projectName);
    \u0275\u0275advance(92);
    \u0275\u0275property("ngIf", ctx.showPreview);
  }
}, dependencies: [NgClass, NgIf, ToolBarComponent, SunlightZoneBgComponent, ProjectsToolBarComponent], styles: ['\n\n.projectDetail[_ngcontent-%COMP%]   .logoDiv[_ngcontent-%COMP%] {\n  -webkit-mask-image: url("./media/deep-sea-logo.PNG");\n  mask-image: url("./media/deep-sea-logo.PNG");\n  -webkit-mask-size: 555px auto;\n  mask-size: 555px auto;\n  -webkit-mask-repeat: no-repeat;\n  mask-repeat: no-repeat;\n  -webkit-mask-position: center;\n  mask-position: center;\n  height: 495px;\n}\n.standee1[_ngcontent-%COMP%] {\n  content: url("./media/standee-schneider.PNG");\n  width: 48%;\n  height: auto;\n}\n.standee2[_ngcontent-%COMP%] {\n  content: url("./media/standee-schmeiphorn.PNG");\n  width: 48%;\n  height: auto;\n}\n.specialMenuImg1[_ngcontent-%COMP%] {\n  margin-top: 10px;\n  content: url("./media/firtha.JPG");\n  width: 70%;\n  height: auto;\n}\n.specialMenuImg2[_ngcontent-%COMP%] {\n  margin-top: 10px;\n  content: url("./media/lorelei.JPG");\n  width: 70%;\n  height: auto;\n}\n.specialMenuImg3[_ngcontent-%COMP%] {\n  margin-top: 10px;\n  content: url("./media/corsair.JPG");\n  width: 70%;\n  height: auto;\n}\n.slide-wrapper[_ngcontent-%COMP%] {\n  width: 3660px;\n}\n.slide[_ngcontent-%COMP%]:nth-child(1)    > img[_ngcontent-%COMP%] {\n  content: url("./media/whisper1.JPG");\n  width: 640px;\n}\n.slide[_ngcontent-%COMP%]:nth-child(2)    > img[_ngcontent-%COMP%] {\n  content: url("./media/whisper2.JPG");\n  width: 640px;\n}\n.slide[_ngcontent-%COMP%]:nth-child(3)    > img[_ngcontent-%COMP%] {\n  content: url("./media/whisper3.JPG");\n  width: 640px;\n}\n.slide[_ngcontent-%COMP%]:nth-child(4)    > img[_ngcontent-%COMP%] {\n  content: url("./media/whisper4.JPG");\n  width: 440px;\n}\n.slide[_ngcontent-%COMP%]:nth-child(5)    > img[_ngcontent-%COMP%] {\n  content: url("./media/whisper5.JPG");\n}\n.slide[_ngcontent-%COMP%]:nth-child(6)    > img[_ngcontent-%COMP%] {\n  content: url("./media/whisper6.JPG");\n}\n.slide[_ngcontent-%COMP%]:nth-child(7)    > img[_ngcontent-%COMP%] {\n  content: url("./media/whisper7.JPG");\n  width: 640px;\n}\n.previewWhisper1[_ngcontent-%COMP%] {\n  content: url("./media/whisper1.JPG");\n}\n.previewWhisper2[_ngcontent-%COMP%] {\n  content: url("./media/whisper2.JPG");\n}\n.previewWhisper3[_ngcontent-%COMP%] {\n  content: url("./media/whisper3.JPG");\n}\n.previewWhisper4[_ngcontent-%COMP%] {\n  content: url("./media/whisper4.JPG");\n}\n.previewWhisper5[_ngcontent-%COMP%] {\n  content: url("./media/whisper5.JPG");\n}\n.previewWhisper6[_ngcontent-%COMP%] {\n  content: url("./media/whisper6.JPG");\n}\n.previewWhisper7[_ngcontent-%COMP%] {\n  content: url("./media/whisper7.JPG");\n}\n@media only screen and (max-height: 600px) and (orientation: landscape), only screen and (min-width: 768px) and (max-width: 1024px), only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 1), only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 2), only screen and (min-device-width: 1112px) and (max-device-width: 1112px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 2), only screen and (min-device-width: 1366px) and (max-device-width: 1366px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 2) {\n  .projectDetail[_ngcontent-%COMP%]   .logoDiv[_ngcontent-%COMP%] {\n    height: 380px;\n    -webkit-mask-size: 400px auto;\n    mask-size: 400px auto;\n  }\n  .slide-wrapper[_ngcontent-%COMP%] {\n    width: 2840px;\n  }\n  .slide[_ngcontent-%COMP%]:nth-child(1)    > img[_ngcontent-%COMP%] {\n    width: 500px;\n  }\n  .slide[_ngcontent-%COMP%]:nth-child(2)    > img[_ngcontent-%COMP%] {\n    width: 500px;\n  }\n  .slide[_ngcontent-%COMP%]:nth-child(3)    > img[_ngcontent-%COMP%] {\n    width: 500px;\n  }\n  .slide[_ngcontent-%COMP%]:nth-child(4)    > img[_ngcontent-%COMP%] {\n    width: 340px;\n  }\n  .slide[_ngcontent-%COMP%]:nth-child(5)    > img[_ngcontent-%COMP%] {\n  }\n  .slide[_ngcontent-%COMP%]:nth-child(6)    > img[_ngcontent-%COMP%] {\n  }\n  .slide[_ngcontent-%COMP%]:nth-child(7)    > img[_ngcontent-%COMP%] {\n    width: 480px;\n  }\n}\n@media only screen and (max-height: 400px) and (orientation: landscape), only screen and (min-width: 390px) and (max-width: 768px) and (orientation: landscape), only screen and (device-width: 360px) and (device-height: 640px) and (-webkit-device-pixel-ratio: 4) and (orientation: landscape), only screen and (min-device-width: 390px) and (max-device-width: 844px) and (-webkit-min-device-pixel-ratio: 4) and (orientation: landscape), only screen and (min-device-width: 414px) and (max-device-width: 736px) and (-webkit-min-device-pixel-ratio: 3) and (orientation: landscape), only screen and (min-device-width: 375px) and (max-device-width: 812px) and (-webkit-min-device-pixel-ratio: 3) and (orientation: landscape) {\n  .projectDetail[_ngcontent-%COMP%]   .logoDiv[_ngcontent-%COMP%] {\n    height: 230px;\n    -webkit-mask-size: 270px auto;\n    mask-size: 270px auto;\n  }\n  .slide-wrapper[_ngcontent-%COMP%] {\n    width: 1830px;\n  }\n  .slide[_ngcontent-%COMP%]:nth-child(1)    > img[_ngcontent-%COMP%] {\n    width: 330px;\n  }\n  .slide[_ngcontent-%COMP%]:nth-child(2)    > img[_ngcontent-%COMP%] {\n    width: 330px;\n  }\n  .slide[_ngcontent-%COMP%]:nth-child(3)    > img[_ngcontent-%COMP%] {\n    width: 330px;\n  }\n  .slide[_ngcontent-%COMP%]:nth-child(4)    > img[_ngcontent-%COMP%] {\n    width: 210px;\n  }\n  .slide[_ngcontent-%COMP%]:nth-child(5)    > img[_ngcontent-%COMP%] {\n  }\n  .slide[_ngcontent-%COMP%]:nth-child(6)    > img[_ngcontent-%COMP%] {\n  }\n  .slide[_ngcontent-%COMP%]:nth-child(7)    > img[_ngcontent-%COMP%] {\n    width: 320px;\n  }\n}\n/*# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL2FwcC9wcm9qZWN0cy93aGlzcGVyLWZyb20tZGVlcC1zZWEvd2hpc3Blci1mcm9tLWRlZXAtc2VhLmNvbXBvbmVudC5jc3MiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIi5wcm9qZWN0RGV0YWlsIC5sb2dvRGl2IHtcclxuICBtYXNrLWltYWdlOiB1cmwoXCIuLi8uLi8uLi9hc3NldHMvaW1hZ2VzL2RlZXAtc2VhL2RlZXAtc2VhLWxvZ28uUE5HXCIpO1xyXG4gIG1hc2stc2l6ZTogNTU1cHggYXV0bztcclxuICBtYXNrLXJlcGVhdDogbm8tcmVwZWF0O1xyXG4gIG1hc2stcG9zaXRpb246IGNlbnRlcjtcclxuICBoZWlnaHQ6IDQ5NXB4O1xyXG59XHJcblxyXG4uc3RhbmRlZTF7XHJcbiAgY29udGVudDogdXJsKFwiLi4vLi4vLi4vYXNzZXRzL2ltYWdlcy9kZWVwLXNlYS9zdGFuZGVlLXNjaG5laWRlci5QTkdcIik7XHJcbiAgd2lkdGg6IDQ4JTtcclxuICBoZWlnaHQ6IGF1dG87XHJcbn1cclxuLnN0YW5kZWUye1xyXG4gIGNvbnRlbnQ6IHVybChcIi4uLy4uLy4uL2Fzc2V0cy9pbWFnZXMvZGVlcC1zZWEvc3RhbmRlZS1zY2htZWlwaG9ybi5QTkdcIik7XHJcbiAgd2lkdGg6IDQ4JTtcclxuICBoZWlnaHQ6IGF1dG87XHJcbn1cclxuLnNwZWNpYWxNZW51SW1nMSB7XHJcbiAgbWFyZ2luLXRvcDogMTBweDtcclxuICBjb250ZW50OiB1cmwoXCIuLi8uLi8uLi9hc3NldHMvaW1hZ2VzL2RlZXAtc2VhL2ZpcnRoYS5KUEdcIik7XHJcbiAgd2lkdGg6IDcwJTtcclxuICBoZWlnaHQ6IGF1dG87XHJcbn1cclxuLnNwZWNpYWxNZW51SW1nMiB7XHJcbiAgbWFyZ2luLXRvcDogMTBweDtcclxuICBjb250ZW50OiB1cmwoXCIuLi8uLi8uLi9hc3NldHMvaW1hZ2VzL2RlZXAtc2VhL2xvcmVsZWkuSlBHXCIpO1xyXG4gIHdpZHRoOiA3MCU7XHJcbiAgaGVpZ2h0OiBhdXRvO1xyXG59XHJcbi5zcGVjaWFsTWVudUltZzMge1xyXG4gIG1hcmdpbi10b3A6IDEwcHg7XHJcbiAgY29udGVudDogdXJsKFwiLi4vLi4vLi4vYXNzZXRzL2ltYWdlcy9kZWVwLXNlYS9jb3JzYWlyLkpQR1wiKTtcclxuICB3aWR0aDogNzAlO1xyXG4gIGhlaWdodDogYXV0bztcclxufVxyXG5cclxuXHJcblxyXG4uc2xpZGUtd3JhcHBlciB7XHJcbiAgd2lkdGg6IDM2NjBweDtcclxufVxyXG4uc2xpZGU6bnRoLWNoaWxkKDEpID4gaW1nIHtcclxuICBjb250ZW50OiB1cmwoXCIuLi8uLi8uLi9hc3NldHMvaW1hZ2VzL2RlZXAtc2VhL3doaXNwZXIxLkpQR1wiKTtcclxuICB3aWR0aDogNjQwcHg7XHJcbn1cclxuLnNsaWRlOm50aC1jaGlsZCgyKSA+IGltZyB7XHJcbiAgY29udGVudDogdXJsKFwiLi4vLi4vLi4vYXNzZXRzL2ltYWdlcy9kZWVwLXNlYS93aGlzcGVyMi5KUEdcIik7XHJcbiAgd2lkdGg6IDY0MHB4O1xyXG59XHJcbi5zbGlkZTpudGgtY2hpbGQoMykgPiBpbWcge1xyXG4gIGNvbnRlbnQ6IHVybChcIi4uLy4uLy4uL2Fzc2V0cy9pbWFnZXMvZGVlcC1zZWEvd2hpc3BlcjMuSlBHXCIpO1xyXG4gIHdpZHRoOiA2NDBweDtcclxufVxyXG4uc2xpZGU6bnRoLWNoaWxkKDQpID4gaW1nIHtcclxuICBjb250ZW50OiB1cmwoXCIuLi8uLi8uLi9hc3NldHMvaW1hZ2VzL2RlZXAtc2VhL3doaXNwZXI0LkpQR1wiKTtcclxuICB3aWR0aDogNDQwcHg7XHJcbn1cclxuLnNsaWRlOm50aC1jaGlsZCg1KSA+IGltZyB7XHJcbiAgY29udGVudDogdXJsKFwiLi4vLi4vLi4vYXNzZXRzL2ltYWdlcy9kZWVwLXNlYS93aGlzcGVyNS5KUEdcIik7XHJcbn1cclxuLnNsaWRlOm50aC1jaGlsZCg2KSA+IGltZyB7XHJcbiAgY29udGVudDogdXJsKFwiLi4vLi4vLi4vYXNzZXRzL2ltYWdlcy9kZWVwLXNlYS93aGlzcGVyNi5KUEdcIik7XHJcbn1cclxuLnNsaWRlOm50aC1jaGlsZCg3KSA+IGltZyB7XHJcbiAgY29udGVudDogdXJsKFwiLi4vLi4vLi4vYXNzZXRzL2ltYWdlcy9kZWVwLXNlYS93aGlzcGVyNy5KUEdcIik7XHJcbiAgd2lkdGg6IDY0MHB4O1xyXG59XHJcbi5wcmV2aWV3V2hpc3BlcjEge1xyXG4gIGNvbnRlbnQ6IHVybChcIi4uLy4uLy4uL2Fzc2V0cy9pbWFnZXMvZGVlcC1zZWEvd2hpc3BlcjEuSlBHXCIpO1xyXG59XHJcbi5wcmV2aWV3V2hpc3BlcjIge1xyXG4gIGNvbnRlbnQ6IHVybChcIi4uLy4uLy4uL2Fzc2V0cy9pbWFnZXMvZGVlcC1zZWEvd2hpc3BlcjIuSlBHXCIpO1xyXG59XHJcbi5wcmV2aWV3V2hpc3BlcjMge1xyXG4gIGNvbnRlbnQ6IHVybChcIi4uLy4uLy4uL2Fzc2V0cy9pbWFnZXMvZGVlcC1zZWEvd2hpc3BlcjMuSlBHXCIpO1xyXG59XHJcbi5wcmV2aWV3V2hpc3BlcjQge1xyXG4gIGNvbnRlbnQ6IHVybChcIi4uLy4uLy4uL2Fzc2V0cy9pbWFnZXMvZGVlcC1zZWEvd2hpc3BlcjQuSlBHXCIpO1xyXG59XHJcbi5wcmV2aWV3V2hpc3BlcjUge1xyXG4gIGNvbnRlbnQ6IHVybChcIi4uLy4uLy4uL2Fzc2V0cy9pbWFnZXMvZGVlcC1zZWEvd2hpc3BlcjUuSlBHXCIpO1xyXG59XHJcbi5wcmV2aWV3V2hpc3BlcjYge1xyXG4gIGNvbnRlbnQ6IHVybChcIi4uLy4uLy4uL2Fzc2V0cy9pbWFnZXMvZGVlcC1zZWEvd2hpc3BlcjYuSlBHXCIpO1xyXG59XHJcbi5wcmV2aWV3V2hpc3Blcjcge1xyXG4gIGNvbnRlbnQ6IHVybChcIi4uLy4uLy4uL2Fzc2V0cy9pbWFnZXMvZGVlcC1zZWEvd2hpc3BlcjcuSlBHXCIpO1xyXG59XHJcblxyXG5cclxuLyogcGMgc21hbGwgKi9cclxuQG1lZGlhIG9ubHkgc2NyZWVuXHJcbiAgYW5kIChtYXgtaGVpZ2h0OiA2MDBweClcclxuICBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpLFxyXG5vbmx5IHNjcmVlblxyXG4gIGFuZCAobWluLXdpZHRoOiA3NjhweClcclxuICBhbmQgKG1heC13aWR0aDogMTAyNHB4KSxcclxuLyogaVBhZCAqL1xyXG5vbmx5IHNjcmVlblxyXG4gIGFuZCAobWluLWRldmljZS13aWR0aDogNzY4cHgpXHJcbiAgYW5kIChtYXgtZGV2aWNlLXdpZHRoOiAxMDI0cHgpXHJcbiAgYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKVxyXG4gIGFuZCAoLXdlYmtpdC1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAxKSxcclxub25seSBzY3JlZW5cclxuICBhbmQgKG1pbi1kZXZpY2Utd2lkdGg6IDc2OHB4KVxyXG4gIGFuZCAobWF4LWRldmljZS13aWR0aDogMTAyNHB4KVxyXG4gIGFuZCAob3JpZW50YXRpb246IGxhbmRzY2FwZSlcclxuICBhbmQgKC13ZWJraXQtbWluLWRldmljZS1waXhlbC1yYXRpbzogMiksXHJcbm9ubHkgc2NyZWVuXHJcbiAgYW5kIChtaW4tZGV2aWNlLXdpZHRoOiAxMTEycHgpXHJcbiAgYW5kIChtYXgtZGV2aWNlLXdpZHRoOiAxMTEycHgpXHJcbiAgYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKVxyXG4gIGFuZCAoLXdlYmtpdC1taW4tZGV2aWNlLXBpeGVsLXJhdGlvOiAyKSxcclxub25seSBzY3JlZW5cclxuICBhbmQgKG1pbi1kZXZpY2Utd2lkdGg6IDEzNjZweClcclxuICBhbmQgKG1heC1kZXZpY2Utd2lkdGg6IDEzNjZweClcclxuICBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpXHJcbiAgYW5kICgtd2Via2l0LW1pbi1kZXZpY2UtcGl4ZWwtcmF0aW86IDIpIHtcclxuICAucHJvamVjdERldGFpbCAubG9nb0RpdiB7XHJcbiAgICBoZWlnaHQ6IDM4MHB4O1xyXG4gICAgbWFzay1zaXplOiA0MDBweCBhdXRvO1xyXG4gIH1cclxuICAuc2xpZGUtd3JhcHBlciB7XHJcbiAgICB3aWR0aDogMjg0MHB4O1xyXG4gIH1cclxuICAuc2xpZGU6bnRoLWNoaWxkKDEpID4gaW1nIHtcclxuICAgIHdpZHRoOiA1MDBweDtcclxuICB9XHJcbiAgLnNsaWRlOm50aC1jaGlsZCgyKSA+IGltZyB7XHJcbiAgICB3aWR0aDogNTAwcHg7XHJcbiAgfVxyXG4gIC5zbGlkZTpudGgtY2hpbGQoMykgPiBpbWcge1xyXG4gICAgd2lkdGg6IDUwMHB4O1xyXG4gIH1cclxuICAuc2xpZGU6bnRoLWNoaWxkKDQpID4gaW1nIHtcclxuICAgIHdpZHRoOiAzNDBweDtcclxuICB9XHJcbiAgLnNsaWRlOm50aC1jaGlsZCg1KSA+IGltZyB7XHJcbiAgfVxyXG4gIC5zbGlkZTpudGgtY2hpbGQoNikgPiBpbWcge1xyXG4gIH1cclxuICAuc2xpZGU6bnRoLWNoaWxkKDcpID4gaW1nIHtcclxuICAgIHdpZHRoOiA0ODBweDtcclxuICB9XHJcbn1cclxuXHJcbi8qIHBjIGV4dHJhIHNtYWxsICovXHJcbkBtZWRpYSBvbmx5IHNjcmVlblxyXG4gIGFuZCAobWF4LWhlaWdodDogNDAwcHgpXHJcbiAgYW5kIChvcmllbnRhdGlvbjogbGFuZHNjYXBlKSxcclxub25seSBzY3JlZW5cclxuICBhbmQgKG1pbi13aWR0aDogMzkwcHgpXHJcbiAgYW5kIChtYXgtd2lkdGg6IDc2OHB4KVxyXG4gIGFuZCAob3JpZW50YXRpb246IGxhbmRzY2FwZSksXHJcbi8qIFBob25lICovXHJcbm9ubHkgc2NyZWVuXHJcbiAgYW5kIChkZXZpY2Utd2lkdGg6IDM2MHB4KVxyXG4gIGFuZCAoZGV2aWNlLWhlaWdodDogNjQwcHgpXHJcbiAgYW5kICgtd2Via2l0LWRldmljZS1waXhlbC1yYXRpbzogNClcclxuICBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpLFxyXG5vbmx5IHNjcmVlblxyXG4gIGFuZCAobWluLWRldmljZS13aWR0aDogMzkwcHgpXHJcbiAgYW5kIChtYXgtZGV2aWNlLXdpZHRoOiA4NDRweClcclxuICBhbmQgKC13ZWJraXQtbWluLWRldmljZS1waXhlbC1yYXRpbzogNClcclxuICBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpLFxyXG5vbmx5IHNjcmVlblxyXG4gIGFuZCAobWluLWRldmljZS13aWR0aDogNDE0cHgpXHJcbiAgYW5kIChtYXgtZGV2aWNlLXdpZHRoOiA3MzZweClcclxuICBhbmQgKC13ZWJraXQtbWluLWRldmljZS1waXhlbC1yYXRpbzogMylcclxuICBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpLFxyXG5vbmx5IHNjcmVlblxyXG4gIGFuZCAobWluLWRldmljZS13aWR0aDogMzc1cHgpXHJcbiAgYW5kIChtYXgtZGV2aWNlLXdpZHRoOiA4MTJweClcclxuICBhbmQgKC13ZWJraXQtbWluLWRldmljZS1waXhlbC1yYXRpbzogMylcclxuICBhbmQgKG9yaWVudGF0aW9uOiBsYW5kc2NhcGUpIHtcclxuICAucHJvamVjdERldGFpbCAubG9nb0RpdiB7XHJcbiAgICBoZWlnaHQ6IDIzMHB4O1xyXG4gICAgbWFzay1zaXplOiAyNzBweCBhdXRvO1xyXG4gIH1cclxuICAuc2xpZGUtd3JhcHBlciB7XHJcbiAgICB3aWR0aDogMTgzMHB4O1xyXG4gIH1cclxuICAuc2xpZGU6bnRoLWNoaWxkKDEpID4gaW1nIHtcclxuICAgIHdpZHRoOiAzMzBweDtcclxuICB9XHJcbiAgLnNsaWRlOm50aC1jaGlsZCgyKSA+IGltZyB7XHJcbiAgICB3aWR0aDogMzMwcHg7XHJcbiAgfVxyXG4gIC5zbGlkZTpudGgtY2hpbGQoMykgPiBpbWcge1xyXG4gICAgd2lkdGg6IDMzMHB4O1xyXG4gIH1cclxuICAuc2xpZGU6bnRoLWNoaWxkKDQpID4gaW1nIHtcclxuICAgIHdpZHRoOiAyMTBweDtcclxuICB9XHJcbiAgLnNsaWRlOm50aC1jaGlsZCg1KSA+IGltZyB7XHJcbiAgfVxyXG4gIC5zbGlkZTpudGgtY2hpbGQoNikgPiBpbWcge1xyXG4gIH1cclxuICAuc2xpZGU6bnRoLWNoaWxkKDcpID4gaW1nIHtcclxuICAgIHdpZHRoOiAzMjBweDtcclxuICB9XHJcbn1cclxuIl0sCiAgIm1hcHBpbmdzIjogIjtBQUFBLENBQUMsY0FBYyxDQUFDO0FBQ2Qsc0JBQVk7QUFBWixjQUFZO0FBQ1oscUJBQVcsTUFBTTtBQUFqQixhQUFXLE1BQU07QUFDakIsdUJBQWE7QUFBYixlQUFhO0FBQ2IseUJBQWU7QUFBZixpQkFBZTtBQUNmLFVBQVE7QUFDVjtBQUVBLENBQUM7QUFDQyxXQUFTO0FBQ1QsU0FBTztBQUNQLFVBQVE7QUFDVjtBQUNBLENBQUM7QUFDQyxXQUFTO0FBQ1QsU0FBTztBQUNQLFVBQVE7QUFDVjtBQUNBLENBQUM7QUFDQyxjQUFZO0FBQ1osV0FBUztBQUNULFNBQU87QUFDUCxVQUFRO0FBQ1Y7QUFDQSxDQUFDO0FBQ0MsY0FBWTtBQUNaLFdBQVM7QUFDVCxTQUFPO0FBQ1AsVUFBUTtBQUNWO0FBQ0EsQ0FBQztBQUNDLGNBQVk7QUFDWixXQUFTO0FBQ1QsU0FBTztBQUNQLFVBQVE7QUFDVjtBQUlBLENBQUM7QUFDQyxTQUFPO0FBQ1Q7QUFDQSxDQUFDLEtBQUssY0FBYyxFQUFFO0FBQ3BCLFdBQVM7QUFDVCxTQUFPO0FBQ1Q7QUFDQSxDQUpDLEtBSUssY0FBYyxFQUFFO0FBQ3BCLFdBQVM7QUFDVCxTQUFPO0FBQ1Q7QUFDQSxDQVJDLEtBUUssY0FBYyxFQUFFO0FBQ3BCLFdBQVM7QUFDVCxTQUFPO0FBQ1Q7QUFDQSxDQVpDLEtBWUssY0FBYyxFQUFFO0FBQ3BCLFdBQVM7QUFDVCxTQUFPO0FBQ1Q7QUFDQSxDQWhCQyxLQWdCSyxjQUFjLEVBQUU7QUFDcEIsV0FBUztBQUNYO0FBQ0EsQ0FuQkMsS0FtQkssY0FBYyxFQUFFO0FBQ3BCLFdBQVM7QUFDWDtBQUNBLENBdEJDLEtBc0JLLGNBQWMsRUFBRTtBQUNwQixXQUFTO0FBQ1QsU0FBTztBQUNUO0FBQ0EsQ0FBQztBQUNDLFdBQVM7QUFDWDtBQUNBLENBQUM7QUFDQyxXQUFTO0FBQ1g7QUFDQSxDQUFDO0FBQ0MsV0FBUztBQUNYO0FBQ0EsQ0FBQztBQUNDLFdBQVM7QUFDWDtBQUNBLENBQUM7QUFDQyxXQUFTO0FBQ1g7QUFDQSxDQUFDO0FBQ0MsV0FBUztBQUNYO0FBQ0EsQ0FBQztBQUNDLFdBQVM7QUFDWDtBQUlBLE9BQU8sS0FBSyxPQUNWLElBQUksQ0FBQyxVQUFVLEVBQUUsT0FDakIsSUFBSSxDQUFDLFdBQVcsRUFBRSxVQUFVLEVBQzlCLEtBQUssT0FDSCxJQUFJLENBQUMsU0FBUyxFQUFFLE9BQ2hCLElBQUksQ0FBQyxTQUFTLEVBQUUsT0FBTyxFQUV6QixLQUFLLE9BQ0gsSUFBSSxDQUFDLGdCQUFnQixFQUFFLE9BQ3ZCLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxRQUN2QixJQUFJLENBQUMsV0FBVyxFQUFFLFdBQ2xCLElBQUksQ0FBQyw4QkFBOEIsRUFBRSxFQUFFLEVBQ3pDLEtBQUssT0FDSCxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsT0FDdkIsSUFBSSxDQUFDLGdCQUFnQixFQUFFLFFBQ3ZCLElBQUksQ0FBQyxXQUFXLEVBQUUsV0FDbEIsSUFBSSxDQUFDLDhCQUE4QixFQUFFLEVBQUUsRUFDekMsS0FBSyxPQUNILElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxRQUN2QixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsUUFDdkIsSUFBSSxDQUFDLFdBQVcsRUFBRSxXQUNsQixJQUFJLENBQUMsOEJBQThCLEVBQUUsRUFBRSxFQUN6QyxLQUFLLE9BQ0gsSUFBSSxDQUFDLGdCQUFnQixFQUFFLFFBQ3ZCLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxRQUN2QixJQUFJLENBQUMsV0FBVyxFQUFFLFdBQ2xCLElBQUksQ0FBQyw4QkFBOEIsRUFBRTtBQUNyQyxHQXZIRCxjQXVIZ0IsQ0F2SEQ7QUF3SFosWUFBUTtBQUNSLHVCQUFXLE1BQU07QUFBakIsZUFBVyxNQUFNO0FBQ25CO0FBQ0EsR0FwRkQ7QUFxRkcsV0FBTztBQUNUO0FBQ0EsR0FwRkQsS0FvRk8sY0FBYyxFQUFFO0FBQ3BCLFdBQU87QUFDVDtBQUNBLEdBdkZELEtBdUZPLGNBQWMsRUFBRTtBQUNwQixXQUFPO0FBQ1Q7QUFDQSxHQTFGRCxLQTBGTyxjQUFjLEVBQUU7QUFDcEIsV0FBTztBQUNUO0FBQ0EsR0E3RkQsS0E2Rk8sY0FBYyxFQUFFO0FBQ3BCLFdBQU87QUFDVDtBQUNBLEdBaEdELEtBZ0dPLGNBQWMsRUFBRTtBQUN0QjtBQUNBLEdBbEdELEtBa0dPLGNBQWMsRUFBRTtBQUN0QjtBQUNBLEdBcEdELEtBb0dPLGNBQWMsRUFBRTtBQUNwQixXQUFPO0FBQ1Q7QUFDRjtBQUdBLE9BQU8sS0FBSyxPQUNWLElBQUksQ0FBQyxVQUFVLEVBQUUsT0FDakIsSUFBSSxDQUFDLFdBQVcsRUFBRSxVQUFVLEVBQzlCLEtBQUssT0FDSCxJQUFJLENBQUMsU0FBUyxFQUFFLE9BQ2hCLElBQUksQ0FBQyxTQUFTLEVBQUUsT0FDaEIsSUFBSSxDQUFDLFdBQVcsRUFBRSxVQUFVLEVBRTlCLEtBQUssT0FDSCxJQUFJLENBQUMsWUFBWSxFQUFFLE9BQ25CLElBQUksQ0FBQyxhQUFhLEVBQUUsT0FDcEIsSUFBSSxDQUFDLDBCQUEwQixFQUFFLEdBQ2pDLElBQUksQ0FBQyxXQUFXLEVBQUUsVUFBVSxFQUM5QixLQUFLLE9BQ0gsSUFBSSxDQUFDLGdCQUFnQixFQUFFLE9BQ3ZCLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxPQUN2QixJQUFJLENBQUMsOEJBQThCLEVBQUUsR0FDckMsSUFBSSxDQUFDLFdBQVcsRUFBRSxVQUFVLEVBQzlCLEtBQUssT0FDSCxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsT0FDdkIsSUFBSSxDQUFDLGdCQUFnQixFQUFFLE9BQ3ZCLElBQUksQ0FBQyw4QkFBOEIsRUFBRSxHQUNyQyxJQUFJLENBQUMsV0FBVyxFQUFFLFVBQVUsRUFDOUIsS0FBSyxPQUNILElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxPQUN2QixJQUFJLENBQUMsZ0JBQWdCLEVBQUUsT0FDdkIsSUFBSSxDQUFDLDhCQUE4QixFQUFFLEdBQ3JDLElBQUksQ0FBQyxXQUFXLEVBQUU7QUFDbEIsR0FoTEQsY0FnTGdCLENBaExEO0FBaUxaLFlBQVE7QUFDUix1QkFBVyxNQUFNO0FBQWpCLGVBQVcsTUFBTTtBQUNuQjtBQUNBLEdBN0lEO0FBOElHLFdBQU87QUFDVDtBQUNBLEdBN0lELEtBNklPLGNBQWMsRUFBRTtBQUNwQixXQUFPO0FBQ1Q7QUFDQSxHQWhKRCxLQWdKTyxjQUFjLEVBQUU7QUFDcEIsV0FBTztBQUNUO0FBQ0EsR0FuSkQsS0FtSk8sY0FBYyxFQUFFO0FBQ3BCLFdBQU87QUFDVDtBQUNBLEdBdEpELEtBc0pPLGNBQWMsRUFBRTtBQUNwQixXQUFPO0FBQ1Q7QUFDQSxHQXpKRCxLQXlKTyxjQUFjLEVBQUU7QUFDdEI7QUFDQSxHQTNKRCxLQTJKTyxjQUFjLEVBQUU7QUFDdEI7QUFDQSxHQTdKRCxLQTZKTyxjQUFjLEVBQUU7QUFDcEIsV0FBTztBQUNUO0FBQ0Y7IiwKICAibmFtZXMiOiBbXQp9Cg== */'], data: { animation: [
  trigger("animation", [
    transition("void => visible", [
      style({ opacity: 0 }),
      animate("300ms", style({ opacity: 1 }))
    ]),
    transition("visible => void", [
      style({ opacity: 1 }),
      animate("300ms", style({ opacity: 0 }))
    ])
  ])
] } });
var WhisperFromDeepSeaComponent = _WhisperFromDeepSeaComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(WhisperFromDeepSeaComponent, { className: "WhisperFromDeepSeaComponent", filePath: "src\\app\\projects\\whisper-from-deep-sea\\whisper-from-deep-sea.component.ts", lineNumber: 23 });
})();

// src/app/projects/more-sunlight/more-sunlight.component.ts
var _MoreSunlightComponent = class _MoreSunlightComponent extends BaseProject {
  constructor(route) {
    super(route);
    this.projectName = "more";
  }
  ngOnInit() {
    super.ngOnInit();
    this.level = "sunlight";
  }
};
_MoreSunlightComponent.\u0275fac = function MoreSunlightComponent_Factory(t) {
  return new (t || _MoreSunlightComponent)(\u0275\u0275directiveInject(ActivatedRoute));
};
_MoreSunlightComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _MoreSunlightComponent, selectors: [["app-more-sunlight"]], features: [\u0275\u0275InheritDefinitionFeature], decls: 134, vars: 4, consts: [[1, "layerContainer", "sunlightLayerContainer"], [3, "level", "sublevel"], [3, "level", "currentProject"], [1, "projectContainer"], [1, "projectDetail"], ["id", "rodkenforsnd", 1, "subProjects"], ["href", "https://twitter.com/RODKENFORSND", "target", "_blank", 1, "subProjectsProfile"], ["src", "#"], [1, "subProjectsDetail"], [1, "subProjectTitle"], [1, "subProjectInfo"], [1, "subProjectsTag"], ["id", "mummum", 1, "subProjects"], ["href", "https://twitter.com/jabchaisaimoo", "target", "_blank", 1, "subProjectsProfile"], ["id", "sweethoney", 1, "subProjects"], ["href", "https://twitter.com/Real_SweetHoney", "target", "_blank", 1, "subProjectsProfile"], ["id", "walkingwithschnei", 1, "subProjects"], ["href", "https://twitter.com/hashtag/WalkingwithSchnei?src=hashtag_click", "target", "_blank", 1, "subProjectsProfile"]], template: function MoreSunlightComponent_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "p");
    \u0275\u0275text(1, "more-sunlight works!");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(2, "div", 0);
    \u0275\u0275element(3, "app-tool-bar", 1)(4, "app-projects-tool-bar", 2);
    \u0275\u0275elementStart(5, "div", 3)(6, "div", 4)(7, "div", 5)(8, "a", 6);
    \u0275\u0275element(9, "img", 7);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(10, "div", 8)(11, "h2");
    \u0275\u0275text(12, "RODKENFORSND");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(13, "div")(14, "span", 9);
    \u0275\u0275text(15, "\u0E15\u0E34\u0E14\u0E1B\u0E49\u0E32\u0E22\u0E42\u0E1B\u0E23\u0E42\u0E21\u0E17\u0E27\u0E31\u0E19\u0E40\u0E01\u0E34\u0E14\u0E04\u0E38\u0E13\u0E0A\u0E44\u0E19 @Local Store");
    \u0275\u0275elementEnd();
    \u0275\u0275element(16, "br");
    \u0275\u0275text(17, " \u0E40\u0E1E\u0E37\u0E48\u0E2D\u0E2A\u0E19\u0E31\u0E1A\u0E2A\u0E19\u0E38\u0E19 Local Business \u0E41\u0E25\u0E30\u0E42\u0E1B\u0E23\u0E42\u0E21\u0E17");
    \u0275\u0275element(18, "br");
    \u0275\u0275text(19, " \u0E14\u0E49\u0E27\u0E22\u0E01\u0E32\u0E23\u0E41\u0E08\u0E01\u0E19\u0E32\u0E21\u0E1A\u0E31\u0E15\u0E23\u0E2A\u0E38\u0E14\u0E2B\u0E25\u0E48\u0E2D\u0E4C\u0E1E\u0E23\u0E49\u0E2D\u0E21\u0E0A\u0E48\u0E2D\u0E07\u0E17\u0E32\u0E07\u0E01\u0E32\u0E23\u0E15\u0E34\u0E14\u0E15\u0E32\u0E21");
    \u0275\u0275element(20, "br")(21, "br");
    \u0275\u0275elementStart(22, "div", 10)(23, "div")(24, "b");
    \u0275\u0275text(25, "LOCATION");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(26, "div");
    \u0275\u0275text(27, ":");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(28, "div");
    \u0275\u0275text(29, "\u0E23\u0E49\u0E32\u0E19\u0E17\u0E32\u0E42\u0E01\u0E30\u0E2B\u0E19\u0E49\u0E32\u0E21\u0E2D \u0E15\u0E25\u0E32\u0E14\u0E23\u0E27\u0E21\u0E17\u0E23\u0E31\u0E1E\u0E22\u0E4C \u0E2D\u0E42\u0E28\u0E01");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(30, "div")(31, "b");
    \u0275\u0275text(32, "DATE");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(33, "div");
    \u0275\u0275text(34, ":");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(35, "div");
    \u0275\u0275text(36, "1 - 29 FEB 2024 \u2726 Mon - Sat, 07:30 - 15:30 ");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(37, "div", 11);
    \u0275\u0275text(38, "#RODKENFORSND");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(39, "div", 12)(40, "a", 13);
    \u0275\u0275element(41, "img", 7);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(42, "div", 8)(43, "h2");
    \u0275\u0275text(44, "Mum-Mum Na Krub Sud Suay");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(45, "div")(46, "span", 9);
    \u0275\u0275text(47, "\u0E42\u0E1B\u0E23\u0E40\u0E08\u0E04\u0E23\u0E48\u0E27\u0E21\u0E43\u0E08\u0E41\u0E1A\u0E48\u0E07\u0E1B\u0E31\u0E19\u0E04\u0E27\u0E32\u0E21\u0E2A\u0E38\u0E02");
    \u0275\u0275elementEnd();
    \u0275\u0275element(48, "br");
    \u0275\u0275text(49, " \u0E41\u0E08\u0E01\u0E02\u0E49\u0E32\u0E27\u0E1F\u0E23\u0E35 1 \u0E21\u0E37\u0E49\u0E2D\u0E43\u0E2B\u0E49\u0E01\u0E31\u0E1A\u0E04\u0E19\u0E44\u0E23\u0E49\u0E1A\u0E49\u0E32\u0E19 \u{1F35B}\u{1F964}");
    \u0275\u0275element(50, "br")(51, "br");
    \u0275\u0275elementStart(52, "div", 10)(53, "div")(54, "b");
    \u0275\u0275text(55, "LOCATION");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(56, "div");
    \u0275\u0275text(57, ":");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(58, "div");
    \u0275\u0275text(59, "Trok Sake");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(60, "div")(61, "b");
    \u0275\u0275text(62, "DATE");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(63, "div");
    \u0275\u0275text(64, ":");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(65, "div");
    \u0275\u0275text(66, "8 FEB 2024 \u2726 12:00");
    \u0275\u0275elementEnd()()()()();
    \u0275\u0275elementStart(67, "div", 14)(68, "a", 15);
    \u0275\u0275element(69, "img", 7);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(70, "div", 8)(71, "h2");
    \u0275\u0275text(72, "\u0E2A\u0E27\u0E31\u0E2A\u0E14\u0E35\u0E04\u0E48\u0E30 \u0E1E\u0E27\u0E01\u0E40\u0E23\u0E32\u0E41\u0E21\u0E48\u0E19\u0E49\u0E33\u0E1C\u0E36\u0E49\u0E07\u0E15\u0E31\u0E27\u0E08\u0E23\u0E34\u0E07");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(73, "div")(74, "span", 9);
    \u0275\u0275text(75, "OUTDOOR LED & INDOOR LED");
    \u0275\u0275elementEnd();
    \u0275\u0275element(76, "br");
    \u0275\u0275text(77, " LED in total 56 screens");
    \u0275\u0275element(78, "br");
    \u0275\u0275text(79, " \u0E09\u0E25\u0E2D\u0E07\u0E27\u0E31\u0E19\u0E40\u0E01\u0E34\u0E14\u0E01\u0E31\u0E19\u0E41\u0E1A\u0E1A\u0E22\u0E34\u0E48\u0E07\u0E43\u0E2B\u0E0D\u0E48 \u0E41\u0E1A\u0E1A Shining Bling Bling \u2728");
    \u0275\u0275element(80, "br")(81, "br");
    \u0275\u0275elementStart(82, "div", 10)(83, "div")(84, "b");
    \u0275\u0275text(85, "LOCATION");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(86, "div");
    \u0275\u0275text(87, ":");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(88, "div");
    \u0275\u0275text(89, "Terminal21 ASOK");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(90, "div")(91, "b");
    \u0275\u0275text(92, "DATE");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(93, "div");
    \u0275\u0275text(94, ":");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(95, "div");
    \u0275\u0275text(96, "2 - 8 FEB 2024");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(97, "div", 11);
    \u0275\u0275text(98, "#ShiningSchneiday0802");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(99, "div", 16)(100, "a", 17);
    \u0275\u0275element(101, "img", 7);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(102, "div", 8)(103, "h2");
    \u0275\u0275text(104, "WalkingwithSchnei");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(105, "div")(106, "span", 9);
    \u0275\u0275text(107, "One steps 1_9 ");
    \u0275\u0275elementEnd();
    \u0275\u0275element(108, "br");
    \u0275\u0275text(109, " \u0E1B\u0E49\u0E32\u0E22\u0E42\u0E06\u0E29\u0E13\u0E32\u0E40\u0E04\u0E25\u0E37\u0E48\u0E2D\u0E19\u0E17\u0E35\u0E48 \u0E42\u0E14\u0E22\u0E1E\u0E25\u0E30\u0E01\u0E33\u0E25\u0E31\u0E07\u0E04\u0E19\u0E44\u0E23\u0E49\u0E1A\u0E49\u0E32\u0E19\u0E1C\u0E39\u0E49\u0E2A\u0E39\u0E07\u0E2D\u0E32\u0E22\u0E38");
    \u0275\u0275element(110, "br");
    \u0275\u0275text(111, " \u0E44\u0E27\u0E49\u0E21\u0E32\u0E40\u0E08\u0E2D\u0E2A\u0E38\u0E14\u0E2B\u0E25\u0E48\u0E2D\u0E40\u0E04\u0E25\u0E37\u0E48\u0E2D\u0E19\u0E17\u0E35\u0E48\u0E41\u0E16\u0E27\u0E2A\u0E22\u0E32\u0E21\u0E44\u0E14\u0E49\u0E19\u0E30\u0E04\u0E23\u0E31\u0E1A\u2728");
    \u0275\u0275element(112, "br")(113, "br");
    \u0275\u0275elementStart(114, "div", 10)(115, "div")(116, "b");
    \u0275\u0275text(117, "LOCATION");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(118, "div");
    \u0275\u0275text(119, ":");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(120, "div");
    \u0275\u0275text(121, "Paragon/CTW/Gaysorn Plaza/CT Chidlom/Terminal21/");
    \u0275\u0275element(122, "br");
    \u0275\u0275text(123, "Korean Town/Mercury Ville/Marin plaza/Siam square ");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(124, "div")(125, "b");
    \u0275\u0275text(126, "DATE");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(127, "div");
    \u0275\u0275text(128, ":");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(129, "div");
    \u0275\u0275text(130, "3 - 4 FEB 2024 \u2726 13:30-18:30 ");
    \u0275\u0275elementEnd()()();
    \u0275\u0275elementStart(131, "div", 11);
    \u0275\u0275text(132, "#WalkingwithSchnei");
    \u0275\u0275elementEnd()()()()();
    \u0275\u0275element(133, "app-sunlight-zone-bg");
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    \u0275\u0275advance(3);
    \u0275\u0275property("level", ctx.level)("sublevel", "Presents to Schneider");
    \u0275\u0275advance(1);
    \u0275\u0275property("level", ctx.level)("currentProject", ctx.projectName);
  }
}, dependencies: [ToolBarComponent, SunlightZoneBgComponent, ProjectsToolBarComponent], styles: ['\n\n.projectDetail[_ngcontent-%COMP%]::before {\n  background-image: linear-gradient(to bottom, rgba(255, 255, 255, 0.3), rgba(255, 255, 255, 0));\n}\n#rodkenforsnd[_ngcontent-%COMP%]   .subProjectsProfile[_ngcontent-%COMP%] {\n  content: url("./media/rodkenforsnd.JPG");\n}\n#mummum[_ngcontent-%COMP%]   .subProjectsProfile[_ngcontent-%COMP%] {\n  content: url("./media/mummum.JPG");\n}\n#sweethoney[_ngcontent-%COMP%]   .subProjectsProfile[_ngcontent-%COMP%] {\n  content: url("./media/sweethoney.JPG");\n}\n#walkingwithschnei[_ngcontent-%COMP%]   .subProjectsProfile[_ngcontent-%COMP%] {\n  content: url("./media/walkingwithschnei.JPG");\n}\n/*# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsic3JjL2FwcC9wcm9qZWN0cy9tb3JlLXN1bmxpZ2h0L21vcmUtc3VubGlnaHQuY29tcG9uZW50LmNzcyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiLnByb2plY3REZXRhaWw6OmJlZm9yZSB7XHJcbiAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KHRvIGJvdHRvbSwgcmdiYSgyNTUsIDI1NSwgMjU1LCAwLjMpLCByZ2JhKDI1NSwgMjU1LCAyNTUsIDApKTtcclxufVxyXG5cclxuI3JvZGtlbmZvcnNuZCAuc3ViUHJvamVjdHNQcm9maWxlIHtcclxuICBjb250ZW50OiB1cmwoXCIuLi8uLi8uLi9hc3NldHMvaW1hZ2VzL21vcmUtc3VubGlnaHQvcm9ka2VuZm9yc25kLkpQR1wiKTtcclxufVxyXG5cclxuI211bW11bSAuc3ViUHJvamVjdHNQcm9maWxlIHtcclxuICBjb250ZW50OiB1cmwoXCIuLi8uLi8uLi9hc3NldHMvaW1hZ2VzL21vcmUtc3VubGlnaHQvbXVtbXVtLkpQR1wiKTtcclxufVxyXG5cclxuI3N3ZWV0aG9uZXkgLnN1YlByb2plY3RzUHJvZmlsZSB7XHJcbiAgY29udGVudDogdXJsKFwiLi4vLi4vLi4vYXNzZXRzL2ltYWdlcy9tb3JlLXN1bmxpZ2h0L3N3ZWV0aG9uZXkuSlBHXCIpO1xyXG59XHJcblxyXG4jd2Fsa2luZ3dpdGhzY2huZWkgLnN1YlByb2plY3RzUHJvZmlsZSB7XHJcbiAgY29udGVudDogdXJsKFwiLi4vLi4vLi4vYXNzZXRzL2ltYWdlcy9tb3JlLXN1bmxpZ2h0L3dhbGtpbmd3aXRoc2NobmVpLkpQR1wiKTtcclxufVxyXG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQUEsQ0FBQyxhQUFhO0FBQ1osb0JBQWtCLGdCQUFnQixHQUFHLE1BQU0sRUFBRSxLQUFLLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxLQUFLLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFO0FBQzdGO0FBRUEsQ0FBQyxhQUFhLENBQUM7QUFDYixXQUFTO0FBQ1g7QUFFQSxDQUFDLE9BQU8sQ0FKTztBQUtiLFdBQVM7QUFDWDtBQUVBLENBQUMsV0FBVyxDQVJHO0FBU2IsV0FBUztBQUNYO0FBRUEsQ0FBQyxrQkFBa0IsQ0FaSjtBQWFiLFdBQVM7QUFDWDsiLAogICJuYW1lcyI6IFtdCn0K */'] });
var MoreSunlightComponent = _MoreSunlightComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(MoreSunlightComponent, { className: "MoreSunlightComponent", filePath: "src\\app\\projects\\more-sunlight\\more-sunlight.component.ts", lineNumber: 10 });
})();

// src/app/app-routing.module.ts
var routes = [
  { path: "sunlight", component: SunlightZoneComponent, canActivate: [navigationGuard] },
  { path: ":level/letters-to-schneider", component: GalleriesComponent, canActivate: [navigationGuard] },
  { path: ":level/schneider-journey", component: TimeLineComponent, canActivate: [navigationGuard] },
  { path: ":level/presents-to-schneider/fenchanted", component: FenchantedComponent, canActivate: [navigationGuard] },
  { path: ":level/presents-to-schneider/amiore", component: AmioreComponent, canActivate: [navigationGuard] },
  { path: ":level/presents-to-schneider/whisper-from-the-deep-sea", component: WhisperFromDeepSeaComponent, canActivate: [navigationGuard] },
  { path: "sunlight/presents-to-schneider/more-projects", component: MoreSunlightComponent, canActivate: [navigationGuard] }
];
var _AppRoutingModule = class _AppRoutingModule {
};
_AppRoutingModule.\u0275fac = function AppRoutingModule_Factory(t) {
  return new (t || _AppRoutingModule)();
};
_AppRoutingModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({ type: _AppRoutingModule });
_AppRoutingModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({ imports: [RouterModule.forRoot(routes, { useHash: true }), RouterModule] });
var AppRoutingModule = _AppRoutingModule;

// src/app/stars/stars.component.ts
function StarsComponent_div_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275element(0, "div", 4);
  }
}
var _c09 = () => [];
var _StarsComponent = class _StarsComponent {
};
_StarsComponent.\u0275fac = function StarsComponent_Factory(t) {
  return new (t || _StarsComponent)();
};
_StarsComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _StarsComponent, selectors: [["app-stars"]], decls: 4, vars: 2, consts: [[1, "background-container"], [1, "stars"], [1, "shootingStars"], ["class", "shootingStar", 4, "ngFor", "ngForOf"], [1, "shootingStar"]], template: function StarsComponent_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 0);
    \u0275\u0275element(1, "div", 1);
    \u0275\u0275elementStart(2, "div", 2);
    \u0275\u0275template(3, StarsComponent_div_3_Template, 1, 0, "div", 3);
    \u0275\u0275elementEnd()();
  }
  if (rf & 2) {
    \u0275\u0275advance(3);
    \u0275\u0275property("ngForOf", \u0275\u0275pureFunction0(1, _c09).constructor(5));
  }
}, dependencies: [NgForOf], styles: ['\n\n.background-container[_ngcontent-%COMP%] {\n  position: fixed;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n}\n.stars[_ngcontent-%COMP%] {\n  background: url("./media/stars.PNG") repeat;\n  position: absolute;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  right: 0;\n  display: block;\n  z-index: 0;\n}\n@keyframes _ngcontent-%COMP%_move-background {\n  from {\n    transform: translate3d(0px, 0px, 0px);\n  }\n  to {\n    transform: translate3d(1000px, 0px, 0px);\n  }\n}\n.shootingStars[_ngcontent-%COMP%] {\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 120%;\n  transform: rotate(-45deg);\n}\n.shootingStar[_ngcontent-%COMP%] {\n  --star-color: white;\n  --star-tail-length: 6em;\n  --star-tail-height: 2px;\n  --star-width: calc(var(--star-tail-length) / 6);\n  --fall-duration: 9s;\n  --tail-fade-duration: calc(var(--fall-duration) / 4);\n  position: absolute;\n  top: var(--top-offset);\n  left: 0;\n  width: var(--star-tail-length);\n  height: var(--star-tail-height);\n  color: var(--star-color);\n  background: linear-gradient(45deg, currentColor, transparent);\n  border-radius: 50%;\n  filter: drop-shadow(0 0 6px currentColor);\n  transform: translate3d(140vw, 0, 0);\n  animation: _ngcontent-%COMP%_fall var(--fall-duration) var(--fall-delay) linear infinite, _ngcontent-%COMP%_tail-fade var(--tail-fade-duration) var(--fall-delay) ease-out infinite;\n}\n.shootingStar[_ngcontent-%COMP%]:nth-child(1) {\n  --star-tail-length: 6.22em;\n  --top-offset: 30.45vh;\n  --fall-duration: 18.356s;\n  --fall-delay: 40s;\n}\n.shootingStar[_ngcontent-%COMP%]:nth-child(2) {\n  --star-tail-length: 7.42em;\n  --top-offset: 26.44vh;\n  --fall-duration: 18.788;\n  --fall-delay: 21s;\n}\n.shootingStar[_ngcontent-%COMP%]:nth-child(3) {\n  --star-tail-length: 7.12em;\n  --top-offset: 18.65vh;\n  --fall-duration: 17.928s;\n  --fall-delay: 27s;\n}\n.shootingStar[_ngcontent-%COMP%]:nth-child(4) {\n  --star-tail-length: 5.85em;\n  --top-offset: 9.55vh;\n  --fall-duration: 22.656s;\n  --fall-delay: 15.24s;\n}\n.shootingStar[_ngcontent-%COMP%]:nth-child(5) {\n  --star-tail-length: 6.12em;\n  --top-offset: 85.89vh;\n  --fall-duration: 31.04s;\n  --fall-delay: 16.472s;\n}\n.shootingStar[_ngcontent-%COMP%]::before, .shootingStar[_ngcontent-%COMP%]::after {\n  position: absolute;\n  content: "";\n  top: 0;\n  left: calc(var(--star-width) / -2);\n  width: var(--star-width);\n  height: 100%;\n  background: linear-gradient(45deg, transparent, currentColor, transparent);\n  border-radius: inherit;\n  animation: _ngcontent-%COMP%_blink 2s linear infinite;\n}\n.shootingStar[_ngcontent-%COMP%]::before {\n  transform: rotate(45deg);\n}\n.shootingStar[_ngcontent-%COMP%]::after {\n  transform: rotate(-45deg);\n}\n@keyframes _ngcontent-%COMP%_fall {\n  0% {\n    transform: translate3d(140vw, 0, 0);\n  }\n  24% {\n    transform: translate3d(20vw, 0, 0);\n  }\n  25%, 100% {\n    transform: translate3d(20vw, 0, 0);\n    display: none;\n  }\n}\n@keyframes _ngcontent-%COMP%_tail-fade {\n  0%, 50% {\n    width: var(--star-tail-length);\n    opacity: 1;\n  }\n  70%, 80% {\n    width: var(--star-tail-length);\n    opacity: 0.4;\n  }\n  100% {\n    width: 0;\n    opacity: 0;\n  }\n}\n@keyframes _ngcontent-%COMP%_blink {\n  50% {\n    opacity: 0;\n  }\n}\n@keyframes _ngcontent-%COMP%_delay-animation {\n  0% {\n    opacity: 1;\n  }\n  50% {\n    opacity: 1;\n  }\n  50.01% {\n    opacity: 0;\n  }\n  100% {\n    opacity: 0;\n  }\n}\n@media only screen and (max-height: 600px) and (orientation: landscape), only screen and (min-width: 768px) and (max-width: 1024px), only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 1), only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 2), only screen and (min-device-width: 1112px) and (max-device-width: 1112px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 2), only screen and (min-device-width: 1366px) and (max-device-width: 1366px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 2) {\n  .shootingStars[_ngcontent-%COMP%] {\n    top: -50vh;\n    left: -20vw;\n    width: 200vw;\n    height: 200vh;\n  }\n}\n/*# sourceMappingURL=data:application/json;base64, */'] });
var StarsComponent = _StarsComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(StarsComponent, { className: "StarsComponent", filePath: "src\\app\\stars\\stars.component.ts", lineNumber: 8 });
})();

// src/app/app.component.ts
function AppComponent_div_0_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 6)(1, "div", 7);
    \u0275\u0275element(2, "div", 8);
    \u0275\u0275elementEnd()();
  }
}
function AppComponent_div_1_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 9);
    \u0275\u0275element(1, "img", 10);
    \u0275\u0275elementEnd();
  }
  if (rf & 2) {
    const ctx_r1 = \u0275\u0275nextContext();
    \u0275\u0275advance(1);
    \u0275\u0275propertyInterpolate("src", ctx_r1.hiddenImgSrc, \u0275\u0275sanitizeUrl);
  }
}
function AppComponent_div_2_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 11)(1, "div");
    \u0275\u0275element(2, "img", 12);
    \u0275\u0275elementStart(3, "div", 13);
    \u0275\u0275element(4, "img", 14);
    \u0275\u0275elementEnd()()();
  }
}
function AppComponent_div_3_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275elementStart(0, "div", 15)(1, "div", 16);
    \u0275\u0275element(2, "div", 17);
    \u0275\u0275elementEnd();
    \u0275\u0275element(3, "app-stars");
    \u0275\u0275namespaceSVG();
    \u0275\u0275elementStart(4, "svg", 18)(5, "defs");
    \u0275\u0275element(6, "path", 19);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(7, "g", 20);
    \u0275\u0275element(8, "use", 21)(9, "use", 22)(10, "use", 23);
    \u0275\u0275elementEnd()();
    \u0275\u0275namespaceHTML();
    \u0275\u0275element(11, "div", 24);
    \u0275\u0275elementStart(12, "div", 25);
    \u0275\u0275element(13, "span", 26)(14, "span", 26)(15, "span", 26)(16, "span", 26)(17, "span", 26);
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(18, "div", 27);
    \u0275\u0275element(19, "img", 28);
    \u0275\u0275elementEnd()();
  }
}
function AppComponent_div_4_Template(rf, ctx) {
  if (rf & 1) {
    const _r6 = \u0275\u0275getCurrentView();
    \u0275\u0275elementStart(0, "div", 29);
    \u0275\u0275element(1, "app-tool-bar", 30);
    \u0275\u0275elementStart(2, "div", 31);
    \u0275\u0275element(3, "img")(4, "div", 32)(5, "div", 33)(6, "div", 34)(7, "div", 35);
    \u0275\u0275elementStart(8, "div", 36);
    \u0275\u0275listener("click", function AppComponent_div_4_Template_div_click_8_listener() {
      \u0275\u0275restoreView(_r6);
      const ctx_r5 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r5.onLayerSelect(true));
    })("mouseover", function AppComponent_div_4_Template_div_mouseover_8_listener() {
      \u0275\u0275restoreView(_r6);
      const ctx_r7 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r7.layerHover("sunlight"));
    })("mouseout", function AppComponent_div_4_Template_div_mouseout_8_listener() {
      \u0275\u0275restoreView(_r6);
      const ctx_r8 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r8.layerHoverOut());
    });
    \u0275\u0275element(9, "img");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(10, "div", 37);
    \u0275\u0275listener("click", function AppComponent_div_4_Template_div_click_10_listener() {
      \u0275\u0275restoreView(_r6);
      const ctx_r9 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r9.onLayerSelect(false));
    })("mouseover", function AppComponent_div_4_Template_div_mouseover_10_listener() {
      \u0275\u0275restoreView(_r6);
      const ctx_r10 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r10.layerHover("twilight"));
    })("mouseout", function AppComponent_div_4_Template_div_mouseout_10_listener() {
      \u0275\u0275restoreView(_r6);
      const ctx_r11 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r11.layerHoverOut());
    });
    \u0275\u0275element(11, "img");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(12, "div", 38);
    \u0275\u0275listener("click", function AppComponent_div_4_Template_div_click_12_listener() {
      \u0275\u0275restoreView(_r6);
      const ctx_r12 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r12.onLayerSelect(false));
    })("mouseover", function AppComponent_div_4_Template_div_mouseover_12_listener() {
      \u0275\u0275restoreView(_r6);
      const ctx_r13 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r13.layerHover("midnight"));
    })("mouseout", function AppComponent_div_4_Template_div_mouseout_12_listener() {
      \u0275\u0275restoreView(_r6);
      const ctx_r14 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r14.layerHoverOut());
    });
    \u0275\u0275element(13, "img");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(14, "div", 39);
    \u0275\u0275listener("click", function AppComponent_div_4_Template_div_click_14_listener() {
      \u0275\u0275restoreView(_r6);
      const ctx_r15 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r15.onLayerSelect(false));
    })("mouseover", function AppComponent_div_4_Template_div_mouseover_14_listener() {
      \u0275\u0275restoreView(_r6);
      const ctx_r16 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r16.layerHover("abyss"));
    })("mouseout", function AppComponent_div_4_Template_div_mouseout_14_listener() {
      \u0275\u0275restoreView(_r6);
      const ctx_r17 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r17.layerHoverOut());
    });
    \u0275\u0275element(15, "img");
    \u0275\u0275elementEnd();
    \u0275\u0275elementStart(16, "div", 40);
    \u0275\u0275listener("click", function AppComponent_div_4_Template_div_click_16_listener() {
      \u0275\u0275restoreView(_r6);
      const ctx_r18 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r18.onLayerSelect(false));
    })("mouseover", function AppComponent_div_4_Template_div_mouseover_16_listener() {
      \u0275\u0275restoreView(_r6);
      const ctx_r19 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r19.layerHover("trenches"));
    })("mouseout", function AppComponent_div_4_Template_div_mouseout_16_listener() {
      \u0275\u0275restoreView(_r6);
      const ctx_r20 = \u0275\u0275nextContext();
      return \u0275\u0275resetView(ctx_r20.layerHoverOut());
    });
    \u0275\u0275element(17, "img");
    \u0275\u0275elementEnd()();
    \u0275\u0275elementStart(18, "div", 41)(19, "h2");
    \u0275\u0275text(20);
    \u0275\u0275elementEnd()()();
  }
  if (rf & 2) {
    const ctx_r4 = \u0275\u0275nextContext();
    \u0275\u0275advance(1);
    \u0275\u0275property("showBack", false)("showBackToTop", false);
    \u0275\u0275advance(3);
    \u0275\u0275property("ngClass", false ? "layerLine" : "inactiveLine");
    \u0275\u0275advance(1);
    \u0275\u0275property("ngClass", false ? "layerLine" : "inactiveLine");
    \u0275\u0275advance(1);
    \u0275\u0275property("ngClass", false ? "layerLine" : "inactiveLine");
    \u0275\u0275advance(1);
    \u0275\u0275property("ngClass", false ? "layerLine" : "inactiveLine");
    \u0275\u0275advance(1);
    \u0275\u0275property("ngClass", true ? "layerStar" : "inactiveStar");
    \u0275\u0275advance(2);
    \u0275\u0275property("ngClass", false ? "layerStar" : "inactiveStar");
    \u0275\u0275advance(2);
    \u0275\u0275property("ngClass", false ? "layerStar" : "inactiveStar");
    \u0275\u0275advance(2);
    \u0275\u0275property("ngClass", false ? "layerStar" : "inactiveStar");
    \u0275\u0275advance(2);
    \u0275\u0275property("ngClass", false ? "layerStar" : "inactiveStar");
    \u0275\u0275advance(4);
    \u0275\u0275textInterpolate(ctx_r4.levelDisplayText[ctx_r4.hoveredLayer] || "");
  }
}
var _AppComponent = class _AppComponent {
  constructor() {
    this.title = "Layer Of The Ocean";
    this.hoveredLayer = "";
    this.loading = true;
    this.hiddenImgSrc = "#";
    this.levelDisplayText = LEVEL_DISPLAY_TEXT;
  }
  ngOnInit() {
    const bar = document.querySelector(".bar");
    this.hiddenImgSrc = "../assets/images/typo.GIF";
    setTimeout(() => {
      this.hiddenImgSrc = "#";
    }, 9e3);
    setTimeout(() => {
      this.loading = false;
    }, 1e4);
  }
  onLayerSelect(activeLayer) {
    if (!activeLayer)
      return;
    document.getElementById("layerContentBegin")?.scrollIntoView({
      behavior: "smooth",
      block: "start",
      inline: "nearest"
    });
  }
  layerHover(layer) {
    this.hoveredLayer = layer;
  }
  layerHoverOut() {
    this.hoveredLayer = "";
  }
};
_AppComponent.\u0275fac = function AppComponent_Factory(t) {
  return new (t || _AppComponent)();
};
_AppComponent.\u0275cmp = /* @__PURE__ */ \u0275\u0275defineComponent({ type: _AppComponent, selectors: [["app-root"]], decls: 7, vars: 5, consts: [["class", "loadingModal", 4, "ngIf"], ["class", "hiddenLoadingModal", 4, "ngIf"], ["class", "titleModal", 4, "ngIf"], ["class", "oceanBg", 4, "ngIf"], ["id", "layerNavContent", 4, "ngIf"], ["id", "layerContentBegin"], [1, "loadingModal"], [1, "progress"], [1, "bar"], [1, "hiddenLoadingModal"], ["id", "hiddenTypo", 3, "src"], [1, "titleModal"], ["id", "titleTypo", "src", "#"], [1, "dropDiv"], [1, "drop"], [1, "oceanBg"], ["id", "oceanBaseBg"], [1, "oceanBaseBgInner"], ["xmlns", "http://www.w3.org/2000/svg", 0, "xmlns", "xlink", "http://www.w3.org/1999/xlink", "viewBox", "0 24 150 28", "preserveAspectRatio", "none", "shape-rendering", "auto", 1, "waves"], ["id", "gentle-wave", "d", "M-160 44c30 0 58-5 88-5s 58 5 88 5 58-5 88-5 58 5 88 5 v44h-352z"], [1, "parallax"], [0, "xlink", "href", "#gentle-wave", "x", "48", "y", "0", "fill", "rgba(255,255,255,0.1"], [0, "xlink", "href", "#gentle-wave", "x", "48", "y", "1", "fill", "rgba(255,255,255,0.2)"], [0, "xlink", "href", "#gentle-wave", "x", "48", "y", "2", "fill", "rgba(255,255,255,0.3)"], [1, "wavesFiller"], [1, "ripples"], [1, "ripple"], [1, "handsome"], ["src", "#"], ["id", "layerNavContent"], [3, "showBack", "showBackToTop"], [1, "constellation"], [1, "sunlightToTwilight", 3, "ngClass"], [1, "twilightToMidnight", 3, "ngClass"], [1, "midnightToAbyss", 3, "ngClass"], [1, "abyssToTrenches", 3, "ngClass"], ["routerLink", "/sunlight", 1, "sunlightStar", 3, "ngClass", "click", "mouseover", "mouseout"], [1, "twilightStar", 3, "ngClass", "click", "mouseover", "mouseout"], [1, "midnightStar", 3, "ngClass", "click", "mouseover", "mouseout"], [1, "abyssStar", 3, "ngClass", "click", "mouseover", "mouseout"], [1, "trenchesStar", 3, "ngClass", "click", "mouseover", "mouseout"], [1, "selectedLayerName"]], template: function AppComponent_Template(rf, ctx) {
  if (rf & 1) {
    \u0275\u0275template(0, AppComponent_div_0_Template, 3, 0, "div", 0)(1, AppComponent_div_1_Template, 2, 1, "div", 1)(2, AppComponent_div_2_Template, 5, 0, "div", 2)(3, AppComponent_div_3_Template, 20, 0, "div", 3)(4, AppComponent_div_4_Template, 21, 12, "div", 4);
    \u0275\u0275element(5, "div", 5)(6, "router-outlet");
  }
  if (rf & 2) {
    \u0275\u0275property("ngIf", ctx.loading);
    \u0275\u0275advance(1);
    \u0275\u0275property("ngIf", ctx.loading);
    \u0275\u0275advance(1);
    \u0275\u0275property("ngIf", !ctx.loading);
    \u0275\u0275advance(1);
    \u0275\u0275property("ngIf", !ctx.loading);
    \u0275\u0275advance(1);
    \u0275\u0275property("ngIf", !ctx.loading);
  }
}, dependencies: [NgClass, NgIf, RouterOutlet, RouterLink, ToolBarComponent, StarsComponent], styles: ['\n\n.loadingModal[_ngcontent-%COMP%] {\n  background-color: black;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  z-index: 15;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n.hiddenLoadingModal[_ngcontent-%COMP%] {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  z-index: 14;\n}\n#hiddenTypo[_ngcontent-%COMP%] {\n  width: 100px;\n  height: 100px;\n}\n.progress[_ngcontent-%COMP%] {\n  width: 40vw;\n  height: 1vh;\n  margin: 9em auto;\n  border: 1px solid #fff;\n  padding: 12px 10px;\n  box-shadow: 0 0 10px #aaa;\n  opacity: 1;\n  animation: _ngcontent-%COMP%_fadeOut 500ms 8s linear forwards;\n}\n.progress[_ngcontent-%COMP%]   .bar[_ngcontent-%COMP%] {\n  width: 0%;\n  height: 100%;\n  background-color: white;\n  box-shadow: 0 0 10px 0px orange;\n  transition: width 3s ease 3s;\n  animation: _ngcontent-%COMP%_progressing 7s ease-in-out forwards;\n}\n.titleModal[_ngcontent-%COMP%] {\n  color: white;\n  background-color: black;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  text-align: center;\n  animation-name: _ngcontent-%COMP%_slideUp, _ngcontent-%COMP%_hideTypo;\n  animation-duration: 2s, 100ms;\n  animation-delay: 11s, 14s;\n  animation-iteration-count: 1, 1;\n  animation-fill-mode: forwards, forwards;\n  z-index: 10;\n}\n.titleModal[_ngcontent-%COMP%]    > div[_ngcontent-%COMP%] {\n  display: block;\n  width: 600px;\n  height: auto;\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n}\n#titleTypo[_ngcontent-%COMP%] {\n  content: url("./media/typo.GIF");\n  width: 100%;\n  height: 100%;\n  animation-name: _ngcontent-%COMP%_imgFade;\n  animation-duration: 500ms;\n  animation-delay: 11s;\n  animation-fill-mode: forwards;\n}\n.dropDiv[_ngcontent-%COMP%] {\n  position: absolute;\n  width: 120px;\n  height: auto;\n  bottom: 0;\n  left: 0;\n  transform: translate(137px, 76px);\n}\n.drop[_ngcontent-%COMP%] {\n  content: url("./media/drop.PNG");\n  width: 100%;\n  height: 100%;\n  opacity: 0;\n  animation-name: _ngcontent-%COMP%_dropping;\n  animation-duration: 1800ms;\n  animation-delay: 11s;\n  animation-fill-mode: forwards;\n}\n#oceanBaseBg[_ngcontent-%COMP%] {\n  background-color: #030216;\n  background-image:\n    radial-gradient(ellipse at 10% 10%, #0e0f24 0%, transparent 55%),\n    radial-gradient(ellipse at 30% 110%, #28fecd 0%, transparent 40%),\n    radial-gradient(ellipse at 70% 110%, #17fee2 0%, transparent 40%),\n    radial-gradient(ellipse at 10% 100%, #472ea6 0%, transparent 25%),\n    radial-gradient(ellipse at 90% 100%, #472ea6 0%, transparent 25%),\n    radial-gradient(ellipse at 25% 50%, #50507b 0%, transparent 60%),\n    radial-gradient(ellipse at 80% 54%, #50507b 0%, transparent 62%);\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  width: 100%;\n  height: 100%;\n  z-index: -1;\n}\n.oceanBaseBgInner[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 0px;\n  left: 0px;\n  width: 100%;\n  height: 100%;\n  background-image: radial-gradient(ellipse at 30% 55%, #0e0f24 0%, transparent 55%), radial-gradient(ellipse at 70% 40%, #5257b0 0%, transparent 55%);\n}\n.ripples[_ngcontent-%COMP%] {\n  position: relative;\n  z-index: 5;\n  top: 50%;\n  left: 50%;\n  width: 600px;\n  height: 600px;\n}\n.ripple[_ngcontent-%COMP%] {\n  display: block;\n  position: absolute;\n  border-radius: 50%;\n  width: 5px;\n  height: 5px;\n  background-image: radial-gradient(rgba(255, 255, 255, 0) 50%, rgba(255, 255, 255, 0.5));\n  animation: _ngcontent-%COMP%_rip 2s ease-out, _ngcontent-%COMP%_hideTypo 100ms 13 linear;\n  animation-iteration-count: 1, 1;\n  animation-fill-mode: forwards;\n}\n.ripple[_ngcontent-%COMP%]:nth-child(1) {\n  animation-delay: 12.3s;\n  top: 0px;\n  left: -110px;\n  --scale: 40;\n}\n.ripple[_ngcontent-%COMP%]:nth-child(2) {\n  animation-delay: 12.7s;\n  top: -100px;\n  left: 0px;\n  --scale: 50;\n}\n.ripple[_ngcontent-%COMP%]:nth-child(3) {\n  animation-delay: 13.1s;\n  top: 15px;\n  left: 50px;\n  --scale: 30;\n}\n.ripple[_ngcontent-%COMP%]:nth-child(4) {\n  animation-delay: 13.5s;\n  top: -50px;\n  left: 100px;\n  --scale: 40;\n}\n.ripple[_ngcontent-%COMP%]:nth-child(5) {\n  animation-delay: 13.9s;\n  top: -10px;\n  left: 150px;\n  --scale: 45;\n}\n.layerNavContent[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 5;\n}\n.selectedLayerName[_ngcontent-%COMP%] {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  position: absolute;\n  top: 570px;\n}\n.selectedLayerName[_ngcontent-%COMP%]    > h2[_ngcontent-%COMP%] {\n  font-family:\n    Twilight,\n    Mitr,\n    san-serif;\n  font-size: 2.5rem;\n}\n.constellation[_ngcontent-%COMP%] {\n  width: 600px;\n  margin: 0 auto;\n  position: relative;\n  opacity: 0;\n  animation: _ngcontent-%COMP%_fadeIn 2s 12.5s ease-in-out forwards;\n}\n.constellation[_ngcontent-%COMP%]    > img[_ngcontent-%COMP%] {\n  content: url("./media/schneider-constellation.PNG");\n  width: 100%;\n  opacity: 0.3;\n  animation: _ngcontent-%COMP%_scaleUp 5s 14s ease-in-out infinite;\n}\n.layerStar[_ngcontent-%COMP%] {\n  position: absolute;\n  width: 70px;\n  height: auto;\n  transform: scale(1.5);\n  animation: _ngcontent-%COMP%_sizeUpDown 6s ease-in-out infinite;\n}\n.layerStar[_ngcontent-%COMP%]    > img[_ngcontent-%COMP%] {\n  content: url("./media/close-icon-hover.PNG");\n  width: 100%;\n}\n.layerStar[_ngcontent-%COMP%]    > img[_ngcontent-%COMP%]:hover {\n  transform: scale(1.3);\n  cursor: pointer;\n}\n.inactiveStar[_ngcontent-%COMP%] {\n  position: absolute;\n  width: 70px;\n  height: auto;\n  opacity: 0.6;\n}\n.inactiveStar[_ngcontent-%COMP%]    > img[_ngcontent-%COMP%] {\n  content: url("./media/close-icon.PNG");\n  width: 100%;\n}\n.inactiveStar[_ngcontent-%COMP%]    > img[_ngcontent-%COMP%]:hover {\n  cursor: not-allowed;\n}\n.sunlightStar[_ngcontent-%COMP%] {\n  top: 90px;\n  left: 110px;\n}\n.layerLine[_ngcontent-%COMP%] {\n  position: absolute;\n  border-bottom: 3px solid #ffffffa6;\n  height: 5px;\n}\n.inactiveLine[_ngcontent-%COMP%] {\n  position: absolute;\n  border-bottom: 3px solid #808080a6;\n  height: 5px;\n}\n.sunlightToTwilight[_ngcontent-%COMP%] {\n  left: 50px;\n  top: 280px;\n  transform-origin: bottom left;\n  width: 200px;\n  rotate: -60deg;\n}\n.twilightStar[_ngcontent-%COMP%] {\n  top: 255px;\n  left: 10px;\n}\n.twilightToMidnight[_ngcontent-%COMP%] {\n  left: 50px;\n  top: 280px;\n  transform-origin: bottom left;\n  width: 270px;\n  rotate: 23deg;\n}\n.midnightStar[_ngcontent-%COMP%] {\n  top: 360px;\n  left: 300px;\n  transform: translateX(-50%);\n}\n.midnightToAbyss[_ngcontent-%COMP%] {\n  right: 50px;\n  top: 280px;\n  transform-origin: bottom right;\n  width: 270px;\n  rotate: -23deg;\n}\n.abyssStar[_ngcontent-%COMP%] {\n  top: 255px;\n  right: 10px;\n}\n.abyssToTrenches[_ngcontent-%COMP%] {\n  right: 50px;\n  top: 280px;\n  transform-origin: bottom right;\n  width: 200px;\n  rotate: 60deg;\n}\n.trenchesStar[_ngcontent-%COMP%] {\n  top: 90px;\n  right: 110px;\n}\n#layerContentBegin[_ngcontent-%COMP%] {\n  position: absolute;\n  top: 100%;\n  left: 0px;\n  width: 100%;\n  height: 100%;\n  z-index: -20;\n}\n.oceanBg[_ngcontent-%COMP%] {\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  z-index: -1;\n}\n.handsome[_ngcontent-%COMP%] {\n  position: absolute;\n  bottom: 0;\n  left: 0;\n  width: 100%;\n}\n.handsome[_ngcontent-%COMP%]    > img[_ngcontent-%COMP%] {\n  content: url("./media/schneider-main-float.GIF");\n  position: absolute;\n  bottom: -80px;\n  left: 5%;\n  width: 640px;\n  animation: _ngcontent-%COMP%_floating 21s 5s ease-in-out infinite;\n}\n.waves[_ngcontent-%COMP%] {\n  position: absolute;\n  width: 100%;\n  height: 40vh;\n  margin-bottom: -7px;\n  min-height: 25vh;\n  max-height: 40vh;\n  bottom: 0;\n  left: 0;\n}\n.wavesFiller[_ngcontent-%COMP%] {\n  position: absolute;\n  background-color: rgba(255, 255, 255, 0.5);\n  width: 100%;\n  height: 0;\n  bottom: 0;\n  left: 0;\n}\n.parallax[_ngcontent-%COMP%]    > use[_ngcontent-%COMP%] {\n  animation: _ngcontent-%COMP%_move-forever 25s cubic-bezier(.55, .5, .45, .5) infinite;\n}\n.parallax[_ngcontent-%COMP%]    > use[_ngcontent-%COMP%]:nth-child(1) {\n  animation-delay: -4s;\n  animation-duration: 52s;\n}\n.parallax[_ngcontent-%COMP%]    > use[_ngcontent-%COMP%]:nth-child(2) {\n  animation-delay: -3s;\n  animation-duration: 30s;\n}\n.parallax[_ngcontent-%COMP%]    > use[_ngcontent-%COMP%]:nth-child(3) {\n  animation-delay: -2s;\n  animation-duration: 21s;\n}\n@keyframes _ngcontent-%COMP%_move-forever {\n  0% {\n    transform: translate3d(-90px, 0, 0);\n  }\n  100% {\n    transform: translate3d(85px, 0, 0);\n  }\n}\n@keyframes _ngcontent-%COMP%_slideUp {\n  0% {\n    transform: translateY(0px);\n    opacity: 1;\n  }\n  50% {\n    transform: translateY(-100%);\n    opacity: 0.4;\n  }\n  100% {\n    transform: translateY(-100%);\n    opacity: 0.2;\n  }\n}\n@keyframes _ngcontent-%COMP%_imgFade {\n  from {\n    opacity: 1;\n  }\n  to {\n    transform: translateY(-100%);\n    opacity: 0;\n  }\n}\n@keyframes _ngcontent-%COMP%_dropping {\n  0% {\n    opacity: 1;\n    transform: translateY(+0vh);\n  }\n  30% {\n    opacity: 1;\n    transform: translateY(+30vh);\n  }\n  70% {\n    opacity: 1;\n    transform: translateY(+70vh);\n  }\n  100% {\n    opacity: 0;\n    transform: translateY(+70vh);\n    display: none;\n  }\n}\n@keyframes _ngcontent-%COMP%_hideTypo {\n  from {\n    display: block;\n  }\n  to {\n    display: none;\n  }\n}\n@keyframes _ngcontent-%COMP%_floating {\n  25% {\n    transform: translate(1vw, -2vh) rotate(2deg);\n  }\n  50% {\n    transform: translateY(-4vh);\n  }\n  75% {\n    transform: translate(-1vw, -2vh) rotate(-2deg);\n  }\n}\n@keyframes _ngcontent-%COMP%_sizeUpDown {\n  5% {\n    transform: scale(1.8);\n  }\n  20% {\n    transform: scale(1);\n  }\n  25% {\n    transform: scale(1.6);\n  }\n  27% {\n    transform: scale(1.5);\n  }\n}\n@keyframes _ngcontent-%COMP%_rip {\n  0% {\n    transform: scale(0);\n    opacity: 1;\n  }\n  100% {\n    transform: scale(var(--scale));\n    opacity: 0;\n  }\n}\n@keyframes _ngcontent-%COMP%_fadeIn {\n  0% {\n    opacity: 0;\n    transform: scale(0.8);\n  }\n  50% {\n    opacity: 0.7;\n    transform: scale(1.1);\n  }\n  75% {\n    opacity: 0.9;\n    transform: scale(0.98);\n  }\n  100% {\n    opacity: 1;\n    transform: scale(1);\n  }\n}\n@keyframes _ngcontent-%COMP%_scaleUp {\n  5%, 95% {\n    transform: scale(1);\n  }\n  50% {\n    transform: scale(1.03);\n  }\n}\n@keyframes _ngcontent-%COMP%_progressing {\n  0% {\n    width: 0%;\n  }\n  50%, 70% {\n    width: 90%;\n  }\n  100% {\n    width: 100%;\n  }\n}\n@keyframes _ngcontent-%COMP%_fadeOut {\n  from {\n    opacity: 1;\n  }\n  to {\n    opacity: 0;\n  }\n}\n@media only screen and (max-height: 600px) and (orientation: landscape), only screen and (min-width: 768px) and (max-width: 1024px), only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 1), only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 2), only screen and (min-device-width: 1112px) and (max-device-width: 1112px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 2), only screen and (min-device-width: 1366px) and (max-device-width: 1366px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 2) {\n  .titleModal[_ngcontent-%COMP%]    > div[_ngcontent-%COMP%] {\n    width: 500px;\n    height: auto;\n  }\n  .dropDiv[_ngcontent-%COMP%] {\n    width: 90px;\n    height: auto;\n    transform: translate(119px, 58px);\n  }\n  .waves[_ngcontent-%COMP%] {\n    bottom: 50px;\n  }\n  .wavesFiller[_ngcontent-%COMP%] {\n    height: 43px;\n  }\n  .handsome[_ngcontent-%COMP%]    > img[_ngcontent-%COMP%] {\n    width: 515px;\n    bottom: 0px;\n  }\n  .constellation[_ngcontent-%COMP%] {\n    width: 500px;\n  }\n  .layerStar[_ngcontent-%COMP%] {\n    width: 60px;\n  }\n  .inactiveStar[_ngcontent-%COMP%] {\n    width: 60px;\n  }\n  .sunlightStar[_ngcontent-%COMP%] {\n    top: 82px;\n    left: 88px;\n  }\n  .sunlightToTwilight[_ngcontent-%COMP%] {\n    left: 45px;\n    top: 230px;\n    width: 150px;\n    rotate: -60deg;\n  }\n  .twilightStar[_ngcontent-%COMP%] {\n    top: 210px;\n    left: 15px;\n  }\n  .twilightToMidnight[_ngcontent-%COMP%] {\n    left: 45px;\n    top: 232px;\n    width: 220px;\n    rotate: 23deg;\n  }\n  .midnightStar[_ngcontent-%COMP%] {\n    top: 300px;\n    left: 250px;\n  }\n  .midnightToAbyss[_ngcontent-%COMP%] {\n    right: 45px;\n    top: 232px;\n    width: 220px;\n    rotate: -23deg;\n  }\n  .abyssStar[_ngcontent-%COMP%] {\n    top: 210px;\n    right: 15px;\n  }\n  .abyssToTrenches[_ngcontent-%COMP%] {\n    right: 45px;\n    top: 230px;\n    width: 150px;\n    rotate: 60deg;\n  }\n  .trenchesStar[_ngcontent-%COMP%] {\n    top: 82px;\n    right: 88px;\n  }\n  .selectedLayerName[_ngcontent-%COMP%] {\n    top: 480px;\n  }\n  .selectedLayerName[_ngcontent-%COMP%]    > h2[_ngcontent-%COMP%] {\n    font-size: 2rem;\n  }\n}\n@media only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 1), only screen and (min-device-width: 768px) and (max-device-width: 1024px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 2), only screen and (min-device-width: 1112px) and (max-device-width: 1112px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 2), only screen and (min-device-width: 1366px) and (max-device-width: 1366px) and (orientation: landscape) and (-webkit-min-device-pixel-ratio: 2) {\n  .titleModal[_ngcontent-%COMP%]    > div[_ngcontent-%COMP%] {\n    top: 45%;\n  }\n}\n@media only screen and (max-height: 400px) and (orientation: landscape), only screen and (min-width: 390px) and (max-width: 768px) and (orientation: landscape), only screen and (device-width: 360px) and (device-height: 640px) and (-webkit-device-pixel-ratio: 4) and (orientation: landscape), only screen and (min-device-width: 390px) and (max-device-width: 844px) and (-webkit-min-device-pixel-ratio: 4) and (orientation: landscape), only screen and (min-device-width: 414px) and (max-device-width: 736px) and (-webkit-min-device-pixel-ratio: 3) and (orientation: landscape), only screen and (min-device-width: 375px) and (max-device-width: 812px) and (-webkit-min-device-pixel-ratio: 3) and (orientation: landscape) {\n  .titleModal[_ngcontent-%COMP%]    > div[_ngcontent-%COMP%] {\n    display: block;\n    width: 280px;\n    height: auto;\n  }\n  .dropDiv[_ngcontent-%COMP%] {\n    width: 55px;\n    height: auto;\n    transform: translate(65px, 37px);\n  }\n  .waves[_ngcontent-%COMP%] {\n    bottom: 50px;\n  }\n  .wavesFiller[_ngcontent-%COMP%] {\n    height: 43px;\n  }\n  .handsome[_ngcontent-%COMP%]    > img[_ngcontent-%COMP%] {\n    width: 350px;\n    bottom: 5px;\n  }\n  .constellation[_ngcontent-%COMP%] {\n    width: 280px;\n  }\n  .constellation[_ngcontent-%COMP%]    > img[_ngcontent-%COMP%] {\n    position: absolute;\n    top: -22px;\n    left: 0px;\n  }\n  .layerStar[_ngcontent-%COMP%] {\n    width: 35px;\n  }\n  .inactiveStar[_ngcontent-%COMP%] {\n    width: 35px;\n  }\n  .sunlightStar[_ngcontent-%COMP%] {\n    top: 18px;\n    left: 50px;\n  }\n  .sunlightToTwilight[_ngcontent-%COMP%] {\n    left: 23px;\n    top: 106px;\n    width: 92px;\n    rotate: -60deg;\n  }\n  .twilightStar[_ngcontent-%COMP%] {\n    top: 95px;\n    left: 4px;\n  }\n  .twilightToMidnight[_ngcontent-%COMP%] {\n    left: 20px;\n    top: 105px;\n    width: 130px;\n    rotate: 23deg;\n  }\n  .midnightStar[_ngcontent-%COMP%] {\n    top: 145px;\n    left: 140px;\n  }\n  .midnightToAbyss[_ngcontent-%COMP%] {\n    right: 20px;\n    top: 105px;\n    width: 130px;\n    rotate: -23deg;\n  }\n  .abyssStar[_ngcontent-%COMP%] {\n    top: 95px;\n    right: 4px;\n  }\n  .abyssToTrenches[_ngcontent-%COMP%] {\n    right: 23px;\n    top: 106px;\n    width: 92px;\n    rotate: 60deg;\n  }\n  .trenchesStar[_ngcontent-%COMP%] {\n    top: 18px;\n    right: 50px;\n  }\n  .selectedLayerName[_ngcontent-%COMP%] {\n    top: -25px;\n    z-index: -1;\n  }\n  .selectedLayerName[_ngcontent-%COMP%]    > h2[_ngcontent-%COMP%] {\n    font-size: 1.5rem;\n  }\n}\n@media only screen and (device-width: 360px) and (device-height: 640px) and (-webkit-device-pixel-ratio: 4) and (orientation: landscape), only screen and (min-device-width: 390px) and (max-device-width: 844px) and (-webkit-min-device-pixel-ratio: 4) and (orientation: landscape), only screen and (min-device-width: 414px) and (max-device-width: 736px) and (-webkit-min-device-pixel-ratio: 3) and (orientation: landscape), only screen and (min-device-width: 375px) and (max-device-width: 812px) and (-webkit-min-device-pixel-ratio: 3) and (orientation: landscape) {\n  .titleModal[_ngcontent-%COMP%]    > div[_ngcontent-%COMP%] {\n    top: 45%;\n  }\n}\n@media only screen and (min-height: 1100px) and (orientation: landscape) {\n  .titleModal[_ngcontent-%COMP%]    > div[_ngcontent-%COMP%] {\n    display: block;\n    width: 800px;\n    height: auto;\n  }\n  .dropDiv[_ngcontent-%COMP%] {\n    width: 150px;\n    height: auto;\n    transform: translate(187px, 99px);\n  }\n  .waves[_ngcontent-%COMP%] {\n    height: 45vh;\n    min-height: 40vh;\n  }\n  .handsome[_ngcontent-%COMP%]    > img[_ngcontent-%COMP%] {\n    width: 1000px;\n    bottom: -120px;\n  }\n  .constellation[_ngcontent-%COMP%] {\n    width: 800px;\n  }\n  .layerStar[_ngcontent-%COMP%] {\n    width: 100px;\n  }\n  .inactiveStar[_ngcontent-%COMP%] {\n    width: 100px;\n  }\n  .sunlightStar[_ngcontent-%COMP%] {\n    top: 120px;\n    left: 140px;\n  }\n  .sunlightToTwilight[_ngcontent-%COMP%] {\n    left: 70px;\n    top: 365px;\n    width: 240px;\n    rotate: -60deg;\n  }\n  .twilightStar[_ngcontent-%COMP%] {\n    top: 335px;\n    left: 10px;\n  }\n  .twilightToMidnight[_ngcontent-%COMP%] {\n    left: 65px;\n    top: 374px;\n    width: 360px;\n    rotate: 23deg;\n  }\n  .midnightStar[_ngcontent-%COMP%] {\n    top: 475px;\n    left: 400px;\n  }\n  .midnightToAbyss[_ngcontent-%COMP%] {\n    right: 65px;\n    top: 374px;\n    width: 360px;\n    rotate: -23deg;\n  }\n  .abyssStar[_ngcontent-%COMP%] {\n    top: 335px;\n    right: 10px;\n  }\n  .abyssToTrenches[_ngcontent-%COMP%] {\n    right: 70px;\n    top: 365px;\n    width: 240px;\n    rotate: 60deg;\n  }\n  .trenchesStar[_ngcontent-%COMP%] {\n    top: 120px;\n    right: 140px;\n  }\n  .selectedLayerName[_ngcontent-%COMP%] {\n    top: 800px;\n  }\n}\n/*# sourceMappingURL=data:application/json;base64, */'] });
var AppComponent = _AppComponent;
(() => {
  (typeof ngDevMode === "undefined" || ngDevMode) && \u0275setClassDebugInfo(AppComponent, { className: "AppComponent", filePath: "src\\app\\app.component.ts", lineNumber: 10 });
})();

// src/app/app.module.ts
var _AppModule = class _AppModule {
};
_AppModule.\u0275fac = function AppModule_Factory(t) {
  return new (t || _AppModule)();
};
_AppModule.\u0275mod = /* @__PURE__ */ \u0275\u0275defineNgModule({ type: _AppModule, bootstrap: [AppComponent] });
_AppModule.\u0275inj = /* @__PURE__ */ \u0275\u0275defineInjector({ imports: [
  BrowserModule,
  BrowserAnimationsModule,
  AppRoutingModule,
  HttpClientModule,
  MatDialogModule,
  MatTooltipModule
] });
var AppModule = _AppModule;

// src/main.ts
platformBrowser().bootstrapModule(AppModule).catch((err) => console.error(err));
/*! Bundled license information:

@angular/core/fesm2022/primitives/signals.mjs:
  (**
   * @license Angular v17.0.7
   * (c) 2010-2022 Google LLC. https://angular.io/
   * License: MIT
   *)

@angular/core/fesm2022/core.mjs:
  (**
   * @license Angular v17.0.7
   * (c) 2010-2022 Google LLC. https://angular.io/
   * License: MIT
   *)

@angular/core/fesm2022/core.mjs:
  (*!
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   *)

@angular/core/fesm2022/core.mjs:
  (*!
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   *)

@angular/core/fesm2022/core.mjs:
  (*!
   * @license
   * Copyright Google LLC All Rights Reserved.
   *
   * Use of this source code is governed by an MIT-style license that can be
   * found in the LICENSE file at https://angular.io/license
   *)

@angular/common/fesm2022/common.mjs:
  (**
   * @license Angular v17.0.7
   * (c) 2010-2022 Google LLC. https://angular.io/
   * License: MIT
   *)

@angular/common/fesm2022/http.mjs:
  (**
   * @license Angular v17.0.7
   * (c) 2010-2022 Google LLC. https://angular.io/
   * License: MIT
   *)

@angular/platform-browser/fesm2022/platform-browser.mjs:
  (**
   * @license Angular v17.0.7
   * (c) 2010-2022 Google LLC. https://angular.io/
   * License: MIT
   *)

@angular/animations/fesm2022/animations.mjs:
  (**
   * @license Angular v17.0.7
   * (c) 2010-2022 Google LLC. https://angular.io/
   * License: MIT
   *)

@angular/animations/fesm2022/browser.mjs:
  (**
   * @license Angular v17.0.7
   * (c) 2010-2022 Google LLC. https://angular.io/
   * License: MIT
   *)

@angular/platform-browser/fesm2022/animations.mjs:
  (**
   * @license Angular v17.0.7
   * (c) 2010-2022 Google LLC. https://angular.io/
   * License: MIT
   *)

@angular/router/fesm2022/router.mjs:
  (**
   * @license Angular v17.0.7
   * (c) 2010-2022 Google LLC. https://angular.io/
   * License: MIT
   *)
*/
//# sourceMappingURL=main.js.map
